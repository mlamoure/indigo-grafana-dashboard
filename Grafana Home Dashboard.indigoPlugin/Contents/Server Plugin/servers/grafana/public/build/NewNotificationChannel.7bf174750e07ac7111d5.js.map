{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/features/alerting/components/OptionElement.tsx","webpack:///./public/app/features/alerting/components/NotificationChannelOptions.tsx","webpack:///./public/app/features/alerting/components/NewNotificationChannelForm.tsx","webpack:///./public/app/features/alerting/NewAlertNotificationPage.tsx"],"names":["getAlertRulesAsync","options","dispatch","loadAlertRules","getBackendSrv","get","rules","loadedAlertRules","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","alertError","error","testNotificationChannel","loadNotificationTypes","alertNotifiers","notificationTypes","map","option","value","type","label","name","typeName","sort","o1","o2","setNotificationChannels","OptionElement","control","register","modelValue","propertyName","element","inputType","ref","required","validate","v","validationRule","validateOption","placeholder","as","Select","selectOptions","console","RegExp","test","NotificationChannelOptions","currentFormValues","errors","selectedChannel","heading","info","index","key","selectedOptionValue","showWhen","field","is","description","invalid","settings","message","NewNotificationChannelForm","selectableChannels","watch","getValues","imageRendererAvailable","onTestChannel","styles","getStyles","useTheme","useEffect","className","basicSettings","uploadImage","title","sendReminder","variant","onClick","nest","stylesFactory","theme","css","spacing","xl","defaultValues","disableResolveMessage","frequency","config","rendererAvailable","autoResolve","httpMethod","severity","isDefault","NewAlertNotificationPage","onSubmit","Object","fromEntries","entries","hasOwnProperty","props","assign","this","navModel","notificationChannels","channel","Page","Contents","validateOn","find","c","PureComponent","mapDispatchToProps","connect","getNavModel","navIndex","alertRules"],"mappings":"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","file":"NewNotificationChannel.7bf174750e07ac7111d5.js","sourcesContent":["import { AppEvents } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\nimport { appEvents } from 'app/core/core';\nimport { updateLocation } from 'app/core/actions';\nimport { loadAlertRules, loadedAlertRules, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async dispatch => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async () => {\n    await getBackendSrv().post('/api/alert-notifications/test', data);\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async dispatch => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers\n      .map((option: NotifierDTO) => {\n        return {\n          value: option.type,\n          label: option.name,\n          ...option,\n          typeName: option.type,\n        };\n      })\n      .sort((o1, o2) => {\n        if (o1.name > o2.name) {\n          return 1;\n        }\n        return -1;\n      });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n","import React, { FC } from 'react';\nimport { FormAPI, Input, InputControl, Select, Switch, TextArea } from '@grafana/ui';\nimport { Option } from '../../../types';\n\ninterface Props extends Pick<FormAPI<any>, 'register' | 'control'> {\n  option: Option;\n}\n\nexport const OptionElement: FC<Props> = ({ control, option, register }) => {\n  const modelValue = `settings.${option.propertyName}`;\n  switch (option.element) {\n    case 'input':\n      return (\n        <Input\n          type={option.inputType}\n          name={`${modelValue}`}\n          ref={register({\n            required: option.required ? 'Required' : false,\n            validate: v => (option.validationRule !== '' ? validateOption(v, option.validationRule) : true),\n          })}\n          placeholder={option.placeholder}\n        />\n      );\n\n    case 'select':\n      return <InputControl as={Select} options={option.selectOptions} control={control} name={`${modelValue}`} />;\n\n    case 'textarea':\n      return (\n        <TextArea\n          name={`${modelValue}`}\n          ref={register({\n            required: option.required ? 'Required' : false,\n            validate: v => (option.validationRule !== '' ? validateOption(v, option.validationRule) : true),\n          })}\n        />\n      );\n\n    case 'switch':\n      return (\n        <Switch\n          name={`${modelValue}`}\n          ref={register({\n            required: option.required ? 'Required' : false,\n          })}\n        />\n      );\n\n    default:\n      console.error('Element not supported', option.element);\n      return null;\n  }\n};\n\nconst validateOption = (value: string, validationRule: string) => {\n  return RegExp(validationRule).test(value) ? true : 'Invalid format';\n};\n","import React, { FC } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Field, FormAPI, InfoBox } from '@grafana/ui';\nimport { OptionElement } from './OptionElement';\nimport { NotificationChannel, NotificationChannelDTO, Option } from '../../../types';\n\ninterface Props extends Omit<FormAPI<NotificationChannelDTO>, 'formState' | 'getValues' | 'watch'> {\n  selectedChannel: NotificationChannel;\n  currentFormValues: NotificationChannelDTO;\n}\n\nexport const NotificationChannelOptions: FC<Props> = ({\n  control,\n  currentFormValues,\n  errors,\n  selectedChannel,\n  register,\n}) => {\n  return (\n    <>\n      <h3>{selectedChannel.heading}</h3>\n      {selectedChannel.info !== '' && <InfoBox>{selectedChannel.info}</InfoBox>}\n      {selectedChannel.options.map((option: Option, index: number) => {\n        const key = `${option.label}-${index}`;\n\n        // Some options can be dependent on other options, this determines what is selected in the dependency options\n        // I think this needs more thought.\n        const selectedOptionValue =\n          currentFormValues[`settings.${option.showWhen.field}`] &&\n          (currentFormValues[`settings.${option.showWhen.field}`] as SelectableValue<string>).value;\n\n        if (option.showWhen.field && selectedOptionValue !== option.showWhen.is) {\n          return null;\n        }\n\n        return (\n          <Field\n            key={key}\n            label={option.label}\n            description={option.description}\n            invalid={errors.settings && !!errors.settings[option.propertyName]}\n            error={errors.settings && errors.settings[option.propertyName]?.message}\n          >\n            <OptionElement option={option} register={register} control={control} />\n          </Field>\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { css } from 'emotion';\nimport { GrafanaTheme, SelectableValue } from '@grafana/data';\nimport {\n  Button,\n  Field,\n  FormAPI,\n  HorizontalGroup,\n  InfoBox,\n  Input,\n  InputControl,\n  Select,\n  stylesFactory,\n  Switch,\n  useTheme,\n} from '@grafana/ui';\nimport { NotificationChannel, NotificationChannelDTO } from '../../../types';\nimport { NotificationChannelOptions } from './NotificationChannelOptions';\n\ninterface Props extends Omit<FormAPI<NotificationChannelDTO>, 'formState'> {\n  selectableChannels: Array<SelectableValue<string>>;\n  selectedChannel?: NotificationChannel;\n  imageRendererAvailable: boolean;\n\n  onTestChannel: (data: NotificationChannelDTO) => void;\n}\n\nexport const NewNotificationChannelForm: FC<Props> = ({\n  control,\n  errors,\n  selectedChannel,\n  selectableChannels,\n  register,\n  watch,\n  getValues,\n  imageRendererAvailable,\n  onTestChannel,\n}) => {\n  const styles = getStyles(useTheme());\n\n  useEffect(() => {\n    watch(['type', 'settings.priority', 'sendReminder', 'uploadImage']);\n  }, []);\n\n  const currentFormValues = getValues();\n  return (\n    <>\n      <div className={styles.basicSettings}>\n        <Field label=\"Name\" invalid={!!errors.name} error={errors.name && errors.name.message}>\n          <Input name=\"name\" ref={register({ required: 'Name is required' })} />\n        </Field>\n        <Field label=\"Type\">\n          <InputControl\n            name=\"type\"\n            as={Select}\n            options={selectableChannels}\n            control={control}\n            rules={{ required: true }}\n          />\n        </Field>\n        <Field label=\"Default\" description=\"Use this notification for all alerts\">\n          <Switch name=\"isDefault\" ref={register} />\n        </Field>\n        <Field label=\"Include image\" description=\"Captures an image and include it in the notification\">\n          <Switch name=\"settings.uploadImage\" ref={register} />\n        </Field>\n        {currentFormValues.uploadImage && !imageRendererAvailable && (\n          <InfoBox title=\"No image renderer available/installed\">\n            Grafana cannot find an image renderer to capture an image for the notification. Please make sure the Grafana\n            Image Renderer plugin is installed. Please contact your Grafana administrator to install the plugin.\n          </InfoBox>\n        )}\n        <Field\n          label=\"Disable Resolve Message\"\n          description=\"Disable the resolve message [OK] that is sent when alerting state returns to false\"\n        >\n          <Switch name=\"disableResolveMessage\" ref={register} />\n        </Field>\n        <Field label=\"Send reminders\" description=\"Send additional notifications for triggered alerts\">\n          <Switch name=\"sendReminder\" ref={register} />\n        </Field>\n        {currentFormValues.sendReminder && (\n          <>\n            <Field\n              label=\"Send reminder every\"\n              description=\"Specify how often reminders should be sent, e.g. every 30s, 1m, 10m, 30m or 1h etc.\"\n            >\n              <Input name=\"frequency\" ref={register} />\n            </Field>\n            <InfoBox>\n              Alert reminders are sent after rules are evaluated. Therefore a reminder can never be sent more frequently\n              than a configured alert rule evaluation interval.\n            </InfoBox>\n          </>\n        )}\n      </div>\n      {selectedChannel && (\n        <NotificationChannelOptions\n          selectedChannel={selectedChannel}\n          currentFormValues={currentFormValues}\n          register={register}\n          errors={errors}\n          control={control}\n        />\n      )}\n      <HorizontalGroup>\n        <Button type=\"submit\">Save</Button>\n        <Button type=\"button\" variant=\"secondary\" onClick={() => onTestChannel(getValues({ nest: true }))}>\n          Test\n        </Button>\n        <Button type=\"button\" variant=\"secondary\">\n          Back\n        </Button>\n      </HorizontalGroup>\n    </>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    basicSettings: css`\n      margin-bottom: ${theme.spacing.xl};\n    `,\n  };\n});\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Form } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { NewNotificationChannelForm } from './components/NewNotificationChannelForm';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { createNotificationChannel, loadNotificationTypes, testNotificationChannel } from './state/actions';\nimport { NotificationChannel, NotificationChannelDTO, StoreState } from '../../types';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  notificationChannels: NotificationChannel[];\n}\n\ninterface DispatchProps {\n  createNotificationChannel: typeof createNotificationChannel;\n  loadNotificationTypes: typeof loadNotificationTypes;\n  testNotificationChannel: typeof testNotificationChannel;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nconst defaultValues: NotificationChannelDTO = {\n  name: '',\n  type: { value: 'email', label: 'Email' },\n  sendReminder: false,\n  disableResolveMessage: false,\n  frequency: '15m',\n  settings: {\n    uploadImage: config.rendererAvailable,\n    autoResolve: true,\n    httpMethod: 'POST',\n    severity: 'critical',\n  },\n  isDefault: false,\n};\n\nclass NewAlertNotificationPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadNotificationTypes();\n  }\n\n  onSubmit = (data: NotificationChannelDTO) => {\n    /*\n      Some settings can be options in a select, in order to not save a SelectableValue<T>\n      we need to use check if it is a SelectableValue and use its value.\n    */\n    const settings = Object.fromEntries(\n      Object.entries(data.settings).map(([key, value]) => {\n        return [key, value.hasOwnProperty('value') ? value.value : value];\n      })\n    );\n\n    this.props.createNotificationChannel({\n      ...defaultValues,\n      ...data,\n      type: data.type.value,\n      settings: { ...defaultValues.settings, ...settings },\n    });\n  };\n\n  onTestChannel = (data: NotificationChannelDTO) => {\n    this.props.testNotificationChannel({\n      name: data.name,\n      type: data.type.value,\n      frequency: data.frequency ?? defaultValues.frequency,\n      settings: { ...Object.assign(defaultValues.settings, data.settings) },\n    });\n  };\n\n  render() {\n    const { navModel, notificationChannels } = this.props;\n\n    /*\n     Need to transform these as we have options on notificationChannels,\n     this will render a dropdown within the select.\n\n    TODO: Memoize?\n   */\n    const selectableChannels: Array<SelectableValue<string>> = notificationChannels.map(channel => ({\n      value: channel.value,\n      label: channel.label,\n      description: channel.description,\n    }));\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <h2>New Notification Channel</h2>\n          <Form onSubmit={this.onSubmit} validateOn=\"onChange\" defaultValues={defaultValues}>\n            {({ register, errors, control, getValues, watch }) => {\n              const selectedChannel = notificationChannels.find(c => c.value === getValues().type.value);\n\n              return (\n                <NewNotificationChannelForm\n                  selectableChannels={selectableChannels}\n                  selectedChannel={selectedChannel}\n                  onTestChannel={this.onTestChannel}\n                  register={register}\n                  errors={errors}\n                  getValues={getValues}\n                  control={control}\n                  watch={watch}\n                  imageRendererAvailable={config.rendererAvailable}\n                />\n              );\n            }}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'channels'),\n    notificationChannels: state.alertRules.notificationChannels,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  createNotificationChannel,\n  loadNotificationTypes,\n  testNotificationChannel,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewAlertNotificationPage);\n"],"sourceRoot":""}