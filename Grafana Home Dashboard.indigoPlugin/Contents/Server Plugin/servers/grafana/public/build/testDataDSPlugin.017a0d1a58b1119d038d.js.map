{"version":3,"sources":["webpack:///./public/app/plugins/datasource/testdata/metricTree.ts","webpack:///./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack:///./public/app/plugins/datasource/testdata/runStreams.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack:///./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/module.tsx"],"names":["queryMetricTree","query","indexOf","name","children","queryTree","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","pattern","RegExp","test","concat","buildMetricTree","parent","depth","letter","nodeName","push","index","getNextWord","Math","floor","random","words","defaultQuery","type","speed","spread","noise","bands","runStream","target","req","defaults","stream","Observable","subscriber","streamId","panelId","refId","maxDataPoints","data","CircularDataFrame","append","capacity","alias","addField","FieldType","time","number","i","suffix","value","timeoutId","addNextRow","idx","fields","values","add","min","max","Date","now","setTimeout","pushNextEvent","next","key","console","log","clearTimeout","runSignalStream","string","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","field","onRow","row","processChunk","text","TextDecoder","decode","readCSV","state","done","LoadingState","Done","Streaming","complete","read","then","url","Error","fetch","Request","response","body","getReader","runFetchStream","TestDataDataSource","instanceSettings","options","queries","streams","targets","hide","scenarioId","runGrafanaAPI","runArrowFile","intervalMs","datasourceId","this","id","templateSrv","getBackendSrv","datasourceRequest","method","from","range","valueOf","toString","to","requestId","res","processQueryResult","merge","error","undefined","results","tables","table","series","datapoints","points","tags","message","timeWalker","events","step","annotation","Promise","resolve","status","get","reject","items","getSearchFilterScopedVar","wildcardChar","map","item","DataSourceApi","stringInput","base64StringToArrowTable","arrowTableToDataFrame","e","warn","toDataQueryError","of","frame","ArrayDataFrame","defaultPulse","timeStep","onCount","onValue","offCount","offValue","defaultCSVWave","valuesCSV","showLabelsFor","TestDataQueryCtrl","$scope","$injector","showLabels","scenarioList","newPointTime","dateTime","selectedPoint","includes","selectors","components","DataSource","TestData","QueryTab","_","point","format","option","splice","refresh","dateMath","parse","newPointValue","sortBy","p","promiseToDigest","scenario","find","pulseWave","csvWave","QueryCtrl","templateUrl","TestInfoTab","props","className","href","rel","PureComponent","ConfigEditor","TestDataAnnotationsQueryCtrl","template","plugin","DataSourcePlugin","setConfigEditor","setQueryCtrl","setAnnotationQueryCtrl","addConfigPage","title","icon"],"mappings":"+HAuEO,SAASA,EAAgBC,GAC9B,OAA+B,IAA3BA,EAAMC,QAAQ,SACT,CAAC,CAAEC,KAAMF,EAAOG,SAAU,KArCrC,SAASC,EAAUD,EAAsBH,EAAiBK,GACxD,GAAIA,GAAcL,EAAMM,OACtB,OAAOH,EAGT,GAA0B,MAAtBH,EAAMK,GACR,OAAOF,EAGT,IAAMI,EAAYP,EAAMK,GACpBG,EAAqB,GACrBC,EAAe,CAACF,GAGhBA,EAAUG,WAAW,OACvBD,EAAeF,EAAUI,QAAQ,SAAU,IAAIC,MAAM,MAfiC,2BAkBxF,YAAmBT,EAAnB,+CAA6B,KAAlBU,EAAkB,+BAC3B,YAA0BJ,EAA1B,+CAAwC,KAA7BK,EAA6B,QACtC,IAAkC,IAA9BA,EAAYb,QAAQ,KAAa,CACnC,IAAMc,EAAUD,EAAYH,QAAQ,IAAK,IAC3B,IAAIK,OAAJ,WAAeD,EAAf,MAA4B,MAChCE,KAAKJ,EAAKX,QAClBM,EAASA,EAAOU,OAAOd,EAAU,CAACS,GAAOb,EAAOK,EAAa,UAEtDQ,EAAKX,OAASY,IACvBN,EAASA,EAAOU,OAAOd,EAAUS,EAAKV,SAAUH,EAAOK,EAAa,MAT7C,oFAlB2D,kFAgCxF,OAAOG,EASAJ,CA5DT,SAASe,EAAgBC,EAAgBC,GACvC,IACMlB,EAAuB,GAE7B,GAAIkB,EAAQ,EACV,MAAO,GAGT,cAPc,CAAC,IAAK,IAAK,KAOzB,eAA4B,CAAvB,IAAMC,EAAM,KACTC,EAAW,GAAH,OAAMH,GAAN,OAAeE,GAC7BnB,EAASqB,KAAK,CACZtB,KAAMqB,EACNpB,SAAUgB,EAAgBI,EAAUF,EAAQ,KAIhD,OAAOlB,EA2CUgB,CAAgB,GAAI,GACVnB,EAAMY,MAAM,KAAM,G,yEC3E3Ca,EAAQ,EAyBL,SAASC,IAEd,OADAD,GAASA,EAAQE,KAAKC,MAAsB,EAAhBD,KAAKE,WAAiBC,EAAMxB,OACjDwB,EAAML,GAWf,IAAMK,EAAQ,CACZ,KACA,OACA,MACA,KACA,YACA,KACA,QACA,OACA,cACA,UACA,MACA,aACA,cACA,aACA,WACA,QACA,WACA,OACA,UACA,KACA,OACA,YACA,YACA,OACA,YACA,aACA,MACA,YACA,YACA,OACA,KACA,QACA,MACA,UACA,WACA,WACA,QACA,KACA,MACA,UACA,KACA,UACA,OACA,KACA,QACA,SACA,QACA,UACA,MACA,KACA,WACA,aACA,MACA,SACA,UACA,MACA,SACA,QACA,MACA,WACA,QACA,SACA,QACA,UACA,MACA,QACA,KACA,OACA,SACA,UACA,SACA,WACA,QACA,WACA,YACA,MACA,QACA,QACA,cACA,aACA,QACA,YACA,KACA,MACA,WACA,UACA,MACA,QACA,iBACA,QACA,UACA,KACA,KACA,aACA,cACA,OACA,KACA,YACA,MACA,aACA,SACA,QACA,QACA,MACA,UACA,IACA,WACA,WACA,KACA,MACA,aACA,eACA,UACA,QACA,cACA,MACA,cACA,YACA,aACA,YChJWC,EAA+B,CAC1CC,KAAM,SACNC,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,MAAO,GAGF,SAASC,EAAUC,EAAuBC,GAC/C,IAAMvC,EAAQwC,mBAASF,EAAOG,OAAQV,GACtC,GAAI,WAAa/B,EAAMgC,KACrB,OAWG,SACLM,EACAtC,EACAuC,GAEA,OAAO,IAAIG,KAA8B,SAAAC,GACvC,IAAMC,EAAW,UAAH,OAAaL,EAAIM,QAAjB,YAA4BP,EAAOQ,OAC3CC,EAAgBR,EAAIQ,eAAiB,IAErCC,EAAO,IAAIC,oBAAkB,CACjCC,OAAQ,OACRC,SAAUJ,IAEZC,EAAKF,MAAQR,EAAOQ,MACpBE,EAAK9C,KAAOoC,EAAOc,OAAS,UAAYd,EAAOQ,MAC/CE,EAAKK,SAAS,CAAEnD,KAAM,OAAQ8B,KAAMsB,YAAUC,OAC9CP,EAAKK,SAAS,CAAEnD,KAAM,QAAS8B,KAAMsB,YAAUE,SAI/C,IAfqD,IAa7CtB,EAAoClC,EAApCkC,OAAQD,EAA4BjC,EAA5BiC,MAbqC,EAaTjC,EAArBoC,aAb8B,MAatB,EAbsB,EAanBD,EAAUnC,EAAVmC,MAEzBsB,EAAI,EAAGA,EAAIrB,EAAOqB,IAAK,CAC9B,IAAMC,EAAStB,EAAQ,EAAR,WAAgBqB,EAAI,GAAM,GACzCT,EAAKK,SAAS,CAAEnD,KAAM,MAAQwD,EAAQ1B,KAAMsB,YAAUE,SACtDR,EAAKK,SAAS,CAAEnD,KAAM,MAAQwD,EAAQ1B,KAAMsB,YAAUE,SA4BtD,IAzBF,IAAIG,EAAwB,IAAhBhC,KAAKE,SACb+B,EAAiB,KAEfC,EAAa,SAACN,GAClBI,IAAUhC,KAAKE,SAAW,IAAOK,EAEjC,IAAI4B,EAAM,EACVd,EAAKe,OAAOD,KAAOE,OAAOC,IAAIV,GAC9BP,EAAKe,OAAOD,KAAOE,OAAOC,IAAIN,GAK9B,IAHA,IAAIO,EAAMP,EACNQ,EAAMR,EAEDF,EAAI,EAAGA,EAAIrB,EAAOqB,IACzBS,GAAYvC,KAAKE,SAAWM,EAC5BgC,GAAYxC,KAAKE,SAAWM,EAE5Ba,EAAKe,OAAOD,KAAOE,OAAOC,IAAIC,GAC9BlB,EAAKe,OAAOD,KAAOE,OAAOC,IAAIE,IAM5BZ,EAAOa,KAAKC,MAAQtB,EAAgBd,EAC/BwB,EAAI,EAAGA,EAAIV,EAAeU,IACjCI,EAAWN,GACXA,GAAQtB,EAiBZ,OAFAqC,YAXsB,SAAhBC,IACJV,EAAWO,KAAKC,OAChB1B,EAAW6B,KAAK,CACdxB,KAAM,CAACA,GACPyB,IAAK7B,IAGPgB,EAAYU,WAAWC,EAAetC,KAId,GAEnB,WACLyC,QAAQC,IAAI,2BAA6B/B,GACzCgC,aAAahB,OAnFRiB,CAAgBvC,EAAQtC,EAAOuC,GAExC,GAAI,SAAWvC,EAAMgC,KACnB,OAqFG,SACLM,EACAtC,EACAuC,GAEA,OAAO,IAAIG,KAA8B,SAAAC,GACvC,IAAMC,EAAW,QAAH,OAAWL,EAAIM,QAAf,YAA0BP,EAAOQ,OACzCC,EAAgBR,EAAIQ,eAAiB,IAErCC,EAAO,IAAIC,oBAAkB,CACjCC,OAAQ,OACRC,SAAUJ,IAEZC,EAAKF,MAAQR,EAAOQ,MACpBE,EAAK9C,KAAOoC,EAAOc,OAAS,QAAUd,EAAOQ,MAC7CE,EAAKK,SAAS,CAAEnD,KAAM,OAAQ8B,KAAMsB,YAAUC,OAC9CP,EAAKK,SAAS,CAAEnD,KAAM,OAAQ8B,KAAMsB,YAAUwB,SAXO,IAa7C7C,EAAUjC,EAAViC,MAEJ2B,EAAiB,KAiBrB,OAFAU,YAbsB,SAAhBC,IACJvB,EAAKgB,OAAOT,KAAKU,IAAIG,KAAKC,OAC1BrB,EAAKgB,OAAOe,KAAKd,ID3GhB,WAEL,IAFyC,IAAb3D,EAAa,uDAAJ,GACjCyE,EAAOrD,IACJqD,EAAKzE,OAASA,GACnByE,GAAQ,IAAMrD,IAEhB,OAAOqD,ECsGkBC,IAErBrC,EAAW6B,KAAK,CACdxB,KAAM,CAACA,GACPyB,IAAK7B,IAGPgB,EAAYU,WAAWC,EAAetC,KAId,GAEnB,WACLyC,QAAQC,IAAI,2BAA6B/B,GACzCgC,aAAahB,OA5HRqB,CAAc3C,EAAQtC,EAAOuC,GAEtC,GAAI,UAAYvC,EAAMgC,KACpB,OA8HG,SACLM,EACAtC,EACAuC,GAEA,OAAO,IAAIG,KAA8B,SAAAC,GACvC,IAUIuC,EAVEtC,EAAW,SAAH,OAAYL,EAAIM,QAAhB,YAA2BP,EAAOQ,OAC1CC,EAAgBR,EAAIQ,eAAiB,IAEvCC,EAAO,IAAIC,oBAAkB,CAC/BC,OAAQ,OACRC,SAAUJ,IAEZC,EAAKF,MAAQR,EAAOQ,MACpBE,EAAK9C,KAAOoC,EAAOc,OAAS,SAAWd,EAAOQ,MAG9C,IAAMqC,EAAM,IAAIC,YAAU,CACxBC,SAAU,CACRC,SAAU,SAACvB,GAELf,EAAKe,OAAOzD,UACd0C,EAAO,IAAIC,oBAAkB,CAC3BC,OAAQ,OACRC,SAAUJ,KAEPD,MAAQR,EAAOQ,MACpBE,EAAK9C,KAAO,SAAWoC,EAAOQ,OARH,2BAU7B,YAAoBiB,EAApB,+CAA4B,KAAjBwB,EAAiB,QAC1BvC,EAAKK,SAASkC,IAXa,oFAc/BC,MAAO,SAACC,GACNzC,EAAKiB,IAAIwB,OAKTC,EAAe,SAAfA,EAAgB/B,GACpB,GAAIA,EAAMA,MAAO,CACf,IAAMgC,GAAO,IAAIC,aAAcC,OAAOlC,EAAMA,OAC5CwB,EAAIW,QAAQH,GASd,OANAhD,EAAW6B,KAAK,CACdxB,KAAM,CAACA,GACPyB,IAAK7B,EACLmD,MAAOpC,EAAMqC,KAAOC,eAAaC,KAAOD,eAAaE,YAGnDxC,EAAMqC,MACRtB,QAAQC,IAAI,wBACZhC,EAAWyD,YAINlB,EAAOmB,OAAOC,KAAKZ,IAG5B,IAAK1F,EAAMuG,IACT,MAAM,IAAIC,MAAM,4BAUlB,OAPAC,MAAM,IAAIC,QAAQ1G,EAAMuG,MAAMD,MAAK,SAAAK,GAC7BA,EAASC,OACX1B,EAASyB,EAASC,KAAKC,aAChBR,OAAOC,KAAKZ,MAIhB,WAELhB,QAAQC,IAAI,2BAA6B/B,OAvMpCkE,CAAexE,EAAQtC,EAAOuC,GAEvC,MAAM,IAAIiE,MAAJ,+BAAkCxG,EAAMgC,O,0/CCVzC,IAAM+E,EAAb,YACE,WAAYC,GAA8C,O,4FAAA,+BAClDA,I,UAFV,O,kOAAA,M,EAAA,G,EAAA,6BAKQC,GAAyE,WACvEC,EAAiB,GACjBC,EAAgD,GAFuB,uBAK7E,YAAqBF,EAAQG,QAA7B,+CAAsC,KAA3B9E,EAA2B,QAChCA,EAAO+E,OAGe,qBAAtB/E,EAAOgF,WACTH,EAAQ3F,KAAKa,EAAUC,EAAQ2E,IACA,gBAAtB3E,EAAOgF,WAChBH,EAAQ3F,KAAK+F,EAAcjF,EAAQ2E,IACJ,UAAtB3E,EAAOgF,WAChBH,EAAQ3F,KAAKgG,EAAalF,EAAQ2E,IAElCC,EAAQ1F,KAAR,KACKc,EADL,CAEEmF,WAAYR,EAAQQ,WACpB1E,cAAekE,EAAQlE,cACvB2E,aAAcC,KAAKC,GACnBxE,MAAOyE,IAAYlH,QAAQ2B,EAAOc,OAAS,SArB4B,kFA0B7E,GAAI8D,EAAQ5G,OAAQ,CAClB,IAAMiC,EAAkCuF,0BACrCC,kBAAkB,CACjBC,OAAQ,OACRzB,IAAK,kBACLvD,KAAM,CACJiF,KAAMhB,EAAQiB,MAAMD,KAAKE,UAAUC,WACnCC,GAAIpB,EAAQiB,MAAMG,GAAGF,UAAUC,WAC/BlB,QAASA,GAGXoB,UAAWrB,EAAQqB,YAEpBhC,MAAK,SAACiC,GAAD,OAAc,EAAKC,mBAAmBtB,EAASqB,MAEvDpB,EAAQ3F,KAAKyG,YAAK1F,IAGpB,OAAOkG,IAAK,WAAL,EAAStB,KAjDpB,yCAoDqBD,EAAcqB,GAC/B,IAAMvF,EAAmB,GACrB0F,OAAoCC,EAFoB,uBAI5D,YAAoBzB,EAApB,+CAA6B,KAAlBlH,EAAkB,QACrB4I,EAAUL,EAAIvF,KAAK4F,QAAQ5I,EAAM8C,OADZ,uBAG3B,aAAgB8F,EAAQC,QAAU,IAAlC,+CAAsC,KAC9BC,EAD8B,QAEpCA,EAAMhG,MAAQ9C,EAAM8C,MACpBgG,EAAM5I,KAAOF,EAAMoD,MACnBJ,EAAKxB,KAAKsH,IAPe,6GAU3B,aAAqBF,EAAQG,QAAU,IAAvC,+CAA2C,KAAhCA,EAAgC,QACzC/F,EAAKxB,KAAK,CAAEc,OAAQyG,EAAO7I,KAAM8I,WAAYD,EAAOE,OAAQnG,MAAO9C,EAAM8C,MAAOoG,KAAMH,EAAOG,QAXpE,kFAcvBN,EAAQF,QACVA,EAAQ,CACNS,QAASP,EAAQF,SApBqC,kFAyB5D,MAAO,CAAE1F,OAAM0F,WA7EnB,sCAgFkBzB,GAOd,IANA,IAAImC,EAAanC,EAAQiB,MAAMD,KAAKE,UAE9BkB,EAAS,GAETC,GAHKrC,EAAQiB,MAAMG,GAAGF,UAGTiB,GADA,GAGV3F,EAAI,EAAGA,EAHG,GAGaA,IAC9B4F,EAAO7H,KAAK,CACV+H,WAAYtC,EAAQsC,WACpBhG,KAAM6F,EACNzD,KAAM,kEACNuD,KAAM,CAAC,OAAQ,YAEjBE,GAAcE,EAEhB,OAAOE,QAAQC,QAAQJ,KAhG3B,0CAmGsBrJ,GAClB,OAAIA,EAAMoD,MACDpD,EAAMsH,WAAa,OAAStH,EAAMoD,MAEpCpD,EAAMsH,aAvGjB,uCA2GI,OAAOkC,QAAQC,QAAQ,CACrBC,OAAQ,UACRP,QAAS,6BA7Gf,qCAkHI,OAAOrB,0BAAgB6B,IAAI,kCAlH/B,sCAqHkB3J,EAAeiH,GAC7B,OAAO,IAAIuC,SAA2B,SAACC,EAASG,GAC9CtF,YAAW,WACT,IAKMuF,EADW9J,EAJS8H,IAAYlH,QACpCX,EACA8J,YAAyB,CAAE9J,QAAO+J,aAAc,IAAK9C,cAGhC+C,KAAI,SAAAC,GAAI,MAAK,CAAEtG,MAAOsG,EAAK/J,KAAMyF,KAAMsE,EAAK/J,SACnEuJ,EAAQI,KACP,a,2BA/HT,GAAwCK,iBAoIxC,SAAS1C,EAAalF,EAAuBC,GAC3C,IAAIS,EAAoB,GACxB,GAAIV,EAAO6H,aAAe7H,EAAO6H,YAAY7J,OAAS,GACpD,IACE,IAAMwI,EAAQsB,mCAAyB9H,EAAO6H,aAC9CnH,EAAO,CAACqH,gCAAsBvB,IAC9B,MAAOwB,GACP5F,QAAQ6F,KAAK,4BAA6BD,GAC1C,IAAM5B,EAAQ8B,2BAAiBF,GAE/B,OADA5B,EAAM5F,MAAQR,EAAOQ,MACd2H,YAAG,CAAE1E,MAAOE,eAAaO,MAAOkC,QAAO1F,SAGlD,OAAOyH,YAAG,CAAE1E,MAAOE,eAAaC,KAAMlD,SAGxC,SAASuE,EAAcjF,EAAuBC,GAC5C,IAAMgE,EAAM,QAAH,OAAWjE,EAAO6H,aAC3B,OAAOlC,YACLH,0BACG6B,IAAIpD,GACJD,MAAK,SAAAiC,GACJ,IAAMmC,EAAQ,IAAIC,iBAAepC,GACjC,MAAO,CACLxC,MAAOE,eAAaC,KACpBlD,KAAM,CAAC0H,Q,+0BC5KV,IAAME,EAAoB,CAC/BC,SAAU,GACVC,QAAS,EACTC,QAAS,EACTC,SAAU,EACVC,SAAU,GAGCC,EAAsB,CACjCL,SAAU,GACVM,UAAW,eAGPC,EAAgB,CAAC,cAAe,oBAAqB,wBAE9CC,EAAb,YAcE,WAAYC,EAAgBC,GAAgB,a,4FAAA,UAC1C,wBAAMD,EAAQC,KALhBC,YAAa,EAOX,EAAKlJ,OAAOgF,WAAa,EAAKhF,OAAOgF,YAAc,cACnD,EAAKmE,aAAe,GACpB,EAAKC,aAAeC,qBACpB,EAAKC,cAAgB,CAAEjG,KAAM,eAAgBhC,MAAO,MACpD,EAAK6H,WAAaJ,EAAcS,SAAS,EAAKvJ,OAAOgF,YACrD,EAAKwE,UAAYA,YAAUC,WAAWC,WAAWC,SAASC,SARhB,E,UAd9C,wC,kOAAA,M,EAAA,G,EAAA,mCA0BI,OAAOC,IAAEnC,IAAIrC,KAAKrF,OAAO2G,QAAQ,SAACmD,EAAO3K,GACvC,MAAO,CACLkE,KAAMgG,mBAASS,EAAM,IAAIC,OAAO,yBAA2B,MAAQD,EAAM,GACzEzI,MAAOlC,QA7Bf,oCAkCgB6K,GACZ3E,KAAKiE,cAAgBU,IAnCzB,oCAuCI3E,KAAKrF,OAAO2G,OAAOsD,OAAO5E,KAAKiE,cAAcjI,MAAO,GACpDgE,KAAKiE,cAAgB,CAAEjG,KAAM,eAAgBhC,MAAO,MACpDgE,KAAK6E,YAzCT,iCA6CI7E,KAAKrF,OAAO2G,OAAStB,KAAKrF,OAAO2G,QAAU,GAC3CtB,KAAK+D,aAAee,WAASC,MAAM/E,KAAK+D,cACxC/D,KAAKrF,OAAO2G,OAAOzH,KAAK,CAACmG,KAAKgF,cAAehF,KAAK+D,aAAavD,YAC/DR,KAAKrF,OAAO2G,OAASkD,IAAES,OAAOjF,KAAKrF,OAAO2G,QAAQ,SAAA4D,GAAC,OAAIA,EAAE,MACzDlF,KAAK6E,YAjDT,gCAoDY,WACR,OAAOM,YAAgBnF,KAAK2D,OAArBwB,CACLhF,0BACG6B,IAAI,gCACJrD,MAAK,SAACiC,GACL,EAAKkD,aAAelD,EACpB,EAAKwE,SAAWZ,IAAEa,KAAK,EAAKvB,aAAc,CAAE7D,GAAI,EAAKtF,OAAOgF,mBA1DtE,wCA+DoB,MAChBK,KAAKoF,SAAWZ,IAAEa,KAAKrF,KAAK8D,aAAc,CAAE7D,GAAID,KAAKrF,OAAOgF,aAE7B,iBAA3BK,KAAKrF,OAAOgF,WACdK,KAAKrF,OAAO2G,OAAStB,KAAKrF,OAAO2G,QAAU,UAEpCtB,KAAKrF,OAAO2G,OAGU,qBAA3BtB,KAAKrF,OAAOgF,WACdK,KAAKrF,OAAOG,OAAS0J,IAAE3J,SAASmF,KAAKrF,OAAOG,QAAU,GAAIV,UAEnD4F,KAAKrF,OAAOG,OAGU,sBAA3BkF,KAAKrF,OAAOgF,WACdK,KAAKrF,OAAO2K,UAAYd,IAAE3J,SAASmF,KAAKrF,OAAO2K,WAAa,GAAIrC,UAEzDjD,KAAKrF,OAAO2K,UAGU,yBAA3BtF,KAAKrF,OAAOgF,WACdK,KAAKrF,OAAO4K,QAAUf,IAAE3J,SAASmF,KAAKrF,OAAO4K,SAAW,GAAIhC,UAErDvD,KAAKrF,OAAO4K,QAGU,gBAA3BvF,KAAKrF,OAAOgF,WACdK,KAAKrF,OAAO6H,YAAc,qBAEnBxC,KAAKrF,OAAO6H,YAGrBxC,KAAKrF,OAAO6H,YAAZ,UAA0BxC,KAAKoF,SAAS5C,mBAAxC,aAAuDxB,EACvDhB,KAAK6D,WAAaJ,EAAcS,SAASlE,KAAKrF,OAAOgF,YAErDK,KAAK6E,YAnGT,sCAuGI7E,KAAK6E,e,2BAvGT,GAAuCW,aAA1B9B,EACJ+B,YAAc,6B,g0BClBhB,IAAMC,EAAb,YACE,WAAYC,GAAc,O,4FAAA,+BAClBA,I,UAFV,O,kOAAA,M,EAAA,G,EAAA,gCAMI,OACE,iHAEE,6BACA,6BACA,uBACEC,UAAU,kBACVC,KAAK,wDACLlL,OAAO,SACPmL,IAAI,YAJN,UAQA,mC,2BAnBR,GAAiCC,iB,y4BCE1B,IAAMC,GAAb,8E,UAAA,O,mOAAA,M,EAAA,G,EAAA,gCAEI,OAAO,mC,2BAFX,GAAkCD,iB,4CCJ5BE,GAEJ,c,4FAAc,UAFVA,GAGGC,SAAW,+BAGb,IAAMC,GAAS,IAAIC,mBAAiBhH,GACxCiH,gBAAgBL,IAChBM,aAAa5C,GACb6C,uBAAuBN,IACvBO,cAAc,CACbC,MAAO,QACPC,KAAM,UACNzH,KAAMyG,EACNzF,GAAI","file":"testDataDSPlugin.017a0d1a58b1119d038d.js","sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n} from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\n\nexport const defaultQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Signal ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'value', type: FieldType.number });\n\n    const { spread, speed, bands = 0, noise } = query;\n\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      data.addField({ name: 'Min' + suffix, type: FieldType.number });\n      data.addField({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      let idx = 0;\n      data.fields[idx++].values.add(time);\n      data.fields[idx++].values.add(value);\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.fields[idx++].values.add(min);\n        data.fields[idx++].values.add(max);\n      }\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'line', type: FieldType.string });\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.values.time.add(Date.now());\n      data.values.line.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then(response => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import {\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  TableData,\n  TimeSeries,\n  LoadingState,\n  ArrayDataFrame,\n  base64StringToArrowTable,\n  arrowTableToDataFrame,\n  DataFrame,\n} from '@grafana/data';\nimport { Scenario, TestDataQuery } from './types';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\nimport { queryMetricTree } from './metricTree';\nimport { from, merge, Observable, of } from 'rxjs';\nimport { runStream } from './runStreams';\nimport templateSrv from 'app/features/templating/template_srv';\nimport { getSearchFilterScopedVar } from 'app/features/templating/utils';\n\ntype TestData = TimeSeries | TableData;\n\nexport class TestDataDataSource extends DataSourceApi<TestDataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const queries: any[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n      if (target.scenarioId === 'streaming_client') {\n        streams.push(runStream(target, options));\n      } else if (target.scenarioId === 'grafana_api') {\n        streams.push(runGrafanaAPI(target, options));\n      } else if (target.scenarioId === 'arrow') {\n        streams.push(runArrowFile(target, options));\n      } else {\n        queries.push({\n          ...target,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          alias: templateSrv.replace(target.alias || ''),\n        });\n      }\n    }\n\n    if (queries.length) {\n      const req: Promise<DataQueryResponse> = getBackendSrv()\n        .datasourceRequest({\n          method: 'POST',\n          url: '/api/tsdb/query',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: queries,\n          },\n          // This sets up a cancel token\n          requestId: options.requestId,\n        })\n        .then((res: any) => this.processQueryResult(queries, res));\n\n      streams.push(from(req));\n    }\n\n    return merge(...streams);\n  }\n\n  processQueryResult(queries: any, res: any): DataQueryResponse {\n    const data: TestData[] = [];\n    let error: DataQueryError | undefined = undefined;\n\n    for (const query of queries) {\n      const results = res.data.results[query.refId];\n\n      for (const t of results.tables || []) {\n        const table = t as TableData;\n        table.refId = query.refId;\n        table.name = query.alias;\n        data.push(table);\n      }\n\n      for (const series of results.series || []) {\n        data.push({ target: series.name, datapoints: series.points, refId: query.refId, tags: series.tags });\n      }\n\n      if (results.error) {\n        error = {\n          message: results.error,\n        };\n      }\n    }\n\n    return { data, error };\n  }\n\n  annotationQuery(options: any) {\n    let timeWalker = options.range.from.valueOf();\n    const to = options.range.to.valueOf();\n    const events = [];\n    const eventCount = 10;\n    const step = (to - timeWalker) / eventCount;\n\n    for (let i = 0; i < eventCount; i++) {\n      events.push({\n        annotation: options.annotation,\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n    return Promise.resolve(events);\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    return getBackendSrv().get('/api/tsdb/testdata/scenarios');\n  }\n\n  metricFindQuery(query: string, options: any) {\n    return new Promise<MetricFindValue[]>((resolve, reject) => {\n      setTimeout(() => {\n        const interpolatedQuery = templateSrv.replace(\n          query,\n          getSearchFilterScopedVar({ query, wildcardChar: '*', options })\n        );\n        const children = queryMetricTree(interpolatedQuery);\n        const items = children.map(item => ({ value: item.name, text: item.name }));\n        resolve(items);\n      }, 100);\n    });\n  }\n}\n\nfunction runArrowFile(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  let data: DataFrame[] = [];\n  if (target.stringInput && target.stringInput.length > 10) {\n    try {\n      const table = base64StringToArrowTable(target.stringInput);\n      data = [arrowTableToDataFrame(table)];\n    } catch (e) {\n      console.warn('Error reading saved arrow', e);\n      const error = toDataQueryError(e);\n      error.refId = target.refId;\n      return of({ state: LoadingState.Error, error, data });\n    }\n  }\n  return of({ state: LoadingState.Done, data });\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then(res => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n","import _ from 'lodash';\nimport { IScope } from 'angular';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { dateMath, dateTime } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { defaultQuery } from './runStreams';\nimport { promiseToDigest } from 'app/core/utils/promiseToDigest';\n\nexport const defaultPulse: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWave: any = {\n  timeStep: 60,\n  valuesCSV: '0,0,2,2,1,1',\n};\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse', 'predictable_csv_wave'];\n\nexport class TestDataQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  scenarioList: any;\n  scenario: any;\n  newPointValue: number;\n  newPointTime: any;\n  selectedPoint: any;\n  digest: (promise: Promise<any>) => Promise<any>;\n\n  showLabels = false;\n  selectors: typeof selectors.components.DataSource.TestData.QueryTab;\n\n  /** @ngInject */\n  constructor($scope: IScope, $injector: any) {\n    super($scope, $injector);\n\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\n    this.scenarioList = [];\n    this.newPointTime = dateTime();\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n    this.selectors = selectors.components.DataSource.TestData.QueryTab;\n  }\n\n  getPoints() {\n    return _.map(this.target.points, (point, index) => {\n      return {\n        text: dateTime(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n        value: index,\n      };\n    });\n  }\n\n  pointSelected(option: any) {\n    this.selectedPoint = option;\n  }\n\n  deletePoint() {\n    this.target.points.splice(this.selectedPoint.value, 1);\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.refresh();\n  }\n\n  addPoint() {\n    this.target.points = this.target.points || [];\n    this.newPointTime = dateMath.parse(this.newPointTime);\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\n    this.refresh();\n  }\n\n  $onInit() {\n    return promiseToDigest(this.$scope)(\n      getBackendSrv()\n        .get('/api/tsdb/testdata/scenarios')\n        .then((res: any) => {\n          this.scenarioList = res;\n          this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n        })\n    );\n  }\n\n  scenarioChanged() {\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n\n    if (this.target.scenarioId === 'manual_entry') {\n      this.target.points = this.target.points || [];\n    } else {\n      delete this.target.points;\n    }\n\n    if (this.target.scenarioId === 'streaming_client') {\n      this.target.stream = _.defaults(this.target.stream || {}, defaultQuery);\n    } else {\n      delete this.target.stream;\n    }\n\n    if (this.target.scenarioId === 'predictable_pulse') {\n      this.target.pulseWave = _.defaults(this.target.pulseWave || {}, defaultPulse);\n    } else {\n      delete this.target.pulseWave;\n    }\n\n    if (this.target.scenarioId === 'predictable_csv_wave') {\n      this.target.csvWave = _.defaults(this.target.csvWave || {}, defaultCSVWave);\n    } else {\n      delete this.target.csvWave;\n    }\n\n    if (this.target.scenarioId === 'grafana_api') {\n      this.target.stringInput = 'datasources';\n    } else {\n      delete this.target.stringInput;\n    }\n\n    this.target.stringInput = this.scenario.stringInput ?? undefined;\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n\n    this.refresh();\n  }\n\n  streamChanged() {\n    this.refresh();\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducable test environment.\n        <br />\n        <br />\n        <a\n          className=\"btn btn-inverse\"\n          href=\"https://github.com/grafana/grafana/tree/master/devenv\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Github\n        </a>\n        <br />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQueryCtrl } from './query_ctrl';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(TestDataQueryCtrl)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"sourceRoot":""}