{"version":3,"sources":["webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///./public/app/features/explore/Legend.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/features/explore/utils/set.ts","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/Error.tsx","webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///./public/app/features/explore/LogRow.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/core/utils/reselect.ts","webpack:///./public/app/features/explore/state/selectors.ts","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///./public/app/features/explore/Wrapper.tsx"],"names":["updateExploreUIState","exploreId","uiStateFragment","dispatch","Object","_actionTypes__WEBPACK_IMPORTED_MODULE_6__","tslib__WEBPACK_IMPORTED_MODULE_0__","stateSave","addQueryRow","index","query","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_4__","changeDatasource","datasource","_this","this","getState","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_3__","get","newDataSourceInstance","_a","sent","currentDataSourceInstance","explore","datasourceInstance","queries","sourceDataSource","targetDataSource","importedQueries","meta","id","slice","importQueries","nextQueries","map","q","i","loadDatasource","console","error","error_1","runQueries","changeQuery","override","changeSize","height","width","changeTime","range","clearQueries","initializeExplore","datasourceName","containerWidth","eventBridge","ui","exploreDatasources","getExternal","ds","value","name","length","instance","error_2","error_3","loadDatasourceSuccess","supportsGraph","metrics","supportsLogs","logs","supportsTable","tables","StartPage","pluginExports","ExploreStartPage","historyKey","history","app_core_store__WEBPACK_IMPORTED_MODULE_2__","getObject","set","showingStartPage","Boolean","requestedDatasourceName","datasourceError","testDatasource","testResult","status","message","error_4","statusText","Promise","reject","init","resolve","modifyQueries","modification","modifier","preventSubmit","ignoreUIState","showingLogs","showingGraph","showingTable","interval","runQueriesForType","format","instant","valueWithRefId","data","resultType","queryOptions","resultGetter","queryIntervals","scanning","datasourceId","forEach","rowIndex","transaction","now","Date","options","res","emit","latency","results","transactionId","result","queryTransactions","scanner","find","qt","hints","getQueryHints","nextQueryTransactions","done","nextHistory","lodash__WEBPACK_IMPORTED_MODULE_1___default","a","size","queryTransactionSuccess","response_1","response","cancelled","errorDetails","Error","queryTransactionFailure","scanStart","setQueries","rawQueries","splitClose","splitOpen","leftState","left","itemState","right","split","urlStates","leftUrlState","dedupStrategy","rightUrlState","app_core_actions__WEBPACK_IMPORTED_MODULE_5__","togglePanelActionCreator","actionCreator","isPanelVisible","uiFragmentStateUpdate","shouldRunQueries","type","toggleGraph","toggleLogs","toggleTable","changeDedupStrategy","Panel","_super","apply","arguments","onClickToggle","props","onToggle","isOpen","prototype","render","loading","iconClass","loaderClass","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","className","onClick","label","children","react__WEBPACK_IMPORTED_MODULE_1__","ErrorBoundary","call","state","errorInfo","componentDidCatch","setState","style","whiteSpace","toString","componentStack","DATE_FORMAT","DEFAULT_RANGE","from","to","parseTime","isUtc","ensureString","moment__WEBPACK_IMPORTED_MODULE_2___default","isMoment","indexOf","time","isNaN","parseInt","utc","TimePicker","handleChangeFrom","e","fromRaw","target","handleChangeTo","toRaw","handleClickApply","onChangeTime","app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_3__","rangeString","app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_4__","handleClickLeft","move","handleClickPicker","handleClickRight","handleClickRefresh","handleClickRelativeOption","dropdownRef","el","dropdownEl","initialRange","refreshInterval","getDerivedStateFromProps","direction","nextTo","nextFrom","step","timespan","valueOf","nextRange","nextTimeRange","raw","getTimeOptions","renderDropdown","timeOptions","ref","keys","section","group","key","option","active","display","onChange","Legend_LegendItem","LegendItem","onClickLabel","series","tslib_es6","hidden","seriesClasses","classnames_default","graph-legend-series-hidden","react_default","color","title","alias","react","explore_Legend","Legend","event","onToggleSeries","ctrlKey","metaKey","shiftKey","hiddenSeries","items","has","defaultProps","FLOT_OPTIONS","legend","show","lines","linewidth","zero","shadowSize","grid","minBorderMargin","markings","backgroundColor","borderWidth","clickable","margin","labelMarginX","selection","mode","Graph_Graph","Graph","dynamicOptions","Set","showAllTimeSeries","onPlotSelected","ranges","moment_default","xaxis","onShowAllTimeSeries","draw","exclusive","oneSeriesVisible","d","nextHiddenSeries","filter","availableSeries","b","it","values","next","add","intersect","delete","getGraphData","componentDidMount","$el","jquery_js_exposed_default","bind","componentDidUpdate","prevProps","prevState","equal","componentWillUnmount","unbind","getDynamicOptions","ticks","datemath","min","max","timezone","timeformat","secPerTick","time_format","userOptions","ts","getFlotPairs","plot","_b","_c","Fragment","__webpack_exports__","Explore","getRef","changedByScanner","onStopScanning","onClickExample","onModifyQueries","action","modifyQuery","onResize","onStartScanning","scanPreviousRange","timepickerRef","current","scanStopAction","exploreEvents","app_core_utils_emitter__WEBPACK_IMPORTED_MODULE_15__","createRef","initialized","urlState","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_14__","_d","initialDatasource","app_core_store__WEBPACK_IMPORTED_MODULE_5__","initialQueries","_TimePicker__WEBPACK_IMPORTED_MODULE_12__","offsetWidth","removeAllListeners","datasourceLoading","datasourceMissing","queryKeys","exploreClass","_ExploreToolbar__WEBPACK_IMPORTED_MODULE_16__","_Error__WEBPACK_IMPORTED_MODULE_6__","_QueryRows__WEBPACK_IMPORTED_MODULE_10__","react_virtualized__WEBPACK_IMPORTED_MODULE_4__","disableHeight","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_7__","_GraphContainer__WEBPACK_IMPORTED_MODULE_8__","_TableContainer__WEBPACK_IMPORTED_MODULE_11__","onClickCell","_LogsContainer__WEBPACK_IMPORTED_MODULE_9__","PureComponent","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_13__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_17__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","item","__webpack_require__","Alert","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","GraphContainer","onClickGraphButton","timeRange","graphResult","graphHeight","_Panel__WEBPACK_IMPORTED_MODULE_6__","_Graph__WEBPACK_IMPORTED_MODULE_5__","_state_actions__WEBPACK_IMPORTED_MODULE_4__","some","LogsContainer","onClickLogsButton","handleDedupStrategyChange","hangleToggleLogLevel","hiddenLogLevels","toggleLogLevelAction","logsHighlighterExpressions","logsResult","dedupedResult","scanRange","_Panel__WEBPACK_IMPORTED_MODULE_7__","_Logs__WEBPACK_IMPORTED_MODULE_6__","app_core_logs_model__WEBPACK_IMPORTED_MODULE_4__","none","dedupedData","highlighterExpressions","onDedupStrategyChange","onToggleLogLevel","_state_actions__WEBPACK_IMPORTED_MODULE_5__","app_features_explore_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__","app_features_explore_state_selectors__WEBPACK_IMPORTED_MODULE_9__","QueryRows","_QueryRow__WEBPACK_IMPORTED_MODULE_2__","QueryRow","onExecuteQuery","onChangeQuery","getHighlighterExpression","updateLogsHighlights","onClickAddButton","onClickClearButton","onClickHintFix","onClickRemoveButton","removeQueryRowAction","lodash__WEBPACK_IMPORTED_MODULE_2___default","debounce","expressions","highlightLogsExpressionAction","log","transactions","t","transactionWithError","undefined","hint","getFirstHintFromTransactions","queryError","QueryField","ExploreQueryField","_QueryTransactionStatus__WEBPACK_IMPORTED_MODULE_6__","onExecuteHint","onQueryChange","_QueryEditor__WEBPACK_IMPORTED_MODULE_5__","initialQuery","_state_actions__WEBPACK_IMPORTED_MODULE_7__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_4__","QueryEditor","element","initTimeSrv","loader","app_core_services_AngularLoader__WEBPACK_IMPORTED_MODULE_2__","template","scopeProps","ctrl","refresh","events","panel","targets","dashboard","component","load","destroy","app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_3__","getTimezone","timeRangeUpdated","TableContainer","onClickTableButton","tableResult","_Table__WEBPACK_IMPORTED_MODULE_5__","EMPTY_TABLE","VALUE_REGEX","Table","getCellProps","rowInfo","column","columnKey","Header","rowValue","row","tableModel","columnNames","columns","text","filterable","accessor","test","Cell","react__WEBPACK_IMPORTED_MODULE_2___default","noDataText","react_table__WEBPACK_IMPORTED_MODULE_3__","rows","getTdProps","minRows","resolveData","cells","zipObject","prepareRows","showPagination","react__WEBPACK_IMPORTED_MODULE_2__","IconSide","createResponsiveButton","defaultOptions","iconSide","buttonClassName","iconClassName","splitted","UnConnectedExploreToolbar","onChangeDatasource","onClearAll","clearAll","onRunQuery","runQuery","onCloseTimePicker","selectedDatasource","closeSplit","app_core_components_Select_DataSourcePicker__WEBPACK_IMPORTED_MODULE_4__","datasources","app_core_components_ClickOutsideWrapper_ClickOutsideWrapper__WEBPACK_IMPORTED_MODULE_7__","_TimePicker__WEBPACK_IMPORTED_MODULE_6__","ExploreToolbar","react_redux__WEBPACK_IMPORTED_MODULE_2__","exploreItem","ToggleButtonGroup","transparent","ToggleButton","selected","tooltip","btnClassName","button","stopPropagation","src","content","placement","LogLabelStatsRow","logLabelStatsModel","count","proportion","percent","Math","round","barStyle","logs-stats-row--active","LogLabelStats_LogLabelStats","LogLabelStats","rowCount","stats","onClickClose","topRows","activeRow","otherRows","insertActiveRow","otherCount","reduce","sum","total","otherProportion","stat","LogLabel_LogLabel","LogLabel","showStats","onClickStats","allRows","getRows","logs_model","plain","LogLabels_LogLabels","LogLabels","labels","LogRow_LogRow","LogRow","fieldCount","fieldLabel","fieldStats","fieldValue","parsed","parser","parsedFieldHighlights","showFieldStats","onClickHighlight","fieldText","getLabelFromField","getValueFromField","matcher","buildMatcher","onMouseOverMessage","mouseMessageTimer","setTimeout","parseMessage","onMouseOutMessage","clearTimeout","entry","getFields","showDuplicates","showLabels","showLocalTime","showUtc","previewHighlights","lodash_default","isEqual","searchWords","highlights","needsHighlighter","highlightClassName","logs-row__match-highlight--preview","duplicates","logLevel","timeLocal","timeFromNow","timestamp","uniqueLabels","onMouseEnter","onMouseLeave","main_default","autoEscape","highlightTag","FieldHighlight","textToHighlight","findChunks","utils_text","graphOptions","stack","bars","lineWidth","yaxis","tickDecimals","Logs_Logs","Logs","deferLogs","renderAll","onChangeDedup","dedup","onChangeLabels","checked","onChangeLocalTime","onChangeUtc","rawLevel","hiddenRawLevels","Array","level","onClickScan","preventDefault","onClickStopScan","renderAll_1","PREVIEW_LIMIT","deferLogsTimer","renderAllTimer","hasData","dedupCount","push","kind","Number","processedRows","firstRows","lastRows","scanText","rangeutil","timeSeries","time_series2","components_ToggleButtonGroup_ToggleButtonGroup","dedupType","LabelsMap","renderMetaItem","createLodashMemoizedSelector","es","lodash","args","_i","acc","val","JSON","stringify","exploreItemUIStateSelector","deduplicatedLogsSelector","filteredData","ElapsedTime","elapsed","tick","offset","start","timer","window","setInterval","componentWillReceiveProps","nextProps","clearInterval","toFixed","QueryTransactionStatus_QueryTransactionStatusItem","QueryTransactionStatusItem","formatLatency","explore_ElapsedTime","QueryTransactionStatus_QueryTransactionStatus","QueryTransactionStatus","Wrapper","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_6__","rightState","initialSplit","initializeExploreSplitAction","resetExploreAction","_grafana_ui__WEBPACK_IMPORTED_MODULE_9__","autoHeightMin","_Explore__WEBPACK_IMPORTED_MODULE_8__","app_types_explore__WEBPACK_IMPORTED_MODULE_5__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_10__","updateLocation","app_core_actions__WEBPACK_IMPORTED_MODULE_4__","location"],"mappings":"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","file":"explore.1ad4438ca348dc27f022.js","sourcesContent":["// Libraries\nimport _ from 'lodash';\nimport { ThunkAction } from 'redux-thunk';\n\n// Services & Utils\nimport store from 'app/core/store';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { Emitter } from 'app/core/core';\nimport {\n  LAST_USED_DATASOURCE_KEY,\n  clearQueryKeys,\n  ensureQueries,\n  generateEmptyQuery,\n  hasNonEmptyQuery,\n  makeTimeSeriesList,\n  updateHistory,\n  buildQueryTransaction,\n  serializeStateToUrlParam,\n} from 'app/core/utils/explore';\n\n// Actions\nimport { updateLocation } from 'app/core/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport {\n  RawTimeRange,\n  TimeRange,\n  DataSourceApi,\n  DataQuery,\n  DataSourceSelectItem,\n  QueryHint,\n  QueryFixAction,\n} from '@grafana/ui/src/types';\nimport { ExploreId, ExploreUrlState, RangeScanner, ResultType, QueryOptions, ExploreUIState } from 'app/types/explore';\nimport {\n  Action,\n  updateDatasourceInstanceAction,\n  changeQueryAction,\n  changeSizeAction,\n  ChangeSizePayload,\n  changeTimeAction,\n  scanStopAction,\n  clearQueriesAction,\n  initializeExploreAction,\n  loadDatasourceMissingAction,\n  loadDatasourceFailureAction,\n  loadDatasourcePendingAction,\n  queriesImportedAction,\n  LoadDatasourceSuccessPayload,\n  loadDatasourceSuccessAction,\n  modifyQueriesAction,\n  queryTransactionFailureAction,\n  queryTransactionStartAction,\n  queryTransactionSuccessAction,\n  scanRangeAction,\n  runQueriesEmptyAction,\n  scanStartAction,\n  setQueriesAction,\n  splitCloseAction,\n  splitOpenAction,\n  addQueryRowAction,\n  AddQueryRowPayload,\n  toggleGraphAction,\n  toggleLogsAction,\n  toggleTableAction,\n  ToggleGraphPayload,\n  ToggleLogsPayload,\n  ToggleTablePayload,\n  updateUIStateAction,\n} from './actionTypes';\nimport { ActionOf, ActionCreator } from 'app/core/redux/actionCreatorFactory';\nimport { LogsDedupStrategy } from 'app/core/logs_model';\n\ntype ThunkResult<R> = ThunkAction<R, StoreState, undefined, Action>;\n\n/**\n * Updates UI state and save it to the URL\n */\nconst updateExploreUIState = (exploreId, uiStateFragment: Partial<ExploreUIState>) => {\n  return dispatch => {\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\n    dispatch(stateSave());\n  };\n};\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): ActionOf<AddQueryRowPayload> {\n  const query = generateEmptyQuery(index + 1);\n  return addQueryRowAction({ exploreId, index, query });\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const newDataSourceInstance = await getDatasourceSrv().get(datasource);\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    const queries = getState().explore[exploreId].queries;\n\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\n\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\n\n    try {\n      await dispatch(loadDatasource(exploreId, newDataSourceInstance));\n    } catch (error) {\n      console.error(error);\n      return;\n    }\n\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override: boolean\n): ThunkResult<void> {\n  return dispatch => {\n    // Null query means reset\n    if (query === null) {\n      query = { ...generateEmptyQuery(index) };\n    }\n\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): ActionOf<ChangeSizePayload> {\n  return changeSizeAction({ exploreId, height, width });\n}\n\n/**\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\n */\nexport function changeTime(exploreId: ExploreId, range: TimeRange): ThunkResult<void> {\n  return dispatch => {\n    dispatch(changeTimeAction({ exploreId, range }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStopAction({ exploreId }));\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasourceName: string,\n  queries: DataQuery[],\n  range: RawTimeRange,\n  containerWidth: number,\n  eventBridge: Emitter,\n  ui: ExploreUIState\n): ThunkResult<void> {\n  return async dispatch => {\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\n      .getExternal()\n      .map(ds => ({\n        value: ds.name,\n        name: ds.name,\n        meta: ds.meta,\n      }));\n\n    dispatch(\n      initializeExploreAction({\n        exploreId,\n        containerWidth,\n        eventBridge,\n        exploreDatasources,\n        queries,\n        range,\n        ui,\n      })\n    );\n\n    if (exploreDatasources.length >= 1) {\n      let instance;\n\n      if (datasourceName) {\n        try {\n          instance = await getDatasourceSrv().get(datasourceName);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      // Checking on instance here because requested datasource could be deleted already\n      if (!instance) {\n        instance = await getDatasourceSrv().get();\n      }\n\n      dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: instance }));\n\n      try {\n        await dispatch(loadDatasource(exploreId, instance));\n      } catch (error) {\n        console.error(error);\n        return;\n      }\n      dispatch(runQueries(exploreId, true));\n    } else {\n      dispatch(loadDatasourceMissingAction({ exploreId }));\n    }\n  };\n}\n\n/**\n * Datasource loading was successfully completed. The instance is stored in the state as well in case we need to\n * run datasource-specific code. Existing queries are imported to the new datasource if an importer exists,\n * e.g., Prometheus -> Loki queries.\n */\nexport const loadDatasourceSuccess = (exploreId: ExploreId, instance: any): ActionOf<LoadDatasourceSuccessPayload> => {\n  // Capabilities\n  const supportsGraph = instance.meta.metrics;\n  const supportsLogs = instance.meta.logs;\n  const supportsTable = instance.meta.tables;\n  // Custom components\n  const StartPage = instance.pluginExports.ExploreStartPage;\n\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n  store.set(LAST_USED_DATASOURCE_KEY, instance.name);\n\n  return loadDatasourceSuccessAction({\n    exploreId,\n    StartPage,\n    datasourceInstance: instance,\n    history,\n    showingStartPage: Boolean(StartPage),\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n  });\n};\n\nexport function importQueries(\n  exploreId: ExploreId,\n  queries: DataQuery[],\n  sourceDataSource: DataSourceApi,\n  targetDataSource: DataSourceApi\n) {\n  return async dispatch => {\n    let importedQueries = queries;\n    // Check if queries can be imported from previously selected datasource\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\n      // Keep same queries if same type of datasource\n      importedQueries = [...queries];\n    } else if (targetDataSource.importQueries) {\n      // Datasource-specific importers\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\n    } else {\n      // Default is blank queries\n      importedQueries = ensureQueries();\n    }\n\n    const nextQueries = importedQueries.map((q, i) => ({\n      ...q,\n      ...generateEmptyQuery(i),\n    }));\n\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\n  };\n}\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\n    let datasourceError = null;\n\n    try {\n      const testResult = await instance.testDatasource();\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\n    } catch (error) {\n      datasourceError = (error && error.statusText) || 'Network error';\n    }\n\n    if (datasourceError) {\n      dispatch(loadDatasourceFailureAction({ exploreId, error: datasourceError }));\n      return Promise.reject(`${datasourceName} loading failed`);\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    if (instance.init) {\n      instance.init();\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    dispatch(loadDatasourceSuccess(exploreId, instance));\n    return Promise.resolve();\n  };\n}\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: QueryFixAction,\n  index: number,\n  modifier: any\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Mark a query transaction as failed with an error extracted from the query response.\n * The transaction will be marked as `done`.\n */\nexport function queryTransactionFailure(\n  exploreId: ExploreId,\n  transactionId: string,\n  response: any,\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, queryTransactions } = getState().explore[exploreId];\n    if (datasourceInstance.meta.id !== datasourceId || response.cancelled) {\n      // Navigated away, queries did not matter\n      return;\n    }\n\n    // Transaction might have been discarded\n    if (!queryTransactions.find(qt => qt.id === transactionId)) {\n      return;\n    }\n\n    console.error(response);\n\n    let error: string;\n    let errorDetails: string;\n    if (response.data) {\n      if (typeof response.data === 'string') {\n        error = response.data;\n      } else if (response.data.error) {\n        error = response.data.error;\n        if (response.data.response) {\n          errorDetails = response.data.response;\n        }\n      } else {\n        throw new Error('Could not handle error response');\n      }\n    } else if (response.message) {\n      error = response.message;\n    } else if (typeof response === 'string') {\n      error = response;\n    } else {\n      error = 'Unknown error during query transaction. Please check JS console logs.';\n    }\n\n    // Mark transactions as complete\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          error,\n          errorDetails,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    dispatch(queryTransactionFailureAction({ exploreId, queryTransactions: nextQueryTransactions }));\n  };\n}\n\n/**\n * Complete a query transaction, mark the transaction as `done` and store query state in URL.\n * If the transaction was started by a scanner, it keeps on scanning for more results.\n * Side-effect: the query is stored in localStorage.\n * @param exploreId Explore area\n * @param transactionId ID\n * @param result Response from `datasourceInstance.query()`\n * @param latency Duration between request and response\n * @param queries Queries from all query rows\n * @param datasourceId Origin datasource instance, used to discard results if current datasource is different\n */\nexport function queryTransactionSuccess(\n  exploreId: ExploreId,\n  transactionId: string,\n  result: any,\n  latency: number,\n  queries: DataQuery[],\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, history, queryTransactions, scanner, scanning } = getState().explore[exploreId];\n\n    // If datasource already changed, results do not matter\n    if (datasourceInstance.meta.id !== datasourceId) {\n      return;\n    }\n\n    // Transaction might have been discarded\n    const transaction = queryTransactions.find(qt => qt.id === transactionId);\n    if (!transaction) {\n      return;\n    }\n\n    // Get query hints\n    let hints: QueryHint[];\n    if (datasourceInstance.getQueryHints) {\n      hints = datasourceInstance.getQueryHints(transaction.query, result);\n    }\n\n    // Mark transactions as complete and attach result\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          hints,\n          latency,\n          result,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    // Side-effect: Saving history in localstorage\n    const nextHistory = updateHistory(history, datasourceId, queries);\n\n    dispatch(\n      queryTransactionSuccessAction({\n        exploreId,\n        history: nextHistory,\n        queryTransactions: nextQueryTransactions,\n      })\n    );\n\n    // Keep scanning for results if this was the last scanning transaction\n    if (scanning) {\n      if (_.size(result) === 0) {\n        const other = nextQueryTransactions.find(qt => qt.scanning && !qt.done);\n        if (!other) {\n          const range = scanner();\n          dispatch(scanRangeAction({ exploreId, range }));\n        }\n      } else {\n        // We can stop scanning if we have a result\n        dispatch(scanStopAction({ exploreId }));\n      }\n    }\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport function runQueries(exploreId: ExploreId, ignoreUIState = false) {\n  return (dispatch, getState) => {\n    const {\n      datasourceInstance,\n      queries,\n      showingLogs,\n      showingGraph,\n      showingTable,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n    } = getState().explore[exploreId];\n\n    if (!hasNonEmptyQuery(queries)) {\n      dispatch(runQueriesEmptyAction({ exploreId }));\n      dispatch(stateSave()); // Remember to saves to state and update location\n      return;\n    }\n\n    // Some datasource's query builders allow per-query interval limits,\n    // but we're using the datasource interval limit for now\n    const interval = datasourceInstance.interval;\n\n    // Keep table queries first since they need to return quickly\n    if ((ignoreUIState || showingTable) && supportsTable) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Table',\n          {\n            interval,\n            format: 'table',\n            instant: true,\n            valueWithRefId: true,\n          },\n          data => data[0]\n        )\n      );\n    }\n    if ((ignoreUIState || showingGraph) && supportsGraph) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Graph',\n          {\n            interval,\n            format: 'time_series',\n            instant: false,\n          },\n          makeTimeSeriesList\n        )\n      );\n    }\n    if ((ignoreUIState || showingLogs) && supportsLogs) {\n      dispatch(runQueriesForType(exploreId, 'Logs', { interval, format: 'logs' }));\n    }\n\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Helper action to build a query transaction object and handing the query to the datasource.\n * @param exploreId Explore area\n * @param resultType Result viewer that will be associated with this query result\n * @param queryOptions Query options as required by the datasource's `query()` function.\n * @param resultGetter Optional result extractor, e.g., if the result is a list and you only need the first element.\n */\nfunction runQueriesForType(\n  exploreId: ExploreId,\n  resultType: ResultType,\n  queryOptions: QueryOptions,\n  resultGetter?: any\n) {\n  return async (dispatch, getState) => {\n    const { datasourceInstance, eventBridge, queries, queryIntervals, range, scanning } = getState().explore[exploreId];\n    const datasourceId = datasourceInstance.meta.id;\n\n    // Run all queries concurrently\n    queries.forEach(async (query, rowIndex) => {\n      const transaction = buildQueryTransaction(\n        query,\n        rowIndex,\n        resultType,\n        queryOptions,\n        range,\n        queryIntervals,\n        scanning\n      );\n      dispatch(queryTransactionStartAction({ exploreId, resultType, rowIndex, transaction }));\n      try {\n        const now = Date.now();\n        const res = await datasourceInstance.query(transaction.options);\n        eventBridge.emit('data-received', res.data || []);\n        const latency = Date.now() - now;\n        const results = resultGetter ? resultGetter(res.data) : res.data;\n        dispatch(queryTransactionSuccess(exploreId, transaction.id, results, latency, queries, datasourceId));\n      } catch (response) {\n        eventBridge.emit('data-error', response);\n        dispatch(queryTransactionFailure(exploreId, transaction.id, response, datasourceId));\n      }\n    });\n  };\n}\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId, scanner: RangeScanner): ThunkResult<void> {\n  return dispatch => {\n    // Register the scanner\n    dispatch(scanStartAction({ exploreId, scanner }));\n    // Scanning must trigger query run, and return the new range\n    const range = scanner();\n    // Set the new range to be displayed\n    dispatch(scanRangeAction({ exploreId, range }));\n  };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return dispatch => {\n    // Inject react keys into query objects\n    const queries = rawQueries.map(q => ({ ...q, ...generateEmptyQuery() }));\n    dispatch(setQueriesAction({ exploreId, queries }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(): ThunkResult<void> {\n  return dispatch => {\n    dispatch(splitCloseAction());\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore.left;\n    const itemState = {\n      ...leftState,\n      queryTransactions: [],\n      queries: leftState.queries.slice(),\n    };\n    dispatch(splitOpenAction({ itemState }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Saves Explore state to URL using the `left` and `right` parameters.\n * If split view is not active, `right` will not be set.\n */\nexport function stateSave() {\n  return (dispatch, getState) => {\n    const { left, right, split } = getState().explore;\n    const urlStates: { [index: string]: string } = {};\n    const leftUrlState: ExploreUrlState = {\n      datasource: left.datasourceInstance.name,\n      queries: left.queries.map(clearQueryKeys),\n      range: left.range,\n      ui: {\n        showingGraph: left.showingGraph,\n        showingLogs: left.showingLogs,\n        showingTable: left.showingTable,\n        dedupStrategy: left.dedupStrategy,\n      },\n    };\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\n    if (split) {\n      const rightUrlState: ExploreUrlState = {\n        datasource: right.datasourceInstance.name,\n        queries: right.queries.map(clearQueryKeys),\n        range: right.range,\n        ui: {\n          showingGraph: right.showingGraph,\n          showingLogs: right.showingLogs,\n          showingTable: right.showingTable,\n          dedupStrategy: right.dedupStrategy,\n        },\n      };\n\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\n    }\n\n    dispatch(updateLocation({ query: urlStates }));\n  };\n}\n\n/**\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\n * queries won't be run\n */\nconst togglePanelActionCreator = (\n  actionCreator:\n    | ActionCreator<ToggleGraphPayload>\n    | ActionCreator<ToggleLogsPayload>\n    | ActionCreator<ToggleTablePayload>\n) => (exploreId: ExploreId, isPanelVisible: boolean) => {\n  return dispatch => {\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\n    const shouldRunQueries = !isPanelVisible;\n\n    switch (actionCreator.type) {\n      case toggleGraphAction.type:\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\n        break;\n      case toggleLogsAction.type:\n        uiFragmentStateUpdate = { showingLogs: !isPanelVisible };\n        break;\n      case toggleTableAction.type:\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\n        break;\n    }\n\n    dispatch(actionCreator({ exploreId }));\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\n\n    if (shouldRunQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n};\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\n\n/**\n * Expand/collapse the logs result viewer. When collapsed, log queries won't be run.\n */\nexport const toggleLogs = togglePanelActionCreator(toggleLogsAction);\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\n\n/**\n * Change logs deduplication strategy and update URL.\n */\nexport const changeDedupStrategy = (exploreId, dedupStrategy: LogsDedupStrategy) => {\n  return dispatch => {\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\n  };\n};\n","import React, { PureComponent } from 'react';\n\ninterface Props {\n  isOpen: boolean;\n  label: string;\n  loading?: boolean;\n  onToggle: (isOpen: boolean) => void;\n}\n\nexport default class Panel extends PureComponent<Props> {\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\n\n  render() {\n    const { isOpen, loading } = this.props;\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\n    return (\n      <div className=\"explore-panel panel-container\">\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\n          <div className=\"explore-panel__header-buttons\">\n            <span className={iconClass} />\n          </div>\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\n        </div>\n        {isOpen && (\n          <div className=\"explore-panel__body\">\n            <div className={loaderClass} />\n            {this.props.children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component<{}, any> {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div className=\"explore-container\">\n          <h3>An unexpected error happened.</h3>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\n\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nexport const DEFAULT_RANGE = {\n  from: 'now-6h',\n  to: 'now',\n};\n\n/**\n * Return a human-editable string of either relative (inludes \"now\") or absolute local time (in the shape of DATE_FORMAT).\n * @param value Epoch or relative time\n */\nexport function parseTime(value: string | moment.Moment, isUtc = false, ensureString = false): string | moment.Moment {\n  if (moment.isMoment(value)) {\n    if (ensureString) {\n      return value.format(DATE_FORMAT);\n    }\n    return value;\n  }\n  if ((value as string).indexOf('now') !== -1) {\n    return value;\n  }\n  let time: any = value;\n  // Possible epoch\n  if (!isNaN(time)) {\n    time = parseInt(time, 10);\n  }\n  time = isUtc ? moment.utc(time) : moment(time);\n  return time.format(DATE_FORMAT);\n}\n\ninterface TimePickerProps {\n  isOpen?: boolean;\n  isUtc?: boolean;\n  range?: RawTimeRange;\n  onChangeTime?: (range: RawTimeRange, scanning?: boolean) => void;\n}\n\ninterface TimePickerState {\n  isOpen: boolean;\n  isUtc: boolean;\n  rangeString: string;\n  refreshInterval?: string;\n  initialRange?: RawTimeRange;\n\n  // Input-controlled text, keep these in a shape that is human-editable\n  fromRaw: string;\n  toRaw: string;\n}\n\n/**\n * TimePicker with dropdown menu for relative dates.\n *\n * Initialize with a range that is either based on relative time strings,\n * or on Moment objects.\n * Internally the component needs to keep a string representation in `fromRaw`\n * and `toRaw` for the controlled inputs.\n * When a time is picked, `onChangeTime` is called with the new range that\n * is again based on relative time strings or Moment objects.\n */\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\n  dropdownEl: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: props.isOpen,\n      isUtc: props.isUtc,\n      rangeString: '',\n      fromRaw: '',\n      toRaw: '',\n      initialRange: DEFAULT_RANGE,\n      refreshInterval: '',\n    };\n  } //Temp solution... How do detect if ds supports table format?\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.initialRange && state.initialRange === props.range) {\n      return state;\n    }\n\n    const from = props.range ? props.range.from : DEFAULT_RANGE.from;\n    const to = props.range ? props.range.to : DEFAULT_RANGE.to;\n\n    // Ensure internal string format\n    const fromRaw = parseTime(from, props.isUtc, true);\n    const toRaw = parseTime(to, props.isUtc, true);\n    const range = {\n      from: fromRaw,\n      to: toRaw,\n    };\n\n    return {\n      ...state,\n      fromRaw,\n      toRaw,\n      initialRange: props.range,\n      rangeString: rangeUtil.describeTimeRange(range),\n    };\n  }\n\n  move(direction: number, scanning?: boolean): RawTimeRange {\n    const { onChangeTime } = this.props;\n    const { fromRaw, toRaw } = this.state;\n    const from = dateMath.parse(fromRaw, false);\n    const to = dateMath.parse(toRaw, true);\n    const step = scanning ? 1 : 2;\n    const timespan = (to.valueOf() - from.valueOf()) / step;\n\n    let nextTo, nextFrom;\n    if (direction === -1) {\n      nextTo = to.valueOf() - timespan;\n      nextFrom = from.valueOf() - timespan;\n    } else if (direction === 1) {\n      nextTo = to.valueOf() + timespan;\n      nextFrom = from.valueOf() + timespan;\n      if (nextTo > Date.now() && to < Date.now()) {\n        nextTo = Date.now();\n        nextFrom = from.valueOf();\n      }\n    } else {\n      nextTo = to.valueOf();\n      nextFrom = from.valueOf();\n    }\n\n    const nextRange = {\n      from: moment(nextFrom),\n      to: moment(nextTo),\n    };\n\n    const nextTimeRange: TimeRange = {\n      raw: nextRange,\n      from: nextRange.from,\n      to: nextRange.to,\n    };\n\n    this.setState(\n      {\n        rangeString: rangeUtil.describeTimeRange(nextRange),\n        fromRaw: nextRange.from.format(DATE_FORMAT),\n        toRaw: nextRange.to.format(DATE_FORMAT),\n      },\n      () => {\n        onChangeTime(nextTimeRange, scanning);\n      }\n    );\n\n    return nextRange;\n  }\n\n  handleChangeFrom = e => {\n    this.setState({\n      fromRaw: e.target.value,\n    });\n  };\n\n  handleChangeTo = e => {\n    this.setState({\n      toRaw: e.target.value,\n    });\n  };\n\n  handleClickApply = () => {\n    const { onChangeTime } = this.props;\n    let range;\n    this.setState(\n      state => {\n        const { toRaw, fromRaw } = this.state;\n        range = {\n          from: dateMath.parse(fromRaw, false),\n          to: dateMath.parse(toRaw, true),\n        };\n        const rangeString = rangeUtil.describeTimeRange(range);\n        return {\n          isOpen: false,\n          rangeString,\n        };\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  handleClickLeft = () => this.move(-1);\n  handleClickPicker = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n    }));\n  };\n  handleClickRight = () => this.move(1);\n  handleClickRefresh = () => {};\n  handleClickRelativeOption = range => {\n    const { onChangeTime } = this.props;\n    const rangeString = rangeUtil.describeTimeRange(range);\n    this.setState(\n      {\n        toRaw: range.to,\n        fromRaw: range.from,\n        isOpen: false,\n        rangeString,\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  getTimeOptions() {\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\n  }\n\n  dropdownRef = el => {\n    this.dropdownEl = el;\n  };\n\n  renderDropdown() {\n    const { fromRaw, isOpen, toRaw } = this.state;\n    if (!isOpen) {\n      return null;\n    }\n    const timeOptions = this.getTimeOptions();\n    return (\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Quick ranges</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-relative-section\">\n            {Object.keys(timeOptions).map(section => {\n              const group = timeOptions[section];\n              return (\n                <ul key={section}>\n                  {group.map(option => (\n                    <li className={option.active ? 'active' : ''} key={option.display}>\n                      <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\n                    </li>\n                  ))}\n                </ul>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Custom range</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-absolute-section\">\n            <label className=\"small\">From:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-from\"\n                  value={fromRaw}\n                  onChange={this.handleChangeFrom}\n                />\n              </div>\n            </div>\n\n            <label className=\"small\">To:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-to\"\n                  value={toRaw}\n                  onChange={this.handleChangeTo}\n                />\n              </div>\n            </div>\n            <div className=\"gf-form\">\n              <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\n                Apply\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { isUtc, rangeString, refreshInterval } = this.state;\n\n    return (\n      <div className=\"timepicker\">\n        <div className=\"navbar-buttons\">\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\n            <i className=\"fa fa-chevron-left\" />\n          </button>\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\n            <i className=\"fa fa-clock-o\" />\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\n          </button>\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\n            <i className=\"fa fa-chevron-right\" />\n          </button>\n        </div>\n        {this.renderDropdown()}\n      </div>\n    );\n  }\n}\n","import React, { MouseEvent, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { TimeSeries } from 'app/core/core';\n\ninterface LegendProps {\n  data: TimeSeries[];\n  hiddenSeries: Set<string>;\n  onToggleSeries?: (series: TimeSeries, exclusive: boolean) => void;\n}\n\ninterface LegendItemProps {\n  hidden: boolean;\n  onClickLabel?: (series: TimeSeries, event: MouseEvent) => void;\n  series: TimeSeries;\n}\n\nclass LegendItem extends PureComponent<LegendItemProps> {\n  onClickLabel = e => this.props.onClickLabel(this.props.series, e);\n\n  render() {\n    const { hidden, series } = this.props;\n    const seriesClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n    });\n    return (\n      <div className={`graph-legend-series ${seriesClasses}`}>\n        <div className=\"graph-legend-icon\">\n          <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\n        </div>\n        <a className=\"graph-legend-alias pointer\" title={series.alias} onClick={this.onClickLabel}>\n          {series.alias}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default class Legend extends PureComponent<LegendProps> {\n  static defaultProps = {\n    onToggleSeries: () => {},\n  };\n\n  onClickLabel = (series: TimeSeries, event: MouseEvent) => {\n    const { onToggleSeries } = this.props;\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\n    onToggleSeries(series, !exclusive);\n  };\n\n  render() {\n    const { data, hiddenSeries } = this.props;\n    const items = data || [];\n    return (\n      <div className=\"graph-legend ps\">\n        {items.map((series, i) => (\n          <LegendItem\n            hidden={hiddenSeries.has(series.alias)}\n            // Workaround to resolve conflicts since series visibility tracks the alias property\n            key={`${series.id}-${i}`}\n            onClickLabel={this.onClickLabel}\n            series={series}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.stack';\n\nimport { RawTimeRange } from '@grafana/ui';\nimport * as dateMath from 'app/core/utils/datemath';\nimport TimeSeries from 'app/core/time_series2';\n\nimport Legend from './Legend';\nimport { equal, intersect } from './utils/set';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\n// Copied from graph.ts\nfunction time_format(ticks, min, max) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return '%H:%M:%S';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return '%H:%M';\n    }\n    if (secPerTick <= 80000) {\n      return '%m/%d %H:%M';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return '%m/%d';\n    }\n    return '%Y-%m';\n  }\n\n  return '%H:%M';\n}\n\nconst FLOT_OPTIONS = {\n  legend: {\n    show: false,\n  },\n  series: {\n    lines: {\n      linewidth: 1,\n      zero: false,\n    },\n    shadowSize: 0,\n  },\n  grid: {\n    minBorderMargin: 0,\n    markings: [],\n    backgroundColor: null,\n    borderWidth: 0,\n    // hoverable: true,\n    clickable: true,\n    color: '#a1a1a1',\n    margin: { left: 0, right: 0 },\n    labelMarginX: 0,\n  },\n  selection: {\n    mode: 'x',\n    color: '#666',\n  },\n  // crosshair: {\n  //   mode: 'x',\n  // },\n};\n\ninterface GraphProps {\n  data: any[];\n  height?: number;\n  width?: number;\n  id?: string;\n  range: RawTimeRange;\n  split?: boolean;\n  userOptions?: any;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onToggleSeries?: (alias: string, hiddenSeries: Set<string>) => void;\n}\n\ninterface GraphState {\n  /**\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\n   * Consequently, all series sharing the same alias will share visibility state.\n   */\n  hiddenSeries: Set<string>;\n  showAllTimeSeries: boolean;\n}\n\nexport class Graph extends PureComponent<GraphProps, GraphState> {\n  $el: any;\n  dynamicOptions = null;\n\n  state = {\n    hiddenSeries: new Set(),\n    showAllTimeSeries: false,\n  };\n\n  getGraphData() {\n    const { data } = this.props;\n\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  }\n\n  componentDidMount() {\n    this.draw();\n    this.$el = $(`#${this.props.id}`);\n    this.$el.bind('plotselected', this.onPlotSelected);\n  }\n\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.range !== this.props.range ||\n      prevProps.split !== this.props.split ||\n      prevProps.height !== this.props.height ||\n      prevProps.width !== this.props.width ||\n      !equal(prevState.hiddenSeries, this.state.hiddenSeries)\n    ) {\n      this.draw();\n    }\n  }\n\n  componentWillUnmount() {\n    this.$el.unbind('plotselected', this.onPlotSelected);\n  }\n\n  onPlotSelected = (event, ranges) => {\n    if (this.props.onChangeTime) {\n      const range = {\n        from: moment(ranges.xaxis.from),\n        to: moment(ranges.xaxis.to),\n      };\n      this.props.onChangeTime(range);\n    }\n  };\n\n  getDynamicOptions() {\n    const { range, width } = this.props;\n    const ticks = (width || 0) / 100;\n    let { from, to } = range;\n    if (!moment.isMoment(from)) {\n      from = dateMath.parse(from, false);\n    }\n    if (!moment.isMoment(to)) {\n      to = dateMath.parse(to, true);\n    }\n    const min = from.valueOf();\n    const max = to.valueOf();\n    return {\n      xaxis: {\n        mode: 'time',\n        min: min,\n        max: max,\n        label: 'Datetime',\n        ticks: ticks,\n        timezone: 'browser',\n        timeformat: time_format(ticks, min, max),\n      },\n    };\n  }\n\n  onShowAllTimeSeries = () => {\n    this.setState(\n      {\n        showAllTimeSeries: true,\n      },\n      this.draw\n    );\n  };\n\n  onToggleSeries = (series: TimeSeries, exclusive: boolean) => {\n    this.setState((state, props) => {\n      const { data, onToggleSeries } = props;\n      const { hiddenSeries } = state;\n\n      // Deduplicate series as visibility tracks the alias property\n      const oneSeriesVisible = hiddenSeries.size === new Set(data.map(d => d.alias)).size - 1;\n\n      let nextHiddenSeries = new Set();\n      if (exclusive) {\n        if (hiddenSeries.has(series.alias) || !oneSeriesVisible) {\n          nextHiddenSeries = new Set(data.filter(d => d.alias !== series.alias).map(d => d.alias));\n        }\n      } else {\n        // Prune hidden series no longer part of those available from the most recent query\n        const availableSeries = new Set(data.map(d => d.alias));\n        nextHiddenSeries = intersect(new Set(hiddenSeries), availableSeries);\n        if (nextHiddenSeries.has(series.alias)) {\n          nextHiddenSeries.delete(series.alias);\n        } else {\n          nextHiddenSeries.add(series.alias);\n        }\n      }\n      if (onToggleSeries) {\n        onToggleSeries(series.alias, nextHiddenSeries);\n      }\n      return {\n        hiddenSeries: nextHiddenSeries,\n      };\n    }, this.draw);\n  };\n\n  draw() {\n    const { userOptions = {} } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    const $el = $(`#${this.props.id}`);\n    let series = [{ data: [[0, 0]] }];\n\n    if (data && data.length > 0) {\n      series = data\n        .filter((ts: TimeSeries) => !hiddenSeries.has(ts.alias))\n        .map((ts: TimeSeries) => ({\n          color: ts.color,\n          label: ts.label,\n          data: ts.getFlotPairs('null'),\n        }));\n    }\n\n    this.dynamicOptions = this.getDynamicOptions();\n\n    const options = {\n      ...FLOT_OPTIONS,\n      ...this.dynamicOptions,\n      ...userOptions,\n    };\n\n    $.plot($el, series, options);\n  }\n\n  render() {\n    const { height = 100, id = 'graph' } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    return (\n      <>\n        {this.props.data && this.props.data.length > MAX_NUMBER_OF_TIME_SERIES && !this.state.showAllTimeSeries && (\n          <div className=\"time-series-disclaimer\">\n            <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n            <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\n              this.props.data.length\n            }`}</span>\n          </div>\n        )}\n        <div id={id} className=\"explore-graph\" style={{ height }} />\n        <Legend data={data} hiddenSeries={hiddenSeries} onToggleSeries={this.onToggleSeries} />\n      </>\n    );\n  }\n}\n\nexport default Graph;\n","/**\n * Performs a shallow comparison of two sets with the same item type.\n */\nexport function equal<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n  const it = a.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return true;\n    }\n    if (!b.has(value)) {\n      return false;\n    }\n  }\n}\n\n/**\n * Returns a new set with items in both sets using shallow comparison.\n */\nexport function intersect<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const result = new Set<T>();\n  const it = b.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return result;\n    }\n    if (a.has(value)) {\n      result.add(value);\n    }\n  }\n}\n","// Libraries\nimport React, { ComponentClass } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { AutoSizer } from 'react-virtualized';\n\n// Services & Utils\nimport store from 'app/core/store';\n\n// Components\nimport { Alert } from './Error';\nimport ErrorBoundary from './ErrorBoundary';\nimport GraphContainer from './GraphContainer';\nimport LogsContainer from './LogsContainer';\nimport QueryRows from './QueryRows';\nimport TableContainer from './TableContainer';\nimport TimePicker, { parseTime } from './TimePicker';\n\n// Actions\nimport { changeSize, changeTime, initializeExplore, modifyQueries, scanStart, setQueries } from './state/actions';\n\n// Types\nimport { RawTimeRange, TimeRange, DataQuery, ExploreStartPageProps, ExploreDataSourceApi } from '@grafana/ui';\nimport { ExploreItemState, ExploreUrlState, RangeScanner, ExploreId } from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport { LAST_USED_DATASOURCE_KEY, ensureQueries, DEFAULT_RANGE, DEFAULT_UI_STATE } from 'app/core/utils/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport { scanStopAction } from './state/actionTypes';\n\ninterface ExploreProps {\n  StartPage?: ComponentClass<ExploreStartPageProps>;\n  changeSize: typeof changeSize;\n  changeTime: typeof changeTime;\n  datasourceError: string;\n  datasourceInstance: ExploreDataSourceApi;\n  datasourceLoading: boolean | null;\n  datasourceMissing: boolean;\n  exploreId: ExploreId;\n  initializeExplore: typeof initializeExplore;\n  initialized: boolean;\n  modifyQueries: typeof modifyQueries;\n  range: RawTimeRange;\n  scanner?: RangeScanner;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  scanStart: typeof scanStart;\n  scanStopAction: typeof scanStopAction;\n  setQueries: typeof setQueries;\n  split: boolean;\n  showingStartPage?: boolean;\n  supportsGraph: boolean | null;\n  supportsLogs: boolean | null;\n  supportsTable: boolean | null;\n  urlState: ExploreUrlState;\n  queryKeys: string[];\n}\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<ExploreProps> {\n  el: any;\n  exploreEvents: Emitter;\n  /**\n   * Timepicker to control scanning\n   */\n  timepickerRef: React.RefObject<TimePicker>;\n\n  constructor(props) {\n    super(props);\n    this.exploreEvents = new Emitter();\n    this.timepickerRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    const { exploreId, initialized, urlState } = this.props;\n    // Don't initialize on split, but need to initialize urlparameters when present\n    if (!initialized) {\n      // Load URL state and parse range\n      const { datasource, queries, range = DEFAULT_RANGE, ui = DEFAULT_UI_STATE } = (urlState || {}) as ExploreUrlState;\n      const initialDatasource = datasource || store.get(LAST_USED_DATASOURCE_KEY);\n      const initialQueries: DataQuery[] = ensureQueries(queries);\n      const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\n      const width = this.el ? this.el.offsetWidth : 0;\n\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        width,\n        this.exploreEvents,\n        ui\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n  }\n\n  getRef = el => {\n    this.el = el;\n  };\n\n  onChangeTime = (range: TimeRange, changedByScanner?: boolean) => {\n    if (this.props.scanning && !changedByScanner) {\n      this.onStopScanning();\n    }\n    this.props.changeTime(this.props.exploreId, range);\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onClickLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onModifyQueries = (action, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    const scanner = this.scanPreviousRange;\n    this.props.scanStart(this.props.exploreId, scanner);\n  };\n\n  scanPreviousRange = (): RawTimeRange => {\n    // Calling move() on the timepicker will trigger this.onChangeTime()\n    return this.timepickerRef.current.move(-1, true);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  render() {\n    const {\n      StartPage,\n      datasourceInstance,\n      datasourceError,\n      datasourceLoading,\n      datasourceMissing,\n      exploreId,\n      showingStartPage,\n      split,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n      queryKeys,\n    } = this.props;\n    const exploreClass = split ? 'explore explore-split' : 'explore';\n\n    return (\n      <div className={exploreClass} ref={this.getRef}>\n        <ExploreToolbar exploreId={exploreId} timepickerRef={this.timepickerRef} onChangeTime={this.onChangeTime} />\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\n        {datasourceMissing ? (\n          <div className=\"explore-container\">Please add a datasource that supports Explore (e.g., Prometheus).</div>\n        ) : null}\n\n        {datasourceError && (\n          <div className=\"explore-container\">\n            <Alert message={`Error connecting to datasource: ${datasourceError}`} />\n          </div>\n        )}\n\n        {datasourceInstance && !datasourceError && (\n          <div className=\"explore-container\">\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\n            <AutoSizer onResize={this.onResize} disableHeight>\n              {({ width }) => {\n                if (width === 0) {\n                  return null;\n                }\n\n                return (\n                  <main className=\"m-t-2\" style={{ width }}>\n                    <ErrorBoundary>\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\n                      {!showingStartPage && (\n                        <>\n                          {supportsGraph && !supportsLogs && <GraphContainer width={width} exploreId={exploreId} />}\n                          {supportsTable && <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />}\n                          {supportsLogs && (\n                            <LogsContainer\n                              width={width}\n                              exploreId={exploreId}\n                              onChangeTime={this.onChangeTime}\n                              onClickLabel={this.onClickLabel}\n                              onStartScanning={this.onStartScanning}\n                              onStopScanning={this.onStopScanning}\n                            />\n                          )}\n                        </>\n                      )}\n                    </ErrorBoundary>\n                  </main>\n                );\n              }}\n            </AutoSizer>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    range,\n    showingStartPage,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n  } = item;\n  return {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    range,\n    showingStartPage,\n    split,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSize,\n  changeTime,\n  initializeExplore,\n  modifyQueries,\n  scanStart,\n  scanStopAction,\n  setQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Explore)\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  message: any;\n}\n\nexport const Alert: FC<Props> = props => {\n  const { message } = props;\n  return (\n    <div className=\"gf-form-group section\">\n      <div className=\"alert-error alert\">\n        <div className=\"alert-icon\">\n          <i className=\"fa fa-exclamation-triangle\" />\n        </div>\n        <div className=\"alert-body\">\n          <div className=\"alert-title\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { TimeRange, RawTimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleGraph, changeTime } from './state/actions';\nimport Graph from './Graph';\nimport Panel from './Panel';\n\ninterface GraphContainerProps {\n  exploreId: ExploreId;\n  graphResult?: any[];\n  loading: boolean;\n  range: RawTimeRange;\n  showingGraph: boolean;\n  showingTable: boolean;\n  split: boolean;\n  toggleGraph: typeof toggleGraph;\n  changeTime: typeof changeTime;\n  width: number;\n}\n\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\n  onClickGraphButton = () => {\n    this.props.toggleGraph(this.props.exploreId, this.props.showingGraph);\n  };\n\n  onChangeTime = (timeRange: TimeRange) => {\n    this.props.changeTime(this.props.exploreId, timeRange);\n  };\n\n  render() {\n    const { exploreId, graphResult, loading, showingGraph, showingTable, range, split, width } = this.props;\n    const graphHeight = showingGraph && showingTable ? 200 : 400;\n\n    if (!graphResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Graph\" isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\n        <Graph\n          data={graphResult}\n          height={graphHeight}\n          id={`explore-graph-${exploreId}`}\n          onChangeTime={this.onChangeTime}\n          range={range}\n          split={split}\n          width={width}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { graphResult, queryTransactions, range, showingGraph, showingTable } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\n  return { graphResult, loading, range, showingGraph, showingTable, split };\n}\n\nconst mapDispatchToProps = {\n  toggleGraph,\n  changeTime,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GraphContainer)\n);\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { LogsModel, LogsDedupStrategy, LogLevel } from 'app/core/logs_model';\nimport { StoreState } from 'app/types';\n\nimport { toggleLogs, changeDedupStrategy } from './state/actions';\nimport Logs from './Logs';\nimport Panel from './Panel';\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\nimport { deduplicatedLogsSelector, exploreItemUIStateSelector } from 'app/features/explore/state/selectors';\n\ninterface LogsContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  logsHighlighterExpressions?: string[];\n  logsResult?: LogsModel;\n  dedupedResult?: LogsModel;\n  onChangeTime: (range: TimeRange) => void;\n  onClickLabel: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  range: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  showingLogs: boolean;\n  toggleLogs: typeof toggleLogs;\n  toggleLogLevelAction: typeof toggleLogLevelAction;\n  changeDedupStrategy: typeof changeDedupStrategy;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  width: number;\n}\n\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\n  onClickLogsButton = () => {\n    this.props.toggleLogs(this.props.exploreId, this.props.showingLogs);\n  };\n\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\n  };\n\n  hangleToggleLogLevel = (hiddenLogLevels: Set<LogLevel>) => {\n    const { exploreId } = this.props;\n    this.props.toggleLogLevelAction({\n      exploreId,\n      hiddenLogLevels,\n    });\n  };\n\n  render() {\n    const {\n      exploreId,\n      loading,\n      logsHighlighterExpressions,\n      logsResult,\n      dedupedResult,\n      onChangeTime,\n      onClickLabel,\n      onStartScanning,\n      onStopScanning,\n      range,\n      showingLogs,\n      scanning,\n      scanRange,\n      width,\n      hiddenLogLevels,\n    } = this.props;\n\n    return (\n      <Panel label=\"Logs\" loading={loading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\n        <Logs\n          dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\n          data={logsResult}\n          dedupedData={dedupedResult}\n          exploreId={exploreId}\n          key={logsResult && logsResult.id}\n          highlighterExpressions={logsHighlighterExpressions}\n          loading={loading}\n          onChangeTime={onChangeTime}\n          onClickLabel={onClickLabel}\n          onStartScanning={onStartScanning}\n          onStopScanning={onStopScanning}\n          onDedupStrategyChange={this.handleDedupStrategyChange}\n          onToggleLogLevel={this.hangleToggleLogLevel}\n          range={range}\n          scanning={scanning}\n          scanRange={scanRange}\n          width={width}\n          hiddenLogLevels={hiddenLogLevels}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { logsHighlighterExpressions, logsResult, queryTransactions, scanning, scanRange, range } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\n  const { showingLogs, dedupStrategy } = exploreItemUIStateSelector(item);\n  const hiddenLogLevels = new Set(item.hiddenLogLevels);\n  const dedupedResult = deduplicatedLogsSelector(item);\n\n  return {\n    loading,\n    logsHighlighterExpressions,\n    logsResult,\n    scanning,\n    scanRange,\n    showingLogs,\n    range,\n    dedupStrategy,\n    hiddenLogLevels,\n    dedupedResult,\n  };\n}\n\nconst mapDispatchToProps = {\n  toggleLogs,\n  changeDedupStrategy,\n  toggleLogLevelAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(LogsContainer)\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport QueryRow from './QueryRow';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreId } from 'app/types/explore';\n\ninterface QueryRowsProps {\n  className?: string;\n  exploreEvents: Emitter;\n  exploreId: ExploreId;\n  queryKeys: string[];\n}\n\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\n  render() {\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\n    return (\n      <div className={className}>\n        {queryKeys.map((key, index) => {\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\n        })}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport QueryEditor from './QueryEditor';\nimport QueryTransactionStatus from './QueryTransactionStatus';\n\n// Actions\nimport { changeQuery, modifyQueries, runQueries, addQueryRow } from './state/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { RawTimeRange, DataQuery, ExploreDataSourceApi, QueryHint, QueryFixAction } from '@grafana/ui';\nimport { QueryTransaction, HistoryItem, ExploreItemState, ExploreId } from 'app/types/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\n\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\n  if (transaction) {\n    return transaction.hints[0];\n  }\n  return undefined;\n}\n\ninterface QueryRowProps {\n  addQueryRow: typeof addQueryRow;\n  changeQuery: typeof changeQuery;\n  className?: string;\n  exploreId: ExploreId;\n  datasourceInstance: ExploreDataSourceApi;\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\n  history: HistoryItem[];\n  index: number;\n  query: DataQuery;\n  modifyQueries: typeof modifyQueries;\n  queryTransactions: QueryTransaction[];\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n  removeQueryRowAction: typeof removeQueryRowAction;\n  runQueries: typeof runQueries;\n}\n\nexport class QueryRow extends PureComponent<QueryRowProps> {\n  onExecuteQuery = () => {\n    const { exploreId } = this.props;\n    this.props.runQueries(exploreId);\n  };\n\n  onChangeQuery = (query: DataQuery, override?: boolean) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    this.props.changeQuery(exploreId, query, index, override);\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\n      // Live preview of log search matches. Only use on first row for now\n      this.updateLogsHighlights(query);\n    }\n  };\n\n  componentWillUnmount() {\n    console.log('QueryRow will unmount');\n  }\n\n  onClickAddButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.addQueryRow(exploreId, index);\n  };\n\n  onClickClearButton = () => {\n    this.onChangeQuery(null, true);\n  };\n\n  onClickHintFix = (action: QueryFixAction) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, action: QueryFixAction) => datasourceInstance.modifyQuery(queries, action);\n      this.props.modifyQueries(exploreId, action, index, modifier);\n    }\n  };\n\n  onClickRemoveButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.removeQueryRowAction({ exploreId, index });\n  };\n\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance.getHighlighterExpression) {\n      const { exploreId } = this.props;\n      const expressions = [datasourceInstance.getHighlighterExpression(value)];\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\n    }\n  }, 500);\n\n  render() {\n    const { datasourceInstance, history, index, query, queryTransactions, exploreEvents, range } = this.props;\n    const transactions = queryTransactions.filter(t => t.rowIndex === index);\n    const transactionWithError = transactions.find(t => t.error !== undefined);\n    const hint = getFirstHintFromTransactions(transactions);\n    const queryError = transactionWithError ? transactionWithError.error : null;\n    const QueryField = datasourceInstance.pluginExports.ExploreQueryField;\n    return (\n      <div className=\"query-row\">\n        <div className=\"query-row-status\">\n          <QueryTransactionStatus transactions={transactions} />\n        </div>\n        <div className=\"query-row-field flex-shrink-1\">\n          {QueryField ? (\n            <QueryField\n              datasource={datasourceInstance}\n              query={query}\n              error={queryError}\n              hint={hint}\n              history={history}\n              onExecuteQuery={this.onExecuteQuery}\n              onExecuteHint={this.onClickHintFix}\n              onQueryChange={this.onChangeQuery}\n            />\n          ) : (\n            <QueryEditor\n              datasource={datasourceInstance}\n              error={queryError}\n              onQueryChange={this.onChangeQuery}\n              onExecuteQuery={this.onExecuteQuery}\n              initialQuery={query}\n              exploreEvents={exploreEvents}\n              range={range}\n            />\n          )}\n        </div>\n        <div className=\"gf-form-inline flex-shrink-0\">\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickClearButton}>\n              <i className=\"fa fa-times\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickAddButton}>\n              <i className=\"fa fa-plus\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickRemoveButton}>\n              <i className=\"fa fa-minus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId, index }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { datasourceInstance, history, queries, queryTransactions, range } = item;\n  const query = queries[index];\n  return { datasourceInstance, history, query, queryTransactions, range };\n}\n\nconst mapDispatchToProps = {\n  addQueryRow,\n  changeQuery,\n  highlightLogsExpressionAction,\n  modifyQueries,\n  removeQueryRowAction,\n  runQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QueryRow)\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Services\nimport { getAngularLoader, AngularComponent } from 'app/core/services/AngularLoader';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { RawTimeRange, DataQuery } from '@grafana/ui';\nimport 'app/features/plugins/plugin_loader';\n\ninterface QueryEditorProps {\n  datasource: any;\n  error?: string | JSX.Element;\n  onExecuteQuery?: () => void;\n  onQueryChange?: (value: DataQuery) => void;\n  initialQuery: DataQuery;\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n}\n\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\n  element: any;\n  component: AngularComponent;\n\n  async componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\n    this.initTimeSrv(range);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\n    const target = { datasource: datasource.name, ...initialQuery };\n    const scopeProps = {\n      ctrl: {\n        datasource,\n        target,\n        refresh: () => {\n          this.props.onQueryChange(target);\n          this.props.onExecuteQuery();\n        },\n        events: exploreEvents,\n        panel: { datasource, targets: [target] },\n        dashboard: {},\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n    this.props.onQueryChange(target);\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  initTimeSrv(range) {\n    const timeSrv = getTimeSrv();\n    timeSrv.init({\n      time: range,\n      refresh: false,\n      getTimezone: () => 'utc',\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\n    });\n  }\n\n  render() {\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleTable } from './state/actions';\nimport Table from './Table';\nimport Panel from './Panel';\nimport TableModel from 'app/core/table_model';\n\ninterface TableContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  onClickCell: (key: string, value: string) => void;\n  showingTable: boolean;\n  tableResult?: TableModel;\n  toggleTable: typeof toggleTable;\n}\n\nexport class TableContainer extends PureComponent<TableContainerProps> {\n  onClickTableButton = () => {\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\n  };\n\n  render() {\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\n\n    if (!tableResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Table\" loading={loading} isOpen={showingTable} onToggle={this.onClickTableButton}>\n        <Table data={tableResult} loading={loading} onClickCell={onClickCell} />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { queryTransactions, showingTable, tableResult } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\n  return { loading, showingTable, tableResult };\n}\n\nconst mapDispatchToProps = {\n  toggleTable,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TableContainer)\n);\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport ReactTable from 'react-table';\n\nimport TableModel from 'app/core/table_model';\n\nconst EMPTY_TABLE = new TableModel();\n// Identify columns that contain values\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\n\ninterface TableProps {\n  data: TableModel;\n  loading: boolean;\n  onClickCell?: (columnKey: string, rowValue: string) => void;\n}\n\nfunction prepareRows(rows, columnNames) {\n  return rows.map(cells => _.zipObject(columnNames, cells));\n}\n\nexport default class Table extends PureComponent<TableProps> {\n  getCellProps = (state, rowInfo, column) => {\n    return {\n      onClick: (e: React.SyntheticEvent) => {\n        // Only handle click on link, not the cell\n        if (e.target) {\n          const link = e.target as HTMLElement;\n          if (link.className === 'link') {\n            const columnKey = column.Header;\n            const rowValue = rowInfo.row[columnKey];\n            this.props.onClickCell(columnKey, rowValue);\n          }\n        }\n      },\n    };\n  };\n\n  render() {\n    const { data, loading } = this.props;\n    const tableModel = data || EMPTY_TABLE;\n    const columnNames = tableModel.columns.map(({ text }) => text);\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\n      Header: text,\n      accessor: text,\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\n      show: text !== 'Time',\n      Cell: row => <span className={filterable ? 'link' : ''}>{row.value}</span>,\n    }));\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\n\n    return (\n      <ReactTable\n        columns={columns}\n        data={tableModel.rows}\n        getTdProps={this.getCellProps}\n        loading={loading}\n        minRows={0}\n        noDataText={noDataText}\n        resolveData={data => prepareRows(data, columnNames)}\n        showPagination={Boolean(data)}\n      />\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\nimport { ExploreId } from 'app/types/explore';\nimport { DataSourceSelectItem, RawTimeRange, TimeRange } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { StoreState } from 'app/types/store';\nimport { changeDatasource, clearQueries, splitClose, runQueries, splitOpen } from './state/actions';\nimport TimePicker from './TimePicker';\nimport { ClickOutsideWrapper } from 'app/core/components/ClickOutsideWrapper/ClickOutsideWrapper';\n\nenum IconSide {\n  left = 'left',\n  right = 'right',\n}\n\nconst createResponsiveButton = (options: {\n  splitted: boolean;\n  title: string;\n  onClick: () => void;\n  buttonClassName?: string;\n  iconClassName?: string;\n  iconSide?: IconSide;\n}) => {\n  const defaultOptions = {\n    iconSide: IconSide.left,\n  };\n  const props = { ...options, defaultOptions };\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide } = props;\n\n  return (\n    <button className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`} onClick={onClick}>\n      {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName} icon-margin-right`} /> : null}\n      <span className=\"btn-title\">{!splitted ? title : ''}</span>\n      {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName} icon-margin-left`} /> : null}\n    </button>\n  );\n};\n\ninterface OwnProps {\n  exploreId: ExploreId;\n  timepickerRef: React.RefObject<TimePicker>;\n  onChangeTime: (range: TimeRange, changedByScanner?: boolean) => void;\n}\n\ninterface StateProps {\n  datasourceMissing: boolean;\n  exploreDatasources: DataSourceSelectItem[];\n  loading: boolean;\n  range: RawTimeRange;\n  selectedDatasource: DataSourceSelectItem;\n  splitted: boolean;\n}\n\ninterface DispatchProps {\n  changeDatasource: typeof changeDatasource;\n  clearAll: typeof clearQueries;\n  runQuery: typeof runQueries;\n  closeSplit: typeof splitClose;\n  split: typeof splitOpen;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport class UnConnectedExploreToolbar extends PureComponent<Props, {}> {\n  constructor(props) {\n    super(props);\n  }\n\n  onChangeDatasource = async option => {\n    this.props.changeDatasource(this.props.exploreId, option.value);\n  };\n\n  onClearAll = () => {\n    this.props.clearAll(this.props.exploreId);\n  };\n\n  onRunQuery = () => {\n    this.props.runQuery(this.props.exploreId);\n  };\n\n  onCloseTimePicker = () => {\n    this.props.timepickerRef.current.setState({ isOpen: false });\n  };\n\n  render() {\n    const {\n      datasourceMissing,\n      exploreDatasources,\n      exploreId,\n      loading,\n      range,\n      selectedDatasource,\n      splitted,\n      timepickerRef,\n    } = this.props;\n\n    return (\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-header\">\n            <div className=\"explore-toolbar-header-title\">\n              {exploreId === 'left' && (\n                <span className=\"navbar-page-btn\">\n                  <i className=\"gicon gicon-explore\" />\n                  Explore\n                </span>\n              )}\n            </div>\n            {exploreId === 'right' && (\n              <a className=\"explore-toolbar-header-close\" onClick={this.props.closeSplit}>\n                <i className=\"fa fa-times fa-fw\" />\n              </a>\n            )}\n          </div>\n        </div>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-content\">\n            {!datasourceMissing ? (\n              <div className=\"explore-toolbar-content-item\">\n                <div className=\"datasource-picker\">\n                  <DataSourcePicker\n                    onChange={this.onChangeDatasource}\n                    datasources={exploreDatasources}\n                    current={selectedDatasource}\n                  />\n                </div>\n              </div>\n            ) : null}\n            {exploreId === 'left' && !splitted ? (\n              <div className=\"explore-toolbar-content-item\">\n                {createResponsiveButton({\n                  splitted,\n                  title: 'Split',\n                  onClick: this.props.split,\n                  iconClassName: 'fa fa-fw fa-columns icon-margin-right',\n                  iconSide: IconSide.left,\n                })}\n              </div>\n            ) : null}\n            <div className=\"explore-toolbar-content-item timepicker\">\n              <ClickOutsideWrapper onClick={this.onCloseTimePicker}>\n                <TimePicker ref={timepickerRef} range={range} onChangeTime={this.props.onChangeTime} />\n              </ClickOutsideWrapper>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              <button className=\"btn navbar-button navbar-button--no-icon\" onClick={this.onClearAll}>\n                Clear All\n              </button>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              {createResponsiveButton({\n                splitted,\n                title: 'Run Query',\n                onClick: this.onRunQuery,\n                buttonClassName: 'navbar-button--secondary',\n                iconClassName: loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-level-down fa-fw run-icon',\n                iconSide: IconSide.right,\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\n  const splitted = state.explore.split;\n  const exploreItem = state.explore[exploreId];\n  const { datasourceInstance, datasourceMissing, exploreDatasources, queryTransactions, range } = exploreItem;\n  const selectedDatasource = datasourceInstance\n    ? exploreDatasources.find(datasource => datasource.name === datasourceInstance.name)\n    : undefined;\n  const loading = queryTransactions.some(qt => !qt.done);\n\n  return {\n    datasourceMissing,\n    exploreDatasources,\n    loading,\n    range,\n    selectedDatasource,\n    splitted,\n  };\n};\n\nconst mapDispatchToProps: DispatchProps = {\n  changeDatasource,\n  clearAll: clearQueries,\n  runQuery: runQueries,\n  closeSplit: splitClose,\n  split: splitOpen,\n};\n\nexport const ExploreToolbar = hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(UnConnectedExploreToolbar)\n);\n","import React, { FC, ReactNode, PureComponent } from 'react';\nimport { Tooltip } from '@grafana/ui';\n\ninterface ToggleButtonGroupProps {\n  label?: string;\n  children: JSX.Element[];\n  transparent?: boolean;\n}\n\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\n  render() {\n    const { children, label, transparent } = this.props;\n\n    return (\n      <div className=\"gf-form\">\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\n      </div>\n    );\n  }\n}\n\ninterface ToggleButtonProps {\n  onChange?: (value) => void;\n  selected?: boolean;\n  value: any;\n  className?: string;\n  children: ReactNode;\n  tooltip?: string;\n}\n\nexport const ToggleButton: FC<ToggleButtonProps> = ({\n  children,\n  selected,\n  className = '',\n  value = null,\n  tooltip,\n  onChange,\n}) => {\n  const handleChange = event => {\n    event.stopPropagation();\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\n  const button = (\n    <button className={btnClassName} onClick={handleChange}>\n      <span>{children}</span>\n    </button>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip content={tooltip} placement=\"bottom\">\n        {button}\n      </Tooltip>\n    );\n  } else {\n    return button;\n  }\n};\n","import React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport { LogLabelStatsModel } from 'app/core/logs_model';\n\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\n  const { active, count, proportion, value } = logLabelStatsModel;\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\n\n  return (\n    <div className={className}>\n      <div className=\"logs-stats-row__label\">\n        <div className=\"logs-stats-row__value\">{value}</div>\n        <div className=\"logs-stats-row__count\">{count}</div>\n        <div className=\"logs-stats-row__percent\">{percent}</div>\n      </div>\n      <div className=\"logs-stats-row__bar\">\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nconst STATS_ROW_LIMIT = 5;\n\ninterface Props {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  onClickClose: () => void;\n}\n\nexport class LogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, onClickClose } = this.props;\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find(row => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find(row => row.value === value);\n      otherRows = otherRows.filter(row => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className=\"logs-stats\">\n        <div className=\"logs-stats__header\">\n          <span className=\"logs-stats__title\">\n            {label}: {total} of {rowCount} rows have that label\n          </span>\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\n        </div>\n        <div className=\"logs-stats__body\">\n          {topRows.map(stat => (\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n          ))}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { calculateLogsLabelStats, LogLabelStatsModel, LogRowModel } from 'app/core/logs_model';\nimport { LogLabelStats } from './LogLabelStats';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  label: string;\n  plain?: boolean;\n  value: string;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  showStats: boolean;\n  stats: LogLabelStatsModel[];\n}\n\nexport class LogLabel extends PureComponent<Props, State> {\n  state = {\n    stats: null,\n    showStats: false,\n  };\n\n  onClickClose = () => {\n    this.setState({ showStats: false });\n  };\n\n  onClickLabel = () => {\n    const { onClickLabel, label, value } = this.props;\n    if (onClickLabel) {\n      onClickLabel(label, value);\n    }\n  };\n\n  onClickStats = () => {\n    this.setState(state => {\n      if (state.showStats) {\n        return { showStats: false, stats: null };\n      }\n      const allRows = this.props.getRows();\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\n      return { showStats: true, stats };\n    });\n  };\n\n  render() {\n    const { getRows, label, plain, value } = this.props;\n    const { showStats, stats } = this.state;\n    const tooltip = `${label}: ${value}`;\n    return (\n      <span className=\"logs-label\">\n        <span className=\"logs-label__value\" title={tooltip}>\n          {value}\n        </span>\n        {!plain && (\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\n        )}\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\n        {showStats && (\n          <span className=\"logs-label__stats\">\n            <LogLabelStats\n              stats={stats}\n              rowCount={getRows().length}\n              label={label}\n              value={value}\n              onClickClose={this.onClickClose}\n            />\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { LogsStreamLabels, LogRowModel } from 'app/core/logs_model';\nimport { LogLabel } from './LogLabel';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  labels: LogsStreamLabels;\n  plain?: boolean;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\nexport class LogLabels extends PureComponent<Props> {\n  render() {\n    const { getRows, labels, onClickLabel, plain } = this.props;\n    return Object.keys(labels).map(key => (\n      <LogLabel key={key} getRows={getRows} label={key} value={labels[key]} plain={plain} onClickLabel={onClickLabel} />\n    ));\n  }\n}\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport Highlighter from 'react-highlight-words';\nimport classnames from 'classnames';\n\nimport { LogRowModel, LogLabelStatsModel, LogsParser, calculateFieldStats, getParser } from 'app/core/logs_model';\nimport { LogLabels } from './LogLabels';\nimport { findHighlightChunksInText } from 'app/core/utils/text';\nimport { LogLabelStats } from './LogLabelStats';\n\ninterface Props {\n  highlighterExpressions?: string[];\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean | null; // Tristate: null means auto\n  showLocalTime: boolean;\n  showUtc: boolean;\n  getRows: () => LogRowModel[];\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  fieldCount: number;\n  fieldLabel: string;\n  fieldStats: LogLabelStatsModel[];\n  fieldValue: string;\n  parsed: boolean;\n  parser?: LogsParser;\n  parsedFieldHighlights: string[];\n  showFieldStats: boolean;\n}\n\n/**\n * Renders a highlighted field.\n * When hovering, a stats icon is shown.\n */\nconst FieldHighlight = onClick => props => {\n  return (\n    <span className={props.className} style={props.style}>\n      {props.children}\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\n    </span>\n  );\n};\n\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nexport class LogRow extends PureComponent<Props, State> {\n  mouseMessageTimer: NodeJS.Timer;\n\n  state = {\n    fieldCount: 0,\n    fieldLabel: null,\n    fieldStats: null,\n    fieldValue: null,\n    parsed: false,\n    parser: undefined,\n    parsedFieldHighlights: [],\n    showFieldStats: false,\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseMessageTimer);\n  }\n\n  onClickClose = () => {\n    this.setState({ showFieldStats: false });\n  };\n\n  onClickHighlight = (fieldText: string) => {\n    const { getRows } = this.props;\n    const { parser } = this.state;\n    const allRows = getRows();\n\n    // Build value-agnostic row matcher based on the field label\n    const fieldLabel = parser.getLabelFromField(fieldText);\n    const fieldValue = parser.getValueFromField(fieldText);\n    const matcher = parser.buildMatcher(fieldLabel);\n    const fieldStats = calculateFieldStats(allRows, matcher);\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\n\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\n  };\n\n  onMouseOverMessage = () => {\n    // Don't parse right away, user might move along\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\n  };\n\n  onMouseOutMessage = () => {\n    clearTimeout(this.mouseMessageTimer);\n    this.setState({ parsed: false });\n  };\n\n  parseMessage = () => {\n    if (!this.state.parsed) {\n      const { row } = this.props;\n      const parser = getParser(row.entry);\n      if (parser) {\n        // Use parser to highlight detected fields\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\n      }\n    }\n  };\n\n  render() {\n    const {\n      getRows,\n      highlighterExpressions,\n      onClickLabel,\n      row,\n      showDuplicates,\n      showLabels,\n      showLocalTime,\n      showUtc,\n    } = this.props;\n    const {\n      fieldCount,\n      fieldLabel,\n      fieldStats,\n      fieldValue,\n      parsed,\n      parsedFieldHighlights,\n      showFieldStats,\n    } = this.state;\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\n    const needsHighlighter = highlights && highlights.length > 0;\n    const highlightClassName = classnames('logs-row__match-highlight', {\n      'logs-row__match-highlight--preview': previewHighlights,\n    });\n    return (\n      <div className=\"logs-row\">\n        {showDuplicates && (\n          <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\n        )}\n        <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\n        {showUtc && (\n          <div className=\"logs-row__time\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n            {row.timestamp}\n          </div>\n        )}\n        {showLocalTime && (\n          <div className=\"logs-row__time\" title={`${row.timestamp} (${row.timeFromNow})`}>\n            {row.timeLocal}\n          </div>\n        )}\n        {showLabels && (\n          <div className=\"logs-row__labels\">\n            <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\n          </div>\n        )}\n        <div className=\"logs-row__message\" onMouseEnter={this.onMouseOverMessage} onMouseLeave={this.onMouseOutMessage}>\n          {parsed && (\n            <Highlighter\n              autoEscape\n              highlightTag={FieldHighlight(this.onClickHighlight)}\n              textToHighlight={row.entry}\n              searchWords={parsedFieldHighlights}\n              highlightClassName=\"logs-row__field-highlight\"\n            />\n          )}\n          {!parsed && needsHighlighter && (\n            <Highlighter\n              textToHighlight={row.entry}\n              searchWords={highlights}\n              findChunks={findHighlightChunksInText}\n              highlightClassName={highlightClassName}\n            />\n          )}\n          {!parsed && !needsHighlighter && row.entry}\n          {showFieldStats && (\n            <div className=\"logs-row__stats\">\n              <LogLabelStats\n                stats={fieldStats}\n                label={fieldLabel}\n                value={fieldValue}\n                onClickClose={this.onClickClose}\n                rowCount={fieldCount}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { RawTimeRange, Switch } from '@grafana/ui';\nimport TimeSeries from 'app/core/time_series2';\n\nimport { LogsDedupDescription, LogsDedupStrategy, LogsModel, LogLevel, LogsMetaKind } from 'app/core/logs_model';\n\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\n\nimport Graph from './Graph';\nimport { LogLabels } from './LogLabels';\nimport { LogRow } from './LogRow';\n\nconst PREVIEW_LIMIT = 100;\n\nconst graphOptions = {\n  series: {\n    stack: true,\n    bars: {\n      show: true,\n      lineWidth: 5,\n      // barWidth: 10,\n    },\n    // stack: true,\n  },\n  yaxis: {\n    tickDecimals: 0,\n  },\n};\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} plain />\n      </span>\n    );\n  }\n  return value;\n}\n\ninterface Props {\n  data?: LogsModel;\n  dedupedData?: LogsModel;\n  width: number;\n  exploreId: string;\n  highlighterExpressions: string[];\n  loading: boolean;\n  range?: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onClickLabel?: (label: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\n  onToggleLogLevel: (hiddenLogLevels: Set<LogLevel>) => void;\n}\n\ninterface State {\n  deferLogs: boolean;\n  renderAll: boolean;\n  showLabels: boolean | null; // Tristate: null means auto\n  showLocalTime: boolean;\n  showUtc: boolean;\n}\n\nexport default class Logs extends PureComponent<Props, State> {\n  deferLogsTimer: NodeJS.Timer;\n  renderAllTimer: NodeJS.Timer;\n\n  state = {\n    deferLogs: true,\n    renderAll: false,\n    showLabels: null,\n    showLocalTime: true,\n    showUtc: false,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    if (this.state.deferLogs) {\n      const { data } = this.props;\n      const rowCount = data && data.rows ? data.rows.length : 0;\n      // Render all right away if not too far over the limit\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Staged rendering\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.deferLogsTimer);\n    clearTimeout(this.renderAllTimer);\n  }\n\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\n    const { onDedupStrategyChange } = this.props;\n    if (this.props.dedupStrategy === dedup) {\n      return onDedupStrategyChange(LogsDedupStrategy.none);\n    }\n    return onDedupStrategyChange(dedup);\n  };\n\n  onChangeLabels = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLabels: target.checked,\n    });\n  };\n\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLocalTime: target.checked,\n    });\n  };\n\n  onChangeUtc = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showUtc: target.checked,\n    });\n  };\n\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: Set<string>) => {\n    const hiddenLogLevels: Set<LogLevel> = new Set(Array.from(hiddenRawLevels).map(level => LogLevel[level]));\n    this.props.onToggleLogLevel(hiddenLogLevels);\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStartScanning();\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStopScanning();\n  };\n\n  render() {\n    const {\n      data,\n      exploreId,\n      highlighterExpressions,\n      loading = false,\n      onClickLabel,\n      range,\n      scanning,\n      scanRange,\n      width,\n      dedupedData,\n    } = this.props;\n\n    if (!data) {\n      return null;\n    }\n\n    const { deferLogs, renderAll, showLocalTime, showUtc } = this.state;\n    let { showLabels } = this.state;\n    const { dedupStrategy } = this.props;\n    const hasData = data && data.rows && data.rows.length > 0;\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none;\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\n    const meta = [...data.meta];\n\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      meta.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    // Staged rendering\n    const processedRows = dedupedData.rows;\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\n\n    // Check for labels\n    if (showLabels === null) {\n      if (hasData) {\n        showLabels = data.rows.some(row => _.size(row.uniqueLabels) > 0);\n      } else {\n        showLabels = true;\n      }\n    }\n\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = () => processedRows;\n    const timeSeries = data.series.map(series => new TimeSeries(series));\n\n    return (\n      <div className=\"logs-panel\">\n        <div className=\"logs-panel-graph\">\n          <Graph\n            data={timeSeries}\n            height={100}\n            width={width}\n            range={range}\n            id={`explore-logs-graph-${exploreId}`}\n            onChangeTime={this.props.onChangeTime}\n            onToggleSeries={this.onToggleLogLevel}\n            userOptions={graphOptions}\n          />\n        </div>\n        <div className=\"logs-panel-options\">\n          <div className=\"logs-panel-controls\">\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} transparent />\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} transparent />\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\n                <ToggleButton\n                  key={i}\n                  value={dedupType}\n                  onChange={this.onChangeDedup}\n                  selected={dedupStrategy === dedupType}\n                  tooltip={LogsDedupDescription[dedupType]}\n                >\n                  {dedupType}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        </div>\n\n        {hasData && meta && (\n          <div className=\"logs-panel-meta\">\n            {meta.map(item => (\n              <div className=\"logs-panel-meta__item\" key={item.label}>\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"logs-rows\">\n          {hasData &&\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\n            firstRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                highlighterExpressions={highlighterExpressions}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData &&\n            !deferLogs &&\n            renderAll &&\n            lastRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\n        </div>\n        {!loading && !hasData && !scanning && (\n          <div className=\"logs-panel-nodata\">\n            No logs found.\n            <a className=\"link\" onClick={this.onClickScan}>\n              Scan for older logs\n            </a>\n          </div>\n        )}\n\n        {scanning && (\n          <div className=\"logs-panel-nodata\">\n            <span>{scanText}</span>\n            <a className=\"link\" onClick={this.onClickStopScan}>\n              Stop scan\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { memoize } from 'lodash';\nimport { createSelectorCreator } from 'reselect';\n\nconst hashFn = (...args) => args.reduce((acc, val) => acc + '-' + JSON.stringify(val), '');\nexport const createLodashMemoizedSelector = createSelectorCreator(memoize, hashFn);\n","import { createLodashMemoizedSelector } from 'app/core/utils/reselect';\nimport { ExploreItemState } from 'app/types';\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\n\nexport const exploreItemUIStateSelector = (itemState: ExploreItemState) => {\n  const { showingGraph, showingLogs, showingTable, showingStartPage, dedupStrategy } = itemState;\n  return {\n    showingGraph,\n    showingLogs,\n    showingTable,\n    showingStartPage,\n    dedupStrategy,\n  };\n};\n\nconst logsSelector = (state: ExploreItemState) => state.logsResult;\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\nexport const deduplicatedLogsSelector = createLodashMemoizedSelector(\n  logsSelector,\n  hiddenLogLevelsSelector,\n  dedupStrategySelector,\n  (logs, hiddenLogLevels, dedupStrategy) => {\n    if (!logs) {\n      return null;\n    }\n    const filteredData = filterLogLevels(logs, new Set(hiddenLogLevels));\n    return dedupLogRows(filteredData, dedupStrategy);\n  }\n);\n","import React, { PureComponent } from 'react';\n\nconst INTERVAL = 150;\n\nexport default class ElapsedTime extends PureComponent<any, any> {\n  offset: number;\n  timer: number;\n\n  state = {\n    elapsed: 0,\n  };\n\n  start() {\n    this.offset = Date.now();\n    this.timer = window.setInterval(this.tick, INTERVAL);\n  }\n\n  tick = () => {\n    const jetzt = Date.now();\n    const elapsed = jetzt - this.offset;\n    this.setState({ elapsed });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.time) {\n      clearInterval(this.timer);\n    } else if (this.props.time) {\n      this.start();\n    }\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { elapsed } = this.state;\n    const { className, time } = this.props;\n    const value = (time || elapsed) / 1000;\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryTransaction } from 'app/types/explore';\nimport ElapsedTime from './ElapsedTime';\n\nfunction formatLatency(value) {\n  return `${(value / 1000).toFixed(1)}s`;\n}\n\ninterface QueryTransactionStatusItemProps {\n  transaction: QueryTransaction;\n}\n\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\n  render() {\n    const { transaction } = this.props;\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\n    return (\n      <div className={className}>\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\n        <div className=\"query-transaction__duration\">\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface QueryTransactionStatusProps {\n  transactions: QueryTransaction[];\n}\n\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\n  render() {\n    const { transactions } = this.props;\n    return (\n      <div className=\"query-transactions\">\n        {transactions.map((t, i) => (\n          <QueryTransactionStatusItem key={`${t.rowIndex}:${t.resultType}`} transaction={t} />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { updateLocation } from 'app/core/actions';\nimport { StoreState } from 'app/types';\nimport { ExploreId, ExploreUrlState } from 'app/types/explore';\nimport { parseUrlState } from 'app/core/utils/explore';\n\nimport ErrorBoundary from './ErrorBoundary';\nimport Explore from './Explore';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { initializeExploreSplitAction, resetExploreAction } from './state/actionTypes';\n\ninterface WrapperProps {\n  initializeExploreSplitAction: typeof initializeExploreSplitAction;\n  split: boolean;\n  updateLocation: typeof updateLocation;\n  resetExploreAction: typeof resetExploreAction;\n  urlStates: { [key: string]: string };\n}\n\nexport class Wrapper extends Component<WrapperProps> {\n  initialSplit: boolean;\n  urlStates: { [key: string]: ExploreUrlState };\n\n  constructor(props: WrapperProps) {\n    super(props);\n    this.urlStates = {};\n    const { left, right } = props.urlStates;\n    if (props.urlStates.left) {\n      this.urlStates.leftState = parseUrlState(left);\n    }\n    if (props.urlStates.right) {\n      this.urlStates.rightState = parseUrlState(right);\n      this.initialSplit = true;\n    }\n  }\n\n  componentDidMount() {\n    if (this.initialSplit) {\n      this.props.initializeExploreSplitAction();\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.resetExploreAction();\n  }\n\n  render() {\n    const { split } = this.props;\n    const { leftState, rightState } = this.urlStates;\n\n    return (\n      <div className=\"page-scrollbar-wrapper\">\n        <CustomScrollbar autoHeightMin={'100%'}>\n          <div className=\"explore-wrapper\">\n            <ErrorBoundary>\n              <Explore exploreId={ExploreId.left} urlState={leftState} />\n            </ErrorBoundary>\n            {split && (\n              <ErrorBoundary>\n                <Explore exploreId={ExploreId.right} urlState={rightState} />\n              </ErrorBoundary>\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const urlStates = state.location.query;\n  const { split } = state.explore;\n  return { split, urlStates };\n};\n\nconst mapDispatchToProps = {\n  initializeExploreSplitAction,\n  updateLocation,\n  resetExploreAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Wrapper)\n);\n"],"sourceRoot":""}