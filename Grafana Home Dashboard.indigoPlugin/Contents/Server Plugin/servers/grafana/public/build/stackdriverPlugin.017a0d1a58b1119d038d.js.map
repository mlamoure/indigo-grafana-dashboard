{"version":3,"sources":["webpack:///./public/app/plugins/datasource/stackdriver/api.ts","webpack:///./public/app/plugins/datasource/stackdriver/StackdriverMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/stackdriver/datasource.ts","webpack:///./public/app/plugins/datasource/stackdriver/config_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/stackdriver/module.ts"],"names":["Api","baseUrl","this","cache","defaultOptions","useCache","responseMap","res","path","options","getBackendSrv","datasourceRequest","url","method","response","responsePropName","match","data","map","appEvents","emit","CoreEvents","dsRequestError","error","formatStackdriverError","projectName","StackdriverMetricFindQuery","datasource","query","getDefaultProject","selectedQueryType","MetricFindQueryTypes","Projects","Services","MetricTypes","LabelKeys","LabelValues","ResourceTypes","Aligners","AlignmentPeriods","Aggregations","SLOServices","SLO","Selectors","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","console","getProjects","projects","s","text","label","value","expandable","getMetricTypes","metricDescriptors","services","extractServicesFromMetricDescriptors","serviceShortName","service","selectedService","getMetricTypesByService","templateSrv","replace","displayName","type","selectedMetricType","getLabelKeys","labelKeys","toFindQueryResult","labelKey","getLabels","labels","interpolatedKey","values","hasOwnProperty","find","m","valueType","metricKind","getAlignmentOptionsByMetric","getAggregationOptionsByMetric","getSLOServices","selectedSLOService","getServiceLevelObjectives","slos","selectors","alignmentPeriods","x","isString","StackdriverDatasource","instanceSettings","timeSrv","authenticationType","jsonData","api","API","result","getTimeSeries","results","Object","forEach","queryRes","series","unit","resolvePanelUnitFromTargets","targets","timeSerie","target","name","datapoints","points","refId","meta","push","ensureGCEDefaultProject","annotation","queries","datasourceId","id","view","crossSeriesReducer","perSeriesAligner","metricType","scopedVars","title","tags","filters","interpolateFilters","post","from","range","valueOf","toString","to","tables","rows","v","time","Date","parse","stackdriverMetricFindQuery","execute","migrateQuery","filter","shouldRunQuery","q","prepareTimeSeriesQuery","length","groupBys","queryType","QueryType","METRICS","metricQuery","interpolateGroupBys","timeRange","defaultErrorMessage","test","status","message","statusText","_","code","then","getGCEDefaultProject","defaultProject","catch","err","gceDefaultProject","get","split","serviceId","Promise","resolve","interpolateProps","p","goal","projectId","hide","rest","key","maxLines","metric","object","entries","reduce","acc","sloQuery","selectorName","sloId","intervalMs","completeFilter","chunk","operator","condition","flatten","interpolatedGroupBys","gb","interpolated","Array","isArray","concat","every","t","stackdriverUnitMappings","getVariables","DataSourceApi","StackdriverConfigCtrl","datasourceSrv","validationErrors","defaultAuthenticationType","AuthType","JWT","current","secureJsonData","secureJsonFields","authenticationTypes","authTypes","jwt","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","project_id","resetValidationMessages","inputDataValid","json","jsonText","validateJwt","save","e","JSON","originalEvent","clipboardData","getData","assign","templateUrl","StackdriverAnnotationsQueryCtrl","onQueryChange","bind","StackdriverVariableQueryEditor","props","queryTypes","defaults","metricTypes","sloServices","state","some","setState","prevProps","prevState","selectSLOServiceChanged","getConfig","featureToggles","newVariables","queryModel","onChange","l","templateVariables","insertTemplateVariables","onValueChange","onProjectChange","onServiceChange","onMetricTypeChange","onLabelKeyChange","onQueryTypeChange","renderQueryTypeSwitch","PureComponent","plugin","DataSourcePlugin","setQueryEditor","QueryEditor","setConfigCtrl","setAnnotationQueryCtrl","setVariableQueryEditor"],"mappings":"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","file":"stackdriverPlugin.017a0d1a58b1119d038d.js","sourcesContent":["import appEvents from 'app/core/app_events';\nimport { CoreEvents } from 'app/types';\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { formatStackdriverError } from './functions';\nimport { MetricDescriptor } from './types';\n\ninterface Options {\n  responseMap?: (res: any) => SelectableValue<string> | MetricDescriptor;\n  baseUrl?: string;\n  useCache?: boolean;\n}\n\nexport default class Api {\n  cache: { [key: string]: Array<SelectableValue<string>> };\n  defaultOptions: Options;\n\n  constructor(private baseUrl: string) {\n    this.cache = {};\n    this.defaultOptions = {\n      useCache: true,\n      responseMap: (res: any) => res,\n      baseUrl: this.baseUrl,\n    };\n  }\n\n  async get(path: string, options?: Options): Promise<Array<SelectableValue<string>> | MetricDescriptor[]> {\n    try {\n      const { useCache, responseMap, baseUrl } = { ...this.defaultOptions, ...options };\n\n      if (useCache && this.cache[path]) {\n        return this.cache[path];\n      }\n\n      const response = await getBackendSrv().datasourceRequest({\n        url: baseUrl + path,\n        method: 'GET',\n      });\n\n      const responsePropName = path.match(/([^\\/]*)\\/*$/)[1];\n      let res = [];\n      if (response && response.data && response.data[responsePropName]) {\n        res = response.data[responsePropName].map(responseMap);\n      }\n\n      if (useCache) {\n        this.cache[path] = res;\n      }\n\n      return res;\n    } catch (error) {\n      appEvents.emit(CoreEvents.dsRequestError, { error: { data: { error: formatStackdriverError(error) } } });\n      return [];\n    }\n  }\n\n  async post(data: { [key: string]: any }) {\n    return getBackendSrv().datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data,\n    });\n  }\n\n  async test(projectName: string) {\n    return getBackendSrv().datasourceRequest({\n      url: `${this.baseUrl}${projectName}/metricDescriptors`,\n      method: 'GET',\n    });\n  }\n}\n","import isString from 'lodash/isString';\nimport { alignmentPeriods, ValueTypes, MetricKind, selectors } from './constants';\nimport StackdriverDatasource from './datasource';\nimport { MetricFindQueryTypes, VariableQueryData } from './types';\nimport { SelectableValue } from '@grafana/data';\nimport {\n  getMetricTypesByService,\n  getAlignmentOptionsByMetric,\n  getAggregationOptionsByMetric,\n  extractServicesFromMetricDescriptors,\n  getLabelKeys,\n} from './functions';\n\nexport default class StackdriverMetricFindQuery {\n  constructor(private datasource: StackdriverDatasource) {}\n\n  async execute(query: VariableQueryData) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run StackdriverMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: VariableQueryData) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map(s => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: VariableQueryData) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type'].map(this.toFindQueryResult);\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAlignmentOptionsByMetric(valueType, metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind as MetricKind).map(this.toFindQueryResult);\n  }\n\n  async handleSLOServicesQuery({ projectName }: VariableQueryData) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: VariableQueryData) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return selectors.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import _ from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n} from '@grafana/data';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { StackdriverQuery, MetricDescriptor, StackdriverOptions, Filter, VariableQueryData, QueryType } from './types';\nimport { stackdriverUnitMappings } from './constants';\nimport API from './api';\nimport StackdriverMetricFindQuery from './StackdriverMetricFindQuery';\n\nexport default class StackdriverDatasource extends DataSourceApi<StackdriverQuery, StackdriverOptions> {\n  api: API;\n  authenticationType: string;\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<StackdriverOptions>,\n    public templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.api = new API(`${instanceSettings.url!}/stackdriver/v3/projects/`);\n  }\n\n  get variables() {\n    return this.templateSrv.getVariables().map(v => `$${v.name}`);\n  }\n\n  async query(options: DataQueryRequest<StackdriverQuery>): Promise<DataQueryResponse> {\n    const result: DataQueryResponse[] = [];\n    const data = await this.getTimeSeries(options);\n    if (data.results) {\n      Object.values(data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        const unit = this.resolvePanelUnitFromTargets(options.targets);\n        queryRes.series.forEach((series: any) => {\n          let timeSerie: any = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          if (unit) {\n            timeSerie = { ...timeSerie, unit };\n          }\n          result.push(timeSerie);\n        });\n      });\n      return { data: result };\n    } else {\n      return { data: [] };\n    }\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasourceId: this.id,\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    const { data } = await this.api.post({\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries,\n    });\n\n    const results = data.results['annotationQuery'].tables[0].rows.map((v: any) => {\n      return {\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [],\n        text: v[3],\n      } as any;\n    });\n\n    return results;\n  }\n\n  async metricFindQuery(query: VariableQueryData) {\n    await this.ensureGCEDefaultProject();\n    const stackdriverMetricFindQuery = new StackdriverMetricFindQuery(this);\n    return stackdriverMetricFindQuery.execute(query);\n  }\n\n  async getTimeSeries(options: DataQueryRequest<StackdriverQuery>) {\n    await this.ensureGCEDefaultProject();\n    const queries = options.targets\n      .map(this.migrateQuery)\n      .filter(this.shouldRunQuery)\n      .map(q => this.prepareTimeSeriesQuery(q, options));\n\n    if (queries.length > 0) {\n      const { data } = await this.api.post({\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      });\n      return data;\n    } else {\n      return { results: [] };\n    }\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, groupBys?: string[]) {\n    const response = await this.getTimeSeries({\n      targets: [\n        {\n          refId,\n          datasourceId: this.id,\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(groupBys || [], {}),\n            crossSeriesReducer: 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<StackdriverQuery>);\n    const result = response.results[refId];\n    return result && result.meta ? result.meta.labels : {};\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Stackdriver API';\n    try {\n      await this.ensureGCEDefaultProject();\n      const response = await this.api.test(this.getDefaultProject());\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Stackdriver API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Stackdriver: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  async getGCEDefaultProject() {\n    return this.api\n      .post({\n        queries: [\n          {\n            refId: 'getGCEDefaultProject',\n            type: 'getGCEDefaultProject',\n            datasourceId: this.id,\n          },\n        ],\n      })\n      .then(({ data }) => {\n        return data && data.results && data.results.getGCEDefaultProject && data.results.getGCEDefaultProject.meta\n          ? data.results.getGCEDefaultProject.meta.defaultProject\n          : '';\n      })\n      .catch(err => {\n        throw err.data.error;\n      });\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.api.get(`${this.templateSrv.replace(projectName)}/metricDescriptors`, {\n      responseMap: (m: any) => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n\n        return m;\n      },\n    }) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.api.get(`${this.templateSrv.replace(projectName)}/services`, {\n      responseMap: ({ name }: { name: string }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)[1],\n        label: name.match(/([^\\/]*)\\/*$/)[1],\n      }),\n    });\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.api.get(`${p}/services/${s}/serviceLevelObjectives`, {\n      responseMap: ({ name, displayName, goal }: { name: string; displayName: string; goal: number }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)[1],\n        label: displayName,\n        goal,\n      }),\n    });\n  }\n\n  async getProjects() {\n    return this.api.get(`projects`, {\n      responseMap: ({ projectId, name }: { projectId: string; name: string }) => ({\n        value: projectId,\n        label: name,\n      }),\n      baseUrl: `${this.instanceSettings.url!}/cloudresourcemanager/v1/`,\n    });\n  }\n\n  migrateQuery(query: StackdriverQuery): StackdriverQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, ...rest } = query as any;\n      return {\n        refId,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps(object: { [key: string]: any } = {}, scopedVars: ScopedVars = {}): { [key: string]: any } {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && _.isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {});\n  }\n\n  shouldRunQuery(query: StackdriverQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  prepareTimeSeriesQuery(\n    { metricQuery, refId, queryType, sloQuery }: StackdriverQuery,\n    { scopedVars, intervalMs }: DataQueryRequest<StackdriverQuery>\n  ) {\n    return {\n      datasourceId: this.id,\n      refId,\n      queryType,\n      intervalMs: intervalMs,\n      type: 'timeSeriesQuery',\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject()\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n      },\n      sloQuery: this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter = _.chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = _.flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, 'regex'),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n  resolvePanelUnitFromTargets(targets: any) {\n    let unit;\n    if (targets.length > 0 && targets.every((t: any) => t.unit === targets[0].unit)) {\n      if (stackdriverUnitMappings.hasOwnProperty(targets[0].unit!)) {\n        // @ts-ignore\n        unit = stackdriverUnitMappings[targets[0].unit];\n      }\n    }\n    return unit;\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\nimport { AuthType, authTypes } from './types';\n\nexport interface JWT {\n  private_key: string;\n  token_uri: string;\n  client_email: string;\n  project_id: string;\n}\n\nexport class StackdriverConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/stackdriver/partials/config.html';\n  datasourceSrv: DatasourceSrv;\n  current: any;\n  meta: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: Array<{ key: AuthType; value: string }>;\n  defaultAuthenticationType: string;\n  name: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = AuthType.JWT;\n    this.datasourceSrv = datasourceSrv;\n    this.name = this.meta.name;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = authTypes;\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import { TemplateSrv } from 'app/features/templating/template_srv';\nimport { AnnotationTarget } from './types';\n\nexport class StackdriverAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { VariableQueryProps } from 'app/types/plugins';\nimport { SimpleSelect } from './';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport { MetricFindQueryTypes, VariableQueryData } from '../types';\nimport { getConfig } from 'app/core/config';\n\nexport class StackdriverVariableQueryEditor extends PureComponent<VariableQueryProps, VariableQueryData> {\n  queryTypes: Array<{ value: string; name: string }> = [\n    { value: MetricFindQueryTypes.Projects, name: 'Projects' },\n    { value: MetricFindQueryTypes.Services, name: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, name: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, name: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, name: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, name: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, name: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, name: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, name: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, name: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, name: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, name: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n  };\n\n  constructor(props: VariableQueryProps) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = await this.props.datasource.getProjects();\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      name: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some(s => s.value === this.props.templateSrv.replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects: projects.map(({ value, label }: any) => ({ value, name: label })),\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n    };\n    this.setState(state);\n  }\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState({\n      ...labels,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projectName,\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n    });\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey });\n  }\n\n  componentDidUpdate(prevProps: Readonly<VariableQueryProps>, prevState: Readonly<VariableQueryData>) {\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (\n      !getConfig().featureToggles.newVariables ||\n      prevState.selectedQueryType !== this.state.selectedQueryType ||\n      selectSLOServiceChanged\n    ) {\n      const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n      const query = this.queryTypes.find(q => q.value === this.state.selectedQueryType);\n      this.props.onChange(queryModel, `Stackdriver - ${query.name}`);\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some(l => l === this.props.templateSrv.replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  insertTemplateVariables(options: any) {\n    const templateVariables = this.props.templateSrv.getVariables().map((v: any) => ({\n      name: `$${v.name}`,\n      value: `$${v.name}`,\n    }));\n    return [...templateVariables, ...options];\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <SimpleSelect\n                value={this.state.labelKey}\n                options={this.insertTemplateVariables(this.state.labels.map(l => ({ value: l, name: l })))}\n                onValueChange={e => this.onLabelKeyChange(e.target.value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedSLOService}\n              options={this.insertTemplateVariables(this.state.sloServices)}\n              onValueChange={e => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: e.target.value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <SimpleSelect\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onValueChange={e => this.onQueryTypeChange(e.target.value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport StackdriverDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport { StackdriverConfigCtrl } from './config_ctrl';\nimport { StackdriverAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { StackdriverVariableQueryEditor } from './components/VariableQueryEditor';\nimport { StackdriverQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<StackdriverDatasource, StackdriverQuery>(StackdriverDatasource)\n  .setQueryEditor(QueryEditor)\n  .setConfigCtrl(StackdriverConfigCtrl)\n  .setAnnotationQueryCtrl(StackdriverAnnotationsQueryCtrl)\n  .setVariableQueryEditor(StackdriverVariableQueryEditor);\n"],"sourceRoot":""}