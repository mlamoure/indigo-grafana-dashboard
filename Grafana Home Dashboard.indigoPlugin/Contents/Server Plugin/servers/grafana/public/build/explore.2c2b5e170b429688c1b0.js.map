{"version":3,"sources":["webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/profile/state/selectors.ts","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/Legend.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/features/explore/utils/set.ts","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/Error.tsx","webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///./public/app/features/explore/NoDataSourceCallToAction.tsx","webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///./public/app/features/explore/LogMessageAnsi.tsx","webpack:///./public/app/features/explore/LogRow.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/core/utils/reselect.ts","webpack:///./public/app/features/explore/state/selectors.ts","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///./public/app/features/explore/Wrapper.tsx"],"names":["__webpack_require__","d","__webpack_exports__","addQueryRow","changeDatasource","changeQuery","changeSize","changeTime","changeRefreshInterval","clearQueries","initializeExplore","reconnectDatasource","modifyQueries","runQueries","scanStart","setQueries","splitClose","splitOpen","toggleGraph","toggleLogs","toggleTable","changeDedupStrategy","refreshExplore","tslib__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","lodash__WEBPACK_IMPORTED_MODULE_1___default","n","moment__WEBPACK_IMPORTED_MODULE_2__","moment__WEBPACK_IMPORTED_MODULE_2___default","app_core_store__WEBPACK_IMPORTED_MODULE_3__","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_4__","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_5__","app_core_actions__WEBPACK_IMPORTED_MODULE_6__","app_types_explore__WEBPACK_IMPORTED_MODULE_7__","_actionTypes__WEBPACK_IMPORTED_MODULE_8__","app_features_profile_state_selectors__WEBPACK_IMPORTED_MODULE_9__","updateExploreUIState","exploreId","uiStateFragment","dispatch","Object","stateSave","index","getState","query","explore","queries","datasource","_this","this","newDataSourceInstance","get","_a","sent","currentDataSourceInstance","datasourceInstance","importQueries","loadDatasource","override","height","width","rawRange","timeZone","user","range","refreshInterval","datasourceName","containerWidth","eventBridge","ui","exploreDatasources","getExternal","map","ds","value","name","meta","length","loadExploreDatasourcesAndSetDatasource","loadDatasourceReady","instance","historyKey","id","history","getObject","set","sourceDataSource","targetDataSource","importedQueries","nextQueries","q","i","testDatasource","undefined","datasourceError","testResult","status","message","error_1","statusText","error","requestedDatasourceName","init","modification","modifier","preventSubmit","ignoreUIState","showingLogs","showingGraph","showingTable","supportsGraph","supportsLogs","supportsTable","Promise","resolve","interval","updatedRange","raw","tableQueriesPromise","runQueriesForType","format","instant","valueWithRefId","data","typeQueriesPromise","maxDataPoints","logsQueriesPromise","all","resultType","queryOptions","resultGetter","queryIntervals","scanning","datasourceId","queryPromises","rowIndex","transaction","now","Date","options","res","emit","latency","queryTransactions","results","transactionId","result","scanner","find","qt","hints","getQueryHints","nextQueryTransactions","done","nextHistory","a","size","queryTransactionSuccess","response_1","response","cancelled","errorDetails","console","Error","queryTransactionFailure","rawQueries","itemId","leftState","left","queryState","location","urlState","itemState","slice","right","toRawTimeRange","from","isMoment","valueOf","toString","to","split","urlStates","leftUrlState","dedupStrategy","rightUrlState","togglePanelActionCreator","actionCreator","isPanelVisible","uiFragmentStateUpdate","shouldRunQueries","type","initialized","update","urlRange","refreshQueries","initialQueries","getTimeZone","_grafana_ui__WEBPACK_IMPORTED_MODULE_0__","state","Panel","_super","apply","arguments","onClickToggle","props","onToggle","isOpen","prototype","render","iconClass","loaderClass","loading","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","className","onClick","label","children","react__WEBPACK_IMPORTED_MODULE_1__","ErrorBoundary","call","errorInfo","componentDidCatch","setState","style","whiteSpace","componentStack","Legend_LegendItem","LegendItem","onClickLabel","e","series","tslib_es6","hidden","seriesClasses","classnames_default","graph-legend-series-hidden","react_default","color","title","alias","react","explore_Legend","Legend","event","onToggleSeries","ctrlKey","metaKey","shiftKey","hiddenSeries","items","has","key","defaultProps","time_format","ticks","min","max","secPerTick","FLOT_OPTIONS","legend","show","lines","linewidth","zero","shadowSize","grid","minBorderMargin","markings","backgroundColor","borderWidth","clickable","margin","labelMarginX","selection","mode","Graph_Graph","Graph","dynamicOptions","Set","showAllTimeSeries","onPlotSelected","ranges","onChangeTime","xaxis","onShowAllTimeSeries","draw","exclusive","oneSeriesVisible","nextHiddenSeries","filter","availableSeries","b","it","values","next","add","intersect","delete","getGraphData","componentDidMount","$el","jquery_js_exposed_default","bind","componentDidUpdate","prevProps","prevState","equal","componentWillUnmount","unbind","getDynamicOptions","timezone","timeformat","userOptions","ts","getFlotPairs","plot","_b","_c","Fragment","Explore","getRef","el","changedByScanner","onStopScanning","onClickExample","onModifyQueries","action","modifyQuery","onResize","onStartScanning","scanPreviousRange","timepickerRef","current","move","scanStopAction","renderEmptyState","_NoDataSourceCallToAction__WEBPACK_IMPORTED_MODULE_17__","onReconnect","preventDefault","exploreEvents","app_core_utils_emitter__WEBPACK_IMPORTED_MODULE_14__","createRef","initialDatasource","initialRange","initialUI","offsetWidth","removeAllListeners","StartPage","datasourceLoading","datasourceMissing","showingStartPage","queryKeys","exploreClass","ref","_ExploreToolbar__WEBPACK_IMPORTED_MODULE_15__","app_core_components_Animations_FadeIn__WEBPACK_IMPORTED_MODULE_18__","duration","in","_Error__WEBPACK_IMPORTED_MODULE_6__","button","text","_QueryRows__WEBPACK_IMPORTED_MODULE_10__","react_virtualized__WEBPACK_IMPORTED_MODULE_4__","disableHeight","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_7__","_GraphContainer__WEBPACK_IMPORTED_MODULE_8__","_TableContainer__WEBPACK_IMPORTED_MODULE_11__","onClickCell","_LogsContainer__WEBPACK_IMPORTED_MODULE_9__","PureComponent","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_12__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_16__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","item","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_19__","app_core_store__WEBPACK_IMPORTED_MODULE_5__","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_13__","Alert","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","GraphContainer","onClickGraphButton","absRange","isUtc","moment__WEBPACK_IMPORTED_MODULE_4___default","utc","graphResult","graphHeight","timeRange","_Panel__WEBPACK_IMPORTED_MODULE_7__","_Graph__WEBPACK_IMPORTED_MODULE_6__","_state_actions__WEBPACK_IMPORTED_MODULE_5__","some","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_8__","LogsContainer","onClickLogsButton","handleDedupStrategyChange","hangleToggleLogLevel","hiddenLogLevels","toggleLogLevelAction","logsHighlighterExpressions","logsResult","dedupedResult","scanRange","_Panel__WEBPACK_IMPORTED_MODULE_8__","_Logs__WEBPACK_IMPORTED_MODULE_7__","app_core_logs_model__WEBPACK_IMPORTED_MODULE_5__","none","dedupedData","highlighterExpressions","onDedupStrategyChange","onToggleLogLevel","_state_actions__WEBPACK_IMPORTED_MODULE_6__","app_features_explore_state_actionTypes__WEBPACK_IMPORTED_MODULE_9__","app_features_explore_state_selectors__WEBPACK_IMPORTED_MODULE_10__","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_11__","QueryRows","_QueryRow__WEBPACK_IMPORTED_MODULE_2__","QueryRow","onExecuteQuery","onChangeQuery","getHighlighterExpression","updateLogsHighlights","onClickAddButton","onClickClearButton","onClickHintFix","onClickRemoveButton","removeQueryRowAction","lodash__WEBPACK_IMPORTED_MODULE_2___default","debounce","expressions","highlightLogsExpressionAction","log","datasourceStatus","transactions","t","transactionWithError","hint","getFirstHintFromTransactions","queryError","QueryField","components","ExploreQueryField","_QueryTransactionStatus__WEBPACK_IMPORTED_MODULE_6__","onExecuteHint","onQueryChange","_QueryEditor__WEBPACK_IMPORTED_MODULE_5__","initialQuery","_state_actions__WEBPACK_IMPORTED_MODULE_7__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_9__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_4__","_grafana_ui__WEBPACK_IMPORTED_MODULE_8__","Disconnected","Connected","QueryEditor","element","initTimeSrv","loader","app_core_services_AngularLoader__WEBPACK_IMPORTED_MODULE_3__","target","scopeProps","ctrl","refresh","events","panel","targets","dashboard","component","load","destroy","app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_4__","time","getTimezone","timeRangeUpdated","TableContainer","onClickTableButton","tableResult","_Panel__WEBPACK_IMPORTED_MODULE_6__","_Table__WEBPACK_IMPORTED_MODULE_5__","_state_actions__WEBPACK_IMPORTED_MODULE_4__","EMPTY_TABLE","VALUE_REGEX","Table","getCellProps","rowInfo","column","columnKey","Header","rowValue","row","tableModel","columnNames","columns","filterable","react__WEBPACK_IMPORTED_MODULE_2___default","accessor","test","Cell","noDataText","react_table__WEBPACK_IMPORTED_MODULE_3__","rows","getTdProps","minRows","resolveData","cells","zipObject","prepareRows","showPagination","Boolean","react__WEBPACK_IMPORTED_MODULE_2__","IconSide","createResponsiveButton","defaultOptions","iconSide","buttonClassName","iconClassName","splitted","UnConnectedExploreToolbar","onChangeDatasource","option","onClearAll","clearAll","onRunQuery","onCloseTimePicker","onChangeRefreshInterval","closeSplit","selectedDatasource","app_core_components_Select_DataSourcePicker__WEBPACK_IMPORTED_MODULE_5__","onChange","datasources","_grafana_ui__WEBPACK_IMPORTED_MODULE_4__","_TimePicker__WEBPACK_IMPORTED_MODULE_7__","onIntervalChanged","onRefresh","tooltip","func","ExploreToolbar","react_redux__WEBPACK_IMPORTED_MODULE_2__","exploreItem","getRaw","local","TimePicker","handleChangeFrom","fromRaw","handleChangeTo","toRaw","handleClickApply","indexOf","rangeString","_grafana_ui_src_utils_rangeutil__WEBPACK_IMPORTED_MODULE_3__","handleClickLeft","handleClickPicker","handleClickRight","handleClickRefresh","handleClickRelativeOption","dropdownRef","dropdownEl","getDerivedStateFromProps","direction","origRange","timespan","nextTimeRange","getTimeOptions","renderDropdown","timeOptions","keys","section","group","active","display","NoDataSourceCallToAction","theme","_grafana_ui__WEBPACK_IMPORTED_MODULE_3__","footer","href","ctaElement","icon","cardClassName","emotion__WEBPACK_IMPORTED_MODULE_2__","templateObject_1","breakpoints","lg","callToActionElement","ToggleButtonGroup","transparent","ToggleButton","selected","btnClassName","stopPropagation","src","content","placement","LogLabelStatsRow","logLabelStatsModel","count","proportion","percent","Math","round","barStyle","logs-stats-row--active","LogLabelStats_LogLabelStats","LogLabelStats","rowCount","stats","onClickClose","topRows","activeRow","otherRows","insertActiveRow","otherCount","reduce","sum","total","otherProportion","stat","LogLabel_LogLabel","LogLabel","showStats","onClickStats","allRows","getRows","logs_model","plain","LogLabels_LogLabels","LogLabels","labels","LogMessageAnsi_LogMessageAnsi","LogMessageAnsi","chunks","prevValue","ansicolor","parse","spans","span","css","accumulated","line","match","replace","_","character","toUpperCase","chunk","LogRow_LogRow","LogRow","fieldCount","fieldLabel","fieldStats","fieldValue","parsed","parser","parsedFieldHighlights","showFieldStats","onClickHighlight","fieldText","getLabelFromField","getValueFromField","matcher","buildMatcher","onMouseOverMessage","mouseMessageTimer","setTimeout","parseMessage","onMouseOutMessage","clearTimeout","entry","getFields","showDuplicates","showLabels","showLocalTime","showUtc","hasAnsi","previewHighlights","lodash_default","isEqual","searchWords","highlights","needsHighlighter","highlightClassName","logs-row__match-highlight--preview","duplicates","logLevel","timeLocal","timeFromNow","timestamp","uniqueLabels","onMouseEnter","onMouseLeave","main_default","autoEscape","highlightTag","textToHighlight","findChunks","utils_text","graphOptions","stack","bars","lineWidth","yaxis","tickDecimals","Logs_Logs","Logs","deferLogs","renderAll","onChangeDedup","dedup","onChangeLabels","checked","onChangeLocalTime","onChangeUtc","rawLevel","hiddenRawLevels","Array","level","onClickScan","onClickStopScan","renderAll_1","PREVIEW_LIMIT","deferLogsTimer","renderAllTimer","hasData","hasLabel","hasUniqueLabels","dedupCount","push","kind","Number","processedRows","firstRows","lastRows","scanText","rangeutil","timeSeries","time_series2","components_ToggleButtonGroup_ToggleButtonGroup","dedupType","LabelsMap","createLodashMemoizedSelector","es","lodash","args","_i","acc","val","JSON","stringify","exploreItemUIStateSelector","deduplicatedLogsSelector","logs","filteredData","ElapsedTime","elapsed","tick","offset","start","timer","window","setInterval","componentWillReceiveProps","nextProps","clearInterval","toFixed","QueryTransactionStatus_QueryTransactionStatusItem","QueryTransactionStatusItem","explore_ElapsedTime","QueryTransactionStatus_QueryTransactionStatus","QueryTransactionStatus","Wrapper","resetExploreAction","_grafana_ui__WEBPACK_IMPORTED_MODULE_7__","autoHeightMin","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__","_Explore__WEBPACK_IMPORTED_MODULE_6__","app_types_explore__WEBPACK_IMPORTED_MODULE_4__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__"],"mappings":"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","file":"explore.2c2b5e170b429688c1b0.js","sourcesContent":["// Libraries\nimport _ from 'lodash';\nimport moment from 'moment';\n\n// Services & Utils\nimport store from 'app/core/store';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { Emitter } from 'app/core/core';\nimport {\n  LAST_USED_DATASOURCE_KEY,\n  clearQueryKeys,\n  ensureQueries,\n  generateEmptyQuery,\n  hasNonEmptyQuery,\n  makeTimeSeriesList,\n  updateHistory,\n  buildQueryTransaction,\n  serializeStateToUrlParam,\n  parseUrlState,\n  getTimeRange,\n  getTimeRangeFromUrl,\n} from 'app/core/utils/explore';\n\n// Actions\nimport { updateLocation } from 'app/core/actions';\n\n// Types\nimport { ResultGetter } from 'app/types/explore';\nimport { ThunkResult } from 'app/types';\nimport {\n  RawTimeRange,\n  DataSourceApi,\n  DataQuery,\n  DataSourceSelectItem,\n  QueryHint,\n  QueryFixAction,\n  TimeRange,\n} from '@grafana/ui/src/types';\nimport {\n  ExploreId,\n  ExploreUrlState,\n  RangeScanner,\n  ResultType,\n  QueryOptions,\n  ExploreUIState,\n  QueryTransaction,\n} from 'app/types/explore';\nimport {\n  updateDatasourceInstanceAction,\n  changeQueryAction,\n  changeRefreshIntervalAction,\n  ChangeRefreshIntervalPayload,\n  changeSizeAction,\n  ChangeSizePayload,\n  changeTimeAction,\n  scanStopAction,\n  clearQueriesAction,\n  initializeExploreAction,\n  loadDatasourceMissingAction,\n  loadDatasourcePendingAction,\n  queriesImportedAction,\n  LoadDatasourceReadyPayload,\n  loadDatasourceReadyAction,\n  modifyQueriesAction,\n  queryTransactionFailureAction,\n  queryTransactionStartAction,\n  queryTransactionSuccessAction,\n  scanRangeAction,\n  scanStartAction,\n  setQueriesAction,\n  splitCloseAction,\n  splitOpenAction,\n  addQueryRowAction,\n  toggleGraphAction,\n  toggleLogsAction,\n  toggleTableAction,\n  ToggleGraphPayload,\n  ToggleLogsPayload,\n  ToggleTablePayload,\n  updateUIStateAction,\n  runQueriesAction,\n  testDataSourcePendingAction,\n  testDataSourceSuccessAction,\n  testDataSourceFailureAction,\n  loadExploreDatasources,\n} from './actionTypes';\nimport { ActionOf, ActionCreator } from 'app/core/redux/actionCreatorFactory';\nimport { LogsDedupStrategy } from 'app/core/logs_model';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\n\n/**\n * Updates UI state and save it to the URL\n */\nconst updateExploreUIState = (exploreId: ExploreId, uiStateFragment: Partial<ExploreUIState>): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\n    dispatch(stateSave());\n  };\n};\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const query = generateEmptyQuery(getState().explore[exploreId].queries, index);\n\n    dispatch(addQueryRowAction({ exploreId, index, query }));\n  };\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    let newDataSourceInstance: DataSourceApi = null;\n\n    if (!datasource) {\n      newDataSourceInstance = await getDatasourceSrv().get();\n    } else {\n      newDataSourceInstance = await getDatasourceSrv().get(datasource);\n    }\n\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    const queries = getState().explore[exploreId].queries;\n\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\n\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\n\n    await dispatch(loadDatasource(exploreId, newDataSourceInstance));\n\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override: boolean\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Null query means reset\n    if (query === null) {\n      query = { ...generateEmptyQuery(getState().explore[exploreId].queries) };\n    }\n\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): ActionOf<ChangeSizePayload> {\n  return changeSizeAction({ exploreId, height, width });\n}\n\n/**\n * Change the time range of Explore. Usually called from the Time picker or a graph interaction.\n */\nexport function changeTime(exploreId: ExploreId, rawRange: RawTimeRange): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRange(timeZone, rawRange);\n    dispatch(changeTimeAction({ exploreId, range }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Change the refresh interval of Explore. Called from the Refresh picker.\n */\nexport function changeRefreshInterval(\n  exploreId: ExploreId,\n  refreshInterval: string\n): ActionOf<ChangeRefreshIntervalPayload> {\n  return changeRefreshIntervalAction({ exploreId, refreshInterval });\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStopAction({ exploreId }));\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Loads all explore data sources and sets the chosen datasource.\n * If there are no datasources a missing datasource action is dispatched.\n */\nexport function loadExploreDatasourcesAndSetDatasource(\n  exploreId: ExploreId,\n  datasourceName: string\n): ThunkResult<void> {\n  return dispatch => {\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\n      .getExternal()\n      .map(\n        (ds: any) =>\n          ({\n            value: ds.name,\n            name: ds.name,\n            meta: ds.meta,\n          } as DataSourceSelectItem)\n      );\n\n    dispatch(loadExploreDatasources({ exploreId, exploreDatasources }));\n\n    if (exploreDatasources.length >= 1) {\n      dispatch(changeDatasource(exploreId, datasourceName));\n    } else {\n      dispatch(loadDatasourceMissingAction({ exploreId }));\n    }\n  };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasourceName: string,\n  queries: DataQuery[],\n  rawRange: RawTimeRange,\n  containerWidth: number,\n  eventBridge: Emitter,\n  ui: ExploreUIState\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRange(timeZone, rawRange);\n    dispatch(loadExploreDatasourcesAndSetDatasource(exploreId, datasourceName));\n    dispatch(\n      initializeExploreAction({\n        exploreId,\n        containerWidth,\n        eventBridge,\n        queries,\n        range,\n        ui,\n      })\n    );\n  };\n}\n\n/**\n * Datasource loading was successfully completed.\n */\nexport const loadDatasourceReady = (\n  exploreId: ExploreId,\n  instance: DataSourceApi\n): ActionOf<LoadDatasourceReadyPayload> => {\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n  store.set(LAST_USED_DATASOURCE_KEY, instance.name);\n\n  return loadDatasourceReadyAction({\n    exploreId,\n    history,\n  });\n};\n\nexport function importQueries(\n  exploreId: ExploreId,\n  queries: DataQuery[],\n  sourceDataSource: DataSourceApi,\n  targetDataSource: DataSourceApi\n): ThunkResult<void> {\n  return async dispatch => {\n    if (!sourceDataSource) {\n      // explore not initialized\n      dispatch(queriesImportedAction({ exploreId, queries }));\n      return;\n    }\n\n    let importedQueries = queries;\n    // Check if queries can be imported from previously selected datasource\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\n      // Keep same queries if same type of datasource\n      importedQueries = [...queries];\n    } else if (targetDataSource.importQueries) {\n      // Datasource-specific importers\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\n    } else {\n      // Default is blank queries\n      importedQueries = ensureQueries();\n    }\n\n    const nextQueries = importedQueries.map((q, i) => ({\n      ...q,\n      ...generateEmptyQuery(queries),\n    }));\n\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\n  };\n}\n\n/**\n * Tests datasource.\n */\nexport const testDatasource = (exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> => {\n  return async dispatch => {\n    let datasourceError = null;\n\n    dispatch(testDataSourcePendingAction({ exploreId }));\n\n    try {\n      const testResult = await instance.testDatasource();\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\n    } catch (error) {\n      datasourceError = (error && error.statusText) || 'Network error';\n    }\n\n    if (datasourceError) {\n      dispatch(testDataSourceFailureAction({ exploreId, error: datasourceError }));\n      return;\n    }\n\n    dispatch(testDataSourceSuccessAction({ exploreId }));\n  };\n};\n\n/**\n * Reconnects datasource when there is a connection failure.\n */\nexport const reconnectDatasource = (exploreId: ExploreId): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    const instance = getState().explore[exploreId].datasourceInstance;\n    dispatch(changeDatasource(exploreId, instance.name));\n  };\n};\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\n\n    await dispatch(testDatasource(exploreId, instance));\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    if (instance.init) {\n      instance.init();\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    dispatch(loadDatasourceReady(exploreId, instance));\n  };\n}\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: QueryFixAction,\n  index: number,\n  modifier: any\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Mark a query transaction as failed with an error extracted from the query response.\n * The transaction will be marked as `done`.\n */\nexport function queryTransactionFailure(\n  exploreId: ExploreId,\n  transactionId: string,\n  response: any,\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, queryTransactions } = getState().explore[exploreId];\n    if (datasourceInstance.meta.id !== datasourceId || response.cancelled) {\n      // Navigated away, queries did not matter\n      return;\n    }\n\n    // Transaction might have been discarded\n    if (!queryTransactions.find(qt => qt.id === transactionId)) {\n      return;\n    }\n\n    console.error(response);\n\n    let error: string;\n    let errorDetails: string;\n    if (response.data) {\n      if (typeof response.data === 'string') {\n        error = response.data;\n      } else if (response.data.error) {\n        error = response.data.error;\n        if (response.data.response) {\n          errorDetails = response.data.response;\n        }\n      } else {\n        throw new Error('Could not handle error response');\n      }\n    } else if (response.message) {\n      error = response.message;\n    } else if (typeof response === 'string') {\n      error = response;\n    } else {\n      error = 'Unknown error during query transaction. Please check JS console logs.';\n    }\n\n    // Mark transactions as complete\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          error,\n          errorDetails,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    dispatch(queryTransactionFailureAction({ exploreId, queryTransactions: nextQueryTransactions }));\n  };\n}\n\n/**\n * Complete a query transaction, mark the transaction as `done` and store query state in URL.\n * If the transaction was started by a scanner, it keeps on scanning for more results.\n * Side-effect: the query is stored in localStorage.\n * @param exploreId Explore area\n * @param transactionId ID\n * @param result Response from `datasourceInstance.query()`\n * @param latency Duration between request and response\n * @param queries Queries from all query rows\n * @param datasourceId Origin datasource instance, used to discard results if current datasource is different\n */\nexport function queryTransactionSuccess(\n  exploreId: ExploreId,\n  transactionId: string,\n  result: any,\n  latency: number,\n  queries: DataQuery[],\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, history, queryTransactions, scanner, scanning } = getState().explore[exploreId];\n\n    // If datasource already changed, results do not matter\n    if (datasourceInstance.meta.id !== datasourceId) {\n      return;\n    }\n\n    // Transaction might have been discarded\n    const transaction = queryTransactions.find(qt => qt.id === transactionId);\n    if (!transaction) {\n      return;\n    }\n\n    // Get query hints\n    let hints: QueryHint[];\n    if (datasourceInstance.getQueryHints) {\n      hints = datasourceInstance.getQueryHints(transaction.query, result);\n    }\n\n    // Mark transactions as complete and attach result\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          hints,\n          latency,\n          result,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    // Side-effect: Saving history in localstorage\n    const nextHistory = updateHistory(history, datasourceId, queries);\n\n    dispatch(\n      queryTransactionSuccessAction({\n        exploreId,\n        history: nextHistory,\n        queryTransactions: nextQueryTransactions,\n      })\n    );\n\n    // Keep scanning for results if this was the last scanning transaction\n    if (scanning) {\n      if (_.size(result) === 0) {\n        const other = nextQueryTransactions.find(qt => qt.scanning && !qt.done);\n        if (!other) {\n          const range = scanner();\n          dispatch(scanRangeAction({ exploreId, range }));\n        }\n      } else {\n        // We can stop scanning if we have a result\n        dispatch(scanStopAction({ exploreId }));\n      }\n    }\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport function runQueries(exploreId: ExploreId, ignoreUIState = false): ThunkResult<Promise<any>> {\n  return (dispatch, getState) => {\n    const {\n      datasourceInstance,\n      queries,\n      showingLogs,\n      showingGraph,\n      showingTable,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n      datasourceError,\n      containerWidth,\n      range,\n    } = getState().explore[exploreId];\n\n    if (datasourceError) {\n      // let's not run any queries if data source is in a faulty state\n      return Promise.resolve();\n    }\n\n    if (!hasNonEmptyQuery(queries)) {\n      dispatch(clearQueriesAction({ exploreId }));\n      dispatch(stateSave()); // Remember to saves to state and update location\n      return Promise.resolve();\n    }\n\n    // Some datasource's query builders allow per-query interval limits,\n    // but we're using the datasource interval limit for now\n    const interval = datasourceInstance.interval;\n\n    const timeZone = getTimeZone(getState().user);\n    const updatedRange = getTimeRange(timeZone, range.raw);\n\n    dispatch(runQueriesAction({ exploreId, range: updatedRange }));\n    // Keep table queries first since they need to return quickly\n    const tableQueriesPromise =\n      (ignoreUIState || showingTable) && supportsTable\n        ? dispatch(\n            runQueriesForType(\n              exploreId,\n              'Table',\n              {\n                interval,\n                format: 'table',\n                instant: true,\n                valueWithRefId: true,\n              },\n              (data: any[]) => data[0]\n            )\n          )\n        : undefined;\n    const typeQueriesPromise =\n      (ignoreUIState || showingGraph) && supportsGraph\n        ? dispatch(\n            runQueriesForType(\n              exploreId,\n              'Graph',\n              {\n                interval,\n                format: 'time_series',\n                instant: false,\n                maxDataPoints: containerWidth,\n              },\n              makeTimeSeriesList\n            )\n          )\n        : undefined;\n    const logsQueriesPromise =\n      (ignoreUIState || showingLogs) && supportsLogs\n        ? dispatch(runQueriesForType(exploreId, 'Logs', { interval, format: 'logs' }))\n        : undefined;\n\n    dispatch(stateSave());\n\n    return Promise.all([tableQueriesPromise, typeQueriesPromise, logsQueriesPromise]);\n  };\n}\n\n/**\n * Helper action to build a query transaction object and handing the query to the datasource.\n * @param exploreId Explore area\n * @param resultType Result viewer that will be associated with this query result\n * @param queryOptions Query options as required by the datasource's `query()` function.\n * @param resultGetter Optional result extractor, e.g., if the result is a list and you only need the first element.\n */\nfunction runQueriesForType(\n  exploreId: ExploreId,\n  resultType: ResultType,\n  queryOptions: QueryOptions,\n  resultGetter?: ResultGetter\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const { datasourceInstance, eventBridge, queries, queryIntervals, range, scanning } = getState().explore[exploreId];\n    const datasourceId = datasourceInstance.meta.id;\n    // Run all queries concurrently\n    const queryPromises = queries.map(async (query, rowIndex) => {\n      const transaction = buildQueryTransaction(\n        query,\n        rowIndex,\n        resultType,\n        queryOptions,\n        range,\n        queryIntervals,\n        scanning\n      );\n      dispatch(queryTransactionStartAction({ exploreId, resultType, rowIndex, transaction }));\n      try {\n        const now = Date.now();\n        const res = await datasourceInstance.query(transaction.options);\n        eventBridge.emit('data-received', res.data || []);\n        const latency = Date.now() - now;\n        const { queryTransactions } = getState().explore[exploreId];\n        const results = resultGetter ? resultGetter(res.data, transaction, queryTransactions) : res.data;\n        dispatch(queryTransactionSuccess(exploreId, transaction.id, results, latency, queries, datasourceId));\n      } catch (response) {\n        eventBridge.emit('data-error', response);\n        dispatch(queryTransactionFailure(exploreId, transaction.id, response, datasourceId));\n      }\n    });\n\n    return Promise.all(queryPromises);\n  };\n}\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId, scanner: RangeScanner): ThunkResult<void> {\n  return dispatch => {\n    // Register the scanner\n    dispatch(scanStartAction({ exploreId, scanner }));\n    // Scanning must trigger query run, and return the new range\n    const range = scanner();\n    // Set the new range to be displayed\n    dispatch(scanRangeAction({ exploreId, range }));\n  };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Inject react keys into query objects\n    const queries = rawQueries.map(q => ({ ...q, ...generateEmptyQuery(getState().explore[exploreId].queries) }));\n    dispatch(setQueriesAction({ exploreId, queries }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(itemId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(splitCloseAction({ itemId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore[ExploreId.left];\n    const queryState = getState().location.query[ExploreId.left] as string;\n    const urlState = parseUrlState(queryState);\n    const queryTransactions: QueryTransaction[] = [];\n    const itemState = {\n      ...leftState,\n      queryTransactions,\n      queries: leftState.queries.slice(),\n      exploreId: ExploreId.right,\n      urlState,\n    };\n    dispatch(splitOpenAction({ itemState }));\n    dispatch(stateSave());\n  };\n}\n\nconst toRawTimeRange = (range: TimeRange): RawTimeRange => {\n  let from = range.raw.from;\n  if (moment.isMoment(from)) {\n    from = from.valueOf().toString(10);\n  }\n\n  let to = range.raw.to;\n  if (moment.isMoment(to)) {\n    to = to.valueOf().toString(10);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\n/**\n * Saves Explore state to URL using the `left` and `right` parameters.\n * If split view is not active, `right` will not be set.\n */\nexport function stateSave(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { left, right, split } = getState().explore;\n    const urlStates: { [index: string]: string } = {};\n    const leftUrlState: ExploreUrlState = {\n      datasource: left.datasourceInstance.name,\n      queries: left.queries.map(clearQueryKeys),\n      range: toRawTimeRange(left.range),\n      ui: {\n        showingGraph: left.showingGraph,\n        showingLogs: left.showingLogs,\n        showingTable: left.showingTable,\n        dedupStrategy: left.dedupStrategy,\n      },\n    };\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\n    if (split) {\n      const rightUrlState: ExploreUrlState = {\n        datasource: right.datasourceInstance.name,\n        queries: right.queries.map(clearQueryKeys),\n        range: toRawTimeRange(right.range),\n        ui: {\n          showingGraph: right.showingGraph,\n          showingLogs: right.showingLogs,\n          showingTable: right.showingTable,\n          dedupStrategy: right.dedupStrategy,\n        },\n      };\n\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\n    }\n\n    dispatch(updateLocation({ query: urlStates }));\n  };\n}\n\n/**\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\n * queries won't be run\n */\nconst togglePanelActionCreator = (\n  actionCreator:\n    | ActionCreator<ToggleGraphPayload>\n    | ActionCreator<ToggleLogsPayload>\n    | ActionCreator<ToggleTablePayload>\n) => (exploreId: ExploreId, isPanelVisible: boolean): ThunkResult<void> => {\n  return dispatch => {\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\n    const shouldRunQueries = !isPanelVisible;\n\n    switch (actionCreator.type) {\n      case toggleGraphAction.type:\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\n        break;\n      case toggleLogsAction.type:\n        uiFragmentStateUpdate = { showingLogs: !isPanelVisible };\n        break;\n      case toggleTableAction.type:\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\n        break;\n    }\n\n    dispatch(actionCreator({ exploreId }));\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\n\n    if (shouldRunQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n};\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\n\n/**\n * Expand/collapse the logs result viewer. When collapsed, log queries won't be run.\n */\nexport const toggleLogs = togglePanelActionCreator(toggleLogsAction);\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\n\n/**\n * Change logs deduplication strategy and update URL.\n */\nexport const changeDedupStrategy = (exploreId: ExploreId, dedupStrategy: LogsDedupStrategy): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\n  };\n};\n\nexport function refreshExplore(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const itemState = getState().explore[exploreId];\n    if (!itemState.initialized) {\n      return;\n    }\n\n    const { urlState, update, containerWidth, eventBridge } = itemState;\n    const { datasource, queries, range: urlRange, ui } = urlState;\n    const refreshQueries = queries.map(q => ({ ...q, ...generateEmptyQuery(itemState.queries) }));\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRangeFromUrl(urlRange, timeZone);\n\n    // need to refresh datasource\n    if (update.datasource) {\n      const initialQueries = ensureQueries(queries);\n      dispatch(initializeExplore(exploreId, datasource, initialQueries, range, containerWidth, eventBridge, ui));\n      return;\n    }\n\n    if (update.range) {\n      dispatch(changeTimeAction({ exploreId, range }));\n    }\n\n    // need to refresh ui state\n    if (update.ui) {\n      dispatch(updateUIStateAction({ ...ui, exploreId }));\n    }\n\n    // need to refresh queries\n    if (update.queries) {\n      dispatch(setQueriesAction({ exploreId, queries: refreshQueries }));\n    }\n\n    // always run queries when refresh is needed\n    if (update.queries || update.ui || update.range) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n","import { UserState } from 'app/types';\nimport { parseTimeZone } from '@grafana/ui';\n\nexport const getTimeZone = (state: UserState) => parseTimeZone(state.timeZone);\n","import React, { PureComponent } from 'react';\n\ninterface Props {\n  isOpen: boolean;\n  label: string;\n  loading?: boolean;\n  onToggle: (isOpen: boolean) => void;\n}\n\nexport default class Panel extends PureComponent<Props> {\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\n\n  render() {\n    const { isOpen, loading } = this.props;\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\n    return (\n      <div className=\"explore-panel panel-container\">\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\n          <div className=\"explore-panel__header-buttons\">\n            <span className={iconClass} />\n          </div>\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\n        </div>\n        {isOpen && (\n          <div className=\"explore-panel__body\">\n            <div className={loaderClass} />\n            {this.props.children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component<{}, any> {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div className=\"explore-container\">\n          <h3>An unexpected error happened.</h3>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import React, { MouseEvent, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { TimeSeries } from 'app/core/core';\n\ninterface LegendProps {\n  data: TimeSeries[];\n  hiddenSeries: Set<string>;\n  onToggleSeries?: (series: TimeSeries, exclusive: boolean) => void;\n}\n\ninterface LegendItemProps {\n  hidden: boolean;\n  onClickLabel?: (series: TimeSeries, event: MouseEvent) => void;\n  series: TimeSeries;\n}\n\nclass LegendItem extends PureComponent<LegendItemProps> {\n  onClickLabel = e => this.props.onClickLabel(this.props.series, e);\n\n  render() {\n    const { hidden, series } = this.props;\n    const seriesClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n    });\n    return (\n      <div className={`graph-legend-series ${seriesClasses}`}>\n        <div className=\"graph-legend-icon\">\n          <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\n        </div>\n        <a className=\"graph-legend-alias pointer\" title={series.alias} onClick={this.onClickLabel}>\n          {series.alias}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default class Legend extends PureComponent<LegendProps> {\n  static defaultProps = {\n    onToggleSeries: () => {},\n  };\n\n  onClickLabel = (series: TimeSeries, event: MouseEvent) => {\n    const { onToggleSeries } = this.props;\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\n    onToggleSeries(series, !exclusive);\n  };\n\n  render() {\n    const { data, hiddenSeries } = this.props;\n    const items = data || [];\n    return (\n      <div className=\"graph-legend ps\">\n        {items.map((series, i) => (\n          <LegendItem\n            hidden={hiddenSeries.has(series.alias)}\n            // Workaround to resolve conflicts since series visibility tracks the alias property\n            key={`${series.id}-${i}`}\n            onClickLabel={this.onClickLabel}\n            series={series}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.stack';\n\nimport { TimeZone, AbsoluteTimeRange } from '@grafana/ui';\nimport TimeSeries from 'app/core/time_series2';\n\nimport Legend from './Legend';\nimport { equal, intersect } from './utils/set';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\n// Copied from graph.ts\nfunction time_format(ticks, min, max) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return '%H:%M:%S';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return '%H:%M';\n    }\n    if (secPerTick <= 80000) {\n      return '%m/%d %H:%M';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return '%m/%d';\n    }\n    return '%Y-%m';\n  }\n\n  return '%H:%M';\n}\n\nconst FLOT_OPTIONS = {\n  legend: {\n    show: false,\n  },\n  series: {\n    lines: {\n      linewidth: 1,\n      zero: false,\n    },\n    shadowSize: 0,\n  },\n  grid: {\n    minBorderMargin: 0,\n    markings: [],\n    backgroundColor: null,\n    borderWidth: 0,\n    // hoverable: true,\n    clickable: true,\n    color: '#a1a1a1',\n    margin: { left: 0, right: 0 },\n    labelMarginX: 0,\n  },\n  selection: {\n    mode: 'x',\n    color: '#666',\n  },\n  // crosshair: {\n  //   mode: 'x',\n  // },\n};\n\ninterface GraphProps {\n  data: any[];\n  height?: number;\n  width?: number;\n  id?: string;\n  range: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  split?: boolean;\n  userOptions?: any;\n  onChangeTime?: (range: AbsoluteTimeRange) => void;\n  onToggleSeries?: (alias: string, hiddenSeries: Set<string>) => void;\n}\n\ninterface GraphState {\n  /**\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\n   * Consequently, all series sharing the same alias will share visibility state.\n   */\n  hiddenSeries: Set<string>;\n  showAllTimeSeries: boolean;\n}\n\nexport class Graph extends PureComponent<GraphProps, GraphState> {\n  $el: any;\n  dynamicOptions = null;\n\n  state = {\n    hiddenSeries: new Set(),\n    showAllTimeSeries: false,\n  };\n\n  getGraphData() {\n    const { data } = this.props;\n\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  }\n\n  componentDidMount() {\n    this.draw();\n    this.$el = $(`#${this.props.id}`);\n    this.$el.bind('plotselected', this.onPlotSelected);\n  }\n\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.range !== this.props.range ||\n      prevProps.split !== this.props.split ||\n      prevProps.height !== this.props.height ||\n      prevProps.width !== this.props.width ||\n      !equal(prevState.hiddenSeries, this.state.hiddenSeries)\n    ) {\n      this.draw();\n    }\n  }\n\n  componentWillUnmount() {\n    this.$el.unbind('plotselected', this.onPlotSelected);\n  }\n\n  onPlotSelected = (event, ranges) => {\n    const { onChangeTime } = this.props;\n    if (onChangeTime) {\n      this.props.onChangeTime({\n        from: ranges.xaxis.from,\n        to: ranges.xaxis.to,\n      });\n    }\n  };\n\n  getDynamicOptions() {\n    const { range, width, timeZone } = this.props;\n    const ticks = (width || 0) / 100;\n    const min = range.from;\n    const max = range.to;\n    return {\n      xaxis: {\n        mode: 'time',\n        min: min,\n        max: max,\n        label: 'Datetime',\n        ticks: ticks,\n        timezone: timeZone.raw,\n        timeformat: time_format(ticks, min, max),\n      },\n    };\n  }\n\n  onShowAllTimeSeries = () => {\n    this.setState(\n      {\n        showAllTimeSeries: true,\n      },\n      this.draw\n    );\n  };\n\n  onToggleSeries = (series: TimeSeries, exclusive: boolean) => {\n    this.setState((state, props) => {\n      const { data, onToggleSeries } = props;\n      const { hiddenSeries } = state;\n\n      // Deduplicate series as visibility tracks the alias property\n      const oneSeriesVisible = hiddenSeries.size === new Set(data.map(d => d.alias)).size - 1;\n\n      let nextHiddenSeries = new Set();\n      if (exclusive) {\n        if (hiddenSeries.has(series.alias) || !oneSeriesVisible) {\n          nextHiddenSeries = new Set(data.filter(d => d.alias !== series.alias).map(d => d.alias));\n        }\n      } else {\n        // Prune hidden series no longer part of those available from the most recent query\n        const availableSeries = new Set(data.map(d => d.alias));\n        nextHiddenSeries = intersect(new Set(hiddenSeries), availableSeries);\n        if (nextHiddenSeries.has(series.alias)) {\n          nextHiddenSeries.delete(series.alias);\n        } else {\n          nextHiddenSeries.add(series.alias);\n        }\n      }\n      if (onToggleSeries) {\n        onToggleSeries(series.alias, nextHiddenSeries);\n      }\n      return {\n        hiddenSeries: nextHiddenSeries,\n      };\n    }, this.draw);\n  };\n\n  draw() {\n    const { userOptions = {} } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    const $el = $(`#${this.props.id}`);\n    let series = [{ data: [[0, 0]] }];\n\n    if (data && data.length > 0) {\n      series = data\n        .filter((ts: TimeSeries) => !hiddenSeries.has(ts.alias))\n        .map((ts: TimeSeries) => ({\n          color: ts.color,\n          label: ts.label,\n          data: ts.getFlotPairs('null'),\n        }));\n    }\n\n    this.dynamicOptions = this.getDynamicOptions();\n\n    const options = {\n      ...FLOT_OPTIONS,\n      ...this.dynamicOptions,\n      ...userOptions,\n    };\n\n    $.plot($el, series, options);\n  }\n\n  render() {\n    const { height = 100, id = 'graph' } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    return (\n      <>\n        {this.props.data && this.props.data.length > MAX_NUMBER_OF_TIME_SERIES && !this.state.showAllTimeSeries && (\n          <div className=\"time-series-disclaimer\">\n            <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n            <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\n              this.props.data.length\n            }`}</span>\n          </div>\n        )}\n        <div id={id} className=\"explore-graph\" style={{ height }} />\n        <Legend data={data} hiddenSeries={hiddenSeries} onToggleSeries={this.onToggleSeries} />\n      </>\n    );\n  }\n}\n\nexport default Graph;\n","/**\n * Performs a shallow comparison of two sets with the same item type.\n */\nexport function equal<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n  const it = a.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return true;\n    }\n    if (!b.has(value)) {\n      return false;\n    }\n  }\n}\n\n/**\n * Returns a new set with items in both sets using shallow comparison.\n */\nexport function intersect<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const result = new Set<T>();\n  const it = b.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return result;\n    }\n    if (a.has(value)) {\n      result.add(value);\n    }\n  }\n}\n","// Libraries\nimport React, { ComponentClass } from 'react';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { AutoSizer } from 'react-virtualized';\n\n// Services & Utils\nimport store from 'app/core/store';\n\n// Components\nimport { Alert } from './Error';\nimport ErrorBoundary from './ErrorBoundary';\nimport GraphContainer from './GraphContainer';\nimport LogsContainer from './LogsContainer';\nimport QueryRows from './QueryRows';\nimport TableContainer from './TableContainer';\nimport TimePicker from './TimePicker';\n\n// Actions\nimport {\n  changeSize,\n  changeTime,\n  initializeExplore,\n  modifyQueries,\n  scanStart,\n  setQueries,\n  refreshExplore,\n  reconnectDatasource,\n} from './state/actions';\n\n// Types\nimport { RawTimeRange, DataQuery, ExploreStartPageProps, ExploreDataSourceApi } from '@grafana/ui';\nimport {\n  ExploreItemState,\n  ExploreUrlState,\n  RangeScanner,\n  ExploreId,\n  ExploreUpdateState,\n  ExploreUIState,\n} from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport {\n  LAST_USED_DATASOURCE_KEY,\n  ensureQueries,\n  DEFAULT_RANGE,\n  DEFAULT_UI_STATE,\n  getTimeRangeFromUrl,\n} from 'app/core/utils/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport { scanStopAction } from './state/actionTypes';\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\nimport { getTimeZone } from '../profile/state/selectors';\n\ninterface ExploreProps {\n  StartPage?: ComponentClass<ExploreStartPageProps>;\n  changeSize: typeof changeSize;\n  changeTime: typeof changeTime;\n  datasourceError: string;\n  datasourceInstance: ExploreDataSourceApi;\n  datasourceLoading: boolean | null;\n  datasourceMissing: boolean;\n  exploreId: ExploreId;\n  initializeExplore: typeof initializeExplore;\n  initialized: boolean;\n  modifyQueries: typeof modifyQueries;\n  update: ExploreUpdateState;\n  reconnectDatasource: typeof reconnectDatasource;\n  refreshExplore: typeof refreshExplore;\n  scanner?: RangeScanner;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  scanStart: typeof scanStart;\n  scanStopAction: typeof scanStopAction;\n  setQueries: typeof setQueries;\n  split: boolean;\n  showingStartPage?: boolean;\n  supportsGraph: boolean | null;\n  supportsLogs: boolean | null;\n  supportsTable: boolean | null;\n  queryKeys: string[];\n  initialDatasource: string;\n  initialQueries: DataQuery[];\n  initialRange: RawTimeRange;\n  initialUI: ExploreUIState;\n}\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<ExploreProps> {\n  el: any;\n  exploreEvents: Emitter;\n  /**\n   * Timepicker to control scanning\n   */\n  timepickerRef: React.RefObject<TimePicker>;\n\n  constructor(props: ExploreProps) {\n    super(props);\n    this.exploreEvents = new Emitter();\n    this.timepickerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { initialized, exploreId, initialDatasource, initialQueries, initialRange, initialUI } = this.props;\n    const width = this.el ? this.el.offsetWidth : 0;\n\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\n    if (!initialized) {\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        width,\n        this.exploreEvents,\n        initialUI\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n  }\n\n  componentDidUpdate(prevProps: ExploreProps) {\n    this.refreshExplore();\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  onChangeTime = (range: RawTimeRange, changedByScanner?: boolean) => {\n    if (this.props.scanning && !changedByScanner) {\n      this.onStopScanning();\n    }\n    this.props.changeTime(this.props.exploreId, range);\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onClickLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onModifyQueries = (action: any, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    const scanner = this.scanPreviousRange;\n    this.props.scanStart(this.props.exploreId, scanner);\n  };\n\n  scanPreviousRange = (): RawTimeRange => {\n    // Calling move() on the timepicker will trigger this.onChangeTime()\n    return this.timepickerRef.current.move(-1, true);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  refreshExplore = () => {\n    const { exploreId, update } = this.props;\n\n    if (update.queries || update.ui || update.range || update.datasource) {\n      this.props.refreshExplore(exploreId);\n    }\n  };\n\n  renderEmptyState = () => {\n    return (\n      <div className=\"explore-container\">\n        <NoDataSourceCallToAction />\n      </div>\n    );\n  };\n\n  onReconnect = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { exploreId, reconnectDatasource } = this.props;\n\n    event.preventDefault();\n    reconnectDatasource(exploreId);\n  };\n\n  render() {\n    const {\n      StartPage,\n      datasourceInstance,\n      datasourceError,\n      datasourceLoading,\n      datasourceMissing,\n      exploreId,\n      showingStartPage,\n      split,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n      queryKeys,\n    } = this.props;\n    const exploreClass = split ? 'explore explore-split' : 'explore';\n\n    return (\n      <div className={exploreClass} ref={this.getRef}>\n        <ExploreToolbar exploreId={exploreId} timepickerRef={this.timepickerRef} onChangeTime={this.onChangeTime} />\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\n        {datasourceMissing ? this.renderEmptyState() : null}\n\n        <FadeIn duration={datasourceError ? 150 : 5} in={datasourceError ? true : false}>\n          <div className=\"explore-container\">\n            <Alert\n              message={`Error connecting to datasource: ${datasourceError}`}\n              button={{ text: 'Reconnect', onClick: this.onReconnect }}\n            />\n          </div>\n        </FadeIn>\n\n        {datasourceInstance && (\n          <div className=\"explore-container\">\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\n            <AutoSizer onResize={this.onResize} disableHeight>\n              {({ width }) => {\n                if (width === 0) {\n                  return null;\n                }\n\n                return (\n                  <main className=\"m-t-2\" style={{ width }}>\n                    <ErrorBoundary>\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\n                      {!showingStartPage && (\n                        <>\n                          {supportsGraph && !supportsLogs && <GraphContainer width={width} exploreId={exploreId} />}\n                          {supportsTable && <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />}\n                          {supportsLogs && (\n                            <LogsContainer\n                              width={width}\n                              exploreId={exploreId}\n                              onClickLabel={this.onClickLabel}\n                              onStartScanning={this.onStartScanning}\n                              onStopScanning={this.onStopScanning}\n                            />\n                          )}\n                        </>\n                      )}\n                    </ErrorBoundary>\n                  </main>\n                );\n              }}\n            </AutoSizer>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const timeZone = getTimeZone(state.user);\n  const {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    showingStartPage,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n    urlState,\n    update,\n  } = item;\n\n  const { datasource, queries, range: urlRange, ui } = (urlState || {}) as ExploreUrlState;\n  const initialDatasource = datasource || store.get(LAST_USED_DATASOURCE_KEY);\n  const initialQueries: DataQuery[] = ensureQueries(queries);\n  const initialRange = urlRange ? getTimeRangeFromUrl(urlRange, timeZone).raw : DEFAULT_RANGE;\n  const initialUI = ui || DEFAULT_UI_STATE;\n\n  return {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    showingStartPage,\n    split,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n    update,\n    initialDatasource,\n    initialQueries,\n    initialRange,\n    initialUI,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSize,\n  changeTime,\n  initializeExplore,\n  modifyQueries,\n  reconnectDatasource,\n  refreshExplore,\n  scanStart,\n  scanStopAction,\n  setQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Explore)\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  message: any;\n  button?: {\n    text: string;\n    onClick: (event: React.MouseEvent) => void;\n  };\n}\n\nexport const Alert: FC<Props> = props => {\n  const { message, button } = props;\n  return (\n    <div className=\"alert-container\">\n      <div className=\"alert-error alert\">\n        <div className=\"alert-icon\">\n          <i className=\"fa fa-exclamation-triangle\" />\n        </div>\n        <div className=\"alert-body\">\n          <div className=\"alert-title\">{message}</div>\n        </div>\n        {button && (\n          <div className=\"alert-button\">\n            <button className=\"btn btn-outline-danger\" onClick={button.onClick}>\n              {button.text}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport { TimeRange, TimeZone, AbsoluteTimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleGraph, changeTime } from './state/actions';\nimport Graph from './Graph';\nimport Panel from './Panel';\nimport { getTimeZone } from '../profile/state/selectors';\n\ninterface GraphContainerProps {\n  exploreId: ExploreId;\n  graphResult?: any[];\n  loading: boolean;\n  range: TimeRange;\n  timeZone: TimeZone;\n  showingGraph: boolean;\n  showingTable: boolean;\n  split: boolean;\n  toggleGraph: typeof toggleGraph;\n  changeTime: typeof changeTime;\n  width: number;\n}\n\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\n  onClickGraphButton = () => {\n    this.props.toggleGraph(this.props.exploreId, this.props.showingGraph);\n  };\n\n  onChangeTime = (absRange: AbsoluteTimeRange) => {\n    const { exploreId, timeZone, changeTime } = this.props;\n    const range = {\n      from: timeZone.isUtc ? moment.utc(absRange.from) : moment(absRange.from),\n      to: timeZone.isUtc ? moment.utc(absRange.to) : moment(absRange.to),\n    };\n\n    changeTime(exploreId, range);\n  };\n\n  render() {\n    const { exploreId, graphResult, loading, showingGraph, showingTable, range, split, width, timeZone } = this.props;\n    const graphHeight = showingGraph && showingTable ? 200 : 400;\n    const timeRange = { from: range.from.valueOf(), to: range.to.valueOf() };\n\n    if (!graphResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Graph\" isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\n        <Graph\n          data={graphResult}\n          height={graphHeight}\n          id={`explore-graph-${exploreId}`}\n          onChangeTime={this.onChangeTime}\n          range={timeRange}\n          timeZone={timeZone}\n          split={split}\n          width={width}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { graphResult, queryTransactions, range, showingGraph, showingTable } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\n  return { graphResult, loading, range, showingGraph, showingTable, split, timeZone: getTimeZone(state.user) };\n}\n\nconst mapDispatchToProps = {\n  toggleGraph,\n  changeTime,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GraphContainer)\n);\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport { RawTimeRange, TimeRange, LogLevel, TimeZone, AbsoluteTimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { LogsModel, LogsDedupStrategy } from 'app/core/logs_model';\nimport { StoreState } from 'app/types';\n\nimport { toggleLogs, changeDedupStrategy, changeTime } from './state/actions';\nimport Logs from './Logs';\nimport Panel from './Panel';\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\nimport { deduplicatedLogsSelector, exploreItemUIStateSelector } from 'app/features/explore/state/selectors';\nimport { getTimeZone } from '../profile/state/selectors';\n\ninterface LogsContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  logsHighlighterExpressions?: string[];\n  logsResult?: LogsModel;\n  dedupedResult?: LogsModel;\n  onClickLabel: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  range: TimeRange;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  showingLogs: boolean;\n  toggleLogs: typeof toggleLogs;\n  toggleLogLevelAction: typeof toggleLogLevelAction;\n  changeDedupStrategy: typeof changeDedupStrategy;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  width: number;\n  changeTime: typeof changeTime;\n}\n\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\n  onChangeTime = (absRange: AbsoluteTimeRange) => {\n    const { exploreId, timeZone, changeTime } = this.props;\n    const range = {\n      from: timeZone.isUtc ? moment.utc(absRange.from) : moment(absRange.from),\n      to: timeZone.isUtc ? moment.utc(absRange.to) : moment(absRange.to),\n    };\n\n    changeTime(exploreId, range);\n  };\n  onClickLogsButton = () => {\n    this.props.toggleLogs(this.props.exploreId, this.props.showingLogs);\n  };\n\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\n  };\n\n  hangleToggleLogLevel = (hiddenLogLevels: Set<LogLevel>) => {\n    const { exploreId } = this.props;\n    this.props.toggleLogLevelAction({\n      exploreId,\n      hiddenLogLevels,\n    });\n  };\n\n  render() {\n    const {\n      exploreId,\n      loading,\n      logsHighlighterExpressions,\n      logsResult,\n      dedupedResult,\n      onClickLabel,\n      onStartScanning,\n      onStopScanning,\n      range,\n      timeZone,\n      showingLogs,\n      scanning,\n      scanRange,\n      width,\n      hiddenLogLevels,\n    } = this.props;\n\n    return (\n      <Panel label=\"Logs\" loading={loading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\n        <Logs\n          dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\n          data={logsResult}\n          dedupedData={dedupedResult}\n          exploreId={exploreId}\n          highlighterExpressions={logsHighlighterExpressions}\n          loading={loading}\n          onChangeTime={this.onChangeTime}\n          onClickLabel={onClickLabel}\n          onStartScanning={onStartScanning}\n          onStopScanning={onStopScanning}\n          onDedupStrategyChange={this.handleDedupStrategyChange}\n          onToggleLogLevel={this.hangleToggleLogLevel}\n          range={range}\n          timeZone={timeZone}\n          scanning={scanning}\n          scanRange={scanRange}\n          width={width}\n          hiddenLogLevels={hiddenLogLevels}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { logsHighlighterExpressions, logsResult, queryTransactions, scanning, scanRange, range } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\n  const { showingLogs, dedupStrategy } = exploreItemUIStateSelector(item);\n  const hiddenLogLevels = new Set(item.hiddenLogLevels);\n  const dedupedResult = deduplicatedLogsSelector(item);\n  const timeZone = getTimeZone(state.user);\n\n  return {\n    loading,\n    logsHighlighterExpressions,\n    logsResult,\n    scanning,\n    scanRange,\n    showingLogs,\n    range,\n    timeZone,\n    dedupStrategy,\n    hiddenLogLevels,\n    dedupedResult,\n  };\n}\n\nconst mapDispatchToProps = {\n  toggleLogs,\n  changeDedupStrategy,\n  toggleLogLevelAction,\n  changeTime,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(LogsContainer)\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport QueryRow from './QueryRow';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreId } from 'app/types/explore';\n\ninterface QueryRowsProps {\n  className?: string;\n  exploreEvents: Emitter;\n  exploreId: ExploreId;\n  queryKeys: string[];\n}\n\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\n  render() {\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\n    return (\n      <div className={className}>\n        {queryKeys.map((key, index) => {\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\n        })}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\n\n// Components\nimport QueryEditor from './QueryEditor';\nimport QueryTransactionStatus from './QueryTransactionStatus';\n\n// Actions\nimport { changeQuery, modifyQueries, runQueries, addQueryRow } from './state/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { DataQuery, ExploreDataSourceApi, QueryHint, QueryFixAction, DataSourceStatus, TimeRange } from '@grafana/ui';\nimport { QueryTransaction, HistoryItem, ExploreItemState, ExploreId } from 'app/types/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\n\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\n  if (transaction) {\n    return transaction.hints[0];\n  }\n  return undefined;\n}\n\ninterface QueryRowProps {\n  addQueryRow: typeof addQueryRow;\n  changeQuery: typeof changeQuery;\n  className?: string;\n  exploreId: ExploreId;\n  datasourceInstance: ExploreDataSourceApi;\n  datasourceStatus: DataSourceStatus;\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\n  history: HistoryItem[];\n  index: number;\n  query: DataQuery;\n  modifyQueries: typeof modifyQueries;\n  queryTransactions: QueryTransaction[];\n  exploreEvents: Emitter;\n  range: TimeRange;\n  removeQueryRowAction: typeof removeQueryRowAction;\n  runQueries: typeof runQueries;\n}\n\nexport class QueryRow extends PureComponent<QueryRowProps> {\n  onExecuteQuery = () => {\n    const { exploreId } = this.props;\n    this.props.runQueries(exploreId);\n  };\n\n  onChangeQuery = (query: DataQuery, override?: boolean) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    this.props.changeQuery(exploreId, query, index, override);\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\n      // Live preview of log search matches. Only use on first row for now\n      this.updateLogsHighlights(query);\n    }\n  };\n\n  componentWillUnmount() {\n    console.log('QueryRow will unmount');\n  }\n\n  onClickAddButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.addQueryRow(exploreId, index);\n  };\n\n  onClickClearButton = () => {\n    this.onChangeQuery(null, true);\n  };\n\n  onClickHintFix = (action: QueryFixAction) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, action: QueryFixAction) => datasourceInstance.modifyQuery(queries, action);\n      this.props.modifyQueries(exploreId, action, index, modifier);\n    }\n  };\n\n  onClickRemoveButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.removeQueryRowAction({ exploreId, index });\n  };\n\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance.getHighlighterExpression) {\n      const { exploreId } = this.props;\n      const expressions = [datasourceInstance.getHighlighterExpression(value)];\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\n    }\n  }, 500);\n\n  render() {\n    const {\n      datasourceInstance,\n      history,\n      index,\n      query,\n      queryTransactions,\n      exploreEvents,\n      range,\n      datasourceStatus,\n    } = this.props;\n\n    const transactions = queryTransactions.filter(t => t.rowIndex === index);\n    const transactionWithError = transactions.find(t => t.error !== undefined);\n    const hint = getFirstHintFromTransactions(transactions);\n    const queryError = transactionWithError ? transactionWithError.error : null;\n    const QueryField = datasourceInstance.components.ExploreQueryField;\n\n    return (\n      <div className=\"query-row\">\n        <div className=\"query-row-status\">\n          <QueryTransactionStatus transactions={transactions} />\n        </div>\n        <div className=\"query-row-field flex-shrink-1\">\n          {QueryField ? (\n            <QueryField\n              datasource={datasourceInstance}\n              datasourceStatus={datasourceStatus}\n              query={query}\n              error={queryError}\n              hint={hint}\n              history={history}\n              onExecuteQuery={this.onExecuteQuery}\n              onExecuteHint={this.onClickHintFix}\n              onQueryChange={this.onChangeQuery}\n            />\n          ) : (\n            <QueryEditor\n              datasource={datasourceInstance}\n              error={queryError}\n              onQueryChange={this.onChangeQuery}\n              onExecuteQuery={this.onExecuteQuery}\n              initialQuery={query}\n              exploreEvents={exploreEvents}\n              range={range}\n            />\n          )}\n        </div>\n        <div className=\"gf-form-inline flex-shrink-0\">\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickClearButton}>\n              <i className=\"fa fa-times\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickAddButton}>\n              <i className=\"fa fa-plus\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickRemoveButton}>\n              <i className=\"fa fa-minus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId, index }: QueryRowProps) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { datasourceInstance, history, queries, queryTransactions, range, datasourceError } = item;\n  const query = queries[index];\n  return {\n    datasourceInstance,\n    history,\n    query,\n    queryTransactions,\n    range,\n    datasourceStatus: datasourceError ? DataSourceStatus.Disconnected : DataSourceStatus.Connected,\n  };\n}\n\nconst mapDispatchToProps = {\n  addQueryRow,\n  changeQuery,\n  highlightLogsExpressionAction,\n  modifyQueries,\n  removeQueryRowAction,\n  runQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QueryRow)\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\n\n// Services\nimport { getAngularLoader, AngularComponent } from 'app/core/services/AngularLoader';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { DataQuery, TimeRange } from '@grafana/ui';\nimport 'app/features/plugins/plugin_loader';\n\ninterface QueryEditorProps {\n  datasource: any;\n  error?: string | JSX.Element;\n  onExecuteQuery?: () => void;\n  onQueryChange?: (value: DataQuery) => void;\n  initialQuery: DataQuery;\n  exploreEvents: Emitter;\n  range: TimeRange;\n}\n\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\n  element: any;\n  component: AngularComponent;\n\n  async componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\n    this.initTimeSrv(range);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\n    const target = { datasource: datasource.name, ...initialQuery };\n    const scopeProps = {\n      ctrl: {\n        datasource,\n        target,\n        refresh: () => {\n          this.props.onQueryChange(target);\n          this.props.onExecuteQuery();\n        },\n        onQueryChange: () => {\n          this.props.onQueryChange(target);\n        },\n        events: exploreEvents,\n        panel: { datasource, targets: [target] },\n        dashboard: {},\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n    this.props.onQueryChange(target);\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  initTimeSrv(range: TimeRange) {\n    const timeSrv = getTimeSrv();\n    timeSrv.init({\n      time: {\n        from: moment(range.from),\n        to: moment(range.to),\n      },\n      refresh: false,\n      getTimezone: () => 'utc',\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\n    });\n  }\n\n  render() {\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleTable } from './state/actions';\nimport Table from './Table';\nimport Panel from './Panel';\nimport TableModel from 'app/core/table_model';\n\ninterface TableContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  onClickCell: (key: string, value: string) => void;\n  showingTable: boolean;\n  tableResult?: TableModel;\n  toggleTable: typeof toggleTable;\n}\n\nexport class TableContainer extends PureComponent<TableContainerProps> {\n  onClickTableButton = () => {\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\n  };\n\n  render() {\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\n\n    if (!tableResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Table\" loading={loading} isOpen={showingTable} onToggle={this.onClickTableButton}>\n        <Table data={tableResult} loading={loading} onClickCell={onClickCell} />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { queryTransactions, showingTable, tableResult } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\n  return { loading, showingTable, tableResult };\n}\n\nconst mapDispatchToProps = {\n  toggleTable,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TableContainer)\n);\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport ReactTable from 'react-table';\n\nimport TableModel from 'app/core/table_model';\n\nconst EMPTY_TABLE = new TableModel();\n// Identify columns that contain values\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\n\ninterface TableProps {\n  data: TableModel;\n  loading: boolean;\n  onClickCell?: (columnKey: string, rowValue: string) => void;\n}\n\nfunction prepareRows(rows, columnNames) {\n  return rows.map(cells => _.zipObject(columnNames, cells));\n}\n\nexport default class Table extends PureComponent<TableProps> {\n  getCellProps = (state, rowInfo, column) => {\n    return {\n      onClick: (e: React.SyntheticEvent) => {\n        // Only handle click on link, not the cell\n        if (e.target) {\n          const link = e.target as HTMLElement;\n          if (link.className === 'link') {\n            const columnKey = column.Header().props.title;\n            const rowValue = rowInfo.row[columnKey];\n            this.props.onClickCell(columnKey, rowValue);\n          }\n        }\n      },\n    };\n  };\n\n  render() {\n    const { data, loading } = this.props;\n    const tableModel = data || EMPTY_TABLE;\n    const columnNames = tableModel.columns.map(({ text }) => text);\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\n      Header: () => <span title={text}>{text}</span>,\n      accessor: text,\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\n      show: text !== 'Time',\n      Cell: row => (\n        <span className={filterable ? 'link' : ''} title={text + ': ' + row.value}>\n          {row.value}\n        </span>\n      ),\n    }));\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\n\n    return (\n      <ReactTable\n        columns={columns}\n        data={tableModel.rows}\n        getTdProps={this.getCellProps}\n        loading={loading}\n        minRows={0}\n        noDataText={noDataText}\n        resolveData={data => prepareRows(data, columnNames)}\n        showPagination={Boolean(data)}\n      />\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\nimport { ExploreId } from 'app/types/explore';\nimport { DataSourceSelectItem, RawTimeRange, ClickOutsideWrapper, TimeZone, TimeRange } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { StoreState } from 'app/types/store';\nimport {\n  changeDatasource,\n  clearQueries,\n  splitClose,\n  runQueries,\n  splitOpen,\n  changeRefreshInterval,\n} from './state/actions';\nimport TimePicker from './TimePicker';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { RefreshPicker, SetInterval } from '@grafana/ui';\n\nenum IconSide {\n  left = 'left',\n  right = 'right',\n}\n\nconst createResponsiveButton = (options: {\n  splitted: boolean;\n  title: string;\n  onClick: () => void;\n  buttonClassName?: string;\n  iconClassName?: string;\n  iconSide?: IconSide;\n}) => {\n  const defaultOptions = {\n    iconSide: IconSide.left,\n  };\n  const props = { ...options, defaultOptions };\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide } = props;\n\n  return (\n    <button className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`} onClick={onClick}>\n      {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName}`} /> : null}\n      <span className=\"btn-title\">{!splitted ? title : ''}</span>\n      {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName}`} /> : null}\n    </button>\n  );\n};\n\ninterface OwnProps {\n  exploreId: ExploreId;\n  timepickerRef: React.RefObject<TimePicker>;\n  onChangeTime: (range: RawTimeRange, changedByScanner?: boolean) => void;\n}\n\ninterface StateProps {\n  datasourceMissing: boolean;\n  exploreDatasources: DataSourceSelectItem[];\n  loading: boolean;\n  range: TimeRange;\n  timeZone: TimeZone;\n  selectedDatasource: DataSourceSelectItem;\n  splitted: boolean;\n  refreshInterval: string;\n}\n\ninterface DispatchProps {\n  changeDatasource: typeof changeDatasource;\n  clearAll: typeof clearQueries;\n  runQueries: typeof runQueries;\n  closeSplit: typeof splitClose;\n  split: typeof splitOpen;\n  changeRefreshInterval: typeof changeRefreshInterval;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport class UnConnectedExploreToolbar extends PureComponent<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChangeDatasource = async option => {\n    this.props.changeDatasource(this.props.exploreId, option.value);\n  };\n\n  onClearAll = () => {\n    this.props.clearAll(this.props.exploreId);\n  };\n\n  onRunQuery = () => {\n    return this.props.runQueries(this.props.exploreId);\n  };\n\n  onCloseTimePicker = () => {\n    this.props.timepickerRef.current.setState({ isOpen: false });\n  };\n\n  onChangeRefreshInterval = (item: string) => {\n    const { changeRefreshInterval, exploreId } = this.props;\n    changeRefreshInterval(exploreId, item);\n  };\n\n  render() {\n    const {\n      datasourceMissing,\n      exploreDatasources,\n      closeSplit,\n      exploreId,\n      loading,\n      range,\n      timeZone,\n      selectedDatasource,\n      splitted,\n      timepickerRef,\n      refreshInterval,\n      onChangeTime,\n      split,\n    } = this.props;\n\n    return (\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-header\">\n            <div className=\"explore-toolbar-header-title\">\n              {exploreId === 'left' && (\n                <span className=\"navbar-page-btn\">\n                  <i className=\"gicon gicon-explore\" />\n                  Explore\n                </span>\n              )}\n            </div>\n            {splitted && (\n              <a className=\"explore-toolbar-header-close\" onClick={() => closeSplit(exploreId)}>\n                <i className=\"fa fa-times fa-fw\" />\n              </a>\n            )}\n          </div>\n        </div>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-content\">\n            {!datasourceMissing ? (\n              <div className=\"explore-toolbar-content-item\">\n                <div className=\"datasource-picker\">\n                  <DataSourcePicker\n                    onChange={this.onChangeDatasource}\n                    datasources={exploreDatasources}\n                    current={selectedDatasource}\n                  />\n                </div>\n              </div>\n            ) : null}\n            {exploreId === 'left' && !splitted ? (\n              <div className=\"explore-toolbar-content-item\">\n                {createResponsiveButton({\n                  splitted,\n                  title: 'Split',\n                  onClick: split,\n                  iconClassName: 'fa fa-fw fa-columns icon-margin-right',\n                  iconSide: IconSide.left,\n                })}\n              </div>\n            ) : null}\n            <div className=\"explore-toolbar-content-item timepicker\">\n              <ClickOutsideWrapper onClick={this.onCloseTimePicker}>\n                <TimePicker ref={timepickerRef} range={range} isUtc={timeZone.isUtc} onChangeTime={onChangeTime} />\n              </ClickOutsideWrapper>\n\n              <RefreshPicker\n                onIntervalChanged={this.onChangeRefreshInterval}\n                onRefresh={this.onRunQuery}\n                value={refreshInterval}\n                tooltip=\"Refresh\"\n              />\n              {refreshInterval && <SetInterval func={this.onRunQuery} interval={refreshInterval} />}\n            </div>\n\n            <div className=\"explore-toolbar-content-item\">\n              <button className=\"btn navbar-button\" onClick={this.onClearAll}>\n                Clear All\n              </button>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              {createResponsiveButton({\n                splitted,\n                title: 'Run Query',\n                onClick: this.onRunQuery,\n                buttonClassName: 'navbar-button--secondary',\n                iconClassName: loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-level-down fa-fw run-icon',\n                iconSide: IconSide.right,\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\n  const splitted = state.explore.split;\n  const exploreItem = state.explore[exploreId];\n  const {\n    datasourceInstance,\n    datasourceMissing,\n    exploreDatasources,\n    queryTransactions,\n    range,\n    refreshInterval,\n  } = exploreItem;\n  const selectedDatasource = datasourceInstance\n    ? exploreDatasources.find(datasource => datasource.name === datasourceInstance.name)\n    : undefined;\n  const loading = queryTransactions.some(qt => !qt.done);\n\n  return {\n    datasourceMissing,\n    exploreDatasources,\n    loading,\n    range,\n    timeZone: getTimeZone(state.user),\n    selectedDatasource,\n    splitted,\n    refreshInterval,\n  };\n};\n\nconst mapDispatchToProps: DispatchProps = {\n  changeDatasource,\n  changeRefreshInterval,\n  clearAll: clearQueries,\n  runQueries,\n  closeSplit: splitClose,\n  split: splitOpen,\n};\n\nexport const ExploreToolbar = hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(UnConnectedExploreToolbar)\n);\n","import React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport * as rangeUtil from '@grafana/ui/src/utils/rangeutil';\nimport { Input, RawTimeRange, TimeRange, TIME_FORMAT } from '@grafana/ui';\n\ninterface TimePickerProps {\n  isOpen?: boolean;\n  isUtc?: boolean;\n  range: TimeRange;\n  onChangeTime?: (range: RawTimeRange, scanning?: boolean) => void;\n}\n\ninterface TimePickerState {\n  isOpen: boolean;\n  isUtc: boolean;\n  rangeString: string;\n  refreshInterval?: string;\n  initialRange: RawTimeRange;\n\n  // Input-controlled text, keep these in a shape that is human-editable\n  fromRaw: string;\n  toRaw: string;\n}\n\nconst getRaw = (isUtc: boolean, range: any) => {\n  const rawRange = {\n    from: range.raw.from,\n    to: range.raw.to,\n  };\n\n  if (moment.isMoment(rawRange.from)) {\n    if (!isUtc) {\n      rawRange.from = rawRange.from.local();\n    }\n    rawRange.from = rawRange.from.format(TIME_FORMAT);\n  }\n\n  if (moment.isMoment(rawRange.to)) {\n    if (!isUtc) {\n      rawRange.to = rawRange.to.local();\n    }\n    rawRange.to = rawRange.to.format(TIME_FORMAT);\n  }\n\n  return rawRange;\n};\n\n/**\n * TimePicker with dropdown menu for relative dates.\n *\n * Initialize with a range that is either based on relative rawRange.strings,\n * or on Moment objects.\n * Internally the component needs to keep a string representation in `fromRaw`\n * and `toRaw` for the controlled inputs.\n * When a time is picked, `onChangeTime` is called with the new range that\n * is again based on relative time strings or Moment objects.\n */\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\n  dropdownEl: any;\n\n  constructor(props) {\n    super(props);\n\n    const { range, isUtc, isOpen } = props;\n    const rawRange = getRaw(props.isUtc, range);\n\n    this.state = {\n      isOpen: isOpen,\n      isUtc: isUtc,\n      rangeString: rangeUtil.describeTimeRange(range.raw),\n      fromRaw: rawRange.from,\n      toRaw: rawRange.to,\n      initialRange: range.raw,\n      refreshInterval: '',\n    };\n  } //Temp solution... How do detect if ds supports table format?\n\n  static getDerivedStateFromProps(props: TimePickerProps, state: TimePickerState) {\n    if (\n      state.initialRange &&\n      state.initialRange.from === props.range.raw.from &&\n      state.initialRange.to === props.range.raw.to\n    ) {\n      return state;\n    }\n\n    const { range } = props;\n    const rawRange = getRaw(props.isUtc, range);\n\n    return {\n      ...state,\n      fromRaw: rawRange.from,\n      toRaw: rawRange.to,\n      initialRange: range.raw,\n      rangeString: rangeUtil.describeTimeRange(range.raw),\n    };\n  }\n\n  move(direction: number, scanning?: boolean): RawTimeRange {\n    const { onChangeTime, range: origRange } = this.props;\n    const range = {\n      from: moment.utc(origRange.from),\n      to: moment.utc(origRange.to),\n    };\n    const timespan = (range.to.valueOf() - range.from.valueOf()) / 2;\n    let to, from;\n    if (direction === -1) {\n      to = range.to.valueOf() - timespan;\n      from = range.from.valueOf() - timespan;\n    } else if (direction === 1) {\n      to = range.to.valueOf() + timespan;\n      from = range.from.valueOf() + timespan;\n    } else {\n      to = range.to.valueOf();\n      from = range.from.valueOf();\n    }\n\n    const nextTimeRange = {\n      from: this.props.isUtc ? moment.utc(from) : moment(from),\n      to: this.props.isUtc ? moment.utc(to) : moment(to),\n    };\n    if (onChangeTime) {\n      onChangeTime(nextTimeRange);\n    }\n    return nextTimeRange;\n  }\n\n  handleChangeFrom = e => {\n    this.setState({\n      fromRaw: e.target.value,\n    });\n  };\n\n  handleChangeTo = e => {\n    this.setState({\n      toRaw: e.target.value,\n    });\n  };\n\n  handleClickApply = () => {\n    const { onChangeTime, isUtc } = this.props;\n    let rawRange;\n    this.setState(\n      state => {\n        const { toRaw, fromRaw } = this.state;\n        rawRange = {\n          from: fromRaw,\n          to: toRaw,\n        };\n\n        if (rawRange.from.indexOf('now') === -1) {\n          rawRange.from = isUtc ? moment.utc(rawRange.from, TIME_FORMAT) : moment(rawRange.from, TIME_FORMAT);\n        }\n\n        if (rawRange.to.indexOf('now') === -1) {\n          rawRange.to = isUtc ? moment.utc(rawRange.to, TIME_FORMAT) : moment(rawRange.to, TIME_FORMAT);\n        }\n\n        const rangeString = rangeUtil.describeTimeRange(rawRange);\n        return {\n          isOpen: false,\n          rangeString,\n        };\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(rawRange);\n        }\n      }\n    );\n  };\n\n  handleClickLeft = () => this.move(-1);\n  handleClickPicker = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n    }));\n  };\n  handleClickRight = () => this.move(1);\n  handleClickRefresh = () => {};\n  handleClickRelativeOption = range => {\n    const { onChangeTime } = this.props;\n    const rangeString = rangeUtil.describeTimeRange(range);\n    const rawRange = {\n      from: range.from,\n      to: range.to,\n    };\n    this.setState(\n      {\n        toRaw: rawRange.to,\n        fromRaw: rawRange.from,\n        isOpen: false,\n        rangeString,\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(rawRange);\n        }\n      }\n    );\n  };\n\n  getTimeOptions() {\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\n  }\n\n  dropdownRef = el => {\n    this.dropdownEl = el;\n  };\n\n  renderDropdown() {\n    const { fromRaw, isOpen, toRaw } = this.state;\n    if (!isOpen) {\n      return null;\n    }\n    const timeOptions = this.getTimeOptions();\n    return (\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Quick ranges</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-relative-section\">\n            {Object.keys(timeOptions).map(section => {\n              const group = timeOptions[section];\n              return (\n                <ul key={section}>\n                  {group.map((option: any) => (\n                    <li className={option.active ? 'active' : ''} key={option.display}>\n                      <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\n                    </li>\n                  ))}\n                </ul>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Custom range</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-absolute-section\">\n            <label className=\"small\">From:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-from\"\n                  value={fromRaw}\n                  onChange={this.handleChangeFrom}\n                />\n              </div>\n            </div>\n\n            <label className=\"small\">To:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-to\"\n                  value={toRaw}\n                  onChange={this.handleChangeTo}\n                />\n              </div>\n            </div>\n            <div className=\"gf-form\">\n              <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\n                Apply\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { isUtc, rangeString, refreshInterval } = this.state;\n\n    return (\n      <div className=\"timepicker\">\n        <div className=\"navbar-buttons\">\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\n            <i className=\"fa fa-chevron-left\" />\n          </button>\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\n            <i className=\"fa fa-clock-o\" />\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\n          </button>\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\n            <i className=\"fa fa-chevron-right\" />\n          </button>\n        </div>\n        {this.renderDropdown()}\n      </div>\n    );\n  }\n}\n","import React, { useContext } from 'react';\nimport { css } from 'emotion';\nimport { ThemeContext, LargeLinkButton, CallToActionCard } from '@grafana/ui';\n\nexport const NoDataSourceCallToAction = () => {\n  const theme = useContext(ThemeContext);\n\n  const message =\n    'Explore requires at least one data source. Once you have added a data source, you can query it here.';\n  const footer = (\n    <>\n      <i className=\"fa fa-rocket\" />\n      <> ProTip: You can also define data sources through configuration files. </>\n      <a\n        href=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=explore\"\n        target=\"_blank\"\n        className=\"text-link\"\n      >\n        Learn more\n      </a>\n    </>\n  );\n\n  const ctaElement = (\n    <LargeLinkButton href=\"/datasources/new\" icon=\"gicon gicon-datasources\">\n      Add data source\n    </LargeLinkButton>\n  );\n\n  const cardClassName = css`\n    max-width: ${theme.breakpoints.lg};\n  `;\n\n  return (\n    <CallToActionCard\n      callToActionElement={ctaElement}\n      className={cardClassName}\n      footer={footer}\n      message={message}\n      theme={theme}\n    />\n  );\n};\n","import React, { FC, ReactNode, PureComponent } from 'react';\nimport { Tooltip } from '@grafana/ui';\n\ninterface ToggleButtonGroupProps {\n  label?: string;\n  children: JSX.Element[];\n  transparent?: boolean;\n}\n\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\n  render() {\n    const { children, label, transparent } = this.props;\n\n    return (\n      <div className=\"gf-form\">\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\n      </div>\n    );\n  }\n}\n\ninterface ToggleButtonProps {\n  onChange?: (value) => void;\n  selected?: boolean;\n  value: any;\n  className?: string;\n  children: ReactNode;\n  tooltip?: string;\n}\n\nexport const ToggleButton: FC<ToggleButtonProps> = ({\n  children,\n  selected,\n  className = '',\n  value = null,\n  tooltip,\n  onChange,\n}) => {\n  const onClick = event => {\n    event.stopPropagation();\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\n  const button = (\n    <button className={btnClassName} onClick={onClick}>\n      <span>{children}</span>\n    </button>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip content={tooltip} placement=\"bottom\">\n        {button}\n      </Tooltip>\n    );\n  } else {\n    return button;\n  }\n};\n","import React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport { LogLabelStatsModel } from 'app/core/logs_model';\n\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\n  const { active, count, proportion, value } = logLabelStatsModel;\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\n\n  return (\n    <div className={className}>\n      <div className=\"logs-stats-row__label\">\n        <div className=\"logs-stats-row__value\" title={value}>\n          {value}\n        </div>\n        <div className=\"logs-stats-row__count\">{count}</div>\n        <div className=\"logs-stats-row__percent\">{percent}</div>\n      </div>\n      <div className=\"logs-stats-row__bar\">\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nconst STATS_ROW_LIMIT = 5;\n\ninterface Props {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  onClickClose: () => void;\n}\n\nexport class LogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, onClickClose } = this.props;\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find(row => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find(row => row.value === value);\n      otherRows = otherRows.filter(row => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className=\"logs-stats\">\n        <div className=\"logs-stats__header\">\n          <span className=\"logs-stats__title\">\n            {label}: {total} of {rowCount} rows have that label\n          </span>\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\n        </div>\n        <div className=\"logs-stats__body\">\n          {topRows.map(stat => (\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n          ))}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { calculateLogsLabelStats, LogLabelStatsModel, LogRowModel } from 'app/core/logs_model';\nimport { LogLabelStats } from './LogLabelStats';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  label: string;\n  plain?: boolean;\n  value: string;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  showStats: boolean;\n  stats: LogLabelStatsModel[];\n}\n\nexport class LogLabel extends PureComponent<Props, State> {\n  state = {\n    stats: null,\n    showStats: false,\n  };\n\n  onClickClose = () => {\n    this.setState({ showStats: false });\n  };\n\n  onClickLabel = () => {\n    const { onClickLabel, label, value } = this.props;\n    if (onClickLabel) {\n      onClickLabel(label, value);\n    }\n  };\n\n  onClickStats = () => {\n    this.setState(state => {\n      if (state.showStats) {\n        return { showStats: false, stats: null };\n      }\n      const allRows = this.props.getRows();\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\n      return { showStats: true, stats };\n    });\n  };\n\n  render() {\n    const { getRows, label, plain, value } = this.props;\n    const { showStats, stats } = this.state;\n    const tooltip = `${label}: ${value}`;\n    return (\n      <span className=\"logs-label\">\n        <span className=\"logs-label__value\" title={tooltip}>\n          {value}\n        </span>\n        {!plain && (\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\n        )}\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\n        {showStats && (\n          <span className=\"logs-label__stats\">\n            <LogLabelStats\n              stats={stats}\n              rowCount={getRows().length}\n              label={label}\n              value={value}\n              onClickClose={this.onClickClose}\n            />\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { LogRowModel } from 'app/core/logs_model';\nimport { LogLabel } from './LogLabel';\nimport { Labels } from '@grafana/ui';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  labels: Labels;\n  plain?: boolean;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\nexport class LogLabels extends PureComponent<Props> {\n  render() {\n    const { getRows, labels, onClickLabel, plain } = this.props;\n    return (\n      <span className=\"logs-labels\">\n        {Object.keys(labels).map(key => (\n          <LogLabel\n            key={key}\n            getRows={getRows}\n            label={key}\n            value={labels[key]}\n            plain={plain}\n            onClickLabel={onClickLabel}\n          />\n        ))}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport ansicolor from 'vendor/ansicolor/ansicolor';\n\ninterface Style {\n  [key: string]: string;\n}\n\ninterface ParsedChunk {\n  style: Style;\n  text: string;\n}\n\nfunction convertCSSToStyle(css: string): Style {\n  return css.split(/;\\s*/).reduce((accumulated, line) => {\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-(a-z)/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\ninterface Props {\n  value: string;\n}\n\ninterface State {\n  chunks: ParsedChunk[];\n  prevValue: string;\n}\n\nexport class LogMessageAnsi extends PureComponent<Props, State> {\n  state = {\n    chunks: [],\n    prevValue: '',\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n\n    return {\n      chunks: parsed.spans.map(span => {\n        return span.css\n          ? {\n              style: convertCSSToStyle(span.css),\n              text: span.text,\n            }\n          : { text: span.text };\n      }),\n      prevValue: props.value,\n    };\n  }\n\n  render() {\n    const { chunks } = this.state;\n\n    return chunks.map((chunk, index) =>\n      chunk.style ? (\n        <span key={index} style={chunk.style}>\n          {chunk.text}\n        </span>\n      ) : (\n        chunk.text\n      )\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport Highlighter from 'react-highlight-words';\nimport classnames from 'classnames';\n\nimport { LogRowModel, LogLabelStatsModel, LogsParser, calculateFieldStats, getParser } from 'app/core/logs_model';\nimport { LogLabels } from './LogLabels';\nimport { findHighlightChunksInText } from 'app/core/utils/text';\nimport { LogLabelStats } from './LogLabelStats';\nimport { LogMessageAnsi } from './LogMessageAnsi';\n\ninterface Props {\n  highlighterExpressions?: string[];\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean;\n  showLocalTime: boolean;\n  showUtc: boolean;\n  getRows: () => LogRowModel[];\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  fieldCount: number;\n  fieldLabel: string;\n  fieldStats: LogLabelStatsModel[];\n  fieldValue: string;\n  parsed: boolean;\n  parser?: LogsParser;\n  parsedFieldHighlights: string[];\n  showFieldStats: boolean;\n}\n\n/**\n * Renders a highlighted field.\n * When hovering, a stats icon is shown.\n */\nconst FieldHighlight = onClick => props => {\n  return (\n    <span className={props.className} style={props.style}>\n      {props.children}\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\n    </span>\n  );\n};\n\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nexport class LogRow extends PureComponent<Props, State> {\n  mouseMessageTimer: NodeJS.Timer;\n\n  state = {\n    fieldCount: 0,\n    fieldLabel: null,\n    fieldStats: null,\n    fieldValue: null,\n    parsed: false,\n    parser: undefined,\n    parsedFieldHighlights: [],\n    showFieldStats: false,\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseMessageTimer);\n  }\n\n  onClickClose = () => {\n    this.setState({ showFieldStats: false });\n  };\n\n  onClickHighlight = (fieldText: string) => {\n    const { getRows } = this.props;\n    const { parser } = this.state;\n    const allRows = getRows();\n\n    // Build value-agnostic row matcher based on the field label\n    const fieldLabel = parser.getLabelFromField(fieldText);\n    const fieldValue = parser.getValueFromField(fieldText);\n    const matcher = parser.buildMatcher(fieldLabel);\n    const fieldStats = calculateFieldStats(allRows, matcher);\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\n\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\n  };\n\n  onMouseOverMessage = () => {\n    // Don't parse right away, user might move along\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\n  };\n\n  onMouseOutMessage = () => {\n    clearTimeout(this.mouseMessageTimer);\n    this.setState({ parsed: false });\n  };\n\n  parseMessage = () => {\n    if (!this.state.parsed) {\n      const { row } = this.props;\n      const parser = getParser(row.entry);\n      if (parser) {\n        // Use parser to highlight detected fields\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\n      }\n    }\n  };\n\n  render() {\n    const {\n      getRows,\n      highlighterExpressions,\n      onClickLabel,\n      row,\n      showDuplicates,\n      showLabels,\n      showLocalTime,\n      showUtc,\n    } = this.props;\n    const {\n      fieldCount,\n      fieldLabel,\n      fieldStats,\n      fieldValue,\n      parsed,\n      parsedFieldHighlights,\n      showFieldStats,\n    } = this.state;\n    const { entry, hasAnsi, raw } = row;\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\n    const needsHighlighter = highlights && highlights.length > 0 && highlights[0].length > 0;\n    const highlightClassName = classnames('logs-row__match-highlight', {\n      'logs-row__match-highlight--preview': previewHighlights,\n    });\n\n    return (\n      <div className=\"logs-row\">\n        {showDuplicates && (\n          <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\n        )}\n        <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\n        {showUtc && (\n          <div className=\"logs-row__time\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n            {row.timestamp}\n          </div>\n        )}\n        {showLocalTime && (\n          <div className=\"logs-row__localtime\" title={`${row.timestamp} (${row.timeFromNow})`}>\n            {row.timeLocal}\n          </div>\n        )}\n        {showLabels && (\n          <div className=\"logs-row__labels\">\n            <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\n          </div>\n        )}\n        <div className=\"logs-row__message\" onMouseEnter={this.onMouseOverMessage} onMouseLeave={this.onMouseOutMessage}>\n          {parsed && (\n            <Highlighter\n              autoEscape\n              highlightTag={FieldHighlight(this.onClickHighlight)}\n              textToHighlight={entry}\n              searchWords={parsedFieldHighlights}\n              highlightClassName=\"logs-row__field-highlight\"\n            />\n          )}\n          {!parsed && needsHighlighter && (\n            <Highlighter\n              textToHighlight={entry}\n              searchWords={highlights}\n              findChunks={findHighlightChunksInText}\n              highlightClassName={highlightClassName}\n            />\n          )}\n          {hasAnsi && !parsed && !needsHighlighter && <LogMessageAnsi value={raw} />}\n          {!hasAnsi && !parsed && !needsHighlighter && entry}\n          {showFieldStats && (\n            <div className=\"logs-row__stats\">\n              <LogLabelStats\n                stats={fieldStats}\n                label={fieldLabel}\n                value={fieldValue}\n                onClickClose={this.onClickClose}\n                rowCount={fieldCount}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport * as rangeUtil from '@grafana/ui/src/utils/rangeutil';\nimport { RawTimeRange, Switch, LogLevel, TimeZone, TimeRange, AbsoluteTimeRange } from '@grafana/ui';\nimport TimeSeries from 'app/core/time_series2';\n\nimport { LogsDedupDescription, LogsDedupStrategy, LogsModel, LogsMetaKind } from 'app/core/logs_model';\n\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\n\nimport Graph from './Graph';\nimport { LogLabels } from './LogLabels';\nimport { LogRow } from './LogRow';\n\nconst PREVIEW_LIMIT = 100;\n\nconst graphOptions = {\n  series: {\n    stack: true,\n    bars: {\n      show: true,\n      lineWidth: 5,\n      // barWidth: 10,\n    },\n    // stack: true,\n  },\n  yaxis: {\n    tickDecimals: 0,\n  },\n};\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} plain />\n      </span>\n    );\n  }\n  return value;\n}\n\ninterface Props {\n  data?: LogsModel;\n  dedupedData?: LogsModel;\n  width: number;\n  exploreId: string;\n  highlighterExpressions: string[];\n  loading: boolean;\n  range: TimeRange;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  onChangeTime?: (range: AbsoluteTimeRange) => void;\n  onClickLabel?: (label: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\n  onToggleLogLevel: (hiddenLogLevels: Set<LogLevel>) => void;\n}\n\ninterface State {\n  deferLogs: boolean;\n  renderAll: boolean;\n  showLabels: boolean;\n  showLocalTime: boolean;\n  showUtc: boolean;\n}\n\nexport default class Logs extends PureComponent<Props, State> {\n  deferLogsTimer: NodeJS.Timer;\n  renderAllTimer: NodeJS.Timer;\n\n  state = {\n    deferLogs: true,\n    renderAll: false,\n    showLabels: false,\n    showLocalTime: true,\n    showUtc: false,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    if (this.state.deferLogs) {\n      const { data } = this.props;\n      const rowCount = data && data.rows ? data.rows.length : 0;\n      // Render all right away if not too far over the limit\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Staged rendering\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.deferLogsTimer);\n    clearTimeout(this.renderAllTimer);\n  }\n\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\n    const { onDedupStrategyChange } = this.props;\n    if (this.props.dedupStrategy === dedup) {\n      return onDedupStrategyChange(LogsDedupStrategy.none);\n    }\n    return onDedupStrategyChange(dedup);\n  };\n\n  onChangeLabels = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLabels: target.checked,\n    });\n  };\n\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLocalTime: target.checked,\n    });\n  };\n\n  onChangeUtc = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showUtc: target.checked,\n    });\n  };\n\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: Set<string>) => {\n    const hiddenLogLevels: Set<LogLevel> = new Set(Array.from(hiddenRawLevels).map(level => LogLevel[level]));\n    this.props.onToggleLogLevel(hiddenLogLevels);\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStartScanning();\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStopScanning();\n  };\n\n  render() {\n    const {\n      data,\n      exploreId,\n      highlighterExpressions,\n      loading = false,\n      onClickLabel,\n      range,\n      timeZone,\n      scanning,\n      scanRange,\n      width,\n      dedupedData,\n    } = this.props;\n\n    if (!data) {\n      return null;\n    }\n\n    const { deferLogs, renderAll, showLabels, showLocalTime, showUtc } = this.state;\n    const { dedupStrategy } = this.props;\n    const hasData = data && data.rows && data.rows.length > 0;\n    const hasLabel = hasData && dedupedData.hasUniqueLabels;\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    const meta = [...data.meta];\n\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      meta.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    // Staged rendering\n    const processedRows = dedupedData.rows;\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = () => processedRows;\n    const timeSeries = data.series.map(series => new TimeSeries(series));\n    const absRange = {\n      from: range.from.valueOf(),\n      to: range.to.valueOf(),\n    };\n\n    return (\n      <div className=\"logs-panel\">\n        <div className=\"logs-panel-graph\">\n          <Graph\n            data={timeSeries}\n            height={100}\n            width={width}\n            range={absRange}\n            timeZone={timeZone}\n            id={`explore-logs-graph-${exploreId}`}\n            onChangeTime={this.props.onChangeTime}\n            onToggleSeries={this.onToggleLogLevel}\n            userOptions={graphOptions}\n          />\n        </div>\n        <div className=\"logs-panel-options\">\n          <div className=\"logs-panel-controls\">\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} transparent />\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} transparent />\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\n                <ToggleButton\n                  key={i}\n                  value={dedupType}\n                  onChange={this.onChangeDedup}\n                  selected={dedupStrategy === dedupType}\n                  tooltip={LogsDedupDescription[dedupType]}\n                >\n                  {dedupType}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        </div>\n\n        {hasData && meta && (\n          <div className=\"logs-panel-meta\">\n            {meta.map(item => (\n              <div className=\"logs-panel-meta__item\" key={item.label}>\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"logs-rows\">\n          {hasData &&\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\n            firstRows.map((row, index) => (\n              <LogRow\n                key={index}\n                getRows={getRows}\n                highlighterExpressions={highlighterExpressions}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData &&\n            !deferLogs &&\n            renderAll &&\n            lastRows.map((row, index) => (\n              <LogRow\n                key={PREVIEW_LIMIT + index}\n                getRows={getRows}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\n        </div>\n        {!loading && !hasData && !scanning && (\n          <div className=\"logs-panel-nodata\">\n            No logs found.\n            <a className=\"link\" onClick={this.onClickScan}>\n              Scan for older logs\n            </a>\n          </div>\n        )}\n\n        {scanning && (\n          <div className=\"logs-panel-nodata\">\n            <span>{scanText}</span>\n            <a className=\"link\" onClick={this.onClickStopScan}>\n              Stop scan\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { memoize } from 'lodash';\nimport { createSelectorCreator } from 'reselect';\n\nconst hashFn = (...args) => args.reduce((acc, val) => acc + '-' + JSON.stringify(val), '');\nexport const createLodashMemoizedSelector = createSelectorCreator(memoize as any, hashFn);\n","import { createLodashMemoizedSelector } from 'app/core/utils/reselect';\nimport { ExploreItemState } from 'app/types';\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\n\nexport const exploreItemUIStateSelector = (itemState: ExploreItemState) => {\n  const { showingGraph, showingLogs, showingTable, showingStartPage, dedupStrategy } = itemState;\n  return {\n    showingGraph,\n    showingLogs,\n    showingTable,\n    showingStartPage,\n    dedupStrategy,\n  };\n};\n\nconst logsSelector = (state: ExploreItemState) => state.logsResult;\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\nexport const deduplicatedLogsSelector = createLodashMemoizedSelector(\n  logsSelector,\n  hiddenLogLevelsSelector,\n  dedupStrategySelector,\n  (logs, hiddenLogLevels, dedupStrategy) => {\n    if (!logs) {\n      return null;\n    }\n    const filteredData = filterLogLevels(logs, new Set(hiddenLogLevels));\n    return dedupLogRows(filteredData, dedupStrategy);\n  }\n);\n","import React, { PureComponent } from 'react';\n\nconst INTERVAL = 150;\n\nexport default class ElapsedTime extends PureComponent<any, any> {\n  offset: number;\n  timer: number;\n\n  state = {\n    elapsed: 0,\n  };\n\n  start() {\n    this.offset = Date.now();\n    this.timer = window.setInterval(this.tick, INTERVAL);\n  }\n\n  tick = () => {\n    const jetzt = Date.now();\n    const elapsed = jetzt - this.offset;\n    this.setState({ elapsed });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.time) {\n      clearInterval(this.timer);\n    } else if (this.props.time) {\n      this.start();\n    }\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { elapsed } = this.state;\n    const { className, time } = this.props;\n    const value = (time || elapsed) / 1000;\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryTransaction } from 'app/types/explore';\nimport ElapsedTime from './ElapsedTime';\n\nfunction formatLatency(value) {\n  return `${(value / 1000).toFixed(1)}s`;\n}\n\ninterface QueryTransactionStatusItemProps {\n  transaction: QueryTransaction;\n}\n\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\n  render() {\n    const { transaction } = this.props;\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\n    return (\n      <div className={className}>\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\n        <div className=\"query-transaction__duration\">\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface QueryTransactionStatusProps {\n  transactions: QueryTransaction[];\n}\n\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\n  render() {\n    const { transactions } = this.props;\n    return (\n      <div className=\"query-transactions\">\n        {transactions.map((t, i) => (\n          <QueryTransactionStatusItem key={`${t.rowIndex}:${t.resultType}`} transaction={t} />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport ErrorBoundary from './ErrorBoundary';\nimport Explore from './Explore';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { resetExploreAction } from './state/actionTypes';\n\ninterface WrapperProps {\n  split: boolean;\n  resetExploreAction: typeof resetExploreAction;\n}\n\nexport class Wrapper extends Component<WrapperProps> {\n  componentWillUnmount() {\n    this.props.resetExploreAction();\n  }\n\n  render() {\n    const { split } = this.props;\n\n    return (\n      <div className=\"page-scrollbar-wrapper\">\n        <CustomScrollbar autoHeightMin={'100%'} className=\"custom-scrollbar--page\">\n          <div className=\"explore-wrapper\">\n            <ErrorBoundary>\n              <Explore exploreId={ExploreId.left} />\n            </ErrorBoundary>\n            {split && (\n              <ErrorBoundary>\n                <Explore exploreId={ExploreId.right} />\n              </ErrorBoundary>\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const { split } = state.explore;\n  return { split };\n};\n\nconst mapDispatchToProps = {\n  resetExploreAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Wrapper)\n);\n"],"sourceRoot":""}