{"version":3,"sources":["webpack:///./public/app/plugins/datasource/elasticsearch/query_def.ts","webpack:///./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack:///./public/app/plugins/datasource/elasticsearch/index_pattern.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_builder.ts","webpack:///./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/bucket_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/metric_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/pipeline_variables.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/elasticsearch/components/ElasticsearchQueryField.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/ElasticDetails.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/LogsConfig.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/DataLink.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/DataLinks.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/module.ts","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/ConfigEditor.tsx"],"names":["metricAggTypes","text","value","requiresField","supportsInlineScript","supportsMissing","isPipelineAgg","minVersion","supportsMultipleBucketPaths","bucketAggTypes","orderByOptions","orderOptions","sizeOptions","extendedStats","intervalOptions","movingAvgModelOptions","pipelineOptions","moving_avg","default","undefined","derivative","bucket_script","movingAvgModelSettings","simple","linear","ewma","holt","holt_winters","isCheckbox","getMetricAggTypes","esVersion","_","filter","f","metricType","po","isPipelineAggWithMultipleBucketPaths","find","t","getMovingAvgSettings","model","filtered","filteredResult","each","setting","push","describeMetric","metric","def","type","field","findMetricById","metrics","id","hasMetricOfType","target","some","m","ElasticResponse","targets","response","this","esAgg","seriesList","props","y","i","newSeries","bucket","length","hide","datapoints","buckets","doc_count","key","percentiles","values","percentileName","statName","meta","stats","std_deviation_bounds_upper","std_deviation_bounds","upper","std_deviation_bounds_lower","lower","metricId","normalized_value","aggDef","table","columns","keys","propKey","addColumn","filterable","addMetricValue","metricName","propValues","getMetricName","rows","aggs","depth","aggId","maxDepth","bucketAggs","processMetrics","processAggregationDocs","nameIndex","clone","key_as_string","processBuckets","metricDef","queryDef","series","metricTypeCount","alias","replace","match","g1","g2","group","indexOf","substring","agg","settings","script","pipelineVariables","pv","appliedAgg","pipelineAgg","name","propName","trim","uniq","map","getSeriesName","hits","hit","doc","total","_id","_type","_index","_source","fields","aggregations","histogram","trimEdges","prop","points","slice","err","result","data","JSON","stringify","root_cause","reason","message","$$config","config","responses","error","getErrorFromElasticResponse","processHits","tmpSeriesList","TableModel","trimDatapoints","nameSeries","logMessageField","logLevelField","dataFrame","n","flattenHits","propNames","docs","createEmptyDataFrame","timeField","add","toDataFrame","addPreferredVisualisationType","flattened","flatten","Object","sort","MutableDataFrame","addField","FieldType","time","string","parse","v","fieldNames","includes","s","preferredVisualisationType","intervalMap","Hourly","startOf","amount","Daily","Weekly","Monthly","Yearly","IndexPattern","pattern","interval","toUtc","format","from","to","intervalInfo","start","dateTime","utc","endEpoch","valueOf","indexList","ElasticQueryBuilder","options","gte","lte","queryNode","metricRef","terms","size","parseInt","orderBy","order","isNaN","min_doc_count","missing","extended_bounds","min","max","offset","filterObj","filters","query","label","query_string","analyze_wildcard","unmapped_type","script_fields","adhocFilters","condition","queryCondition","operator","bool","must","match_phrase","must_not","lt","range","gt","regexp","queryString","j","nestedAggs","getRangeFilter","addAdhocFilters","documentQuery","getDateHistogramAgg","getHistogramAgg","getFiltersAgg","buildTermsAgg","precision","aggField","metricAgg","buckets_path","test","hasOwnProperty","keyname","querystring","build","ElasticDatasource","instanceSettings","templateSrv","timeSrv","basicAuth","withCredentials","url","index","database","settingsData","jsonData","indexPattern","timeInterval","maxConcurrentShardRequests","queryBuilder","dataLinks","method","headers","Authorization","getBackendSrv","datasourceRequest","timeRange","getIndexList","isArray","requestAllIndices","then","results","request","getIndexForToday","maxTraversals","listLen","Math","status","catch","annotation","timeEndField","tagsField","textField","dateRanges","rangeStart","rangeEnd","should","minimum_should_match","header","search_type","ignore_unavailable","payload","angular","toJson","post","res","list","getFieldFromSource","source","fieldName","split","fieldValue","console","log","isString","isNumber","event","tags","timeEnd","titleField","title","queries","scopedVars","expandedQueries","datasource","getFields","dateFields","searchType","timeFrom","timeTo","queryHeader","cloneDeep","sentTargets","getAdhocFilters","queryObj","isLogsQuery","getLogsQuery","esQuery","getQueryHeader","Promise","resolve","toString","getMultiSearchUrl","er","getLogs","enhanceDataFrame","getTimeSeries","configuredEsVersion","get","typeMap","float","double","integer","long","date","scaled_float","nested","shouldAddField","obj","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","concat","join","pop","indexName","mappings","typeName","getTermsQuery","fromJson","getTerms","variableExists","bucketAgg","objectContainsTemplate","dataLink","links","isPrimitive","Array","item","DataSourceApi","ElasticBucketAggCtrl","$scope","uiSegmentSrv","$rootScope","getBucketAggTypes","getOrderOptions","getSizeOptions","onAppEvent","CoreEvents","elasticQueryUpdated","validateModel","init","onChangeInternal","onChange","onTypeChanged","showOptions","isFirst","bucketAggCount","settingsLinkText","reduce","memo","substr","defaultTo","addFiltersQuery","removeFiltersQuery","without","toggleOptions","getOrderByOptions","metricRefs","getFieldsInternal","$fieldType","getIntervalOptions","transformToSegments","addBucketAgg","lastBucket","addIndex","val","splice","fake","removeBucketAgg","coreModule","directive","templateUrl","controller","restrict","scope","ElasticMetricAggCtrl","metricAggs","pipelineAggOptions","modelSettingsValues","updatePipelineAggOptions","isSingle","variablesLinkText","RegExp","opt","precisionThreshold","precision_threshold","percents","movingAvgModelTypes","modelSettings","updateMovingAvgModelSettings","inlineScript","inline","toggleVariables","showVariables","modelSettingsKeys","onChangeClearInternal","minimize","onTypeChange","addMetricAgg","removeMetricAgg","toggleShowMetric","newVariable","ElasticPipelineVariablesCtrl","variables","remove","ElasticQueryCtrl","$injector","refresh","queryUpdated","jsonStr","metricFindQuery","handleQueryError","bind","newJson","rawQueryOld","appEvent","QueryCtrl","ElasticsearchQueryField","context","onChangeQuery","override","onRunQuery","plugins","SlatePrism","onlyIn","node","getSyntax","state","syntaxLoaded","prevProps","className","additionalPlugins","placeholder","portalOrigin","React","PureComponent","Select","LegacyForms","Input","FormField","indexPatternTypes","example","esVersions","ElasticDetails","labelWidth","inputWidth","changeHandler","required","inputEl","intervalHandler","jsonDataChangeHandler","option","version","defaultMaxConcurrentShardRequests","getMaxConcurrenShardRequestOrDefault","aria-label","validationEvents","EventsWithValidation","onBlur","regexValidation","tooltip","currentTarget","newInterval","startsWith","newDatabase","LogsConfig","getStyles","stylesFactory","firstRow","css","nameField","regexField","DataLink","onDelete","suggestions","styles","variant","icon","onClick","preventDefault","newValue","theme","infoText","spacing","md","colors","textWeak","sm","DataLinks","useTheme","newField","newDataLinks","DataLinkBuiltInVars","valueRaw","documentation","origin","VariableOrigin","Value","ElasticAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigEditor","onOptionsChange","useEffect","defaultUrl","dataSourceConfig","showAccessOptions","setExploreLogsQueryField","setAnnotationQueryCtrl"],"mappings":"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","file":"elasticsearchPlugin.017a0d1a58b1119d038d.js","sourcesContent":["import _ from 'lodash';\n\nexport const metricAggTypes = [\n  { text: 'Count', value: 'count', requiresField: false },\n  {\n    text: 'Average',\n    value: 'avg',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Sum',\n    value: 'sum',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Max',\n    value: 'max',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Min',\n    value: 'min',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Extended Stats',\n    value: 'extended_stats',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Percentiles',\n    value: 'percentiles',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Unique Count',\n    value: 'cardinality',\n    requiresField: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Moving Average',\n    value: 'moving_avg',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Derivative',\n    value: 'derivative',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Bucket Script',\n    value: 'bucket_script',\n    requiresField: false,\n    isPipelineAgg: true,\n    supportsMultipleBucketPaths: true,\n    minVersion: 2,\n  },\n  { text: 'Raw Document', value: 'raw_document', requiresField: false },\n  { text: 'Logs', value: 'logs', requiresField: false },\n];\n\nexport const bucketAggTypes = [\n  { text: 'Terms', value: 'terms', requiresField: true },\n  { text: 'Filters', value: 'filters' },\n  { text: 'Geo Hash Grid', value: 'geohash_grid', requiresField: true },\n  { text: 'Date Histogram', value: 'date_histogram', requiresField: true },\n  { text: 'Histogram', value: 'histogram', requiresField: true },\n];\n\nexport const orderByOptions = [\n  { text: 'Doc Count', value: '_count' },\n  { text: 'Term value', value: '_term' },\n];\n\nexport const orderOptions = [\n  { text: 'Top', value: 'desc' },\n  { text: 'Bottom', value: 'asc' },\n];\n\nexport const sizeOptions = [\n  { text: 'No limit', value: '0' },\n  { text: '1', value: '1' },\n  { text: '2', value: '2' },\n  { text: '3', value: '3' },\n  { text: '5', value: '5' },\n  { text: '10', value: '10' },\n  { text: '15', value: '15' },\n  { text: '20', value: '20' },\n];\n\nexport const extendedStats = [\n  { text: 'Avg', value: 'avg' },\n  { text: 'Min', value: 'min' },\n  { text: 'Max', value: 'max' },\n  { text: 'Sum', value: 'sum' },\n  { text: 'Count', value: 'count' },\n  { text: 'Std Dev', value: 'std_deviation' },\n  { text: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { text: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const intervalOptions = [\n  { text: 'auto', value: 'auto' },\n  { text: '10s', value: '10s' },\n  { text: '1m', value: '1m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '20m', value: '20m' },\n  { text: '1h', value: '1h' },\n  { text: '1d', value: '1d' },\n];\n\nexport const movingAvgModelOptions = [\n  { text: 'Simple', value: 'simple' },\n  { text: 'Linear', value: 'linear' },\n  { text: 'Exponentially Weighted', value: 'ewma' },\n  { text: 'Holt Linear', value: 'holt' },\n  { text: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport const pipelineOptions: any = {\n  moving_avg: [\n    { text: 'window', default: 5 },\n    { text: 'model', default: 'simple' },\n    { text: 'predict', default: undefined },\n    { text: 'minimize', default: false },\n  ],\n  derivative: [{ text: 'unit', default: undefined }],\n  bucket_script: [],\n};\n\nexport const movingAvgModelSettings: any = {\n  simple: [],\n  linear: [],\n  ewma: [{ text: 'Alpha', value: 'alpha', default: undefined }],\n  holt: [\n    { text: 'Alpha', value: 'alpha', default: undefined },\n    { text: 'Beta', value: 'beta', default: undefined },\n  ],\n  holt_winters: [\n    { text: 'Alpha', value: 'alpha', default: undefined },\n    { text: 'Beta', value: 'beta', default: undefined },\n    { text: 'Gamma', value: 'gamma', default: undefined },\n    { text: 'Period', value: 'period', default: undefined },\n    { text: 'Pad', value: 'pad', default: undefined, isCheckbox: true },\n  ],\n};\n\nexport function getMetricAggTypes(esVersion: any) {\n  return _.filter(metricAggTypes, f => {\n    if (f.minVersion) {\n      return f.minVersion <= esVersion;\n    } else {\n      return true;\n    }\n  });\n}\n\nexport function getPipelineOptions(metric: any) {\n  if (!isPipelineAgg(metric.type)) {\n    return [];\n  }\n\n  return pipelineOptions[metric.type];\n}\n\nexport function isPipelineAgg(metricType: any) {\n  if (metricType) {\n    const po = pipelineOptions[metricType];\n    return po !== null && po !== undefined;\n  }\n\n  return false;\n}\n\nexport function isPipelineAggWithMultipleBucketPaths(metricType: any) {\n  if (metricType) {\n    return metricAggTypes.find(t => t.value === metricType && t.supportsMultipleBucketPaths) !== undefined;\n  }\n\n  return false;\n}\n\nexport function getPipelineAggOptions(targets: any) {\n  const result: any[] = [];\n  _.each(targets.metrics, metric => {\n    if (!isPipelineAgg(metric.type)) {\n      result.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return result;\n}\n\nexport function getMovingAvgSettings(model: any, filtered: boolean) {\n  const filteredResult: any[] = [];\n  if (filtered) {\n    _.each(movingAvgModelSettings[model], setting => {\n      if (!setting.isCheckbox) {\n        filteredResult.push(setting);\n      }\n    });\n    return filteredResult;\n  }\n  return movingAvgModelSettings[model];\n}\n\nexport function getOrderByOptions(target: any) {\n  const metricRefs: any[] = [];\n  _.each(target.metrics, metric => {\n    if (metric.type !== 'count') {\n      metricRefs.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return orderByOptions.concat(metricRefs);\n}\n\nexport function describeOrder(order: string) {\n  const def: any = _.find(orderOptions, { value: order });\n  return def.text;\n}\n\nexport function describeMetric(metric: { type: string; field: string }) {\n  const def: any = _.find(metricAggTypes, { value: metric.type });\n  if (!def.requiresField && !isPipelineAgg(metric.type)) {\n    return def.text;\n  }\n  return def.text + ' ' + metric.field;\n}\n\nexport function describeOrderBy(orderBy: any, target: any) {\n  const def: any = _.find(orderByOptions, { value: orderBy });\n  if (def) {\n    return def.text;\n  }\n  const metric: any = _.find(target.metrics, { id: orderBy });\n  if (metric) {\n    return describeMetric(metric);\n  } else {\n    return 'metric not found';\n  }\n}\n\nexport function defaultMetricAgg() {\n  return { type: 'count', id: '1' };\n}\n\nexport function defaultBucketAgg() {\n  return { type: 'date_histogram', id: '2', settings: { interval: 'auto' } };\n}\n\nexport const findMetricById = (metrics: any[], id: any) => {\n  return _.find(metrics, { id: id });\n};\n\nexport function hasMetricOfType(target: any, type: string): boolean {\n  return target && target.metrics && target.metrics.some((m: any) => m.type === type);\n}\n","import _ from 'lodash';\nimport flatten from 'app/core/utils/flatten';\nimport * as queryDef from './query_def';\nimport TableModel from 'app/core/table_model';\nimport { DataQueryResponse, DataFrame, toDataFrame, FieldType, MutableDataFrame } from '@grafana/data';\nimport { ElasticsearchAggregation } from './types';\n\nexport class ElasticResponse {\n  constructor(private targets: any, private response: any) {\n    this.targets = targets;\n    this.response = response;\n  }\n\n  processMetrics(esAgg: any, target: any, seriesList: any, props: any) {\n    let metric, y, i, newSeries, bucket, value;\n\n    for (y = 0; y < target.metrics.length; y++) {\n      metric = target.metrics[y];\n      if (metric.hide) {\n        continue;\n      }\n\n      switch (metric.type) {\n        case 'count': {\n          newSeries = { datapoints: [], metric: 'count', props: props };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n            value = bucket.doc_count;\n            newSeries.datapoints.push([value, bucket.key]);\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n        case 'percentiles': {\n          if (esAgg.buckets.length === 0) {\n            break;\n          }\n\n          const firstBucket = esAgg.buckets[0];\n          const percentiles = firstBucket[metric.id].values;\n\n          for (const percentileName in percentiles) {\n            newSeries = {\n              datapoints: [],\n              metric: 'p' + percentileName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const values = bucket[metric.id].values;\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\n            }\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'extended_stats': {\n          for (const statName in metric.meta) {\n            if (!metric.meta[statName]) {\n              continue;\n            }\n\n            newSeries = {\n              datapoints: [],\n              metric: statName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const stats = bucket[metric.id];\n\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              newSeries.datapoints.push([stats[statName], bucket.key]);\n            }\n\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        default: {\n          newSeries = {\n            datapoints: [],\n            metric: metric.type,\n            field: metric.field,\n            metricId: metric.id,\n            props: props,\n          };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n\n            value = bucket[metric.id];\n            if (value !== undefined) {\n              if (value.normalized_value) {\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\n              } else {\n                newSeries.datapoints.push([value.value, bucket.key]);\n              }\n            }\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n      }\n    }\n  }\n\n  processAggregationDocs(esAgg: any, aggDef: ElasticsearchAggregation, target: any, table: any, props: any) {\n    // add columns\n    if (table.columns.length === 0) {\n      for (const propKey of _.keys(props)) {\n        table.addColumn({ text: propKey, filterable: true });\n      }\n      table.addColumn({ text: aggDef.field, filterable: true });\n    }\n\n    // helper func to add values to value array\n    const addMetricValue = (values: any[], metricName: string, value: any) => {\n      table.addColumn({ text: metricName });\n      values.push(value);\n    };\n\n    for (const bucket of esAgg.buckets) {\n      const values = [];\n\n      for (const propValues of _.values(props)) {\n        values.push(propValues);\n      }\n\n      // add bucket key (value)\n      values.push(bucket.key);\n\n      for (const metric of target.metrics) {\n        switch (metric.type) {\n          case 'count': {\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\n            break;\n          }\n          case 'extended_stats': {\n            for (const statName in metric.meta) {\n              if (!metric.meta[statName]) {\n                continue;\n              }\n\n              const stats = bucket[metric.id];\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              addMetricValue(values, this.getMetricName(statName), stats[statName]);\n            }\n            break;\n          }\n          case 'percentiles': {\n            const percentiles = bucket[metric.id].values;\n\n            for (const percentileName in percentiles) {\n              addMetricValue(values, `p${percentileName} ${metric.field}`, percentiles[percentileName]);\n            }\n            break;\n          }\n          default: {\n            let metricName = this.getMetricName(metric.type);\n            const otherMetrics = _.filter(target.metrics, { type: metric.type });\n\n            // if more of the same metric type include field field name in property\n            if (otherMetrics.length > 1) {\n              metricName += ' ' + metric.field;\n            }\n\n            addMetricValue(values, metricName, bucket[metric.id].value);\n            break;\n          }\n        }\n      }\n\n      table.rows.push(values);\n    }\n  }\n\n  // This is quite complex\n  // need to recurse down the nested buckets to build series\n  processBuckets(aggs: any, target: any, seriesList: any, table: any, props: any, depth: any) {\n    let bucket, aggDef: any, esAgg, aggId;\n    const maxDepth = target.bucketAggs.length - 1;\n\n    for (aggId in aggs) {\n      aggDef = _.find(target.bucketAggs, { id: aggId });\n      esAgg = aggs[aggId];\n\n      if (!aggDef) {\n        continue;\n      }\n\n      if (depth === maxDepth) {\n        if (aggDef.type === 'date_histogram') {\n          this.processMetrics(esAgg, target, seriesList, props);\n        } else {\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\n        }\n      } else {\n        for (const nameIndex in esAgg.buckets) {\n          bucket = esAgg.buckets[nameIndex];\n          props = _.clone(props);\n          if (bucket.key !== void 0) {\n            props[aggDef.field] = bucket.key;\n          } else {\n            props['filter'] = nameIndex;\n          }\n          if (bucket.key_as_string) {\n            props[aggDef.field] = bucket.key_as_string;\n          }\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\n        }\n      }\n    }\n  }\n\n  private getMetricName(metric: any) {\n    let metricDef: any = _.find(queryDef.metricAggTypes, { value: metric });\n    if (!metricDef) {\n      metricDef = _.find(queryDef.extendedStats, { value: metric });\n    }\n\n    return metricDef ? metricDef.text : metric;\n  }\n\n  private getSeriesName(series: any, target: any, metricTypeCount: any) {\n    let metricName = this.getMetricName(series.metric);\n\n    if (target.alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      return target.alias.replace(regex, (match: any, g1: any, g2: any) => {\n        const group = g1 || g2;\n\n        if (group.indexOf('term ') === 0) {\n          return series.props[group.substring(5)];\n        }\n        if (series.props[group] !== void 0) {\n          return series.props[group];\n        }\n        if (group === 'metric') {\n          return metricName;\n        }\n        if (group === 'field') {\n          return series.field || '';\n        }\n\n        return match;\n      });\n    }\n\n    if (series.field && queryDef.isPipelineAgg(series.metric)) {\n      if (series.metric && queryDef.isPipelineAggWithMultipleBucketPaths(series.metric)) {\n        const agg: any = _.find(target.metrics, { id: series.metricId });\n        if (agg && agg.settings.script) {\n          metricName = agg.settings.script;\n\n          for (const pv of agg.pipelineVariables) {\n            const appliedAgg: any = _.find(target.metrics, { id: pv.pipelineAgg });\n            if (appliedAgg) {\n              metricName = metricName.replace('params.' + pv.name, queryDef.describeMetric(appliedAgg));\n            }\n          }\n        } else {\n          metricName = 'Unset';\n        }\n      } else {\n        const appliedAgg: any = _.find(target.metrics, { id: series.field });\n        if (appliedAgg) {\n          metricName += ' ' + queryDef.describeMetric(appliedAgg);\n        } else {\n          metricName = 'Unset';\n        }\n      }\n    } else if (series.field) {\n      metricName += ' ' + series.field;\n    }\n\n    const propKeys = _.keys(series.props);\n    if (propKeys.length === 0) {\n      return metricName;\n    }\n\n    let name = '';\n    for (const propName in series.props) {\n      name += series.props[propName] + ' ';\n    }\n\n    if (metricTypeCount === 1) {\n      return name.trim();\n    }\n\n    return name.trim() + ' ' + metricName;\n  }\n\n  nameSeries(seriesList: any, target: any) {\n    const metricTypeCount = _.uniq(_.map(seriesList, 'metric')).length;\n\n    for (let i = 0; i < seriesList.length; i++) {\n      const series = seriesList[i];\n      series.target = this.getSeriesName(series, target, metricTypeCount);\n    }\n  }\n\n  processHits(hits: { total: { value: any }; hits: any[] }, seriesList: any[]) {\n    const hitsTotal = typeof hits.total === 'number' ? hits.total : hits.total.value; // <- Works with Elasticsearch 7.0+\n\n    const series: any = {\n      target: 'docs',\n      type: 'docs',\n      datapoints: [],\n      total: hitsTotal,\n      filterable: true,\n    };\n    let propName, hit, doc: any, i;\n\n    for (i = 0; i < hits.hits.length; i++) {\n      hit = hits.hits[i];\n      doc = {\n        _id: hit._id,\n        _type: hit._type,\n        _index: hit._index,\n      };\n\n      if (hit._source) {\n        for (propName in hit._source) {\n          doc[propName] = hit._source[propName];\n        }\n      }\n\n      for (propName in hit.fields) {\n        doc[propName] = hit.fields[propName];\n      }\n      series.datapoints.push(doc);\n    }\n\n    seriesList.push(series);\n  }\n\n  trimDatapoints(aggregations: any, target: any) {\n    const histogram: any = _.find(target.bucketAggs, { type: 'date_histogram' });\n\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\n    if (shouldDropFirstAndLast) {\n      const trim = histogram.settings.trimEdges;\n      for (const prop in aggregations) {\n        const points = aggregations[prop];\n        if (points.datapoints.length > trim * 2) {\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\n        }\n      }\n    }\n  }\n\n  getErrorFromElasticResponse(response: any, err: any) {\n    const result: any = {};\n    result.data = JSON.stringify(err, null, 4);\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\n      result.message = err.root_cause[0].reason;\n    } else {\n      result.message = err.reason || 'Unkown elastic error response';\n    }\n\n    if (response.$$config) {\n      result.config = response.$$config;\n    }\n\n    return result;\n  }\n\n  getTimeSeries() {\n    const seriesList = [];\n\n    for (let i = 0; i < this.response.responses.length; i++) {\n      const response = this.response.responses[i];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        this.processHits(response.hits, seriesList);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[i];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          seriesList.push(tmpSeriesList[y]);\n        }\n\n        if (table.rows.length > 0) {\n          seriesList.push(table);\n        }\n      }\n    }\n\n    return { data: seriesList };\n  }\n\n  getLogs(logMessageField?: string, logLevelField?: string): DataQueryResponse {\n    const dataFrame: DataFrame[] = [];\n\n    for (let n = 0; n < this.response.responses.length; n++) {\n      const response = this.response.responses[n];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      const { propNames, docs } = flattenHits(response.hits.hits);\n      if (docs.length > 0) {\n        const series = createEmptyDataFrame(propNames, this.targets[0].timeField, logMessageField, logLevelField);\n\n        // Add a row for each document\n        for (const doc of docs) {\n          if (logLevelField) {\n            // Remap level field based on the datasource config. This field is then used in explore to figure out the\n            // log level. We may rewrite some actual data in the level field if they are different.\n            doc['level'] = doc[logLevelField];\n          }\n\n          series.add(doc);\n        }\n\n        dataFrame.push(series);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[n];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          let series = toDataFrame(tmpSeriesList[y]);\n\n          // When log results, show aggregations only in graph. Log fields are then going to be shown in table.\n          series = addPreferredVisualisationType(series, 'graph');\n\n          dataFrame.push(series);\n        }\n      }\n    }\n\n    return { data: dataFrame };\n  }\n}\n\ntype Doc = {\n  _id: string;\n  _type: string;\n  _index: string;\n  _source?: any;\n};\n\n/**\n * Flatten the docs from response mainly the _source part which can be nested. This flattens it so that it is one level\n * deep and the keys are: `level1Name.level2Name...`. Also returns list of all properties from all the docs (not all\n * docs have to have the same keys).\n * @param hits\n */\nconst flattenHits = (hits: Doc[]): { docs: Array<Record<string, any>>; propNames: string[] } => {\n  const docs: any[] = [];\n  // We keep a list of all props so that we can create all the fields in the dataFrame, this can lead\n  // to wide sparse dataframes in case the scheme is different per document.\n  let propNames: string[] = [];\n\n  for (const hit of hits) {\n    const flattened = hit._source ? flatten(hit._source, null) : {};\n    const doc = {\n      _id: hit._id,\n      _type: hit._type,\n      _index: hit._index,\n      _source: { ...flattened },\n      ...flattened,\n    };\n\n    for (const propName of Object.keys(doc)) {\n      if (propNames.indexOf(propName) === -1) {\n        propNames.push(propName);\n      }\n    }\n\n    docs.push(doc);\n  }\n\n  propNames.sort();\n  return { docs, propNames };\n};\n\n/**\n * Create empty dataframe but with created fields. Fields are based from propNames (should be from the response) and\n * also from configuration specified fields for message, time, and level.\n * @param propNames\n * @param timeField\n * @param logMessageField\n * @param logLevelField\n */\nconst createEmptyDataFrame = (\n  propNames: string[],\n  timeField: string,\n  logMessageField?: string,\n  logLevelField?: string\n): MutableDataFrame => {\n  const series = new MutableDataFrame({ fields: [] });\n\n  series.addField({\n    name: timeField,\n    type: FieldType.time,\n  });\n\n  if (logMessageField) {\n    series.addField({\n      name: logMessageField,\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  } else {\n    series.addField({\n      name: '_source',\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return JSON.stringify(v, null, 2);\n    };\n  }\n\n  if (logLevelField) {\n    series.addField({\n      name: 'level',\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  const fieldNames = series.fields.map(field => field.name);\n\n  for (const propName of propNames) {\n    // Do not duplicate fields. This can mean that we will shadow some fields.\n    if (fieldNames.includes(propName)) {\n      continue;\n    }\n\n    series.addField({\n      name: propName,\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  return series;\n};\n\nconst addPreferredVisualisationType = (series: any, type: string) => {\n  let s = series;\n  s.meta\n    ? (s.meta.preferredVisualisationType = type)\n    : (s.meta = {\n        preferredVisualisationType: type,\n      });\n\n  return s;\n};\n","import { toUtc, dateTime } from '@grafana/data';\n\nconst intervalMap: any = {\n  Hourly: { startOf: 'hour', amount: 'hours' },\n  Daily: { startOf: 'day', amount: 'days' },\n  Weekly: { startOf: 'isoWeek', amount: 'weeks' },\n  Monthly: { startOf: 'month', amount: 'months' },\n  Yearly: { startOf: 'year', amount: 'years' },\n};\n\nexport class IndexPattern {\n  constructor(private pattern: any, private interval: string | null) {}\n\n  getIndexForToday() {\n    if (this.interval) {\n      return toUtc().format(this.pattern);\n    } else {\n      return this.pattern;\n    }\n  }\n\n  getIndexList(from: any, to: any) {\n    if (!this.interval) {\n      return this.pattern;\n    }\n\n    const intervalInfo = intervalMap[this.interval];\n    const start = dateTime(from)\n      .utc()\n      .startOf(intervalInfo.startOf);\n    const endEpoch = dateTime(to)\n      .utc()\n      .startOf(intervalInfo.startOf)\n      .valueOf();\n    const indexList = [];\n\n    while (start.valueOf() <= endEpoch) {\n      indexList.push(start.format(this.pattern));\n      start.add(1, intervalInfo.amount);\n    }\n\n    return indexList;\n  }\n}\n","import * as queryDef from './query_def';\nimport { ElasticsearchAggregation } from './types';\n\nexport class ElasticQueryBuilder {\n  timeField: string;\n  esVersion: number;\n\n  constructor(options: { timeField: string; esVersion: number }) {\n    this.timeField = options.timeField;\n    this.esVersion = options.esVersion;\n  }\n\n  getRangeFilter() {\n    const filter: any = {};\n    filter[this.timeField] = {\n      gte: '$timeFrom',\n      lte: '$timeTo',\n      format: 'epoch_millis',\n    };\n\n    return filter;\n  }\n\n  buildTermsAgg(aggDef: ElasticsearchAggregation, queryNode: { terms?: any; aggs?: any }, target: { metrics: any[] }) {\n    let metricRef, metric, y;\n    queryNode.terms = { field: aggDef.field };\n\n    if (!aggDef.settings) {\n      return queryNode;\n    }\n\n    queryNode.terms.size = parseInt(aggDef.settings.size, 10) === 0 ? 500 : parseInt(aggDef.settings.size, 10);\n    if (aggDef.settings.orderBy !== void 0) {\n      queryNode.terms.order = {};\n      if (aggDef.settings.orderBy === '_term' && this.esVersion >= 60) {\n        queryNode.terms.order['_key'] = aggDef.settings.order;\n      } else {\n        queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\n      }\n\n      // if metric ref, look it up and add it to this agg level\n      metricRef = parseInt(aggDef.settings.orderBy, 10);\n      if (!isNaN(metricRef)) {\n        for (y = 0; y < target.metrics.length; y++) {\n          metric = target.metrics[y];\n          if (metric.id === aggDef.settings.orderBy) {\n            queryNode.aggs = {};\n            queryNode.aggs[metric.id] = {};\n            queryNode.aggs[metric.id][metric.type] = { field: metric.field };\n            break;\n          }\n        }\n      }\n    }\n\n    if (aggDef.settings.min_doc_count !== void 0) {\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\n    }\n\n    if (aggDef.settings.missing) {\n      queryNode.terms.missing = aggDef.settings.missing;\n    }\n\n    return queryNode;\n  }\n\n  getDateHistogramAgg(aggDef: ElasticsearchAggregation) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = this.timeField;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\n    esAgg.format = 'epoch_millis';\n\n    if (settings.offset !== '') {\n      esAgg.offset = settings.offset;\n    }\n\n    if (esAgg.interval === 'auto') {\n      esAgg.interval = '$__interval';\n    }\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n\n    return esAgg;\n  }\n\n  getHistogramAgg(aggDef: ElasticsearchAggregation) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = aggDef.field;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n    return esAgg;\n  }\n\n  getFiltersAgg(aggDef: ElasticsearchAggregation) {\n    const filterObj: any = {};\n    for (let i = 0; i < aggDef.settings.filters.length; i++) {\n      const query = aggDef.settings.filters[i].query;\n      let label = aggDef.settings.filters[i].label;\n      label = label === '' || label === undefined ? query : label;\n      filterObj[label] = {\n        query_string: {\n          query: query,\n          analyze_wildcard: true,\n        },\n      };\n    }\n\n    return filterObj;\n  }\n\n  documentQuery(query: any, size: number) {\n    query.size = size;\n    query.sort = {};\n    query.sort[this.timeField] = { order: 'desc', unmapped_type: 'boolean' };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      query.fields = ['*', '_source'];\n    }\n\n    query.script_fields = {};\n    return query;\n  }\n\n  addAdhocFilters(query: any, adhocFilters: any) {\n    if (!adhocFilters) {\n      return;\n    }\n\n    let i, filter, condition: any, queryCondition: any;\n\n    for (i = 0; i < adhocFilters.length; i++) {\n      filter = adhocFilters[i];\n      condition = {};\n      condition[filter.key] = filter.value;\n      queryCondition = {};\n      queryCondition[filter.key] = { query: filter.value };\n\n      switch (filter.operator) {\n        case '=':\n          if (!query.query.bool.must) {\n            query.query.bool.must = [];\n          }\n          query.query.bool.must.push({ match_phrase: queryCondition });\n          break;\n        case '!=':\n          if (!query.query.bool.must_not) {\n            query.query.bool.must_not = [];\n          }\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\n          break;\n        case '<':\n          condition[filter.key] = { lt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '>':\n          condition[filter.key] = { gt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '=~':\n          query.query.bool.filter.push({ regexp: condition });\n          break;\n        case '!~':\n          query.query.bool.filter.push({\n            bool: { must_not: { regexp: condition } },\n          });\n          break;\n      }\n    }\n  }\n\n  build(target: any, adhocFilters?: any, queryString?: string) {\n    // make sure query has defaults;\n    target.metrics = target.metrics || [queryDef.defaultMetricAgg()];\n    target.bucketAggs = target.bucketAggs || [queryDef.defaultBucketAgg()];\n    target.timeField = this.timeField;\n\n    let i, j, pv, nestedAggs, metric;\n    const query = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [\n            { range: this.getRangeFilter() },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: queryString,\n              },\n            },\n          ],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    // If target doesn't have bucketAggs and type is not raw_document, it is invalid query.\n    if (target.bucketAggs.length === 0) {\n      metric = target.metrics[0];\n      if (!metric || metric.type !== 'raw_document') {\n        throw { message: 'Invalid query' };\n      }\n    }\n\n    /* Handle document query:\n     * Check if metric type is raw_document. If metric doesn't have size (or size is 0), update size to 500.\n     * Otherwise it will not be a valid query and error will be thrown.\n     */\n    if (target.metrics[0].type === 'raw_document') {\n      metric = target.metrics[0];\n      const size = (metric.settings && metric.settings.size !== 0 && metric.settings.size) || 500;\n      return this.documentQuery(query, size);\n    }\n\n    nestedAggs = query;\n\n    for (i = 0; i < target.bucketAggs.length; i++) {\n      const aggDef: any = target.bucketAggs[i];\n      const esAgg: any = {};\n\n      switch (aggDef.type) {\n        case 'date_histogram': {\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\n          break;\n        }\n        case 'histogram': {\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\n          break;\n        }\n        case 'filters': {\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\n          break;\n        }\n        case 'terms': {\n          this.buildTermsAgg(aggDef, esAgg, target);\n          break;\n        }\n        case 'geohash_grid': {\n          esAgg['geohash_grid'] = {\n            field: aggDef.field,\n            precision: aggDef.settings.precision,\n          };\n          break;\n        }\n      }\n\n      nestedAggs.aggs = nestedAggs.aggs || {};\n      nestedAggs.aggs[aggDef.id] = esAgg;\n      nestedAggs = esAgg;\n    }\n\n    nestedAggs.aggs = {};\n\n    for (i = 0; i < target.metrics.length; i++) {\n      metric = target.metrics[i];\n      if (metric.type === 'count') {\n        continue;\n      }\n\n      const aggField: any = {};\n      let metricAgg: any = null;\n\n      if (queryDef.isPipelineAgg(metric.type)) {\n        if (queryDef.isPipelineAggWithMultipleBucketPaths(metric.type)) {\n          if (metric.pipelineVariables) {\n            metricAgg = {\n              buckets_path: {},\n            };\n\n            for (j = 0; j < metric.pipelineVariables.length; j++) {\n              pv = metric.pipelineVariables[j];\n\n              if (pv.name && pv.pipelineAgg && /^\\d*$/.test(pv.pipelineAgg)) {\n                const appliedAgg = queryDef.findMetricById(target.metrics, pv.pipelineAgg);\n                if (appliedAgg) {\n                  if (appliedAgg.type === 'count') {\n                    metricAgg.buckets_path[pv.name] = '_count';\n                  } else {\n                    metricAgg.buckets_path[pv.name] = pv.pipelineAgg;\n                  }\n                }\n              }\n            }\n          } else {\n            continue;\n          }\n        } else {\n          if (metric.pipelineAgg && /^\\d*$/.test(metric.pipelineAgg)) {\n            const appliedAgg = queryDef.findMetricById(target.metrics, metric.pipelineAgg);\n            if (appliedAgg) {\n              if (appliedAgg.type === 'count') {\n                metricAgg = { buckets_path: '_count' };\n              } else {\n                metricAgg = { buckets_path: metric.pipelineAgg };\n              }\n            }\n          } else {\n            continue;\n          }\n        }\n      } else {\n        metricAgg = { field: metric.field };\n      }\n\n      for (const prop in metric.settings) {\n        if (metric.settings.hasOwnProperty(prop) && metric.settings[prop] !== null) {\n          metricAgg[prop] = metric.settings[prop];\n        }\n      }\n\n      aggField[metric.type] = metricAgg;\n      nestedAggs.aggs[metric.id] = aggField;\n    }\n\n    return query;\n  }\n\n  getTermsQuery(queryDef: any) {\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (queryDef.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: queryDef.query,\n        },\n      });\n    }\n\n    let size = 500;\n    if (queryDef.size) {\n      size = queryDef.size;\n    }\n\n    query.aggs = {\n      '1': {\n        terms: {\n          field: queryDef.field,\n          size: size,\n          order: {},\n        },\n      },\n    };\n\n    // Default behaviour is to order results by { _key: asc }\n    // queryDef.order allows selection of asc/desc\n    // queryDef.orderBy allows selection of doc_count ordering (defaults desc)\n\n    const { orderBy = 'key', order = orderBy === 'doc_count' ? 'desc' : 'asc' } = queryDef;\n\n    if (['asc', 'desc'].indexOf(order) < 0) {\n      throw { message: `Invalid query sort order ${order}` };\n    }\n\n    switch (orderBy) {\n      case 'key':\n      case 'term':\n        const keyname = this.esVersion >= 60 ? '_key' : '_term';\n        query.aggs['1'].terms.order[keyname] = order;\n        break;\n      case 'doc_count':\n        query.aggs['1'].terms.order['_count'] = order;\n        break;\n      default:\n        throw { message: `Invalid query sort type ${orderBy}` };\n    }\n\n    return query;\n  }\n\n  getLogsQuery(target: any, adhocFilters?: any, querystring?: string) {\n    let query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    if (target.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: querystring,\n        },\n      });\n    }\n\n    query = this.documentQuery(query, 500);\n\n    return {\n      ...query,\n      aggs: this.build(target, null, querystring).aggs,\n    };\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport {\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataFrame,\n  ScopedVars,\n} from '@grafana/data';\nimport { ElasticResponse } from './elastic_response';\nimport { IndexPattern } from './index_pattern';\nimport { ElasticQueryBuilder } from './query_builder';\nimport { toUtc } from '@grafana/data';\nimport * as queryDef from './query_def';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { DataLinkConfig, ElasticsearchOptions, ElasticsearchQuery } from './types';\n\nexport class ElasticDatasource extends DataSourceApi<ElasticsearchQuery, ElasticsearchOptions> {\n  basicAuth: string;\n  withCredentials: boolean;\n  url: string;\n  name: string;\n  index: string;\n  timeField: string;\n  esVersion: number;\n  interval: string;\n  maxConcurrentShardRequests: number;\n  queryBuilder: ElasticQueryBuilder;\n  indexPattern: IndexPattern;\n  logMessageField?: string;\n  logLevelField?: string;\n  dataLinks: DataLinkConfig[];\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<ElasticsearchOptions>,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.index = instanceSettings.database;\n    const settingsData = instanceSettings.jsonData || ({} as ElasticsearchOptions);\n\n    this.timeField = settingsData.timeField;\n    this.esVersion = settingsData.esVersion;\n    this.indexPattern = new IndexPattern(this.index, settingsData.interval);\n    this.interval = settingsData.timeInterval;\n    this.maxConcurrentShardRequests = settingsData.maxConcurrentShardRequests;\n    this.queryBuilder = new ElasticQueryBuilder({\n      timeField: this.timeField,\n      esVersion: this.esVersion,\n    });\n    this.logMessageField = settingsData.logMessageField || '';\n    this.logLevelField = settingsData.logLevelField || '';\n    this.dataLinks = settingsData.dataLinks || [];\n\n    if (this.logMessageField === '') {\n      this.logMessageField = null;\n    }\n\n    if (this.logLevelField === '') {\n      this.logLevelField = null;\n    }\n  }\n\n  private request(method: string, url: string, data?: undefined) {\n    const options: any = {\n      url: this.url + '/' + url,\n      method: method,\n      data: data,\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return getBackendSrv().datasourceRequest(options);\n  }\n\n  /**\n   * Sends a GET request to the specified url on the newest matching and available index.\n   *\n   * When multiple indices span the provided time range, the request is sent starting from the newest index,\n   * and then going backwards until an index is found.\n   *\n   * @param url the url to query the index on, for example `/_mapping`.\n   */\n  private get(url: string) {\n    const range = this.timeSrv.timeRange();\n    const indexList = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());\n    if (_.isArray(indexList) && indexList.length) {\n      return this.requestAllIndices(indexList, url).then((results: any) => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    } else {\n      return this.request('GET', this.indexPattern.getIndexForToday() + url).then((results: any) => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    }\n  }\n\n  private async requestAllIndices(indexList: string[], url: string): Promise<any> {\n    const maxTraversals = 7; // do not go beyond one week (for a daily pattern)\n    const listLen = indexList.length;\n    for (let i = 0; i < Math.min(listLen, maxTraversals); i++) {\n      try {\n        return await this.request('GET', indexList[listLen - i - 1] + url);\n      } catch (err) {\n        if (err.status !== 404 || i === maxTraversals - 1) {\n          throw err;\n        }\n      }\n    }\n  }\n\n  private post(url: string, data: any) {\n    return this.request('POST', url, data)\n      .then((results: any) => {\n        results.data.$$config = results.config;\n        return results.data;\n      })\n      .catch((err: any) => {\n        if (err.data && err.data.error) {\n          throw {\n            message: 'Elasticsearch error: ' + err.data.error.reason,\n            error: err.data.error,\n          };\n        }\n\n        throw err;\n      });\n  }\n\n  annotationQuery(options: any): Promise<any> {\n    const annotation = options.annotation;\n    const timeField = annotation.timeField || '@timestamp';\n    const timeEndField = annotation.timeEndField || null;\n    const queryString = annotation.query || '*';\n    const tagsField = annotation.tagsField || 'tags';\n    const textField = annotation.textField || null;\n\n    const dateRanges = [];\n    const rangeStart: any = {};\n    rangeStart[timeField] = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      format: 'epoch_millis',\n    };\n    dateRanges.push({ range: rangeStart });\n\n    if (timeEndField) {\n      const rangeEnd: any = {};\n      rangeEnd[timeEndField] = {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        format: 'epoch_millis',\n      };\n      dateRanges.push({ range: rangeEnd });\n    }\n\n    const queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');\n    const query = {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: dateRanges,\n              minimum_should_match: 1,\n            },\n          },\n          {\n            query_string: {\n              query: queryInterpolated,\n            },\n          },\n        ],\n      },\n    };\n\n    const data: any = {\n      query,\n      size: 10000,\n    };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      data['fields'] = [timeField, '_source'];\n    }\n\n    const header: any = {\n      search_type: 'query_then_fetch',\n      ignore_unavailable: true,\n    };\n\n    // old elastic annotations had index specified on them\n    if (annotation.index) {\n      header.index = annotation.index;\n    } else {\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\n    }\n\n    const payload = angular.toJson(header) + '\\n' + angular.toJson(data) + '\\n';\n\n    return this.post('_msearch', payload).then((res: any) => {\n      const list = [];\n      const hits = res.responses[0].hits.hits;\n\n      const getFieldFromSource = (source: any, fieldName: any) => {\n        if (!fieldName) {\n          return;\n        }\n\n        const fieldNames = fieldName.split('.');\n        let fieldValue = source;\n\n        for (let i = 0; i < fieldNames.length; i++) {\n          fieldValue = fieldValue[fieldNames[i]];\n          if (!fieldValue) {\n            console.log('could not find field in annotation: ', fieldName);\n            return '';\n          }\n        }\n\n        return fieldValue;\n      };\n\n      for (let i = 0; i < hits.length; i++) {\n        const source = hits[i]._source;\n        let time = getFieldFromSource(source, timeField);\n        if (typeof hits[i].fields !== 'undefined') {\n          const fields = hits[i].fields;\n          if (_.isString(fields[timeField]) || _.isNumber(fields[timeField])) {\n            time = fields[timeField];\n          }\n        }\n\n        const event: {\n          annotation: any;\n          time: number;\n          timeEnd?: number;\n          text: string;\n          tags: string | string[];\n        } = {\n          annotation: annotation,\n          time: toUtc(time).valueOf(),\n          text: getFieldFromSource(source, textField),\n          tags: getFieldFromSource(source, tagsField),\n        };\n\n        if (timeEndField) {\n          const timeEnd = getFieldFromSource(source, timeEndField);\n          if (timeEnd) {\n            event.timeEnd = toUtc(timeEnd).valueOf();\n          }\n        }\n\n        // legacy support for title tield\n        if (annotation.titleField) {\n          const title = getFieldFromSource(source, annotation.titleField);\n          if (title) {\n            event.text = title + '\\n' + event.text;\n          }\n        }\n\n        if (typeof event.tags === 'string') {\n          event.tags = event.tags.split(',');\n        }\n\n        list.push(event);\n      }\n      return list;\n    });\n  }\n\n  interpolateVariablesInQueries(queries: ElasticsearchQuery[], scopedVars: ScopedVars): ElasticsearchQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          query: this.templateSrv.replace(query.query, scopedVars, 'lucene'),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  testDatasource() {\n    // validate that the index exist and has date field\n    return this.getFields({ type: 'date' }).then(\n      (dateFields: any) => {\n        const timeField: any = _.find(dateFields, { text: this.timeField });\n        if (!timeField) {\n          return {\n            status: 'error',\n            message: 'No date field named ' + this.timeField + ' found',\n          };\n        }\n        return { status: 'success', message: 'Index OK. Time field name OK.' };\n      },\n      (err: any) => {\n        console.log(err);\n        if (err.data && err.data.error) {\n          let message = angular.toJson(err.data.error);\n          if (err.data.error.reason) {\n            message = err.data.error.reason;\n          }\n          return { status: 'error', message: message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      }\n    );\n  }\n\n  getQueryHeader(searchType: any, timeFrom: any, timeTo: any) {\n    const queryHeader: any = {\n      search_type: searchType,\n      ignore_unavailable: true,\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\n    };\n    if (this.esVersion >= 56 && this.esVersion < 70) {\n      queryHeader['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;\n    }\n    return angular.toJson(queryHeader);\n  }\n\n  query(options: DataQueryRequest<ElasticsearchQuery>): Promise<DataQueryResponse> {\n    let payload = '';\n    const targets = _.cloneDeep(options.targets);\n    const sentTargets: ElasticsearchQuery[] = [];\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    for (const target of targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      let queryString = this.templateSrv.replace(target.query, options.scopedVars, 'lucene');\n      // Elasticsearch queryString should always be '*' if empty string\n      if (!queryString || queryString === '') {\n        queryString = '*';\n      }\n\n      let queryObj;\n      if (target.isLogsQuery || queryDef.hasMetricOfType(target, 'logs')) {\n        target.bucketAggs = [queryDef.defaultBucketAgg()];\n        target.metrics = [queryDef.defaultMetricAgg()];\n        // Setting this for metrics queries that are typed as logs\n        target.isLogsQuery = true;\n        queryObj = this.queryBuilder.getLogsQuery(target, adhocFilters, queryString);\n      } else {\n        if (target.alias) {\n          target.alias = this.templateSrv.replace(target.alias, options.scopedVars, 'lucene');\n        }\n\n        queryObj = this.queryBuilder.build(target, adhocFilters, queryString);\n      }\n\n      const esQuery = angular.toJson(queryObj);\n\n      const searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\n      payload += header + '\\n';\n\n      payload += esQuery + '\\n';\n\n      sentTargets.push(target);\n    }\n\n    if (sentTargets.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    // We replace the range here for actual values. We need to replace it together with enclosing \"\" so that we replace\n    // it as an integer not as string with digits. This is because elastic will convert the string only if the time\n    // field is specified as type date (which probably should) but can also be specified as integer (millisecond epoch)\n    // and then sending string will error out.\n    payload = payload.replace(/\"\\$timeFrom\"/g, options.range.from.valueOf().toString());\n    payload = payload.replace(/\"\\$timeTo\"/g, options.range.to.valueOf().toString());\n    payload = this.templateSrv.replace(payload, options.scopedVars);\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, payload).then((res: any) => {\n      const er = new ElasticResponse(sentTargets, res);\n      if (sentTargets.some(target => target.isLogsQuery)) {\n        const response = er.getLogs(this.logMessageField, this.logLevelField);\n        for (const dataFrame of response.data) {\n          this.enhanceDataFrame(dataFrame);\n        }\n        return response;\n      }\n\n      return er.getTimeSeries();\n    });\n  }\n\n  getFields(query: any) {\n    const configuredEsVersion = this.esVersion;\n    return this.get('/_mapping').then((result: any) => {\n      const typeMap: any = {\n        float: 'number',\n        double: 'number',\n        integer: 'number',\n        long: 'number',\n        date: 'date',\n        string: 'string',\n        text: 'string',\n        scaled_float: 'number',\n        nested: 'nested',\n      };\n\n      function shouldAddField(obj: any, key: any, query: any) {\n        if (key[0] === '_') {\n          return false;\n        }\n\n        if (!query.type) {\n          return true;\n        }\n\n        // equal query type filter, or via typemap translation\n        return query.type === obj.type || query.type === typeMap[obj.type];\n      }\n\n      // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\n      const fieldNameParts: any = [];\n      const fields: any = {};\n\n      function getFieldsRecursively(obj: any) {\n        for (const key in obj) {\n          const subObj = obj[key];\n\n          // Check mapping field for nested fields\n          if (_.isObject(subObj.properties)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.properties);\n          }\n\n          if (_.isObject(subObj.fields)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.fields);\n          }\n\n          if (_.isString(subObj.type)) {\n            const fieldName = fieldNameParts.concat(key).join('.');\n\n            // Hide meta-fields and check field type\n            if (shouldAddField(subObj, key, query)) {\n              fields[fieldName] = {\n                text: fieldName,\n                type: subObj.type,\n              };\n            }\n          }\n        }\n        fieldNameParts.pop();\n      }\n\n      for (const indexName in result) {\n        const index = result[indexName];\n        if (index && index.mappings) {\n          const mappings = index.mappings;\n\n          if (configuredEsVersion < 70) {\n            for (const typeName in mappings) {\n              const properties = mappings[typeName].properties;\n              getFieldsRecursively(properties);\n            }\n          } else {\n            const properties = mappings.properties;\n            getFieldsRecursively(properties);\n          }\n        }\n      }\n\n      // transform to array\n      return _.map(fields, value => {\n        return value;\n      });\n    });\n  }\n\n  getTerms(queryDef: any) {\n    const range = this.timeSrv.timeRange();\n    const searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';\n    const header = this.getQueryHeader(searchType, range.from, range.to);\n    let esQuery = angular.toJson(this.queryBuilder.getTermsQuery(queryDef));\n\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf().toString());\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf().toString());\n    esQuery = header + '\\n' + esQuery + '\\n';\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, esQuery).then((res: any) => {\n      if (!res.responses[0].aggregations) {\n        return [];\n      }\n\n      const buckets = res.responses[0].aggregations['1'].buckets;\n      return _.map(buckets, bucket => {\n        return {\n          text: bucket.key_as_string || bucket.key,\n          value: bucket.key,\n        };\n      });\n    });\n  }\n\n  getMultiSearchUrl() {\n    if (this.esVersion >= 70 && this.maxConcurrentShardRequests) {\n      return `_msearch?max_concurrent_shard_requests=${this.maxConcurrentShardRequests}`;\n    }\n\n    return '_msearch';\n  }\n\n  metricFindQuery(query: any) {\n    query = angular.fromJson(query);\n    if (query) {\n      if (query.find === 'fields') {\n        query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n        return this.getFields(query);\n      }\n\n      if (query.find === 'terms') {\n        query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n        query.query = this.templateSrv.replace(query.query || '*', {}, 'lucene');\n        return this.getTerms(query);\n      }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getTagKeys() {\n    return this.getFields({});\n  }\n\n  getTagValues(options: any) {\n    return this.getTerms({ field: options.key, query: '*' });\n  }\n\n  targetContainsTemplate(target: any) {\n    if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {\n      return true;\n    }\n\n    for (const bucketAgg of target.bucketAggs) {\n      if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\n        return true;\n      }\n    }\n\n    for (const metric of target.metrics) {\n      if (\n        this.templateSrv.variableExists(metric.field) ||\n        this.objectContainsTemplate(metric.settings) ||\n        this.objectContainsTemplate(metric.meta)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  enhanceDataFrame(dataFrame: DataFrame) {\n    if (this.dataLinks.length) {\n      for (const field of dataFrame.fields) {\n        const dataLink = this.dataLinks.find(dataLink => field.name && field.name.match(dataLink.field));\n        if (dataLink) {\n          field.config = field.config || {};\n          field.config.links = [\n            ...(field.config.links || []),\n            {\n              url: dataLink.url,\n              title: '',\n            },\n          ];\n        }\n      }\n    }\n  }\n\n  private isPrimitive(obj: any) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n    if (['string', 'number', 'boolean'].some(type => type === typeof true)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private objectContainsTemplate(obj: any) {\n    if (!obj) {\n      return false;\n    }\n\n    for (const key of Object.keys(obj)) {\n      if (this.isPrimitive(obj[key])) {\n        if (this.templateSrv.variableExists(obj[key])) {\n          return true;\n        }\n      } else if (Array.isArray(obj[key])) {\n        for (const item of obj[key]) {\n          if (this.objectContainsTemplate(item)) {\n            return true;\n          }\n        }\n      } else {\n        if (this.objectContainsTemplate(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { GrafanaRootScope } from 'app/routes/GrafanaCtrl';\nimport { CoreEvents } from 'app/types';\n\nexport class ElasticBucketAggCtrl {\n  /** @ngInject */\n  constructor($scope: any, uiSegmentSrv: any, $rootScope: GrafanaRootScope) {\n    const bucketAggs = $scope.target.bucketAggs;\n\n    $scope.orderByOptions = [];\n\n    $scope.getBucketAggTypes = () => {\n      return queryDef.bucketAggTypes;\n    };\n\n    $scope.getOrderOptions = () => {\n      return queryDef.orderOptions;\n    };\n\n    $scope.getSizeOptions = () => {\n      return queryDef.sizeOptions;\n    };\n\n    $rootScope.onAppEvent(\n      CoreEvents.elasticQueryUpdated,\n      () => {\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.init = () => {\n      $scope.agg = bucketAggs[$scope.index];\n      $scope.validateModel();\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.onTypeChanged = () => {\n      $scope.agg.settings = {};\n      $scope.showOptions = false;\n\n      switch ($scope.agg.type) {\n        case 'date_histogram':\n        case 'histogram':\n        case 'terms': {\n          delete $scope.agg.query;\n          $scope.agg.field = 'select field';\n          break;\n        }\n        case 'filters': {\n          delete $scope.agg.field;\n          $scope.agg.query = '*';\n          break;\n        }\n        case 'geohash_grid': {\n          $scope.agg.settings.precision = 3;\n          break;\n        }\n      }\n\n      $scope.validateModel();\n      $scope.onChange();\n    };\n\n    $scope.validateModel = () => {\n      $scope.index = _.indexOf(bucketAggs, $scope.agg);\n      $scope.isFirst = $scope.index === 0;\n      $scope.bucketAggCount = bucketAggs.length;\n\n      let settingsLinkText = '';\n      const settings = $scope.agg.settings || {};\n\n      switch ($scope.agg.type) {\n        case 'terms': {\n          settings.order = settings.order || 'desc';\n          settings.size = settings.size || '10';\n          settings.min_doc_count = settings.min_doc_count || 0;\n          settings.orderBy = settings.orderBy || '_term';\n\n          if (settings.size !== '0') {\n            settingsLinkText = queryDef.describeOrder(settings.order) + ' ' + settings.size + ', ';\n          }\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += 'Min Doc Count: ' + settings.min_doc_count + ', ';\n          }\n\n          settingsLinkText += 'Order by: ' + queryDef.describeOrderBy(settings.orderBy, $scope.target);\n\n          if (settings.size === '0') {\n            settingsLinkText += ' (' + settings.order + ')';\n          }\n\n          break;\n        }\n        case 'filters': {\n          settings.filters = settings.filters || [{ query: '*' }];\n          settingsLinkText = _.reduce(\n            settings.filters,\n            (memo, value, index) => {\n              memo += 'Q' + (index + 1) + '  = ' + value.query + ' ';\n              return memo;\n            },\n            ''\n          );\n          if (settingsLinkText.length > 50) {\n            settingsLinkText = settingsLinkText.substr(0, 50) + '...';\n          }\n          settingsLinkText = 'Filter Queries (' + settings.filters.length + ')';\n          break;\n        }\n        case 'date_histogram': {\n          settings.interval = settings.interval || 'auto';\n          settings.min_doc_count = settings.min_doc_count || 0;\n          $scope.agg.field = $scope.target.timeField;\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n\n          if (settings.trimEdges === undefined || settings.trimEdges < 0) {\n            settings.trimEdges = 0;\n          }\n\n          if (settings.trimEdges && settings.trimEdges > 0) {\n            settingsLinkText += ', Trim edges: ' + settings.trimEdges;\n          }\n          break;\n        }\n        case 'histogram': {\n          settings.interval = settings.interval || 1000;\n          settings.min_doc_count = _.defaultTo(settings.min_doc_count, 1);\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n          break;\n        }\n        case 'geohash_grid': {\n          // limit precision to 7\n          settings.precision = Math.max(Math.min(settings.precision, 7), 1);\n          settingsLinkText = 'Precision: ' + settings.precision;\n          break;\n        }\n      }\n\n      $scope.settingsLinkText = settingsLinkText;\n      $scope.agg.settings = settings;\n      return true;\n    };\n\n    $scope.addFiltersQuery = () => {\n      $scope.agg.settings.filters.push({ query: '*' });\n    };\n\n    $scope.removeFiltersQuery = (filter: any) => {\n      $scope.agg.settings.filters = _.without($scope.agg.settings.filters, filter);\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n    };\n\n    $scope.getOrderByOptions = () => {\n      return queryDef.getOrderByOptions($scope.target);\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'date_histogram') {\n        return $scope.getFields({ $fieldType: 'date' });\n      } else {\n        return $scope.getFields();\n      }\n    };\n\n    $scope.getIntervalOptions = () => {\n      return Promise.resolve(uiSegmentSrv.transformToSegments(true, 'interval')(queryDef.intervalOptions));\n    };\n\n    $scope.addBucketAgg = () => {\n      // if last is date histogram add it before\n      const lastBucket = bucketAggs[bucketAggs.length - 1];\n      let addIndex = bucketAggs.length - 1;\n\n      if (lastBucket && lastBucket.type === 'date_histogram') {\n        addIndex -= 1;\n      }\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      bucketAggs.splice(addIndex, 0, { type: 'terms', field: 'select field', id: (id + 1).toString(), fake: true });\n      $scope.onChange();\n    };\n\n    $scope.removeBucketAgg = () => {\n      bucketAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nexport function elasticBucketAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/bucket_agg.html',\n    controller: ElasticBucketAggCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n    },\n  };\n}\n\ncoreModule.directive('elasticBucketAgg', elasticBucketAgg);\n","import coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { ElasticsearchAggregation } from './types';\nimport { GrafanaRootScope } from 'app/routes/GrafanaCtrl';\nimport { CoreEvents } from 'app/types';\n\nexport class ElasticMetricAggCtrl {\n  /** @ngInject */\n  constructor($scope: any, uiSegmentSrv: any, $rootScope: GrafanaRootScope) {\n    const metricAggs: ElasticsearchAggregation[] = $scope.target.metrics;\n    $scope.metricAggTypes = queryDef.getMetricAggTypes($scope.esVersion);\n    $scope.extendedStats = queryDef.extendedStats;\n    $scope.pipelineAggOptions = [];\n    $scope.modelSettingsValues = {};\n\n    $scope.init = () => {\n      $scope.agg = metricAggs[$scope.index];\n      $scope.validateModel();\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.updatePipelineAggOptions = () => {\n      $scope.pipelineAggOptions = queryDef.getPipelineAggOptions($scope.target);\n    };\n\n    $rootScope.onAppEvent(\n      CoreEvents.elasticQueryUpdated,\n      () => {\n        $scope.index = _.indexOf(metricAggs, $scope.agg);\n        $scope.updatePipelineAggOptions();\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.validateModel = () => {\n      $scope.isFirst = $scope.index === 0;\n      $scope.isSingle = metricAggs.length === 1;\n      $scope.settingsLinkText = '';\n      $scope.variablesLinkText = '';\n      $scope.aggDef = _.find($scope.metricAggTypes, { value: $scope.agg.type });\n\n      if (queryDef.isPipelineAgg($scope.agg.type)) {\n        if (queryDef.isPipelineAggWithMultipleBucketPaths($scope.agg.type)) {\n          $scope.variablesLinkText = 'Options';\n\n          if ($scope.agg.settings.script) {\n            $scope.variablesLinkText = 'Script: ' + $scope.agg.settings.script.replace(new RegExp('params.', 'g'), '');\n          }\n        } else {\n          $scope.agg.pipelineAgg = $scope.agg.pipelineAgg || 'select metric';\n          $scope.agg.field = $scope.agg.pipelineAgg;\n        }\n\n        const pipelineOptions = queryDef.getPipelineOptions($scope.agg);\n        if (pipelineOptions.length > 0) {\n          _.each(pipelineOptions, opt => {\n            $scope.agg.settings[opt.text] = $scope.agg.settings[opt.text] || opt.default;\n          });\n          $scope.settingsLinkText = 'Options';\n        }\n      } else if (!$scope.agg.field) {\n        $scope.agg.field = 'select field';\n      }\n      switch ($scope.agg.type) {\n        case 'cardinality': {\n          const precisionThreshold = $scope.agg.settings.precision_threshold || '';\n          $scope.settingsLinkText = 'Precision threshold: ' + precisionThreshold;\n          break;\n        }\n        case 'percentiles': {\n          $scope.agg.settings.percents = $scope.agg.settings.percents || [25, 50, 75, 95, 99];\n          $scope.settingsLinkText = 'Values: ' + $scope.agg.settings.percents.join(',');\n          break;\n        }\n        case 'extended_stats': {\n          if (_.keys($scope.agg.meta).length === 0) {\n            $scope.agg.meta.std_deviation_bounds_lower = true;\n            $scope.agg.meta.std_deviation_bounds_upper = true;\n          }\n\n          const stats = _.reduce(\n            $scope.agg.meta,\n            (memo, val, key) => {\n              if (val) {\n                const def: any = _.find($scope.extendedStats, { value: key });\n                memo.push(def.text);\n              }\n              return memo;\n            },\n            []\n          );\n\n          $scope.settingsLinkText = 'Stats: ' + stats.join(', ');\n          break;\n        }\n        case 'moving_avg': {\n          $scope.movingAvgModelTypes = queryDef.movingAvgModelOptions;\n          $scope.modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, true);\n          $scope.updateMovingAvgModelSettings();\n          break;\n        }\n        case 'raw_document': {\n          $scope.agg.settings.size = $scope.agg.settings.size || 500;\n          $scope.settingsLinkText = 'Size: ' + $scope.agg.settings.size;\n          $scope.target.metrics.splice(0, $scope.target.metrics.length, $scope.agg);\n\n          $scope.target.bucketAggs = [];\n          break;\n        }\n      }\n      if ($scope.aggDef.supportsInlineScript) {\n        // I know this stores the inline script twice\n        // but having it like this simplifes the query_builder\n        const inlineScript = $scope.agg.inlineScript;\n        if (inlineScript) {\n          $scope.agg.settings.script = { inline: inlineScript };\n        } else {\n          delete $scope.agg.settings.script;\n        }\n\n        if ($scope.settingsLinkText === '') {\n          $scope.settingsLinkText = 'Options';\n        }\n      }\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.toggleVariables = () => {\n      $scope.showVariables = !$scope.showVariables;\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.updateMovingAvgModelSettings = () => {\n      const modelSettingsKeys = [];\n      const modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, false);\n      for (let i = 0; i < modelSettings.length; i++) {\n        modelSettingsKeys.push(modelSettings[i].value);\n      }\n\n      for (const key in $scope.agg.settings.settings) {\n        if ($scope.agg.settings.settings[key] === null || modelSettingsKeys.indexOf(key) === -1) {\n          delete $scope.agg.settings.settings[key];\n        }\n      }\n    };\n\n    $scope.onChangeClearInternal = () => {\n      delete $scope.agg.settings.minimize;\n      $scope.onChange();\n    };\n\n    $scope.onTypeChange = () => {\n      $scope.agg.settings = {};\n      $scope.agg.meta = {};\n      $scope.showOptions = false;\n\n      // reset back to metric/group by query\n      if ($scope.target.bucketAggs.length === 0 && $scope.agg.type !== 'raw_document') {\n        $scope.target.bucketAggs = [queryDef.defaultBucketAgg()];\n      }\n\n      $scope.showVariables = queryDef.isPipelineAggWithMultipleBucketPaths($scope.agg.type);\n      $scope.updatePipelineAggOptions();\n      $scope.onChange();\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'cardinality') {\n        return $scope.getFields();\n      }\n      return $scope.getFields({ $fieldType: 'number' });\n    };\n\n    $scope.addMetricAgg = () => {\n      const addIndex = metricAggs.length;\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      metricAggs.splice(addIndex, 0, { type: 'count', field: 'select field', id: (id + 1).toString() });\n      $scope.onChange();\n    };\n\n    $scope.removeMetricAgg = () => {\n      metricAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.toggleShowMetric = () => {\n      $scope.agg.hide = !$scope.agg.hide;\n      if (!$scope.agg.hide) {\n        delete $scope.agg.hide;\n      }\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nexport function elasticMetricAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/metric_agg.html',\n    controller: ElasticMetricAggCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n      esVersion: '=',\n    },\n  };\n}\n\ncoreModule.directive('elasticMetricAgg', elasticMetricAgg);\n","import coreModule from 'app/core/core_module';\nimport _ from 'lodash';\n\nexport function elasticPipelineVariables() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/pipeline_variables.html',\n    controller: 'ElasticPipelineVariablesCtrl',\n    restrict: 'E',\n    scope: {\n      onChange: '&',\n      variables: '=',\n      options: '=',\n    },\n  };\n}\n\nconst newVariable = (index: any) => {\n  return {\n    name: 'var' + index,\n    pipelineAgg: 'select metric',\n  };\n};\n\nexport class ElasticPipelineVariablesCtrl {\n  /** @ngInject */\n  constructor($scope: any) {\n    $scope.variables = $scope.variables || [newVariable(1)];\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.add = () => {\n      $scope.variables.push(newVariable($scope.variables.length + 1));\n      $scope.onChange();\n    };\n\n    $scope.remove = (index: number) => {\n      $scope.variables.splice(index, 1);\n      $scope.onChange();\n    };\n  }\n}\n\ncoreModule.directive('elasticPipelineVariables', elasticPipelineVariables);\ncoreModule.controller('ElasticPipelineVariablesCtrl', ElasticPipelineVariablesCtrl);\n","import './bucket_agg';\nimport './metric_agg';\nimport './pipeline_variables';\n\nimport angular, { auto } from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { ElasticsearchAggregation } from './types';\nimport { GrafanaRootScope } from 'app/routes/GrafanaCtrl';\nimport { CoreEvents } from 'app/types';\n\nexport class ElasticQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  esVersion: any;\n  rawQueryOld: string;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private $rootScope: GrafanaRootScope,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.esVersion = this.datasource.esVersion;\n\n    this.target = this.target || {};\n    this.target.metrics = this.target.metrics || [queryDef.defaultMetricAgg()];\n    this.target.bucketAggs = this.target.bucketAggs || [queryDef.defaultBucketAgg()];\n\n    if (this.target.bucketAggs.length === 0) {\n      const metric = this.target.metrics[0];\n      if (!metric || metric.type !== 'raw_document') {\n        this.target.bucketAggs = [queryDef.defaultBucketAgg()];\n      }\n      this.refresh();\n    }\n\n    this.queryUpdated();\n  }\n\n  getFields(type: any) {\n    const jsonStr = angular.toJson({ find: 'fields', type: type });\n    return this.datasource\n      .metricFindQuery(jsonStr)\n      .then(this.uiSegmentSrv.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  queryUpdated() {\n    const newJson = angular.toJson(this.datasource.queryBuilder.build(this.target), true);\n    if (this.rawQueryOld && newJson !== this.rawQueryOld) {\n      this.refresh();\n    }\n\n    this.rawQueryOld = newJson;\n    this.$rootScope.appEvent(CoreEvents.elasticQueryUpdated);\n  }\n\n  getCollapsedText() {\n    const metricAggs: ElasticsearchAggregation[] = this.target.metrics;\n    const bucketAggs = this.target.bucketAggs;\n    const metricAggTypes = queryDef.getMetricAggTypes(this.esVersion);\n    const bucketAggTypes = queryDef.bucketAggTypes;\n    let text = '';\n\n    if (this.target.query) {\n      text += 'Query: ' + this.target.query + ', ';\n    }\n\n    text += 'Metrics: ';\n\n    _.each(metricAggs, (metric, index) => {\n      const aggDef: any = _.find(metricAggTypes, { value: metric.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += metric.field;\n      }\n      if (aggDef.supportsMultipleBucketPaths) {\n        text += metric.settings.script.replace(new RegExp('params.', 'g'), '');\n      }\n      text += '), ';\n    });\n\n    _.each(bucketAggs, (bucketAgg: any, index: number) => {\n      if (index === 0) {\n        text += ' Group by: ';\n      }\n\n      const aggDef: any = _.find(bucketAggTypes, { value: bucketAgg.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += bucketAgg.field;\n      }\n      text += '), ';\n    });\n\n    if (this.target.alias) {\n      text += 'Alias: ' + this.target.alias;\n    }\n\n    return text;\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import _ from 'lodash';\nimport React from 'react';\n\nimport { QueryField, SlatePrism } from '@grafana/ui';\nimport { ExploreQueryFieldProps } from '@grafana/data';\nimport { ElasticDatasource } from '../datasource';\nimport { ElasticsearchOptions, ElasticsearchQuery } from '../types';\n\ninterface Props extends ExploreQueryFieldProps<ElasticDatasource, ElasticsearchQuery, ElasticsearchOptions> {}\n\ninterface State {\n  syntaxLoaded: boolean;\n}\n\nclass ElasticsearchQueryField extends React.PureComponent<Props, State> {\n  plugins: any[];\n\n  constructor(props: Props, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      SlatePrism({\n        onlyIn: (node: any) => node.type === 'code_block',\n        getSyntax: (node: any) => 'lucene',\n      }),\n    ];\n\n    this.state = {\n      syntaxLoaded: false,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.query.isLogsQuery) {\n      this.onChangeQuery('', true);\n    }\n  }\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps: Props) {\n    // if query changed from the outside (i.e. cleared via explore toolbar)\n    if (!this.props.query.isLogsQuery) {\n      this.onChangeQuery('', true);\n    }\n  }\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery: ElasticsearchQuery = { ...query, query: value, isLogsQuery: true };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  render() {\n    const { query } = this.props;\n    const { syntaxLoaded } = this.state;\n\n    return (\n      <>\n        <div className=\"gf-form-inline gf-form-inline--nowrap\">\n          <div className=\"gf-form gf-form--grow flex-shrink-1\">\n            <QueryField\n              additionalPlugins={this.plugins}\n              query={query.query}\n              onChange={this.onChangeQuery}\n              onRunQuery={this.props.onRunQuery}\n              placeholder=\"Enter a Lucene query (run with Shift+Enter)\"\n              portalOrigin=\"elasticsearch\"\n              syntaxLoaded={syntaxLoaded}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ElasticsearchQueryField;\n","import React from 'react';\nimport { EventsWithValidation, regexValidation, LegacyForms } from '@grafana/ui';\nconst { Select, Input, FormField } = LegacyForms;\nimport { ElasticsearchOptions } from '../types';\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\n\nconst indexPatternTypes = [\n  { label: 'No pattern', value: 'none' },\n  { label: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n  { label: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n  { label: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n  { label: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n  { label: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n];\n\nconst esVersions = [\n  { label: '2.x', value: 2 },\n  { label: '5.x', value: 5 },\n  { label: '5.6+', value: 56 },\n  { label: '6.0+', value: 60 },\n  { label: '7.0+', value: 70 },\n];\n\ntype Props = {\n  value: DataSourceSettings<ElasticsearchOptions>;\n  onChange: (value: DataSourceSettings<ElasticsearchOptions>) => void;\n};\nexport const ElasticDetails = (props: Props) => {\n  const { value, onChange } = props;\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Elasticsearch details</h3>\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-25\">\n            <FormField\n              labelWidth={10}\n              inputWidth={15}\n              label=\"Index name\"\n              value={value.database || ''}\n              onChange={changeHandler('database', value, onChange)}\n              placeholder={'es-index-name'}\n              required\n            />\n          </div>\n\n          <div className=\"gf-form width-14\">\n            <FormField\n              labelWidth={10}\n              label=\"Pattern\"\n              inputEl={\n                <Select\n                  options={indexPatternTypes}\n                  onChange={intervalHandler(value, onChange)}\n                  value={indexPatternTypes.find(\n                    pattern =>\n                      pattern.value === (value.jsonData.interval === undefined ? 'none' : value.jsonData.interval)\n                  )}\n                />\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form max-width-25\">\n          <FormField\n            labelWidth={10}\n            inputWidth={15}\n            label=\"Time field name\"\n            value={value.jsonData.timeField || ''}\n            onChange={jsonDataChangeHandler('timeField', value, onChange)}\n            required\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <span className=\"gf-form-select-wrapper\">\n            <FormField\n              labelWidth={10}\n              label=\"Version\"\n              inputEl={\n                <Select\n                  options={esVersions}\n                  onChange={option => {\n                    const maxConcurrentShardRequests = getMaxConcurrenShardRequestOrDefault(\n                      value.jsonData.maxConcurrentShardRequests,\n                      option.value\n                    );\n                    onChange({\n                      ...value,\n                      jsonData: {\n                        ...value.jsonData,\n                        esVersion: option.value,\n                        maxConcurrentShardRequests,\n                      },\n                    });\n                  }}\n                  value={esVersions.find(version => version.value === value.jsonData.esVersion)}\n                />\n              }\n            />\n          </span>\n        </div>\n        {value.jsonData.esVersion >= 56 && (\n          <div className=\"gf-form max-width-30\">\n            <FormField\n              aria-label={'Max concurrent Shard Requests input'}\n              labelWidth={15}\n              label=\"Max concurrent Shard Requests\"\n              value={value.jsonData.maxConcurrentShardRequests || ''}\n              onChange={jsonDataChangeHandler('maxConcurrentShardRequests', value, onChange)}\n            />\n          </div>\n        )}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={10}\n              label=\"Min time interval\"\n              inputEl={\n                <Input\n                  className={'width-6'}\n                  value={value.jsonData.timeInterval || ''}\n                  onChange={jsonDataChangeHandler('timeInterval', value, onChange)}\n                  placeholder=\"10s\"\n                  validationEvents={{\n                    [EventsWithValidation.onBlur]: [\n                      regexValidation(\n                        /^\\d+(ms|[Mwdhmsy])$/,\n                        'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n                      ),\n                    ],\n                  }}\n                />\n              }\n              tooltip={\n                <>\n                  A lower limit for the auto group by time interval. Recommended to be set to write frequency, for\n                  example <code>1m</code> if your data is written every minute.\n                </>\n              }\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst changeHandler = (\n  key: keyof DataSourceSettings<ElasticsearchOptions>,\n  value: Props['value'],\n  onChange: Props['onChange']\n) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n  onChange({\n    ...value,\n    [key]: event.currentTarget.value,\n  });\n};\n\nconst jsonDataChangeHandler = (key: keyof ElasticsearchOptions, value: Props['value'], onChange: Props['onChange']) => (\n  event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n) => {\n  onChange({\n    ...value,\n    jsonData: {\n      ...value.jsonData,\n      [key]: event.currentTarget.value,\n    },\n  });\n};\n\nconst intervalHandler = (value: Props['value'], onChange: Props['onChange']) => (option: SelectableValue<string>) => {\n  const { database } = value;\n  // If option value is undefined it will send its label instead so we have to convert made up value to undefined here.\n  const newInterval = option.value === 'none' ? undefined : option.value;\n\n  if (!database || database.length === 0 || database.startsWith('[logstash-]')) {\n    let newDatabase = '';\n    if (newInterval !== undefined) {\n      const pattern = indexPatternTypes.find(pattern => pattern.value === newInterval);\n      if (pattern) {\n        newDatabase = pattern.example;\n      }\n    }\n\n    onChange({\n      ...value,\n      database: newDatabase,\n      jsonData: {\n        ...value.jsonData,\n        interval: newInterval,\n      },\n    });\n  } else {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        interval: newInterval,\n      },\n    });\n  }\n};\n\nfunction getMaxConcurrenShardRequestOrDefault(maxConcurrentShardRequests: number, version: number): number {\n  if (maxConcurrentShardRequests === 5 && version < 70) {\n    return 256;\n  }\n\n  if (maxConcurrentShardRequests === 256 && version >= 70) {\n    return 5;\n  }\n\n  return maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(version);\n}\n\nexport function defaultMaxConcurrentShardRequests(version: number) {\n  return version >= 70 ? 5 : 256;\n}\n","import React from 'react';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport { ElasticsearchOptions } from '../types';\n\ntype Props = {\n  value: ElasticsearchOptions;\n  onChange: (value: ElasticsearchOptions) => void;\n};\nexport const LogsConfig = (props: Props) => {\n  const { value, onChange } = props;\n  const changeHandler = (key: keyof ElasticsearchOptions) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    onChange({\n      ...value,\n      [key]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Logs</h3>\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form max-width-30\">\n          <FormField\n            labelWidth={11}\n            label=\"Message field name\"\n            value={value.logMessageField}\n            onChange={changeHandler('logMessageField')}\n            placeholder=\"_source\"\n          />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <FormField\n            labelWidth={11}\n            label=\"Level field name\"\n            value={value.logLevelField}\n            onChange={changeHandler('logLevelField')}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { css } from 'emotion';\nimport { VariableSuggestion } from '@grafana/data';\nimport { Button, LegacyForms, DataLinkInput, stylesFactory } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport { DataLinkConfig } from '../types';\n\nconst getStyles = stylesFactory(() => ({\n  firstRow: css`\n    display: flex;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n}));\n\ntype Props = {\n  value: DataLinkConfig;\n  onChange: (value: DataLinkConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DataLink = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.firstRow + ' gf-form'}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={6}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Field\"\n          type=\"text\"\n          value={value.field}\n          tooltip={'Can be exact field name or a regex pattern that will match on the field name.'}\n          onChange={handleChange('field')}\n        />\n        <Button\n          variant={'destructive'}\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={event => {\n            event.preventDefault();\n            onDelete();\n          }}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <FormField\n          label=\"URL\"\n          labelWidth={6}\n          inputEl={\n            <DataLinkInput\n              placeholder={'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={newValue =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={css`\n            width: 100%;\n          `}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { css } from 'emotion';\nimport { Button, stylesFactory, useTheme } from '@grafana/ui';\nimport { GrafanaTheme, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { DataLinkConfig } from '../types';\nimport { DataLink } from './DataLink';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textWeak};\n  `,\n  dataLink: css`\n    margin-bottom: ${theme.spacing.sm};\n  `,\n}));\n\ntype Props = {\n  value?: DataLinkConfig[];\n  onChange: (value: DataLinkConfig[]) => void;\n};\nexport const DataLinks = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Data links</h3>\n\n      <div className={styles.infoText}>\n        Add links to existing fields. Links will be shown in log row details next to the field value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value &&\n          value.map((field, index) => {\n            return (\n              <DataLink\n                className={styles.dataLink}\n                key={index}\n                value={field}\n                onChange={newField => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1, newField);\n                  onChange(newDataLinks);\n                }}\n                onDelete={() => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1);\n                  onChange(newDataLinks);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Raw value of the field',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        <div>\n          <Button\n            variant={'secondary'}\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={event => {\n              event.preventDefault();\n              const newDataLinks = [...(value || []), { field: '', url: '' }];\n              onChange(newDataLinks);\n            }}\n          >\n            Add\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ElasticDatasource } from './datasource';\nimport { ElasticQueryCtrl } from './query_ctrl';\nimport ElasticsearchQueryField from './components/ElasticsearchQueryField';\nimport { ConfigEditor } from './configuration/ConfigEditor';\n\nclass ElasticAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(ElasticDatasource)\n  .setQueryCtrl(ElasticQueryCtrl)\n  .setConfigEditor(ConfigEditor)\n  .setExploreLogsQueryField(ElasticsearchQueryField)\n  .setAnnotationQueryCtrl(ElasticAnnotationsQueryCtrl);\n","import React, { useEffect } from 'react';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ElasticsearchOptions } from '../types';\nimport { defaultMaxConcurrentShardRequests, ElasticDetails } from './ElasticDetails';\nimport { LogsConfig } from './LogsConfig';\nimport { DataLinks } from './DataLinks';\n\nexport type Props = DataSourcePluginOptionsEditorProps<ElasticsearchOptions>;\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // Apply some defaults on initial render\n  useEffect(() => {\n    const esVersion = options.jsonData.esVersion || 5;\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        timeField: options.jsonData.timeField || '@timestamp',\n        esVersion,\n        maxConcurrentShardRequests:\n          options.jsonData.maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(esVersion),\n        logMessageField: options.jsonData.logMessageField || '',\n        logLevelField: options.jsonData.logLevelField || '',\n      },\n    });\n  }, []);\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:9200'}\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n      />\n\n      <ElasticDetails value={options} onChange={onOptionsChange} />\n\n      <LogsConfig\n        value={options.jsonData}\n        onChange={newValue =>\n          onOptionsChange({\n            ...options,\n            jsonData: newValue,\n          })\n        }\n      />\n\n      <DataLinks\n        value={options.jsonData.dataLinks}\n        onChange={newValue => {\n          onOptionsChange({\n            ...options,\n            jsonData: {\n              ...options.jsonData,\n              dataLinks: newValue,\n            },\n          });\n        }}\n      />\n    </>\n  );\n};\n"],"sourceRoot":""}