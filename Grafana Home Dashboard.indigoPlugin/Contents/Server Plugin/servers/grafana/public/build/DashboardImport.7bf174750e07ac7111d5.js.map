{"version":3,"sources":["webpack:///./public/app/core/components/Select/DataSourcePicker.tsx","webpack:///./public/app/features/manage-dashboards/utils/validation.ts","webpack:///./public/app/features/manage-dashboards/components/ImportDashboardForm.tsx","webpack:///./public/app/features/manage-dashboards/state/actions.ts","webpack:///./public/app/features/manage-dashboards/components/ImportDashboardOverview.tsx","webpack:///./public/app/features/manage-dashboards/DashboardImportPage.tsx","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["DataSourcePicker","props","onChange","item","ds","datasources","find","name","value","this","current","autoFocus","hideTextValue","onBlur","openMenuOnFocus","showLoading","placeholder","invalid","options","map","label","imgUrl","meta","info","logos","small","substr","loading","hideText","aria-label","selectors","components","container","className","isMulti","isClearable","backspaceRemovesValue","maxMenuHeight","menuPlacement","noOptionsMessage","PureComponent","defaultProps","validateDashboardJson","json","JSON","parse","error","validateGcomDashboard","gcomDashboard","match","exec","validateUid","getBackendSrv","get","then","existingDashboard","dashboard","title","folderTitle","catch","isHandled","ImportDashboardForm","register","errors","control","getValues","uidReset","inputs","initialFolderId","onUidReset","onCancel","onSubmit","useState","isSubmitted","setSubmitted","useEffect","uid","nest","message","type","ref","required","validate","v","newTitle","folderId","folder","id","validationSrv","validateNewDashboardName","as","FolderPicker","useNewForms","enableCreateNew","description","disabled","addonAfter","onClick","dataSources","input","index","dataSourceOption","key","rules","constants","constantIndex","defaultValue","variant","getButtonVariant","getButtonText","processInputs","dashboardJson","dispatch","__inputs","forEach","inputModel","pluginId","InputType","DataSource","getDataSourceOptions","push","setInputs","sources","Object","values","config","filter","val","length","pluginName","ImportDashboardOverviewUnConnected","state","form","saveDashboard","clearLoadedDashboard","setState","source","DashboardSource","Gcom","style","marginBottom","href","gnetId","target","orgName","dateTimeFormat","updatedAt","defaultValues","validateOnMount","validateFieldsOnMount","validateOn","mapDispatchToProps","clearDashboard","importDashboardForm","getState","importDashboard","inputsToPersist","dataSource","constant","post","overwrite","result","dashboardUrl","locationUtil","stripBaseFromUrl","importedUrl","updateLocation","path","ImportDashboardOverview","connect","location","routeParams","Number","displayName","DashboardImportUnConnected","onFileUpload","event","importDashboardJson","file","currentTarget","files","reader","FileReader","onload","e","appEvents","emit","AppEvents","alertError","readAsText","getDashboardFromJson","formData","getGcomDashboard","dashboardId","fetchGcomDashboard","styles","importStyles","option","accept","rows","isLoaded","navModel","Page","Contents","renderImportForm","setGcomDashboard","data","setJsonDashboard","DashboardImportPage","connectWithCleanUp","getNavModel","navIndex","undefined","stylesFactory","css","mapStateToProps","stateSelector","Component","ConnectedComponent","ConnectedComponentWithCleanUp","useDispatch","cleanUpAction","hoistNonReactStatics"],"mappings":"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","file":"DashboardImport.7bf174750e07ac7111d5.js","sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { Select } from '@grafana/ui';\nimport { SelectableValue, DataSourceSelectItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface Props {\n  onChange: (ds: DataSourceSelectItem) => void;\n  datasources: DataSourceSelectItem[];\n  current?: DataSourceSelectItem;\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  showLoading?: boolean;\n  placeholder?: string;\n  invalid?: boolean;\n}\n\nexport class DataSourcePicker extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n    placeholder: 'Select datasource',\n  };\n\n  searchInput: HTMLElement;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChange = (item: SelectableValue<string>) => {\n    const ds = this.props.datasources.find(ds => ds.name === item.value);\n\n    if (ds) {\n      this.props.onChange(ds);\n    }\n  };\n\n  render() {\n    const {\n      datasources,\n      current,\n      autoFocus,\n      hideTextValue,\n      onBlur,\n      openMenuOnFocus,\n      showLoading,\n      placeholder,\n      invalid,\n    } = this.props;\n\n    const options = datasources.map(ds => ({\n      value: ds.name,\n      label: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n    }));\n\n    const value = current && {\n      label: current.name.substr(0, 37),\n      value: current.name,\n      imgUrl: current.meta.info.logos.small,\n      loading: showLoading,\n      hideText: hideTextValue,\n    };\n\n    return (\n      <div aria-label={selectors.components.DataSourcePicker.container}>\n        <Select\n          className=\"ds-picker select-container\"\n          isMulti={false}\n          isClearable={false}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          menuPlacement=\"bottom\"\n          placeholder={placeholder}\n          noOptionsMessage=\"No datasources found\"\n          value={value}\n          invalid={invalid}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataSourcePicker;\n","import validationSrv from '../services/ValidationSrv';\nimport { getBackendSrv } from '@grafana/runtime';\n\nexport const validateDashboardJson = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (error) {\n    return 'Not valid JSON';\n  }\n};\n\nexport const validateGcomDashboard = (gcomDashboard: string) => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n\n  return match && (match[1] || match[2]) ? true : 'Could not find a valid Grafana.com id';\n};\n\nexport const validateTitle = (newTitle: string, folderId: number) => {\n  return validationSrv\n    .validateNewDashboardName(folderId, newTitle)\n    .then(() => {\n      return true;\n    })\n    .catch(error => {\n      if (error.type === 'EXISTING') {\n        return error.message;\n      }\n    });\n};\n\nexport const validateUid = (value: string) => {\n  return getBackendSrv()\n    .get(`/api/dashboards/uid/${value}`)\n    .then(existingDashboard => {\n      return `Dashboard named '${existingDashboard?.dashboard.title}' in folder '${existingDashboard?.meta.folderTitle}' has the same uid`;\n    })\n    .catch(error => {\n      error.isHandled = true;\n      return true;\n    });\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n  Button,\n  FormAPI,\n  FormsOnSubmit,\n  HorizontalGroup,\n  FormFieldErrors,\n  Input,\n  Field,\n  InputControl,\n  Legend,\n} from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport DataSourcePicker from 'app/core/components/Select/DataSourcePicker';\nimport { DashboardInput, DashboardInputs, DataSourceInput, ImportDashboardDTO } from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\n\ninterface Props extends Omit<FormAPI<ImportDashboardDTO>, 'formState' | 'watch'> {\n  uidReset: boolean;\n  inputs: DashboardInputs;\n  initialFolderId: number;\n\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<ImportDashboardDTO>;\n}\n\nexport const ImportDashboardForm: FC<Props> = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  initialFolderId,\n  onUidReset,\n  onCancel,\n  onSubmit,\n}) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues({ nest: true }), {} as any);\n    }\n  }, [errors]);\n\n  return (\n    <>\n      <Legend>Options</Legend>\n      <Field label=\"Name\" invalid={!!errors.title} error={errors.title && errors.title.message}>\n        <Input\n          name=\"title\"\n          type=\"text\"\n          ref={register({\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folder.id),\n          })}\n        />\n      </Field>\n      <Field label=\"Folder\">\n        <InputControl\n          as={FolderPicker}\n          name=\"folder\"\n          useNewForms\n          enableCreateNew\n          initialFolderId={initialFolderId}\n          control={control}\n        />\n      </Field>\n      <Field\n        label=\"Unique identifier (uid)\"\n        description=\"The unique identifier (uid) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\n                The uid allows having consistent URL’s for accessing dashboards so changing the title of a dashboard will not break any\n                bookmarked links to that dashboard.\"\n        invalid={!!errors.uid}\n        error={errors.uid && errors.uid.message}\n      >\n        <>\n          {!uidReset ? (\n            <Input\n              name=\"uid\"\n              disabled\n              ref={register({ validate: async (v: string) => await validateUid(v) })}\n              addonAfter={!uidReset && <Button onClick={onUidReset}>Change uid</Button>}\n            />\n          ) : (\n            <Input name=\"uid\" ref={register({ required: true, validate: async (v: string) => await validateUid(v) })} />\n          )}\n        </>\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput, index: number) => {\n          const dataSourceOption = `dataSources[${index}]`;\n          return (\n            <Field\n              label={input.label}\n              key={dataSourceOption}\n              invalid={errors.dataSources && !!errors.dataSources[index]}\n              error={errors.dataSources && errors.dataSources[index] && 'A data source is required'}\n            >\n              <InputControl\n                as={DataSourcePicker}\n                name={`${dataSourceOption}`}\n                datasources={input.options}\n                control={control}\n                placeholder={input.info}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n      {inputs.constants &&\n        inputs.constants.map((input: DashboardInput, index) => {\n          const constantIndex = `constants[${index}]`;\n          return (\n            <Field\n              label={input.label}\n              error={errors.constants && errors.constants[index] && `${input.label} needs a value`}\n              invalid={errors.constants && !!errors.constants[index]}\n              key={constantIndex}\n            >\n              <Input ref={register({ required: true })} name={`${constantIndex}`} defaultValue={input.value} />\n            </Field>\n          );\n        })}\n      <HorizontalGroup>\n        <Button\n          type=\"submit\"\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </HorizontalGroup>\n    </>\n  );\n};\n\nfunction getButtonVariant(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}\n","import { AppEvents, DataSourceInstanceSettings, DataSourceSelectItem, locationUtil } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport {\n  clearDashboard,\n  setInputs,\n  setGcomDashboard,\n  setJsonDashboard,\n  InputType,\n  ImportDashboardDTO,\n} from './reducers';\nimport { updateLocation } from 'app/core/actions';\nimport { ThunkResult } from 'app/types';\nimport { appEvents } from '../../../core/core';\n\nexport function fetchGcomDashboard(id: string): ThunkResult<void> {\n  return async dispatch => {\n    try {\n      const dashboard = await getBackendSrv().get(`/api/gnet/dashboards/${id}`);\n      dispatch(setGcomDashboard(dashboard));\n      dispatch(processInputs(dashboard.json));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.message || error]);\n    }\n  };\n}\n\nexport function importDashboardJson(dashboard: any): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(setJsonDashboard(dashboard));\n    dispatch(processInputs(dashboard));\n  };\n}\n\nfunction processInputs(dashboardJson: any): ThunkResult<void> {\n  return dispatch => {\n    if (dashboardJson && dashboardJson.__inputs) {\n      const inputs: any[] = [];\n      dashboardJson.__inputs.forEach((input: any) => {\n        const inputModel: any = {\n          name: input.name,\n          label: input.label,\n          info: input.description,\n          value: input.value,\n          type: input.type,\n          pluginId: input.pluginId,\n          options: [],\n        };\n\n        if (input.type === InputType.DataSource) {\n          getDataSourceOptions(input, inputModel);\n        } else if (!inputModel.info) {\n          inputModel.info = 'Specify a string constant';\n        }\n\n        inputs.push(inputModel);\n      });\n      dispatch(setInputs(inputs));\n    }\n  };\n}\n\nexport function clearLoadedDashboard(): ThunkResult<void> {\n  return dispatch => {\n    dispatch(clearDashboard());\n  };\n}\n\nexport function saveDashboard(importDashboardForm: ImportDashboardDTO): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const dashboard = getState().importDashboard.dashboard;\n    const inputs = getState().importDashboard.inputs;\n\n    let inputsToPersist = [] as any[];\n    importDashboardForm.dataSources?.forEach((dataSource: DataSourceSelectItem, index: number) => {\n      const input = inputs.dataSources[index];\n      inputsToPersist.push({\n        name: input.name,\n        type: input.type,\n        pluginId: input.pluginId,\n        value: dataSource.value,\n      });\n    });\n\n    importDashboardForm.constants?.forEach((constant: any, index: number) => {\n      const input = inputs.constants[index];\n\n      inputsToPersist.push({\n        value: constant,\n        name: input.name,\n        type: input.type,\n      });\n    });\n\n    const result = await getBackendSrv().post('api/dashboards/import', {\n      dashboard: { ...dashboard, title: importDashboardForm.title, uid: importDashboardForm.uid },\n      overwrite: true,\n      inputs: inputsToPersist,\n      folderId: importDashboardForm.folder.id,\n    });\n    const dashboardUrl = locationUtil.stripBaseFromUrl(result.importedUrl);\n    dispatch(updateLocation({ path: dashboardUrl }));\n  };\n}\n\nconst getDataSourceOptions = (input: { pluginId: string; pluginName: string }, inputModel: any) => {\n  const sources = Object.values(config.datasources).filter(\n    (val: DataSourceInstanceSettings) => val.type === input.pluginId\n  );\n\n  if (sources.length === 0) {\n    inputModel.info = 'No data sources of type ' + input.pluginName + ' found';\n  } else if (!inputModel.info) {\n    inputModel.info = 'Select a ' + input.pluginName + ' data source';\n  }\n\n  inputModel.options = sources.map(val => {\n    return { name: val.name, value: val.name, meta: val.meta };\n  });\n};\n","import React, { PureComponent } from 'react';\nimport { dateTimeFormat } from '@grafana/data';\nimport { Legend, Form } from '@grafana/ui';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { ImportDashboardForm } from './ImportDashboardForm';\nimport { clearLoadedDashboard, saveDashboard } from '../state/actions';\nimport { DashboardInputs, DashboardSource, ImportDashboardDTO } from '../state/reducers';\nimport { StoreState } from 'app/types';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  dashboard: ImportDashboardDTO;\n  inputs: DashboardInputs;\n  source: DashboardSource;\n  meta?: any;\n  folder: { id: number; title?: string };\n}\n\ninterface DispatchProps {\n  clearLoadedDashboard: typeof clearLoadedDashboard;\n  saveDashboard: typeof saveDashboard;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\ninterface State {\n  uidReset: boolean;\n}\n\nclass ImportDashboardOverviewUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    uidReset: false,\n  };\n\n  onSubmit = (form: ImportDashboardDTO) => {\n    this.props.saveDashboard(form);\n  };\n\n  onCancel = () => {\n    this.props.clearLoadedDashboard();\n  };\n\n  onUidReset = () => {\n    this.setState({ uidReset: true });\n  };\n\n  render() {\n    const { dashboard, inputs, meta, source, folder } = this.props;\n    const { uidReset } = this.state;\n\n    return (\n      <>\n        {source === DashboardSource.Gcom && (\n          <div style={{ marginBottom: '24px' }}>\n            <div>\n              <Legend>\n                Importing Dashboard from{' '}\n                <a\n                  href={`https://grafana.com/dashboards/${dashboard.gnetId}`}\n                  className=\"external-link\"\n                  target=\"_blank\"\n                >\n                  Grafana.com\n                </a>\n              </Legend>\n            </div>\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>Published by</td>\n                  <td>{meta.orgName}</td>\n                </tr>\n                <tr>\n                  <td>Updated on</td>\n                  <td>{dateTimeFormat(meta.updatedAt)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n        <Form\n          onSubmit={this.onSubmit}\n          defaultValues={{ ...dashboard, constants: [], dataSources: [], folder: folder }}\n          validateOnMount\n          validateFieldsOnMount={['title', 'uid']}\n          validateOn=\"onChange\"\n        >\n          {({ register, errors, control, getValues }) => (\n            <ImportDashboardForm\n              register={register}\n              errors={errors}\n              control={control}\n              getValues={getValues}\n              uidReset={uidReset}\n              inputs={inputs}\n              onCancel={this.onCancel}\n              onUidReset={this.onUidReset}\n              onSubmit={this.onSubmit}\n              initialFolderId={folder.id}\n            />\n          )}\n        </Form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => ({\n  dashboard: state.importDashboard.dashboard,\n  meta: state.importDashboard.meta,\n  source: state.importDashboard.source,\n  inputs: state.importDashboard.inputs,\n  folder: state.location.routeParams.folderId ? { id: Number(state.location.routeParams.folderId) } : { id: 0 },\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  clearLoadedDashboard,\n  saveDashboard,\n};\n\nexport const ImportDashboardOverview = connect(mapStateToProps, mapDispatchToProps)(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';\n","import React, { FormEvent, PureComponent } from 'react';\nimport { MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { css } from 'emotion';\nimport { AppEvents, NavModel } from '@grafana/data';\nimport { Button, stylesFactory, Input, TextArea, Field, Form, Legend, FileUpload } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { ImportDashboardOverview } from './components/ImportDashboardOverview';\nimport { validateDashboardJson, validateGcomDashboard } from './utils/validation';\nimport { fetchGcomDashboard, importDashboardJson } from './state/actions';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  isLoaded: boolean;\n}\n\ninterface DispatchProps {\n  fetchGcomDashboard: typeof fetchGcomDashboard;\n  importDashboardJson: typeof importDashboardJson;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass DashboardImportUnConnected extends PureComponent<Props> {\n  onFileUpload = (event: FormEvent<HTMLInputElement>) => {\n    const { importDashboardJson } = this.props;\n    const file = event.currentTarget.files && event.currentTarget.files.length > 0 && event.currentTarget.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      const readerOnLoad = () => {\n        return (e: any) => {\n          let dashboard: any;\n          try {\n            dashboard = JSON.parse(e.target.result);\n          } catch (error) {\n            appEvents.emit(AppEvents.alertError, [\n              'Import failed',\n              'JSON -> JS Serialization failed: ' + error.message,\n            ]);\n            return;\n          }\n          importDashboardJson(dashboard);\n        };\n      };\n      reader.onload = readerOnLoad();\n      reader.readAsText(file);\n    }\n  };\n\n  getDashboardFromJson = (formData: { dashboardJson: string }) => {\n    this.props.importDashboardJson(JSON.parse(formData.dashboardJson));\n  };\n\n  getGcomDashboard = (formData: { gcomDashboard: string }) => {\n    let dashboardId;\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(formData.gcomDashboard);\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    }\n\n    if (dashboardId) {\n      this.props.fetchGcomDashboard(dashboardId);\n    }\n  };\n\n  renderImportForm() {\n    const styles = importStyles();\n\n    return (\n      <>\n        <div className={styles.option}>\n          <FileUpload accept=\"application/json\" onFileUpload={this.onFileUpload}>\n            Upload JSON file\n          </FileUpload>\n        </div>\n        <div className={styles.option}>\n          <Legend>Import via grafana.com</Legend>\n          <Form onSubmit={this.getGcomDashboard} defaultValues={{ gcomDashboard: '' }}>\n            {({ register, errors }) => (\n              <Field invalid={!!errors.gcomDashboard} error={errors.gcomDashboard && errors.gcomDashboard.message}>\n                <Input\n                  name=\"gcomDashboard\"\n                  placeholder=\"Grafana.com dashboard url or id\"\n                  type=\"text\"\n                  ref={register({\n                    required: 'A Grafana dashboard url or id is required',\n                    validate: validateGcomDashboard,\n                  })}\n                  addonAfter={<Button type=\"submit\">Load</Button>}\n                />\n              </Field>\n            )}\n          </Form>\n        </div>\n        <div className={styles.option}>\n          <Legend>Import via panel json</Legend>\n          <Form onSubmit={this.getDashboardFromJson} defaultValues={{ dashboardJson: '' }}>\n            {({ register, errors }) => (\n              <>\n                <Field invalid={!!errors.dashboardJson} error={errors.dashboardJson && errors.dashboardJson.message}>\n                  <TextArea\n                    name=\"dashboardJson\"\n                    ref={register({\n                      required: 'Need a dashboard json model',\n                      validate: validateDashboardJson,\n                    })}\n                    rows={10}\n                  />\n                </Field>\n                <Button type=\"submit\">Load</Button>\n              </>\n            )}\n          </Form>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { isLoaded, navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>{isLoaded ? <ImportDashboardOverview /> : this.renderImportForm()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'import', undefined, true),\n  isLoaded: state.importDashboard.isLoaded,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, Props> = {\n  fetchGcomDashboard,\n  importDashboardJson,\n};\n\nexport const DashboardImportPage = connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  state => state.importDashboard\n)(DashboardImportUnConnected);\nexport default DashboardImportPage;\nDashboardImportPage.displayName = 'DashboardImport';\n\nconst importStyles = stylesFactory(() => {\n  return {\n    option: css`\n      margin-bottom: 32px;\n    `,\n  };\n});\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}