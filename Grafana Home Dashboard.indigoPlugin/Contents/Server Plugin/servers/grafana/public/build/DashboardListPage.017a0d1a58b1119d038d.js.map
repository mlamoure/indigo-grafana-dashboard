{"version":3,"sources":["webpack:///./node_modules/react-use/esm/useAsyncFn.js","webpack:///./node_modules/react-use/esm/useMountedState.js","webpack:///./node_modules/react-use/esm/useAsync.js","webpack:///./public/app/features/search/components/DashboardListPage.tsx","webpack:///./public/app/features/search/loaders.ts"],"names":["useAsyncFn","fn","deps","initialState","loading","lastCallId","_a","state","set","isMounted","args","_i","arguments","length","callId","current","apply","then","value","error","useMountedState","mountedRef","get","useAsync","callback","DashboardListPage","memo","navModel","uid","url","startsWith","activeChildId","main","icon","id","subTitle","text","breadcrumbs","title","children","active","backendSrv","getFolderByUid","folder","folderTitle","folderUrl","dashTab","find","child","canAdmin","model","loadFolderPage","path","locationUtil","stripBaseFromUrl","location","pathname","getLocationSrv","update","pageNavModel","Promise","resolve","Page","Contents","isLoading","ManageDashboards","connect","getNavModel","navIndex","getRouteParams","getUrl"],"mappings":"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","file":"DashboardListPage.017a0d1a58b1119d038d.js","sourcesContent":["/* eslint-disable */\nimport { useCallback, useState, useRef } from 'react';\nimport useMountedState from './useMountedState';\nexport default function useAsyncFn(fn, deps, initialState) {\n    if (deps === void 0) { deps = []; }\n    if (initialState === void 0) { initialState = { loading: false }; }\n    var lastCallId = useRef(0);\n    var _a = useState(initialState), state = _a[0], set = _a[1];\n    var isMounted = useMountedState();\n    var callback = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var callId = ++lastCallId.current;\n        set({ loading: true });\n        return fn.apply(void 0, args).then(function (value) {\n            isMounted() && callId === lastCallId.current && set({ value: value, loading: false });\n            return value;\n        }, function (error) {\n            isMounted() && callId === lastCallId.current && set({ error: error, loading: false });\n            return error;\n        });\n    }, deps);\n    return [state, callback];\n}\n","import { useCallback, useEffect, useRef } from 'react';\nexport default function useMountedState() {\n    var mountedRef = useRef(false);\n    var get = useCallback(function () { return mountedRef.current; }, []);\n    useEffect(function () {\n        mountedRef.current = true;\n        return function () {\n            mountedRef.current = false;\n        };\n    });\n    return get;\n}\n","import { useEffect } from 'react';\nimport useAsyncFn from './useAsyncFn';\nexport default function useAsync(fn, deps) {\n    if (deps === void 0) { deps = []; }\n    var _a = useAsyncFn(fn, deps, {\n        loading: true,\n    }), state = _a[0], callback = _a[1];\n    useEffect(function () {\n        callback();\n    }, [callback]);\n    return state;\n}\n","import React, { FC, memo } from 'react';\nimport { useAsync } from 'react-use';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel, locationUtil } from '@grafana/data';\nimport { getLocationSrv } from '@grafana/runtime';\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParams, getUrl } from 'app/core/selectors/location';\nimport Page from 'app/core/components/Page/Page';\nimport { loadFolderPage } from '../loaders';\nimport { ManageDashboards } from './ManageDashboards';\n\ninterface Props {\n  navModel: NavModel;\n  uid?: string;\n  url: string;\n}\n\nexport const DashboardListPage: FC<Props> = memo(({ navModel, uid, url }) => {\n  const { loading, value } = useAsync(() => {\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({ pageNavModel: navModel });\n    }\n    return loadFolderPage(uid!, 'manage-folder-dashboards').then(({ folder, model }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        getLocationSrv().update({ path });\n      }\n\n      return { folder, pageNavModel: { ...navModel, ...model } };\n    });\n  }, [uid]);\n\n  return (\n    <Page navModel={value?.pageNavModel}>\n      <Page.Contents isLoading={loading}>\n        <ManageDashboards folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst mapStateToProps: MapStateToProps<Props, {}, StoreState> = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n    uid: getRouteParams(state.location).uid as string | undefined,\n    url: getUrl(state.location),\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);\n","import { backendSrv } from 'app/core/services/backend_srv';\n\nexport const loadFolderPage = (uid: string, activeChildId: string) => {\n  const navModel = {\n    main: {\n      icon: 'folder-open',\n      id: 'manage-folder',\n      subTitle: 'Manage folder dashboards & permissions',\n      url: '',\n      text: '',\n      breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n      children: [\n        {\n          active: activeChildId === 'manage-folder-dashboards',\n          icon: 'th-large',\n          id: 'manage-folder-dashboards',\n          text: 'Dashboards',\n          url: 'dashboards',\n        },\n        {\n          active: activeChildId === 'manage-folder-permissions',\n          icon: 'lock',\n          id: 'manage-folder-permissions',\n          text: 'Permissions',\n          url: 'dashboards/permissions',\n        },\n        {\n          active: activeChildId === 'manage-folder-settings',\n          icon: 'cog',\n          id: 'manage-folder-settings',\n          text: 'Settings',\n          url: 'dashboards/settings',\n        },\n      ],\n    },\n  };\n\n  return backendSrv.getFolderByUid(uid).then((folder: any) => {\n    const folderTitle = folder.title;\n    const folderUrl = folder.url;\n    navModel.main.text = folderTitle;\n\n    const dashTab = navModel.main.children.find((child: any) => child.id === 'manage-folder-dashboards');\n    dashTab!.url = folderUrl;\n\n    if (folder.canAdmin) {\n      const permTab = navModel.main.children.find((child: any) => child.id === 'manage-folder-permissions');\n      permTab!.url = folderUrl + '/permissions';\n\n      const settingsTab = navModel.main.children.find((child: any) => child.id === 'manage-folder-settings');\n      settingsTab!.url = folderUrl + '/settings';\n    } else {\n      navModel.main.children = [dashTab!];\n    }\n\n    return { folder, model: navModel };\n  });\n};\n"],"sourceRoot":""}