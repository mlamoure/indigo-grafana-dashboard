{"version":3,"sources":["webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts","webpack:///./public/app/features/explore/slate-plugins/prism/index.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/typeahead.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/query_field.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/kusto/kusto.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/KustoQueryField.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/editor_component.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AnalyticsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/InsightsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.tsx"],"names":["TimeGrainConverter","createISO8601Duration","timeGrain","timeGrainUnit","lodash_default","a","includes","toUpperCase","createISO8601DurationFromInterval","interval","slice","length","unit","indexOf","toMinutes","findClosestTimeGrain","allowedTimeGrains","timeGrains","filter","o","closest","intervalMs","kbn","interval_to_ms","i","createTimeGrainFromISO8601Duration","duration","offset","substring","value","timeUnitToText","text","createKbnUnitFromISO8601Duration","timeUnitToKbn","TOKEN_MARK","PrismPlugin","_a","definition","language","prism_default","languages","renderDecoration","props","editor","next","children","decoration","type","className","data","get","react_default","createElement","decorateNode","node","texts","getTexts","toArray","tstring","map","t","join","grammar","tokens","tokenize","decorations","startText","shift","endText","startOffset","endOffset","start","processToken","token","acc","types","alias","content","newlines","split","end","available","remaining","range","createDecoration","anchor","key","focus","push","_b","Object","tslib_es6","_c","done","tokens_1","tokens_1_1","typeahead_TypeaheadItem","_super","TypeaheadItem","_this","apply","this","arguments","getRef","el","prototype","componentDidUpdate","prevProps","isSelected","offsetParent","container","offsetTop","scrollTop","offsetHeight","scrollIntoView","render","hint","label","onClickItem","ref","onClick","PureComponent","typeahead_TypeaheadGroup","TypeaheadGroup","items","selected","item","display","typeahead","Typeahead","groupedItems","menuRef","selectedItems","g","flattenSuggestions","s","reduce","concat","getInitialValue","query","slate_es","create","document","lines","line","nodes","query_field_Portal","Portal","call","index","prefix","classList","add","body","appendChild","componentWillUnmount","removeChild","react_dom_default","createPortal","Component","query_field","QueryField","context","keybindingSrv","onChange","changed","state","setState","requestAnimationFrame","onTypeahead","onChangeQuery","request","url","fetch","onQueryChange","slate_plain_serializer_es","serialize","onKeyDown","event","typeaheadIndex","suggestions","keyboardEvent","menuEl","preventDefault","stopPropagation","resetTypeahead","ctrlKey","flattenedSuggestions","suggestion","Math","abs","applyTypeahead","max","change","callback","typeaheadPrefix","typeaheadContext","handleBlur","onBlur","resetTimer","setTimeout","restoreEscapeKeyBinding","handleFocus","onFocus","removeEscapeKeyBinding","updateMenu","menu","window","getSelection","anchorNode","parentElement","rect","getBoundingClientRect","scrollX","scrollY","screenHeight","innerHeight","menuLeft_1","left","menuTop_1","top","height","menuHeight_1","style","opacity","maxHeight","removeAttribute","renderMenu","portalPrefix","selectedIndex","selectedKeys","prismDefinition","prismLanguage","plugins","grafana_ui_src","handler","onPressEnter","labelKeys","labelValues","initialQuery","componentDidMount","clearTimeout","unbind","setupGlobal","slate_react_es","autoCorrect","placeholder","spellCheck","operatorTokens","functionTokens","KEYWORDS","grafanaMacros","tokenizer","comment","pattern","lookbehind","greedy","function-context","inside","RegExp","builtin","f","string","keyword","boolean","number","operator","punctuation","variable","argument","kusto","TYPEAHEAD_DELAY","defaultSchema","Databases","Default","cleanText","replace","trim","wrapText","KustoQueryField","force","selection","wrapperNode","isBlurred","getRangeAt","textContent","prefix_1","substr","modelOffset","anchorOffset","modelPrefix","anchorText","suggestionGroups","wrapperClasses","contains","getColumnSuggestions","match","getFunctionSuggestions","getTableSuggestions","db","getDBFromDatabaseFunction","console","log","normalizeQuery","schema","fetchSchema","getInitialSuggestions","getKeywordSuggestions","str","exec","getLastWord","results_1","toLowerCase","filteredSuggestions","group","skipFilter","c","prefixMatch","typeaheadText","suggestionText","nextChar","getNextCharacter","backward","deleteBackwards","suffixLength","forward","deleteBackward","deleteForward","insertText","moveForward","debounce_default","Tables","Name","table","getTableFromContext","tableSchema","OrderedColumns","Type","normalizedQuery","getSchema","sent","defaultSchemaTemplate","castSchema","editor_component_Editor","Editor","edited","execute","variables","editor_KustoQueryField","templateVariables","defaultProps","react","core_module","directive","reactDirective","watchDepth","query_ctrl_AzureMonitorQueryCtrl","AzureMonitorQueryCtrl","$scope","$injector","templateSrv","defaultDropdownValue","defaults","queryType","resourceGroup","metricDefinition","resourceName","metricNamespace","metricName","dimensionFilter","aggOptions","resultFormat","datasource","azureLogAnalyticsDatasource","defaultOrFirstWorkspace","rawQuery","rawQueryString","dimension","timeColumn","valueColumn","getWorkspaces","target","subscription","then","list","workspaces","azureLogAnalytics","workspace","catch","handleQueryCtrlError","bind","getAzureLogAnalyticsSchema","onLogAnalyticsQueryChange","nextQuery","onLogAnalyticsQueryExecute","panelCtrl","refresh","onAppInsightsQueryChange","appInsights","onAppInsightsQueryExecute","getAppInsightsQuerySchema","appInsightsDatasource","getQuerySchema","defaultsDeep","migrateTimeGrains","migrateToFromTimes","migrateToDefaultNamespace","migrateApplicationInsightsKeys","events","on","src","dataReceived","onDataReceived","dataError","onDataError","resultFormats","getSubscriptions","$inject","dataList","lastQueryError","undefined","lastQuery","anySeriesFromQuery","find","refId","meta","err","error","innererror","message","azureMonitor","time_grain_converter","onMetricNameChange","timeGrainCount","allowedTimeGrainsMs","convertTimeGrainsToMs","mappings","xaxis","yaxis","spliton","groupBy","groupByOptions","old","panel","scopedVars","onQueryTypeChange","azureMonitorDatasource","isConfigured","subs","subscriptions","logAnalyticsSubscriptionId","subscriptionId","onSubscriptionChange","aggregation","dimensions","getResourceGroups","getMetricDefinitions","getResourceNames","getMetricNamespaces","getMetricNames","onResourceGroupChange","onMetricDefinitionChange","onResourceNameChange","onMetricNamespacesChange","getMetricMetadata","metadata","supportedAggTypes","primaryAggType","supportedTimeGrains","Promise","resolve","forEach","tg","generateAutoUnits","getBuiltInIntervalValue","getAzureMonitorAutoInterval","getApplicationInsightAutoInterval","name","configurable","getAppInsightsAutoInterval","getAppInsightsMetricNames","getAppInsightsColumns","onAppInsightsColumnChange","onAppInsightsMetricNameChange","getAppInsightsMetricMetadata","aggData","supportedGroupBy","getAppInsightsGroupBySegments","option","resetAppInsightsGroupBy","toggleEditorMode","updateTimeGrainType","timeGrainType","updateAppInsightsTimeGrain","templateUrl","sdk","UrlBuilder","buildAzureMonitorGetMetricNamespacesUrl","baseUrl","apiVersion","rn","service","lastIndexOf","buildAzureMonitorGetMetricNamesUrl","encodeURIComponent","ResponseParser","parseResponseValues","result","textFieldName","valueFieldName","parseResourceNames","parseMetadata","defaultAggTypes","metricData","primaryAggregationType","supportedAggregationTypes","parseTimeGrains","metricAvailabilities","parseDimensions","avail","isDimensionRequired","localizedValue","parseSubscriptions","parseSubscriptionsForSelect","SupportedNamespaces","cloudName","supportedMetricNamespaces","AzureMonitorDatasource","instanceSettings","backendSrv","apiPreviewVersion","id","jsonData","supported_namespaces","options","targets","hide","toString","datasourceId","format","queries","datasourceRequest","from","valueOf","to","results","queryRes","series","timeSerie","datapoints","points","annotationQuery","metricFindQuery","resourceGroupsQueryWithSub","toVariable","metricDefinitionsQuery","metricDefinitionsQueryWithSub","resourceNamesQuery","resourceNamesQueryWithSub","metricNamespaceQuery","metricNamespaceQueryWithSub","metricNamesQuery","metricNamesQueryWithSub","metric","route","doRequest","response_parser","shouldHardcodeBlobStorage","startsWith","url_builder","testDatasource","isValidConfigField","tenantId","status","clientId","response","title","statusText","code","field","maxRetries","parseQueryResult","columns","raw","yaxises","Columns","rows","Rows","parseRawQueryResultRow","parseQueryResultRow","columnsForDropdown","column","ColumnName","xaxisColumn","findIndex","yaxisesSplit","yaxisColumns","splitonColumn","convertTimestamp","row","yaxisColumn","yaxisName","bucket","findOrCreateBucket","epoch","dateTimeToEpoch","isSingleValue","getMetricFieldKey","aggField","getKeyForAggregationField","hasSegmentsField","segments","j","getTargetName","dataTarget","segment","segmentName","segmentValue","prop","isObject","g1","g2","obj","keys","without","dataObj","intersection","dateTimeValue","parseMetricNames","metrics","toTextValueList","Error","defaultAggregation","supportedAggregations","all","parseGroupBys","parseQuerySchema","columnTable","columnName","columnType","values","app_insights_datasource","AppInsightsDatasource","version","logAnalyticsColumns","applicationId","appInsightsAppId","createRawQueryRequest","segmentColumn","createMetricsRequest","columnNames","n","doQueries","appInsightsGroupByQuery","getGroupBys","method","app_insights_response_parser","LogAnalyticsQuerystringBuilder","defaultTimeField","generate","queryString","macroRegexp","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","uriString","startOf","toISOString","rangeRaw","Date","now","until","timeFieldArg","timeField","inputs","firstCommaIndex","templateVar","v","tables","parseTimeSeriesResult","parseTableResult","timeIndex","metricIndex","valueIndex","col","parseToVariables","queryResult","flattenDeep","transformToAnnotations","textIndex","tagsIndex","annotation","time","floor","tags","parseSchemaResult","createSchemaDatabaseWithTables","createSchemaTables","Functions","createSchemaFunctions","e_1","e_2","_d","_e","_f","convertToKustoColumn","e_3","functions","func","Body","DocString","displayName","Folder","category","FunctionKind","InputParameters","azure_log_analytics_datasource","AzureLogAnalyticsDatasource","azureLogAnalyticsSameAs","logAnalyticsDefaultWorkspace","setWorkspaceUrl","azureCloud","azureMonitorUrl","workspaceListUrl","val","properties","customerId","promises","generated","querystring_builder","interpolateVariable","maxDataPoints","azure_log_analytics_response_parser","getDefaultOrFirstWorkspace","buildQuery","querystring","multi","includeAll","reject","validationError","isValidConfig","ws","config","getErrorMessage","logAnalyticsTenantId","logAnalyticsClientId","Datasource","$q","azure_monitor_datasource","azureMonitorOptions","appInsightsOptions","azureLogAnalyticsOptions","amPromise","aiPromise","alaPromise","cloneDeep","flatten","aiResult","amResult","alaResult","upperFirst","getAzureLogAnalyticsWorkspaces","AzureCredentialsForm","selectedAzureCloud","selectedSubscription","clientSecret","clientSecretConfigured","getDerivedStateFromProps","nextProps","prevState","azureCloudOptions","subscriptionOptions","onAzureCloudChange","onSubscriptionSelectChange","onTenantIdChange","onClientIdChange","onClientSecretChange","onResetClientSecret","onLoadSubscriptions","Fragment","tooltip","defaultValue","disabled","variant","size","hasRequiredFields","MonitorConfig","onAzureCloudSelect","onDatasourceUpdate","secureJsonData","secureJsonFields","onSubscriptionSelect","datasourceConfig","azureClouds","AzureCredentialsForm_AzureCredentialsForm","AnalyticsConfig","onLogAnalyticsTenantIdChange","onLogAnalyticsClientIdChange","onLogAnalyticsClientSecretChange","logAnalyticsClientSecret","onLogAnalyticsResetClientSecret","onLogAnalyticsSubscriptionSelect","logAnalyticsSubscription","onWorkspaceSelectChange","onAzureLogAnalyticsSameAsChange","logAnalyticsSubscriptions","logAnalyticsWorkspaces","addtlAttrs","checked","onLoadWorkspaces","hasWorkspaceRequiredFields","backend_srv","__webpack_require__","InsightsConfig","onAppInsightsAppIdChange","onAppInsightsApiKeyChange","appInsightsApiKey","onAppInsightsResetApiKey","k","onOptionsChange","logAnalyticsHasNecessaryCredentials","put","updateDatasource","hasNecessaryCredentials","loadSubscriptions","loadWorkspaces","sameAs","ConfigEditor","template_srv","init","MonitorConfig_MonitorConfig","onConfigUpdate","AnalyticsConfig_AnalyticsConfig","InsightsConfig_InsightsConfig","hasOwnProperty","initDropdowns","bustCache","defineProperty","AzureMonitorAnnotationsQueryCtrl","enumerable","d","__webpack_exports__","module_plugin"],"mappings":"8KAGA,oBAAAA,KAsHA,OArHSA,EAAAC,sBAAP,SAA6BC,EAA4BC,GAEvD,OAAIC,EAAAC,EAAEC,SADgB,CAAC,OAAQ,SAAU,IAAK,KAChBH,GACrB,KAAKD,EAAYC,EAAc,GAAGI,cAGpC,IAAIL,EAAYC,EAAc,GAAGI,eAGnCP,EAAAQ,kCAAP,SAAyCC,GACvC,IAAMP,GAAaO,EAASC,MAAM,EAAGD,EAASE,OAAS,GACjDC,EAAOH,EAASA,EAASE,OAAS,GAExC,GAAIF,EAASI,QAAQ,OAAS,EAC5B,OAAOb,EAAmBC,sBAAsB,EAAG,KAGrD,GAAsC,MAAlCQ,EAASA,EAASE,OAAS,GAAY,CACzC,IAAIG,EAAyB,GAAZZ,EAAkB,GAMnC,OAJIY,EAAY,IACdA,EAAY,GAGPd,EAAmBC,sBAAsBa,EAAW,KAG7D,OAAOd,EAAmBC,sBAAsBC,EAAWU,IAGtDZ,EAAAe,qBAAP,SAA4BN,EAAeO,GAMzC,IALA,IAAMC,EAAab,EAAAC,EAAEa,OAAOF,EAAmB,SAAAG,GAAK,MAAM,SAANA,IAEhDC,EAAUH,EAAW,GACnBI,EAAaC,EAAA,EAAIC,eAAed,GAE7Be,EAAI,EAAGA,EAAIP,EAAWN,OAAQa,IAEjCH,EAAaC,EAAA,EAAIC,eAAeN,EAAWO,MAE3CJ,EADEI,EAAI,EAAIP,EAAWN,OACXM,EAAWO,EAAI,GAEfP,EAAWO,IAK3B,OAAOJ,GAGFpB,EAAAyB,mCAAP,SAA0CC,GACxC,IAAIC,EAAS,EACoB,OAA7BD,EAASE,UAAU,EAAG,KACxBD,EAAS,GAGX,IAAME,EAAQH,EAASE,UAAUD,EAAQD,EAASf,OAAS,GACrDC,EAAOc,EAASE,UAAUF,EAASf,OAAS,GAElD,OAAOkB,EAAQ,IAAM7B,EAAmB8B,gBAAgBD,EAAOjB,IAG1DZ,EAAA8B,eAAP,SAAsBD,EAAejB,GACnC,IAAImB,EAAO,GAeX,MAba,MAATnB,IACFmB,EAAO,UAEI,MAATnB,IACFmB,EAAO,UAEI,MAATnB,IACFmB,EAAO,QAEI,MAATnB,IACFmB,EAAO,OAGLF,EAAQ,EACHE,EAAO,IAGTA,GAGF/B,EAAAgC,iCAAP,SAAwCN,GACtC,GAAiB,SAAbA,EACF,MAAO,OAGT,IAAIC,EAAS,EACoB,OAA7BD,EAASE,UAAU,EAAG,KACxBD,EAAS,GAGX,IAAME,EAAQH,EAASE,UAAUD,EAAQD,EAASf,OAAS,GACrDC,EAAOc,EAASE,UAAUF,EAASf,OAAS,GAElD,OAAOkB,EAAQ7B,EAAmBiC,eAAeJ,EAAOjB,IAGnDZ,EAAAiC,cAAP,SAAqBJ,EAAejB,GAClC,MAAa,MAATA,EACK,IAEI,MAATA,EACK,IAEI,MAATA,EACK,IAEI,MAATA,EACK,IAGF,IAEXZ,EAtHA,yDCEMkC,EAAa,cAgBJ,SAASC,EAAYC,OAAEC,EAAAD,EAAAC,WAAYC,EAAAF,EAAAE,SAMhD,OALID,IAEFE,EAAAlC,EAAMmC,UAAUF,GAAYC,EAAAlC,EAAMmC,UAAUF,IAAaD,GAGpD,CAQLI,iBAAA,SAAiBC,EAAYC,EAAgBC,GACnC,IAAAC,EAAAH,EAAAG,SAAUC,EAAAJ,EAAAI,WAElB,GAAIA,EAAWC,OAASb,EACtB,OAAOU,IAET,IAAMI,EAAY,SAASF,EAAWG,KAAKC,IAAI,SAC/C,OAAOC,EAAA9C,EAAA+C,cAAA,QAAMJ,UAAWA,GAAYH,IAUtCQ,aAAA,SAAaC,EAAWX,EAAgBC,WACtC,GAAkB,cAAdU,EAAKP,KACP,MAAO,GAGT,IAAMQ,EAAQD,EAAKE,WAAWC,UACxBC,EAAUH,EAAMI,IAAI,SAACC,GAAqB,OAAAA,EAAE7B,OAAM8B,KAAK,MACvDC,EAAUvB,EAAAlC,EAAMmC,UAAUF,GAC1ByB,EAASxB,EAAAlC,EAAM2D,SAASN,EAASI,GACjCG,EAA4B,GAC9BC,EAAYX,EAAMY,QAClBC,EAAUF,EACVG,EAAc,EACdC,EAAY,EACZC,EAAQ,EAEZ,SAASC,EAAaC,EAAYC,WAE1BC,GAAWD,GAAO,IAAE,KAAID,EAAM1B,MAAQ,IAAE,KAAI0B,EAAMG,OAAS,IAGjE,GAAqB,iBAAVH,GAA+C,iBAAlBA,EAAMI,QAAsB,CAClEX,EAAYE,EACZC,EAAcC,EAEd,IAAMO,EAA2B,iBAAVJ,EAAqBA,EAAQA,EAAMI,QACpDC,EAAWD,EAAQE,MAAM,MAAMpE,OAAS,EACxCA,EAASkE,EAAQlE,OAASmE,EAC1BE,EAAMT,EAAQ5D,EAEhBsE,EAAYf,EAAUnC,KAAKpB,OAAS0D,EACpCa,EAAYvE,EAIhB,IAFA2D,EAAYD,EAAca,EAEnBD,EAAYC,GAEjBA,EAAYvE,EAASsE,EACrBA,GAFAb,EAAUb,EAAMY,SAEIpC,KAAKpB,OACzB2D,EAAYY,EAId,GAAqB,iBAAVT,GAAsBC,EAAK,CACpC,IAAMS,EAAQ7B,EAAK8B,iBAAiB,CAClCC,OAAQ,CACNC,IAAKpB,EAAUoB,IACf3D,OAAQ0C,GAEVkB,MAAO,CACLD,IAAKlB,EAAQkB,IACb3D,OAAQ2C,GAEVvB,KAAMb,EACNe,KAAM,CAAE0B,MAAKA,KAGfV,EAAYuB,KAAKL,GAGnBZ,EAAQS,OACH,GAAIP,EAAMI,SAAWJ,EAAMI,QAAQlE,WAExC,IAAuB,IAAA8E,EAAAC,OAAAC,EAAA,SAAAD,CAAAjB,EAAMI,SAAOe,EAAAH,EAAA7C,QAAAgD,EAAAC,KAAAD,EAAAH,EAAA7C,OAAE,CACpC4B,EADiBoB,EAAA/D,MACM8C,0GAM7B,IAAoB,IAAAmB,EAAAJ,OAAAC,EAAA,SAAAD,CAAA3B,GAAMgC,EAAAD,EAAAlD,QAAAmD,EAAAF,KAAAE,EAAAD,EAAAlD,OAAE,CAC1B4B,EADcuB,EAAAlE,yGAIhB,OAAOoC,oBClHb,IAAA+B,EAAA,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAA,OAAAF,KAAAG,MAAAC,KAAAC,YAAAD,YAQEF,EAAAI,OAAS,SAACC,GACRL,EAAKK,GAAKA,KAcd,OAvB4Bd,OAAAC,EAAA,UAAAD,CAAAQ,EAAAD,GAE1BC,EAAAO,UAAAC,mBAAA,SAAmBC,GACbN,KAAK3D,MAAMkE,aAAeD,EAAUC,YAb5C,SAAwBJ,GACtB,GAAKA,GAAOA,EAAGK,aAAf,CAGA,IAAMC,EAAYN,EAAGK,cACjBL,EAAGO,UAAYD,EAAUE,UAAYF,EAAUG,cAAgBT,EAAGO,UAAYD,EAAUE,aAC1FF,EAAUE,UAAYR,EAAGO,UAAYD,EAAUC,YAQ7CG,CAAeb,KAAKG,KAQxBN,EAAAO,UAAAU,OAAA,WACQ,IAAA/E,EAAAiE,KAAA3D,MAAE0E,EAAAhF,EAAAgF,KAAMR,EAAAxE,EAAAwE,WAAYS,EAAAjF,EAAAiF,MAAOC,EAAAlF,EAAAkF,YAC3BtE,EAAY4D,EAAa,0CAA4C,iBAE3E,OACEzD,EAAA9C,EAAA+C,cAAA,MAAImE,IAAKlB,KAAKE,OAAQvD,UAAWA,EAAWwE,QAF9B,WAAM,OAAAF,EAAYD,KAG7BA,EACAD,GAAQR,EAAazD,EAAA9C,EAAA+C,cAAA,OAAKJ,UAAU,uBAAuBoE,GAAc,OAIlFlB,EAvBA,CAA4B/C,EAAA9C,EAAMoH,eAyBlCC,EAAA,SAAAzB,GAAA,SAAA0B,mDAwBA,OAxB6BjC,OAAAC,EAAA,UAAAD,CAAAiC,EAAA1B,GAC3B0B,EAAAlB,UAAAU,OAAA,WACQ,IAAA/E,EAAAiE,KAAA3D,MAAEkF,EAAAxF,EAAAwF,MAAOP,EAAAjF,EAAAiF,MAAOQ,EAAAzF,EAAAyF,SAAUP,EAAAlF,EAAAkF,YAChC,OACEnE,EAAA9C,EAAA+C,cAAA,MAAIJ,UAAU,mBACZG,EAAA9C,EAAA+C,cAAA,OAAKJ,UAAU,0BAA0BqE,GACzClE,EAAA9C,EAAA+C,cAAA,MAAIJ,UAAU,yBACX4E,EAAMjE,IAAI,SAACmE,GACV,IAAM/F,EAAuB,iBAAT+F,EAAoBA,EAAK/F,KAAO+F,EAC9CT,EAAwB,iBAATS,EAAoBA,EAAKC,SAAWD,EAAK/F,KAAO+F,EACrE,OACE3E,EAAA9C,EAAA+C,cAAC4C,EAAa,CACZV,IAAKvD,EACLuF,YAAaA,EACbV,WAAYiB,EAAShH,QAAQkB,IAAS,EACtCqF,KAAMU,EAAKV,KACXC,MAAOA,SAQvBM,EAxBA,CAA6BxE,EAAA9C,EAAMoH,eAuCpBO,EAbf,SAAA/B,GAAA,SAAAgC,mDAWA,OAXwBvC,OAAAC,EAAA,UAAAD,CAAAuC,EAAAhC,GACtBgC,EAAAxB,UAAAU,OAAA,WACQ,IAAA/E,EAAAiE,KAAA3D,MAAEwF,EAAA9F,EAAA8F,aAAcC,EAAA/F,EAAA+F,QAASC,EAAAhG,EAAAgG,cAAed,EAAAlF,EAAAkF,YAC9C,OACEnE,EAAA9C,EAAA+C,cAAA,MAAIJ,UAAU,YAAYuE,IAAKY,GAC5BD,EAAavE,IAAI,SAAC0E,GAAW,OAC5BlF,EAAA9C,EAAA+C,cAACsE,EAAchC,OAAAC,EAAA,SAAAD,CAAA,CAACJ,IAAK+C,EAAEhB,MAAOC,YAAaA,EAAaO,SAAUO,GAAmBC,QAK/FJ,EAXA,CAAwB9E,EAAA9C,EAAMoH,wECnD9B,SAASa,EAAmBC,GAC1B,OAAOA,EAAIA,EAAEC,OAAO,SAAC9D,EAAU2D,GAAW,OAAA3D,EAAI+D,OAAOJ,EAAET,QAAQ,IAAM,GAGhE,IAcMc,EAAkB,SAACC,GAAkB,OAAAC,EAAA,EAAMC,OAAO,CAAEC,UAdpC/G,EAc2D4G,EAbhFI,EAAQhH,EAAKgD,MAAM,MAAMpB,IAAI,SAACqF,GAClC,OAAAJ,EAAA,EAAMC,OAAO,CACX9F,KAAM,YACNkG,MAAO,CAACL,EAAA,EAAKC,OAAOG,QAIPJ,EAAA,EAASC,OAAO,CAC/BI,MAAOF,OATiB,IAAChH,EACrBgH,GAeRG,EAAA,SAAAjD,GAGE,SAAAkD,EAAYzG,GAAZ,IAAAyD,EACEF,EAAAmD,KAAA/C,KAAM3D,IAAM2D,KACJjE,EAAAM,EAAA2G,aAAA,IAAAjH,EAAA,EAAAA,EAAWqD,EAAA/C,EAAA4G,cAAA,IAAA7D,EAAA,QAAAA,SACnBU,EAAK7C,KAAOwF,SAAS1F,cAAc,OACnC+C,EAAK7C,KAAKiG,UAAUC,IAAI,kBAAmB,mBAAmBF,EAAM,IAAID,GACxEP,SAASW,KAAKC,YAAYvD,EAAK7C,QAUnC,OAlBqBoC,OAAAC,EAAA,UAAAD,CAAAyD,EAAAlD,GAWnBkD,EAAA1C,UAAAkD,qBAAA,WACEb,SAASW,KAAKG,YAAYvD,KAAK/C,OAGjC6F,EAAA1C,UAAAU,OAAA,WACE,OAAO0C,EAAAxJ,EAASyJ,aAAazD,KAAK3D,MAAMG,SAAUwD,KAAK/C,OAE3D6F,EAlBA,CAAqBhG,EAAA9C,EAAM0J,WA2TZC,EAvSf,SAAA/D,GAME,SAAAgE,EAAYvH,EAAYwH,GAAxB,IAAA/D,EACEF,EAAAmD,KAAA/C,KAAM3D,EAAOwH,IAAQ7D,KAHvBF,EAAAgE,cAA+BzE,OAAAyE,EAAA,EAAAzE,GAsC/BS,EAAAiE,SAAW,SAAChI,OAAEP,EAAAO,EAAAP,MACNwI,EAAUxI,EAAMiH,WAAa3C,EAAKmE,MAAMzI,MAAMiH,SACpD3C,EAAKoE,SAAS,CAAE1I,MAAKA,GAAI,WACnBwI,IAEFG,sBAAsB,WAAM,OAAArE,EAAKsE,gBACjCtE,EAAKuE,oBAKXvE,EAAAwE,QAAU,SAACC,GACT,OAAIzE,EAAKzD,MAAMiI,QACNxE,EAAKzD,MAAMiI,QAAQC,GAErBC,MAAMD,IAGfzE,EAAAuE,cAAgB,WAEN,IAAAI,EAAA3E,EAAAzD,MAAAoI,cACJA,GACFA,EAAcC,EAAA,EAAMC,UAAU7E,EAAKmE,MAAMzI,SAI7CsE,EAAA8E,UAAY,SAACC,EAAcvI,EAAoBC,GACvC,IAAAR,EAAA+D,EAAAmE,MAAEa,EAAA/I,EAAA+I,eAAgBC,EAAAhJ,EAAAgJ,YAClBC,EAAgBH,EAEtB,OAAQG,EAAc/F,KACpB,IAAK,SACH,GAAIa,EAAKmF,OAIP,OAHAD,EAAcE,iBACdF,EAAcG,kBACdrF,EAAKsF,kBACE,EAET,MAGF,IAAK,IACH,GAAIJ,EAAcK,QAGhB,OAFAL,EAAcE,iBACdpF,EAAKsE,aAAY,IACV,EAET,MAGF,IAAK,MACL,IAAK,QACH,GAAItE,EAAKmF,OAAQ,CAGf,GADAD,EAAcE,kBACTH,IAAgBA,EAAYzK,OAC/B,OAAOiC,IAIT,IAAM+I,EAAuBrD,EAAmB8C,GAG1CQ,EAAaD,EAFFE,KAAKC,IAAIX,GACOQ,EAAqBhL,QAAU,GAGhE,OAAOwF,EAAK4F,eAAepJ,EAAQiJ,GAErC,MAGF,IAAK,YACCzF,EAAKmF,SAEPD,EAAcE,iBACdpF,EAAKoE,SAAS,CAAEY,eAAgBA,EAAiB,KAEnD,MAGF,IAAK,UACChF,EAAKmF,SAEPD,EAAcE,iBACdpF,EAAKoE,SAAS,CAAEY,eAAgBU,KAAKG,IAAI,EAAGb,EAAiB,MAUnE,OAAOvI,KAGTuD,EAAAsE,YAAc,SAACwB,EAAgBnE,GAC7B,YADa,IAAAmE,OAAA,GACNA,GAGT9F,EAAA4F,eAAiB,SACfpJ,EACAiJ,GAEA,MAAO,CAAE/J,MAAO,IAAI+G,EAAA,IAGtBzC,EAAAsF,eAAiB,SAACS,GAChB/F,EAAKoE,SACH,CACEa,YAAa,GACbD,eAAgB,EAChBgB,gBAAiB,GACjBC,iBAAkB,MAEpBF,IAIJ/F,EAAAkG,WAAa,SAACnB,EAAcvI,EAAoBC,GACtC,IAAA0J,EAAAnG,EAAAzD,MAAA4J,OAQR,OALAnG,EAAKoG,WAAaC,WAAWrG,EAAKsF,eAAgB,KAC9Ca,GACFA,IAEFnG,EAAKsG,0BACE7J,KAGTuD,EAAAuG,YAAc,SAACxB,EAAcvI,EAAoBC,GACvC,IAAA+J,EAAAxG,EAAAzD,MAAAiK,QAMR,OALIA,GACFA,IAGFxG,EAAKyG,yBACEhK,KAWTuD,EAAAmB,YAAc,SAACQ,GACL,IAAAsD,EAAAjF,EAAAmE,MAAAc,YACR,GAAKA,GAAsC,IAAvBA,EAAYzK,OAAhC,CAKA,IAAMsL,EAAS9F,EAAK4F,iBACpB5F,EAAKiE,SAAS6B,KAGhB9F,EAAA0G,WAAa,WACH,IAAAzB,EAAAjF,EAAAmE,MAAAc,YACF0B,EAAO3G,EAAKmF,OAEZhI,EADYyJ,OAAOC,eACFC,WAGvB,GAAKH,EAML,GADwB1B,GAAeA,EAAYzK,OAAS,GAO5D,GAAI2C,GAAQA,EAAK4J,cAAe,CAE9B,IAAMC,EAAO7J,EAAK4J,cAAcE,wBAC1BC,EAAUN,OAAOM,QACjBC,EAAUP,OAAOO,QACjBC,EAAeR,OAAOS,YAEtBC,EAAWN,EAAKO,KAAOL,EAAU,EACjCM,EAAUR,EAAKS,IAAMN,EAAUH,EAAKU,OAAS,EAC7CC,EAAaP,EAAeI,EAAU,GAG5CnD,sBAAsB,WACpBsC,EAAKiB,MAAMC,QAAU,EACrBlB,EAAKiB,MAAMH,IAASD,EAAO,KAC3Bb,EAAKiB,MAAML,KAAUD,EAAQ,KAC7BX,EAAKiB,MAAME,UAAeH,EAAU,aArBtChB,EAAKoB,gBAAgB,UA0BzB/H,EAAAgC,QAAU,SAAC3B,GACTL,EAAKmF,OAAS9E,GAGhBL,EAAAgI,WAAa,WACH,IAAAC,EAAAjI,EAAAzD,MAAA0L,aACAhD,EAAAjF,EAAAmE,MAAAc,YAER,KADwBA,GAAeA,EAAYzK,OAAS,GAE1D,OAAO,KAIT,IAAI0N,EAAgBxC,KAAKG,IAAI7F,EAAKmE,MAAMa,eAAgB,GAClDQ,EAAuBrD,EAAmB8C,GAChDiD,EAAgBA,EAAgB1C,EAAqBhL,QAAU,EAC/D,IAAM2N,GAAgB3C,EAAqBhL,OAAS,EAAI,CAACgL,EAAqB0C,IAAkB,IAAI1K,IAAI,SAAAnC,GACtG,MAAa,iBAANA,EAAiBA,EAAEO,KAAOP,IAInC,OACE2B,EAAA9C,EAAA+C,cAAC8F,EAAM,CAACI,OAAQ8E,GACdjL,EAAA9C,EAAA+C,cAAC4E,EAAS,CACRG,QAAShC,EAAKgC,QACdC,cAAekG,EACfhH,YAAanB,EAAKmB,YAClBY,aAAckD,MApQZ,IAAAhJ,EAAAM,EAAA6L,uBAAA,IAAAnM,EAAA,GAAAA,EAAsBqD,EAAA/C,EAAA8L,qBAAA,IAAA/I,EAAA,QAAAA,SAE9BU,EAAKsI,QAAU,CACb/I,OAAAgJ,EAAA,aAAAhJ,GACAA,OAAAgJ,EAAA,YAAAhJ,GACAA,OAAAgJ,EAAA,aAAAhJ,CAAa,CAAEiJ,QAASjM,EAAMkM,eAC9BlJ,OAAAgJ,EAAA,cAAAhJ,GACAvD,EAAY,CAAEE,WAAYkM,EAAiBjM,SAAUkM,KAGvDrI,EAAKmE,MAAQ,CACXuE,UAAW,GACXC,YAAa,GACb1D,YAAa,GACbD,eAAgB,EAChBgB,gBAAiB,GACjBtK,MAAO6G,EAAgBhG,EAAMqM,cAAgB,OA4QnD,OArSyBrJ,OAAAC,EAAA,UAAAD,CAAAuE,EAAAhE,GA6BvBgE,EAAAxD,UAAAuI,kBAAA,WACE3I,KAAKwG,cAGP5C,EAAAxD,UAAAkD,qBAAA,WACEtD,KAAKoG,0BACLwC,aAAa5I,KAAKkG,aAGpBtC,EAAAxD,UAAAC,mBAAA,WACEL,KAAKwG,cAgJP5C,EAAAxD,UAAAmG,uBAAA,WACEvG,KAAK8D,cAAc+E,OAAO,MAAO,YAGnCjF,EAAAxD,UAAAgG,wBAAA,WACEpG,KAAK8D,cAAcgF,eAuFrBlF,EAAAxD,UAAAU,OAAA,WACE,OACEhE,EAAA9C,EAAA+C,cAAA,OAAKJ,UAAU,qBACZqD,KAAK8H,aACNhL,EAAA9C,EAAA+C,cAACgM,EAAA,EAAM,CACLC,aAAa,EACb/C,OAAQjG,KAAKgG,WACbpB,UAAW5E,KAAK4E,UAChBb,SAAU/D,KAAK+D,SACfuC,QAAStG,KAAKqG,YACd4C,YAAajJ,KAAK3D,MAAM4M,YACxBb,QAASpI,KAAKoI,QACdc,YAAY,EACZ1N,MAAOwE,KAAKiE,MAAMzI,UAK5BoI,EArSA,CAAyB9G,EAAA9C,EAAM0J,gCCnDlByF,EAAiB,CAC5B,CAAEzN,KAAM,WAAYqF,KAAM,0DAC1B,CAAErF,KAAM,KAAMqF,KAAM,4DACpB,CAAErF,KAAM,UAAWqF,KAAM,yDACzB,CACErF,KAAM,UACNqF,KACE,iMAEJ,CAAErF,KAAM,QAASqF,KAAM,0DACvB,CAAErF,KAAM,YAAaqF,KAAM,4EAC3B,CACErF,KAAM,WACNqF,KAAM,8FAER,CAAErF,KAAM,WAAYqF,KAAM,oDAC1B,CAAErF,KAAM,SAAUqF,KAAM,gEACxB,CACErF,KAAM,eACNqF,KACE,kHAEJ,CACErF,KAAM,QACNqF,KACE,6LAEJ,CAAErF,KAAM,OAAQqF,KAAM,6DACtB,CAAErF,KAAM,OAAQqF,KAAM,iDACtB,CAAErF,KAAM,YAAaqF,KAAM,kEAC3B,CAAErF,KAAM,KAAMqF,KAAM,4DACpB,CAAErF,KAAM,SAAUqF,KAAM,sFACxB,CACErF,KAAM,OACNqF,KACE,mHAEJ,CAAErF,KAAM,QAASqF,KAAM,8CACvB,CAAErF,KAAM,cAAeqF,KAAM,sEAC7B,CAAErF,KAAM,WAAYqF,KAAM,8CAC1B,CAAErF,KAAM,QAASqF,KAAM,uEACvB,CAAErF,KAAM,QAASqF,KAAM,2FACvB,CACErF,KAAM,QACNqF,KACE,2JAEJ,CAAErF,KAAM,UAAWqF,KAAM,mFACzB,CAAErF,KAAM,eAAgBqF,KAAM,mDAC9B,CAAErF,KAAM,iBAAkBqF,KAAM,yCAChC,CAAErF,KAAM,QAASqF,KAAM,8CACvB,CAAErF,KAAM,SAAUqF,KAAM,gEACxB,CAAErF,KAAM,SAAUqF,KAAM,oFACxB,CAAErF,KAAM,SAAUqF,KAAM,2EACxB,CACErF,KAAM,kBACNqF,KACE,gHAEJ,CAAErF,KAAM,SAAUqF,KAAM,8EACxB,CAAErF,KAAM,YAAaqF,KAAM,6EAC3B,CAAErF,KAAM,OAAQqF,KAAM,uEACtB,CAAErF,KAAM,YAAaqF,KAAM,oEAC3B,CAAErF,KAAM,OAAQqF,KAAM,8CACtB,CAAErF,KAAM,MAAOqF,KAAM,kEACrB,CACErF,KAAM,cACNqF,KAAM,kGAER,CACErF,KAAM,aACNqF,KAAM,uGAER,CAAErF,KAAM,QAASqF,KAAM,iEACvB,CAAErF,KAAM,QAASqF,KAAM,oEAGZqI,EAAiB,CAC5B,CAAE1N,KAAM,MAAOqF,KAAM,+CACrB,CACErF,KAAM,OACNqF,KACE,iHAEJ,CAAErF,KAAM,MAAOqF,KAAM,iEACrB,CAAErF,KAAM,MAAOqF,KAAM,wEACrB,CACErF,KAAM,UACNqF,KACE,wIAEJ,CACErF,KAAM,UACNqF,KACE,wIAEJ,CACErF,KAAM,SACNqF,KACE,wIAEJ,CACErF,KAAM,SACNqF,KACE,wIAEJ,CAAErF,KAAM,eAAgBqF,KAAM,8DAC9B,CAAErF,KAAM,eAAgBqF,KAAM,yDAC9B,CAAErF,KAAM,cAAeqF,KAAM,wCAC7B,CACErF,KAAM,cACNqF,KACE,uHAEJ,CACErF,KAAM,OACNqF,KAAM,+GAER,CACErF,KAAM,SACNqF,KAAM,kGAER,CACErF,KAAM,OACNqF,KACE,kHAEJ,CACErF,KAAM,QACNqF,KACE,kHAEJ,CAAErF,KAAM,MAAOqF,KAAM,sDACrB,CACErF,KAAM,QACNqF,KACE,sHAEJ,CAAErF,KAAM,WAAYqF,KAAM,kEAC1B,CAAErF,KAAM,sBAAuBqF,KAAM,6CACrC,CAAErF,KAAM,sBAAuBqF,KAAM,qCACrC,CAAErF,KAAM,WAAYqF,KAAM,+DAC1B,CAAErF,KAAM,WAAYqF,KAAM,iFAC1B,CAAErF,KAAM,WAAYqF,KAAM,kDAC1B,CAAErF,KAAM,MAAOqF,KAAM,kEACrB,CACErF,KAAM,SACNqF,KACE,2IAEJ,CACErF,KAAM,WACNqF,KACE,6HAEJ,CAAErF,KAAM,aAAcqF,KAAM,uEAC5B,CAAErF,KAAM,aAAcqF,KAAM,kDAC5B,CAAErF,KAAM,YAAaqF,KAAM,qEAC3B,CAAErF,KAAM,oBAAqBqF,KAAM,6DACnC,CAAErF,KAAM,qBAAsBqF,KAAM,8DACpC,CAAErF,KAAM,aAAcqF,KAAM,sEAC5B,CAAErF,KAAM,cAAeqF,KAAM,uEAC7B,CACErF,KAAM,OACNqF,KAAM,wGAER,CACErF,KAAM,UACNqF,KAAM,gGAER,CAAErF,KAAM,UAAWqF,KAAM,2DACzB,CACErF,KAAM,WACNqF,KAAM,wGAER,CAAErF,KAAM,MAAOqF,KAAM,gCACrB,CAAErF,KAAM,MAAOqF,KAAM,8EACrB,CACErF,KAAM,QACNqF,KACE,mHAEJ,CAAErF,KAAM,UAAWqF,KAAM,sEACzB,CACErF,KAAM,UACNqF,KAAM,0GAER,CAAErF,KAAM,oBAAqBqF,KAAM,qDACnC,CACErF,KAAM,eACNqF,KAAM,yGAER,CACErF,KAAM,sBACNqF,KAAM,yGAER,CAAErF,KAAM,WAAYqF,KAAM,uFAC1B,CACErF,KAAM,eACNqF,KACE,8LAEJ,CACErF,KAAM,gBACNqF,KAAM,qGAER,CAAErF,KAAM,gBAAiBqF,KAAM,yDAC/B,CAAErF,KAAM,aAAcqF,KAAM,6EAC5B,CAAErF,KAAM,YAAaqF,KAAM,mFAC3B,CAAErF,KAAM,YAAaqF,KAAM,2EAC3B,CAAErF,KAAM,SAAUqF,KAAM,gFACxB,CACErF,KAAM,aACNqF,KACE,uIAEJ,CACErF,KAAM,WACNqF,KACE,qHAEJ,CACErF,KAAM,UACNqF,KACE,mHAEJ,CAAErF,KAAM,WAAYqF,KAAM,sDAC1B,CAAErF,KAAM,WAAYqF,KAAM,sFAC1B,CAAErF,KAAM,aAAcqF,KAAM,wFAC5B,CAAErF,KAAM,YAAaqF,KAAM,uFAC3B,CAAErF,KAAM,YAAaqF,KAAM,uFAC3B,CACErF,KAAM,qBACNqF,KAAM,qFAER,CAAErF,KAAM,MAAOqF,KAAM,gFACrB,CACErF,KAAM,QACNqF,KAAM,mGAER,CAAErF,KAAM,OAAQqF,KAAM,gFACtB,CACErF,KAAM,YACNqF,KAAM,6GAER,CACErF,KAAM,cACNqF,KACE,8JAEJ,CAAErF,KAAM,UAAWqF,KAAM,wEACzB,CAAErF,KAAM,cAAeqF,KAAM,4EAC7B,CAAErF,KAAM,cAAeqF,KAAM,uEAC7B,CAAErF,KAAM,QAASqF,KAAM,2CACvB,CAAErF,KAAM,kBAAmBqF,KAAM,uEACjC,CAAErF,KAAM,kBAAmBqF,KAAM,uEACjC,CAAErF,KAAM,QAASqF,KAAM,2EACvB,CAAErF,KAAM,WAAYqF,KAAM,gDAC1B,CAAErF,KAAM,UAAWqF,KAAM,oDACzB,CAAErF,KAAM,UAAWqF,KAAM,qDACzB,CAAErF,KAAM,OAAQqF,KAAM,6CACtB,CAAErF,KAAM,cAAeqF,KAAM,oDAC7B,CAAErF,KAAM,MAAOqF,KAAM,4FACrB,CACErF,KAAM,YACNqF,KAAM,2GAER,CAAErF,KAAM,YAAaqF,KAAM,6EAC3B,CACErF,KAAM,MACNqF,KACE,oMAEJ,CACErF,KAAM,MACNqF,KACE,oMAEJ,CACErF,KAAM,UACNqF,KAAM,4GAER,CAAErF,KAAM,iBAAkBqF,KAAM,8EAChC,CACErF,KAAM,iBACNqF,KACE,oIAEJ,CAAErF,KAAM,UAAWqF,KAAM,iEACzB,CAAErF,KAAM,WAAYqF,KAAM,0EAC1B,CAAErF,KAAM,QAASqF,KAAM,sEACvB,CAAErF,KAAM,QAASqF,KAAM,sDACvB,CAAErF,KAAM,aAAcqF,KAAM,2EAC5B,CAAErF,KAAM,YAAaqF,KAAM,+CAC3B,CACErF,KAAM,SACNqF,KACE,gHAEJ,CAAErF,KAAM,MAAOqF,KAAM,2CACrB,CAAErF,KAAM,QAASqF,KAAM,oDACvB,CAAErF,KAAM,OAAQqF,KAAM,0CACtB,CACErF,KAAM,WACNqF,KAAM,wGAER,CACErF,KAAM,gBACNqF,KAAM,wGAER,CACErF,KAAM,kBACNqF,KAAM,kGAER,CAAErF,KAAM,cAAeqF,KAAM,2DAC7B,CACErF,KAAM,gBACNqF,KAAM,sGAER,CAAErF,KAAM,WAAYqF,KAAM,8EAC1B,CACErF,KAAM,UACNqF,KAAM,kGAER,CACErF,KAAM,cACNqF,KACE,yIAEJ,CAAErF,KAAM,MAAOqF,KAAM,+CACrB,CAAErF,KAAM,SAAUqF,KAAM,uEACxB,CACErF,KAAM,iBACNqF,KACE,yHAEJ,CAAErF,KAAM,MAAOqF,KAAM,+CACrB,CAAErF,KAAM,SAAUqF,KAAM,uEACxB,CAAErF,KAAM,cAAeqF,KAAM,6EAC7B,CACErF,KAAM,OACNqF,KACE,mKAEJ,CAAErF,KAAM,MAAOqF,KAAM,8CACrB,CACErF,KAAM,MACNqF,KACE,iNAEJ,CAAErF,KAAM,OAAQqF,KAAM,8EACtB,CACErF,KAAM,WACNqF,KAAM,6FAER,CAAErF,KAAM,aAAcqF,KAAM,gDAC5B,CAAErF,KAAM,aAAcqF,KAAM,oEAC5B,CACErF,KAAM,aACNqF,KACE,iSAEJ,CACErF,KAAM,aACNqF,KACE,weAEJ,CACErF,KAAM,YACNqF,KACE,8MAEJ,CACErF,KAAM,iBACNqF,KACE,+HAEJ,CACErF,KAAM,mBACNqF,KACE,mOAEJ,CAAErF,KAAM,gBAAiBqF,KAAM,mFAC/B,CACErF,KAAM,YACNqF,KACE,wKAEJ,CACErF,KAAM,aACNqF,KACE,yNAEJ,CACErF,KAAM,qBACNqF,KACE,uKAEJ,CACErF,KAAM,sBACNqF,KACE,gLAEJ,CAAErF,KAAM,KAAMqF,KAAM,yCACpB,CAAErF,KAAM,QAASqF,KAAM,sDACvB,CAAErF,KAAM,MAAOqF,KAAM,wCACrB,CACErF,KAAM,OACNqF,KACE,kKAEJ,CACErF,KAAM,UACNqF,KACE,mHAEJ,CAAErF,KAAM,OAAQqF,KAAM,4BACtB,CAAErF,KAAM,QAASqF,KAAM,wEACvB,CAAErF,KAAM,SAAUqF,KAAM,+DACxB,CAAErF,KAAM,UAAWqF,KAAM,kDACzB,CAAErF,KAAM,UAAWqF,KAAM,2CACzB,CAAErF,KAAM,QAASqF,KAAM,0DACvB,CACErF,KAAM,aACNqF,KACE,kHAEJ,CACErF,KAAM,aACNqF,KACE,gXAEJ,CAAErF,KAAM,aAAcqF,KAAM,sEAC5B,CAAErF,KAAM,mBAAoBqF,KAAM,uDAClC,CACErF,KAAM,6BACNqF,KACE,gHAEJ,CAAErF,KAAM,4BAA6BqF,KAAM,2CAC3C,CAAErF,KAAM,gBAAiBqF,KAAM,sEAC/B,CACErF,KAAM,gBACNqF,KAAM,2FAER,CAAErF,KAAM,uBAAwBqF,KAAM,uEACtC,CAAErF,KAAM,oBAAqBqF,KAAM,wEACnC,CAAErF,KAAM,sBAAuBqF,KAAM,sEACrC,CAAErF,KAAM,qBAAsBqF,KAAM,gEACpC,CAAErF,KAAM,aAAcqF,KAAM,yDAC5B,CACErF,KAAM,oBACNqF,KAAM,mFAER,CACErF,KAAM,4BACNqF,KAAM,iFAER,CAAErF,KAAM,kBAAmBqF,KAAM,sEACjC,CAAErF,KAAM,0BAA2BqF,KAAM,oEACzC,CACErF,KAAM,iBACNqF,KAAM,2FAER,CACErF,KAAM,wBACNqF,KAAM,sGAER,CAAErF,KAAM,aAAcqF,KAAM,2DAC5B,CAAErF,KAAM,cAAeqF,KAAM,wFAC7B,CACErF,KAAM,qBACNqF,KAAM,kGAER,CAAErF,KAAM,kBAAmBqF,KAAM,4EACjC,CACErF,KAAM,oBACNqF,KAAM,+FAER,CAAErF,KAAM,kBAAmBqF,KAAM,sCACjC,CAAErF,KAAM,wBAAyBqF,KAAM,mEACvC,CACErF,KAAM,0BACNqF,KAAM,6EAER,CACErF,KAAM,kBACNqF,KAAM,qGAER,CAAErF,KAAM,eAAgBqF,KAAM,wDAC9B,CAAErF,KAAM,uBAAwBqF,KAAM,sDACtC,CAAErF,KAAM,kBAAmBqF,KAAM,yEACjC,CAAErF,KAAM,OAAQqF,KAAM,gCACtB,CAAErF,KAAM,MAAOqF,KAAM,8BACrB,CACErF,KAAM,QACNqF,KACE,kHAEJ,CAAErF,KAAM,OAAQqF,KAAM,qCACtB,CAAErF,KAAM,aAAcqF,KAAM,wFAC5B,CACErF,KAAM,eACNqF,KAAM,0FAER,CACErF,KAAM,cACNqF,KAAM,yFAER,CACErF,KAAM,cACNqF,KAAM,yFAER,CACErF,KAAM,QACNqF,KACE,6JAEJ,CACErF,KAAM,UACNqF,KACE,sHAEJ,CACErF,KAAM,SACNqF,KACE,gKAEJ,CAAErF,KAAM,SAAUqF,KAAM,4CACxB,CAAErF,KAAM,eAAgBqF,KAAM,4EAC9B,CACErF,KAAM,eACNqF,KAAM,wFAER,CAAErF,KAAM,SAAUqF,KAAM,yBACxB,CAAErF,KAAM,cAAeqF,KAAM,oDAC7B,CAAErF,KAAM,SAAUqF,KAAM,2DACxB,CAAErF,KAAM,SAAUqF,KAAM,mFACxB,CACErF,KAAM,YACNqF,KAAM,gGAER,CAAErF,KAAM,MAAOqF,KAAM,kDACrB,CAAErF,KAAM,QAASqF,KAAM,sEACvB,CAAErF,KAAM,QAASqF,KAAM,8EACvB,CAAErF,KAAM,MAAOqF,KAAM,iCACrB,CACErF,KAAM,UACNqF,KAAM,0GAER,CACErF,KAAM,gBACNqF,KACE,uHAEJ,CAAErF,KAAM,SAAUqF,KAAM,4DACxB,CAAErF,KAAM,aAAcqF,KAAM,yEAC5B,CAAErF,KAAM,YAAaqF,KAAM,oDAC3B,CACErF,KAAM,WACNqF,KAAM,6FAER,CACErF,KAAM,YACNqF,KACE,oIAEJ,CAAErF,KAAM,SAAUqF,KAAM,2EACxB,CAAErF,KAAM,QAASqF,KAAM,2CACvB,CAAErF,KAAM,QAASqF,KAAM,oEACvB,CAAErF,KAAM,SAAUqF,KAAM,iEACxB,CAAErF,KAAM,UAAWqF,KAAM,wCACzB,CAAErF,KAAM,WAAYqF,KAAM,gEAC1B,CAAErF,KAAM,WAAYqF,KAAM,8CAC1B,CAAErF,KAAM,aAAcqF,KAAM,0EAC5B,CAAErF,KAAM,UAAWqF,KAAM,oCACzB,CACErF,KAAM,YACNqF,KACE,4PAEJ,CAAErF,KAAM,WAAYqF,KAAM,iFAC1B,CAAErF,KAAM,OAAQqF,KAAM,iFACtB,CAAErF,KAAM,WAAYqF,KAAM,+DAC1B,CAAErF,KAAM,aAAcqF,KAAM,8DAC5B,CAAErF,KAAM,aAAcqF,KAAM,2EAC5B,CACErF,KAAM,aACNqF,KAAM,8GAER,CACErF,KAAM,WACNqF,KACE,mJAEJ,CACErF,KAAM,aACNqF,KACE,4HAEJ,CACErF,KAAM,YACNqF,KACE,sJAEJ,CAAErF,KAAM,aAAcqF,KAAM,0DAC5B,CACErF,KAAM,aACNqF,KAAM,qGAER,CACErF,KAAM,MACNqF,KACE,uLAIOsI,EAAW,CACtB,KACA,KACA,WACA,cACA,aACA,gBACA,aACA,MACA,UACA,QACA,OACA,QACA,MACA,KACA,SACA,MACA,SACA,OACA,WACA,OACA,OACA,OACA,WACA,QAGWC,EAAgB,CAC3B,CACE5N,KAAM,gBACNgG,QAAS,kBACTX,KAAM,0EAER,CACErF,KAAM,YACNgG,QAAS,cACTX,KAAM,mGAER,CACErF,KAAM,cACNgG,QAAS,gBACTX,KAAM,mGAER,CACErF,KAAM,iBACNgG,QAAS,mBACTX,KAAM,mFAER,CAAErF,KAAM,cAAegG,QAAS,gBAAiBX,KAAM,8CAQnDwI,EAAY,CAChBC,QAAS,CACPC,QAAS,mBACTC,YAAY,EACZC,QAAQ,GAEVC,mBAAoB,CAClBH,QAAS,wBACTI,OAAQ,IAEVxO,SAAU,CACRoO,QAAS,IAAIK,OAbO,CAAC,UAAW,UAAW,QAAS,OAAQ,QAAS,SAAU,SAa/CtM,KAAK,MAAK,IAAK,KAC/Ce,MAAO,UAETwL,QAAS,IAAID,OAAO,SAASV,EAAe9L,IAAI,SAAA0M,GAAK,OAAAA,EAAEtO,OAAM8B,KAAK,KAAI,eAAgB,KACtFyM,OAAQ,CACNR,QAAS,iDACTE,QAAQ,GAEVO,QAAS,IAAIJ,OAAO,SAAST,EAAS7L,KAAK,KAAI,IAAI2L,EAAe7L,IAAI,SAAA0M,GAAK,OAAAA,EAAEtO,OAAM8B,KAAK,KAAI,WAAY,KACxG2M,QAAS,qBACTC,OAAQ,wDACRC,SAAU,yCACVC,YAAa,aACbC,SAAU,+BAGZhB,EAAU,oBAAoBM,OAAS,CACrCW,SAAU,CACRf,QAAS,mBACTlL,MAAO,UAETlD,SAAUkO,EAAUlO,SACpB+O,OAAQb,EAAUa,OAClBL,QAASR,EAAUQ,QACnBE,OAAQV,EAAUU,OAClBM,SAAUhB,EAAUgB,UAKP,IAAAE,EAAA,EChsBTC,EAAkB,IA4BlBC,EAAqB,WAAM,OAC/BC,UAAW,CACTC,QAAS,MAIPC,EAAY,SAAC5I,GAAc,OAAAA,EAAE6I,QAAQ,0BAA0B,IAAIC,QACnEC,EAAW,SAACvP,GAAiB,OAAGA,KAAIA,MAE1C,SAAAkE,GAKE,SAAAsL,EAAY7O,EAAYwH,GAAxB,IAAA/D,EACEF,EAAAmD,KAAA/C,KAAM3D,EAAOwH,IAAQ7D,YAWvBF,EAAAsE,YAAc,SAAC+G,QAAA,IAAAA,OAAA,GACb,IAAMC,EAAY1E,OAAOC,eACzB,GAAIyE,EAAUxE,WAAY,CACxB,IAAMyE,EAAcD,EAAUxE,WAAWC,cACzC,GAAoB,OAAhBwE,EACF,OAGF,IADmBA,EAAYtQ,QAAQ,uBACpB+E,EAAKmE,MAAMzI,MAAM8P,UAElC,OAIF,IAAMxM,EAAQsM,EAAUG,WAAW,GAC7B7P,EAAO0P,EAAUxE,WAAW4E,YAClC,GAAa,OAAT9P,EACF,OAEF,IAAMJ,EAASwD,EAAMd,YACjByN,EAASX,EAAUpP,EAAKgQ,OAAO,EAAGpQ,IAGhCqQ,EAAc7L,EAAKmE,MAAMzI,MAAMoQ,aAC/BC,EAAc/L,EAAKmE,MAAMzI,MAAMsQ,WAAWpQ,KAAKrB,MAAM,EAAGsR,GAG1DI,EAAsC,GACpCC,EAAiBX,EAAYnI,UAC/B6C,EAAkC,KAGtC,GAAIiG,EAAeC,SAAS,oBAC1BlG,EAAmB,mBACnBgG,EAAmBjM,EAAKoM,4BAGnB,GAAIL,EAAYM,MAAM,uBAC3BpG,EAAmB,gBACnBgG,EAAmBjM,EAAKoM,4BAGnB,GAAIL,EAAYM,MAAM,2BAC3BpG,EAAmB,oBACnBgG,EAAmBjM,EAAKsM,8BACnB,GAAIP,EAAYM,MAAM,yDAC3BpG,EAAmB,uBACnBgG,EAAmBjM,EAAKoM,4BAGnB,GAAIL,EAAYM,MAAM,uCAC3BpG,EAAmB,aACnBgG,EAAmBjM,EAAKoM,4BAGnB,GAAIL,EAAYM,MAAM,mBAC3BpG,EAAmB,kBACnBgG,EAAmBjM,EAAKoM,4BACnB,GAAIL,EAAYM,MAAM,+BAC3BpG,EAAmB,eACnBgG,EAAmBjM,EAAKuM,2BAGnB,GAAIR,EAAYM,MAAM,yBAC3BpG,EAAmB,mBACnBgG,EAAmBjM,EAAKoM,4BAGnB,GAAIL,EAAYM,MAAM,sCAAuC,CAClEpG,EAAmB,yBACnB,IAAMuG,EAAKxM,EAAKyM,0BAA0BV,GAC1CW,QAAQC,IAAIH,GACZP,EAAmBjM,EAAKuM,oBAAoBC,GAC5Cb,EAASA,EAAOV,QAAQ,IAAK,SAGxB,GAAI2B,EAAehI,EAAA,EAAMC,UAAU7E,EAAKmE,MAAMzI,QAAQ2Q,MAAM,aAAc,CAE/E,GADApG,EAAmB,eACfjG,EAAK6M,OAKP,OAFA7M,EAAK8M,mBACLzG,WAAWrG,EAAKsE,YAAa,GAH7B2H,EAAmBjM,EAAK+M,6BAQrB,IAAIpB,GAAWO,EAAeC,SAAS,aAAgBd,GASzC,IAAVA,IACTpF,EAAmB,yBACf8F,EAAYM,MAAM,UACpBV,EAAS,IAEXM,EAAmBjM,EAAKgN,6BAd2C,CAEnE,GAAIjB,EAAYM,MAAM,QAEpB,YADAV,EAAS,IAGXA,EA6RR,SAAqBsB,GACnB,IACMZ,EADkB,0BACMa,KAAKD,GACnC,GAAIZ,GAASA,EAAM7R,OAAS,EAC1B,OAAO6R,EAAM,GAEf,MAAO,GAnSQc,CAAYxB,GACrB1F,EAAmB,kBACnBgG,EAAmBjM,EAAKgN,wBAS1B,IAAII,EAAU,EACdzB,EAASA,EAAO0B,cAChB,IAAMC,EAAsBrB,EACzBzO,IAAI,SAAA+P,GAUH,OATIA,EAAM9L,OAASkK,IAAW4B,EAAMC,aAClCD,EAAM9L,MAAQ8L,EAAM9L,MAAM1G,OAAO,SAAA0S,GAAK,OAAAA,EAAE7R,KAAKpB,QAAUmR,EAAOnR,SAC1D+S,EAAMG,YACRH,EAAM9L,MAAQ8L,EAAM9L,MAAM1G,OAAO,SAAA0S,GAAK,OAAyC,IAAzCA,EAAE7R,KAAKyR,cAAc3S,QAAQiR,KAEnE4B,EAAM9L,MAAQ8L,EAAM9L,MAAM1G,OAAO,SAAA0S,GAAK,OAAAA,EAAE7R,KAAKyR,cAAc3S,QAAQiR,IAAW,KAGlFyB,GAAWG,EAAM9L,MAAMjH,OAChB+S,IAERxS,OAAO,SAAAwS,GAAS,OAAAA,EAAM9L,MAAMjH,OAAS,IAKxCwF,EAAKoE,SAAS,CACZ4B,gBAAiB2F,EACjB1F,iBAAgBA,EAChB0H,cAAe/R,EACfqJ,YAAamI,EAAU,EAAIE,EAAsB,OAKvDtN,EAAA4F,eAAiB,SAACpJ,EAAoBiJ,GAC9B,IAAAxJ,EAAA+D,EAAAmE,MAAE6B,EAAA/J,EAAA+J,gBAAiBC,EAAAhK,EAAAgK,iBAAkB0H,EAAA1R,EAAA0R,cACvCC,EAAiBnI,EAAW7J,MAAQ6J,EAKlCoI,EAAWtF,EAAA,QAAQuF,mBACD,aAApBrI,EAAW7I,KACRiR,GAAyB,MAAbA,IACfD,GAAkB,KAEU,qBAArB3H,EACJ4H,GAAyB,MAAbA,IACfD,GAAkB,KAGfC,GAAyB,MAAbA,IACfD,GAAkB,KAKtB,IAAMG,EAAWtI,EAAWuI,iBAAmBhI,EAAgBxL,OAEzDyT,EADOjD,EAAU2C,GACGnT,OAASwL,EAAgBxL,OAC7CgB,EAASmS,EAAcjT,QAAQsL,GAE/BkI,EADUlI,IAAqBiI,EAAe,GAAKzS,GAAU,GAAMoS,IAAmBD,GAClEM,EAAezS,EAAS,EAWlD,OATAwE,EAAKsF,eAAe,WAClB,OAAA9I,EACG2R,eAAeJ,GACfK,cAAcF,GACdG,WAAWT,GACXU,YAhCQ,GAiCRlP,UAGE5C,GAtLPwD,EAAK6M,OAAShC,IAEd7K,EAAKsE,YAAciK,IAASvO,EAAKsE,YAAasG,KAgXlD,OAzX6CrL,OAAAC,EAAA,UAAAD,CAAA6L,EAAAtL,GAY3CsL,EAAA9K,UAAAuI,kBAAA,WACE/I,EAAAQ,UAAMuI,kBAAiB5F,KAAA/C,MACvBA,KAAK4M,eAyOC1B,EAAA9K,UAAAyM,sBAAR,WACE,OAAO7M,KAAKqM,uBAGNnB,EAAA9K,UAAA0M,sBAAR,WACE,MAAO,CACL,CACEU,aAAa,EACbxM,MAAO,WACPO,MAAO8H,EAAS/L,IAAI2N,IAEtB,CACEuC,aAAa,EACbxM,MAAO,YACPO,MAAO4H,GAET,CACEqE,aAAa,EACbxM,MAAO,YACPO,MAAO6H,EAAe9L,IAAI,SAAC4E,GAEzB,OADAA,EAAExF,KAAO,WACFwF,KAGX,CACEsL,aAAa,EACbxM,MAAO,SACPO,MAAO+H,EAAchM,IAAI,SAAC4E,GAExB,OADAA,EAAExF,KAAO,WACFwF,KAGX,CACEsL,aAAa,EACbxM,MAAO,SACPO,MAAOxH,EAAAC,EAAEsD,IAAI0C,KAAK2M,OAAO/B,UAAUC,QAAQyD,OAAQ,SAAC/Q,GAAW,OAAG7B,KAAM6B,EAAEgR,WAKxErD,EAAA9K,UAAAgM,uBAAR,WACE,MAAO,CACL,CACEoB,aAAa,EACbxM,MAAO,YACPO,MAAO6H,EAAe9L,IAAI,SAAC4E,GAEzB,OADAA,EAAExF,KAAO,WACFwF,KAGX,CACEsL,aAAa,EACbxM,MAAO,SACPO,MAAO+H,EAAchM,IAAI,SAAC4E,GAExB,OADAA,EAAExF,KAAO,WACFwF,OAMfgJ,EAAA9K,UAAAiM,oBAAA,SAAoBC,GAElB,YAFkB,IAAAA,MAAA,WAEdtM,KAAK2M,OAAO/B,UAAU0B,GACjB,CACL,CACEkB,aAAa,EACbxM,MAAO,SAEPO,MAAOxH,EAAAC,EAAEsD,IAAI0C,KAAK2M,OAAO/B,UAAU0B,GAAIgC,OAAQ,SAAC/Q,GAAW,OAAG7B,KAAM6B,EAAEgR,UAInE,IAIHrD,EAAA9K,UAAA8L,qBAAR,WACE,IAAMsC,EAAQxO,KAAKyO,sBACnB,GAAID,EAAO,CACT,IAAME,EAAc1O,KAAK2M,OAAO/B,UAAUC,QAAQyD,OAAOE,GACzD,GAAIE,EACF,MAAO,CACL,CACElB,aAAa,EACbxM,MAAO,SACPO,MAAOxH,EAAAC,EAAEsD,IAAIoR,EAAYC,eAAgB,SAAC3E,GAAW,OACnDtO,KAAMsO,EAAEuE,KACRxN,KAAMiJ,EAAE4E,UAMlB,MAAO,IAGD1D,EAAA9K,UAAAqO,oBAAR,WACE,IAEMI,EAAkBnC,EAFVhI,EAAA,EAAMC,UAAU3E,KAAKiE,MAAMzI,QAGnC2Q,EAFe,iBAEMa,KAAK6B,GAChC,OAAI1C,GAASA,EAAM7R,OAAS,GAAK6R,EAAM,IAAMA,EAAM,GAC1CA,EAAM,GAEN,MAIHjB,EAAA9K,UAAAmM,0BAAR,SAAkCtJ,GAChC,IACMkJ,EADkB,0BACMa,KAAK/J,GACnC,OAAIkJ,GAASA,EAAM7R,OAAS,GAAK6R,EAAM,IAAMA,EAAM,GAC1CA,EAAM,GAEN,MAIGjB,EAAA9K,UAAAwM,YAAd,+IACe,SAAM5M,KAAK3D,MAAMyS,2BAA1BnC,EAAS5Q,EAAAgT,SAES,gBAAhBpC,EAAOiC,OACTjC,EAYR,SAAoBA,GAClB,IAAMqC,EAAwBrE,IAE9B,OADAqE,EAAsBpE,UAAUC,QAAU8B,EACnCqC,EAfQC,CAAWtC,IAEtB3M,KAAK2M,OAASA,GAEd3M,KAAK2M,OAAShC,cAGpBO,EAzXA,CAA6CvH,GAoY7C,SAAS+I,EAAepK,GACtB,IACIuM,EAAkBvM,EAAMyI,QADL,YAC6B,IAEpD,OADA8D,EAAkBA,EAAgB9D,QAAQ,KAAM,qBCvalDmE,EAAA,SAAAtP,GAKE,SAAAuP,EAAY9S,GAAZ,IAAAyD,EACEF,EAAAmD,KAAA/C,KAAM3D,IAAM2D,YAOdF,EAAAuE,cAAgB,SAAC7I,GACT,IAAAO,EAAA+D,EAAAzD,MAAE2G,EAAAjH,EAAAiH,MAAO4C,EAAA7J,EAAA6J,OAETwJ,EADEtP,EAAAmE,MAAA3B,QACiB9G,EACzBsE,EAAKoE,SAAS,CAAEkL,OAAMA,EAAE9M,MAAO9G,IAC3BoK,GACFA,EAAOpK,EAAOwH,IAIlBlD,EAAAyI,aAAe,WACL,IAAA8G,EAAAvP,EAAAzD,MAAAgT,QACJA,GACFA,KAnBFvP,EAAKmE,MAAQ,CACXmL,QAAQ,EACR9M,MAAOjG,EAAMiG,OAAS,MAwC5B,OAjDqBjD,OAAAC,EAAA,UAAAD,CAAA8P,EAAAvP,GA8BnBuP,EAAA/O,UAAAU,OAAA,WACQ,IAAA/E,EAAAiE,KAAA3D,MAAEiT,EAAAvT,EAAAuT,UAAWR,EAAA/S,EAAA+S,UAAW7F,EAAAlN,EAAAkN,YACxB7J,EAAAY,KAAAiE,MAAEmL,EAAAhQ,EAAAgQ,OAAQ9M,EAAAlD,EAAAkD,MAEhB,OACExF,EAAA9C,EAAA+C,cAAA,OAAKJ,UAAU,gBAAgB+K,MAAO,CAAEF,OAAQ,SAC9C1K,EAAA9C,EAAA+C,cAACwS,EAAe,CACd7G,aAAc0G,EAAS,KAAO9M,EAC9BiG,aAAcvI,KAAKuI,aACnB9D,cAAezE,KAAKqE,cACpB8D,cAAc,QACdD,gBAAiBuC,EACjBxB,YAAaA,EACbuG,kBAAmBF,EACnBR,UAAWA,MA3CZK,EAAAM,aAAe,CACpBxG,YAAa,iBA+CjBkG,EAjDA,CAAqBO,EAAA,WAmDrBC,EAAA,EAAWC,UAAU,cAAe,CAClC,iBACA,SAAAC,GACE,OAAOA,EAAeX,EAAQ,CAC5B,SACA,WACA,UACA,QACA,YACA,cACA,CAAC,YAAa,CAAEY,WAAY,mBC5DlC,IAAAC,EAAA,SAAAnQ,YA6GEoQ,EACEC,EAAMC,EAAQC,GADmD,IAAArQ,EAAAF,EAAWmD,KAAX/C,KAAAiQ,EAAwBC,IAAAlQ,KAoB1F,OA9HDF,EAAAqQ,cAsDArQ,EAAAsQ,qBAAW,WACTC,SAAW,CACXC,UAAA,6BACE,CACAC,cAAAzQ,EAAkBsQ,qBAClBI,iBAAc1Q,EAAKsQ,qBACnBK,aAAA3Q,EAAiBsQ,qBACjBM,gBAAgB5Q,EAACsQ,qBACjBO,WAAA7Q,EAAiBsQ,qBACjBQ,gBAAiB,IACjB/W,UAAS,OACT0N,IAAA,KACAsJ,WAAY,GACbjW,WAAA,sBAEQ,OACL,CACA,glBAQA,gCACF4C,KAAA,MACAsT,aACE,wBACQhR,EAACiR,YAAWjR,EAAAiR,WAAAC,4BAChBlR,EAAEiR,WAAAC,4BAAAC,wBACT,gBAEC,CACAN,WAAU7Q,EAAKsQ,qBACfc,UAAA,EACAC,eAAW,GACXC,UAAW,OACXvX,UAAU,OACVwX,WAAW,YACZC,YAAA,OAkaDC,cAAY,kBACTzR,EAAAiR,WAAkBC,4BAClBO,cAAKzR,EAAY0R,OAAAC,cAChBC,KAAK,SAAUC,GACf7R,EAAI8R,WAAeD,EACjBA,EAAIrX,OAAQ,IAAAwF,EAAA0R,OAAkBK,kBAAoBC,YACnDhS,EAAA0R,OAAAK,kBAAAC,UAAAH,EAAA,GAAAnW,SAGLuW,MAAAjS,EAAAkS,qBAAAC,KAAAnS,OAGAoS,2BAA2B,kBACxBpS,EAAKyR,gBACJG,KAAA,WACA,OAAA5R,EAAAiR,WAAAC,4BAAAlC,UAAAhP,EAAA0R,OAAAK,kBAAAC,aAEJC,MAAAjS,EAAAkS,qBAAAC,KAAAnS,OAGAqS,0BAA6B,SAASC,GACtCtS,EAAA0R,OAAAK,kBAAAvP,MAAA8P,KAGAC,2BAAyB,WACzBvS,EAAAwS,UAAAC,aAiDAC,yBAAwB,SAAcJ,GACtCtS,EAAA0R,OAAAiB,YAAAtB,eAAAiB,KAGAM,0BAAsB,WACtB,OAAA5S,EAAAyS,aAGAI,0BAAuB,WACvB,OAAA7S,EAAAiR,WAAA6B,sBAAAC,iBAAAd,MAAAjS,EAAAkS,qBAAAC,KAAAnS,KApeA/F,EAAKC,EAAA8Y,aAAoBhT,EAAA0R,OAAA1R,EAAAuQ,UAEzBvQ,EAAKiT,oBAELjT,EAAKkT,qBAELlT,EAAKmT,4BAELnT,EAAKoT,iCACLpT,EAAKwS,UAAUa,OAAOC,GAAGC,EAAA,YAAYC,aAAWxT,EAAKyT,eAAiBtB,KAAKnS,GAAQmQ,GACnFnQ,EAAKwS,UAAAa,OAAiBC,GAAEC,EAAM,YAAaG,UAAS1T,EAAA2T,YAAmBxB,KAAMnS,GAASmQ,GACtFnQ,EAAK4T,cAAgB,EAAGhY,KAAA,cAAAF,MAAA,gBAAAE,KAAA,QAAAF,MAAA,UACxBsE,EAAI6T,mBACmB,wBAArB7T,EAAK0R,OAAAlB,WACNxQ,EAAAyR,gBACFzR,EAjIwC,OAAAkQ,EAAA4D,QAAA,qCA4GzCvU,OAAAC,EAAgB,UAAhBD,CAAgB2Q,EAAApQ,KAwBTQ,UAAiBmT,eAAU,SAAAM,GAChC7T,KAAK8T,oBAAeC,EAEpB/T,KAAMgU,UAAA,GACN,IAAIC,EAAkBla,EAAIC,EAAAka,KAAmBL,EAAM,CAAAM,MAAAnU,KAAAwR,OAAA2C,QACjDF,GAAiBA,EAAwBG,OAC1CpU,KAAAgU,UAAAC,EAAAG,KAAA9R,UAIIlC,UAAqBqT,YAAK,SAAAY,GAChCrU,KAAAgS,qBAAAqC,MAGkBjU,UAAU4R,qBAAwB,SAAUqC,GAC3DA,EAAA/R,OAAO+R,EAAA/R,MAAA6R,OAAAE,EAAA/R,MAAA6R,QAAAnU,KAAAwR,OAAA2C,QAIPE,EAAIC,OAASD,EAACC,MAAK1X,MAAMyX,EAAUC,MAAC1X,KAAU0X,OAAED,EAAAC,MAAA1X,KAAA0X,MAAAC,WAC9CF,EAAIC,MAAC1X,KAAA0X,MAAcC,WAAaA,WACjCvU,KAAA8T,eAAAO,EAAAC,MAAA1X,KAAA0X,MAAAC,sBAAAC,QAEAxU,KAAA8T,eAAAO,EAAAC,MAAA1X,KAAA0X,MAAAC,WAAAC,QAEIH,EAAAC,OAAAD,EAAiBC,MAAI1X,MAAUyX,EAACC,MAAM1X,KAAQ0X,MACpDtU,KAAA8T,eAAAO,EAAAC,MAAA1X,KAAA0X,MAAAE,QACMH,EAAAC,OAAAD,EAAiBC,MAAI1X,KAC3BoD,KAAA8T,eAAAO,EAAAC,MAAA1X,KAAA4X,QACMH,EAAAzX,MAAAyX,EAAczX,KAAO0X,MAC3BtU,KAAA8T,eAAAO,EAAAzX,KAAA0X,MAAAE,QACMH,EAAAzX,MAAAyX,EAAczX,KAAO4X,QAC3BxU,KAAA8T,eAAAO,EAAAzX,KAAA4X,QAEAxU,KAAA8T,eAAAO,MAIejU,UAAY2S,kBAAgB,WAC1C/S,KAAIwR,OAAKiD,aAAO3a,gBACuB,SAArCkG,KAAKwR,OAAOiD,aAAa5a,YAI1BmG,KAAAwR,OAAAiD,aAAA5a,UAAA6a,EAAA9a,sBAAAoG,KAAAwR,OAAAiD,aAAA5a,UAAAmG,KAAAwR,OAAAiD,aAAA3a,uBAGIkG,KAAAwR,OAAAiD,aAAqB3a,cAC3BkG,KAAA2U,sBAGC3U,KAAIwR,OAAKiB,YAAO3Y,eACc,SAA5BkG,KAAIwR,OAAKiB,YAAO5Y,YACdmG,KAAKwR,OAAOiB,YAAYmC,eAIzB5U,KAAAwR,OAAAiB,YAAA5Y,UAAA6a,EAAA9a,sBAAAoG,KAAAwR,OAAAiB,YAAAmC,eAAA5U,KAAAwR,OAAAiB,YAAA3Y,gBAECkG,KAAKwR,OAAOiB,YAAYmC,eAAY5U,KAAAwR,OAAAiB,YAAmB5Y,UAIxDmG,KAAAwR,OAAAiB,YAAA5Y,UAAA6a,EAAA9a,sBAAAoG,KAAAwR,OAAAiB,YAAA5Y,UAAAmG,KAAAwR,OAAAiB,YAAA3Y,iBAMHkG,KAAKwR,OAAOiD,aAAa7Z,YACzBoF,KAAEwR,OAAKiD,aAAO7Z,WAAaN,OAAA,KAE3B0F,KAAKwR,OAAOiD,aAAaI,qBAA0E,IAApD7U,KAAKwR,OAAAiD,aAAsBI,oBAAYva,UACvF0F,KAAAwR,OAAAiD,aAAAI,oBAAA7U,KAAA8U,sBAAA9U,KAAAwR,OAAAiD,aAAA7Z,aAICoF,KAAKwR,OAAOiB,YAAY7X,YACxBoF,KAAEwR,OAAKiB,YAAO7X,WAAYN,OAAA,KAE1B0F,KAAKwR,OAAOiB,YAAYoC,qBAAyE,IAAnD7U,KAAKwR,OAAAiB,YAAsBoC,oBAAYva,UACtF0F,KAAAwR,OAAAiB,YAAAoC,oBAAA7U,KAAA8U,sBAAA9U,KAAAwR,OAAAiB,YAAA7X,gBAIWwF,UAAA4S,mBAAqC,WACjDhT,KAAKwR,OAAOK,kBAAkBvP,MAAQtC,KAAKwR,OAAOK,kBAAkBvP,MAAMyI,QAAQ,eAAc,kBACjG/K,KAAAwR,OAAAK,kBAAAvP,MAAAtC,KAAAwR,OAAAK,kBAAAvP,MAAAyI,QAAA,+IAGC1L,OACOC,EAAoB,YAD3BD,CAC2BW,KAAA,SAAejE,UACxCiE,KAAKwR,OAAOiD,aAAa/D,iBACzB1Q,KAAKwR,OAAOiD,aAAa/D,kBACzB1Q,KAAAoQ,sBACApQ,KAAAwR,OAAAiD,aAAOjE,iBACR,oGAMmBpQ,UAAK8S,+BAA0B,WAEnD,IAAAT,EAAAzS,KAAAwR,OAAAiB,YAEEsC,EAAO,CACPC,MAAO,aACPC,MAAO,cACPC,QAAS,gBACTC,QAAA,YACAC,eAAQ,aACqBva,OAAA,uBAG7B,IAAIwa,KAAAN,EACFtC,EAAY4C,KACZ5C,EAAOsC,EAAYM,IAAK5C,EAAA4C,UACzB5C,EAAA4C,OAKSjV,UAAY2K,QAAQ,SAAeR,GAChD,OAAAvK,KAAAmQ,YAAApF,QAAAR,EAAAvK,KAAAsS,UAAAgD,MAAAC,eAGiBnV,UAASoV,kBAAK,cACH,wBAAzBxV,KAAAwR,OAAYlB,UACb,OAAAtQ,KAAAuR,mBAsBFnR,UAAAuT,iBAAA,WAlBC,IAAI7T,EAAME,QACRA,KAAA+Q,WAAO0E,uBAAAC,sBAIP1V,KAAK+Q,WAAa0E,uBAAQ9B,mBAAAjC,KAAA,SAAAiE,GAYzB,OAXD7V,EAAK8V,cAAYD,EACf7V,EAAK0R,OAAOC,cAA+B,kBAAhB3R,EAAK0R,OAAAlB,UAE3BxQ,EAAM0R,OAACC,cAA+B,wBAAX3R,EAAA0R,OAAWlB,YAC5CxQ,EAAA0R,OAAAC,aAAA3R,EAAAiR,WAAAC,4BAAA6E,4BAFA/V,EAAA0R,OAAAC,aAAA3R,EAAAiR,WAAA0E,uBAAAK,gBAKChW,EAAK0R,OAAOC,cAAe3R,EAAK8V,cAAgBtb,OAAO,IACxDwF,EAAA0R,OAAAC,aAAA3R,EAAA8V,cAAA,GAAApa,OAGAsE,EAAA8V,mBAIaxV,UAAS2V,qBAA0B,cACxB,wBAAzB/V,KAAAwR,OAAYlB,UACb,OAAAtQ,KAAAuR,gBAG0B,kBAAzBvR,KAAKwR,OAAOlB,YACZtQ,KAAKwR,OAAOiD,aAAalE,cAAgBvQ,KAAGoQ,qBAC5CpQ,KAAKwR,OAAOiD,aAAajE,iBAAmBxQ,KAACoQ,qBAC7CpQ,KAAKwR,OAAOiD,aAAahE,aAAazQ,KAAKoQ,qBAC3CpQ,KAAKwR,OAAOiD,aAAa9D,WAAW3Q,KAAMoQ,qBAC1CpQ,KAAKwR,OAAOiD,aAAauB,YAAa,GACtChW,KAAKwR,OAAOiD,aAAa7Z,WAAY,GACrCoF,KAAKwR,OAAOiD,aAAa5a,UAAU,GACnCmG,KAAKwR,OAAOiD,aAAawB,WAAY,GACtCjW,KAAAwR,OAAAiD,aAAArD,UAAA,OAKehR,UAAS8V,kBAAoB,SAAU5T,MAC9C,kBAAPtC,KAAAwR,OAAOlB,WAAAtQ,KAAA+Q,WAAA0E,uBAAAC,sBAIN1V,KAAA+Q,WAGAmF,kBAAWlW,KAAA+K,QAAoB/K,KAAKwR,OAAOC,cAACzR,KAAA+Q,WAAA0E,uBAAAK,iBAChD/D,MAAA/R,KAAAgS,qBAAAC,KAAAjS,UAIeI,UAAS+V,qBAAoB,SAAA7T,MACf,kBAA1BtC,KAAKwR,OAAOlB,WACZtQ,KAAKwR,OAAOiD,aAAalE,eAEzBvQ,KAAAwR,OAAOiD,aAAAlE,gBAAAvQ,KAAAoQ,4BAGNpQ,KAAA+Q,WAIAoF,qBAAWnW,KAAA+K,QAAqB/K,KAAKwR,OAAOC,cAAAzR,KAAA+Q,WAAA0E,uBAAAK,gBAAA9V,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAlE,gBAChDwB,MAAA/R,KAAAgS,qBAAAC,KAAAjS,UAIeI,UAASgW,iBAAoB,SAAA9T,MACf,kBAA1BtC,KAAKwR,OAAOlB,WACZtQ,KAAKwR,OAAOiD,aAAalE,eACzBvQ,KAAKwR,OAAOiD,aAAalE,gBAAiBvQ,KAAAoQ,sBAC1CpQ,KAAKwR,OAAOiD,aAAajE,kBAEzBxQ,KAAAwR,OAAOiD,aAAAjE,mBAAAxQ,KAAAoQ,4BAINpQ,KAAA+Q,WAKAqF,iBAAWpW,KAAA+K,QAAA/K,KAAqBwR,OAAUC,cAAEzR,KAAA+Q,WAAA0E,uBAAAK,gBAAA9V,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAlE,eAAAvQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAjE,mBAChDuB,MAAA/R,KAAAgS,qBAAAC,KAAAjS,UAIeI,UAASiW,oBAAoB,cACf,kBAA1BrW,KAAKwR,OAAOlB,WACZtQ,KAAKwR,OAAOiD,aAAalE,eACzBvQ,KAAKwR,OAAOiD,aAAalE,gBAAiBvQ,KAAAoQ,sBAC1CpQ,KAAKwR,OAAOiD,aAAajE,kBACzBxQ,KAAKwR,OAAOiD,aAAajE,mBAAaxQ,KAAAoQ,sBACtCpQ,KAAKwR,OAAOiD,aAAahE,cAEzBzQ,KAAAwR,OAAOiD,aAAAhE,eAAAzQ,KAAAoQ,4BAINpQ,KAAA+Q,WAMAsF,oBAAWrW,KAAA+K,QAAqB/K,KAAKwR,OAAOC,cAAAzR,KAAA+Q,WAAA0E,uBAAAK,gBAAA9V,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAlE,eAAAvQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAjE,kBAAAxQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAhE,eAChDsB,MAAA/R,KAAAgS,qBAAAC,KAAAjS,UAIeI,UAASkW,eAAoB,cACf,kBAA1BtW,KAAKwR,OAAOlB,WACZtQ,KAAKwR,OAAOiD,aAAalE,eACzBvQ,KAAKwR,OAAOiD,aAAalE,gBAAiBvQ,KAAAoQ,sBAC1CpQ,KAAKwR,OAAOiD,aAAajE,kBACzBxQ,KAAKwR,OAAOiD,aAAajE,mBAAaxQ,KAAAoQ,sBACtCpQ,KAAKwR,OAAOiD,aAAahE,cACzBzQ,KAAKwR,OAAOiD,aAAahE,eAAgBzQ,KAAAoQ,sBACzCpQ,KAAKwR,OAAOiD,aAAa/D,iBAEzB1Q,KAAAwR,OAAOiD,aAAA/D,kBAAA1Q,KAAAoQ,4BAINpQ,KAAA+Q,WAOAuF,eAAWtW,KAAA+K,QAAA/K,KAAqBwR,OAAKC,cAAOzR,KAAA+Q,WAAA0E,uBAAAK,gBAAA9V,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAlE,eAAAvQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAjE,kBAAAxQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAhE,cAAAzQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAA/D,kBAChDqB,MAAA/R,KAAAgS,qBAAAC,KAAAjS,UAGaI,UAAamW,sBAAwB,WACjDvW,KAAKwR,OAAOiD,aAAajE,iBAAmBxQ,KAACoQ,qBAC7CpQ,KAAKwR,OAAOiD,aAAahE,aAAezQ,KAAGoQ,qBAC3CpQ,KAAKwR,OAAOiD,aAAa/D,gBAAkB1Q,KAAAoQ,qBAC3CpQ,KAAKwR,OAAOiD,aAAa9D,WAAW3Q,KAAMoQ,qBAC1CpQ,KAAKwR,OAAOiD,aAAauB,YAAa,GACtChW,KAAKwR,OAAOiD,aAAa7Z,WAAY,GACrCoF,KAAKwR,OAAOiD,aAAa5a,UAAU,GACnCmG,KAAKwR,OAAOiD,aAAawB,WAAY,GACrCjW,KAAKwR,OAAOiD,aAAGrD,UAAA,GAChBpR,KAAAuS,aAGanS,UAAaoW,yBAAoB,WAC7CxW,KAAKwR,OAAOiD,aAAahE,aAAezQ,KAAGoQ,qBAC3CpQ,KAAKwR,OAAOiD,aAAa/D,gBAAkB1Q,KAAAoQ,qBAC3CpQ,KAAKwR,OAAOiD,aAAa9D,WAAW3Q,KAAMoQ,qBAC1CpQ,KAAKwR,OAAOiD,aAAauB,YAAa,GACtChW,KAAKwR,OAAOiD,aAAa7Z,WAAY,GACrCoF,KAAKwR,OAAOiD,aAAa5a,UAAU,GACnCmG,KAAKwR,OAAOiD,aAAawB,WAAY,GACtCjW,KAAAwR,OAAAiD,aAAArD,UAAA,MAGahR,UAAaqW,qBAAuB,WAChDzW,KAAKwR,OAAOiD,aAAa/D,gBAAkB1Q,KAAAoQ,qBAC3CpQ,KAAKwR,OAAOiD,aAAa9D,WAAW3Q,KAAMoQ,qBAC1CpQ,KAAKwR,OAAOiD,aAAauB,YAAa,GACtChW,KAAKwR,OAAOiD,aAAa7Z,WAAY,GACrCoF,KAAKwR,OAAOiD,aAAa5a,UAAU,GACnCmG,KAAKwR,OAAOiD,aAAawB,WAAY,GACrCjW,KAAKwR,OAAOiD,aAAGrD,UAAA,GAChBpR,KAAAuS,aAGanS,UAAasW,yBAAkB,WAC3C1W,KAAKwR,OAAOiD,aAAa9D,WAAa3Q,KAAGoQ,qBACzCpQ,KAAKwR,OAAOiD,aAAawB,WAAY,GACtCjW,KAAAwR,OAAAiD,aAAArD,UAAA,MAgCAhR,UAAAuU,mBAAA,WA7BC,IAAI7U,EAAME,YACRA,KAAAwR,OAAOiD,aAAkB9D,YAAA3Q,KAAAwR,OAAAiD,aAAA9D,aAAA3Q,KAAAoQ,qBAIxBpQ,KAAA+Q,WAQA4F,kBAAM3W,KAAa+K,QAAA/K,KAAAwR,OAAAC,cAAAzR,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAlE,eAAAvQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAjE,kBAAAxQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAAhE,cAAAzQ,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAA/D,iBAAA1Q,KAAA+K,QAAA/K,KAAAwR,OAAAiD,aAAA9D,aAClBe,KAAK,SAAOkF,GAaZ,OAZA9W,EAAK0R,OAAOiD,aAAa5D,WAAW+F,EAAWC,mBAAgB,CAAAD,EAAAE,gBAC/DhX,EAAK0R,OAAOiD,aAAauB,YAAcY,EAAQE,eAC/ChX,EAAK0R,OAAOiD,aAAa7Z,WAAY,EAAAc,KAAO,OAAAF,MAAA,SAAA4G,OAAAwU,EAAAG,qBAE5CjX,EAAK0R,OAAOiD,aAAa5a,UAAA,OAEzBiG,EAAK0R,OAAOiD,aAAaI,oBAAsB/U,EAAAgV,sBAAW8B,EAAAG,qBAAA,IAC1DjX,EAAI0R,OAASiD,aAAWwB,WAAYW,EAAAX,WAClCW,EAAKX,WAAO3b,OAAa,IAC1BwF,EAAA0R,OAAAiD,aAAArD,UAAAwF,EAAAX,WAAA,GAAAza,OAGDsE,EAAAyS,YAELR,MAAA/R,KAAAgS,qBAAAC,KAAAjS,OA3BEgX,QAAAC,aA8BK7W,UAAkC0U,sBAAC,SAAAla,GACzC,IAAAia,EAAmB,GAMpB,SALUqC,QAAK,SAAaC,GACvB,SAAAA,EAAA3b,OACDqZ,EAAA1V,KAAAlE,EAAA,EAAAC,eAAAwZ,EAAA/Y,iCAAAwb,EAAA3b,WAGJqZ,KAGmBzU,UAAQgX,kBAAA,SAAAvd,EAAAe,SACjB,SAAPf,EAGI6a,EAAIha,qBAAAsF,KAAAmQ,YAAAkH,0BAAAtd,EAAAC,EAAAsD,IAAA1C,EAAA,SAAAE,GAAA,OAAA4Z,EAAA/Y,iCAAAb,EAAAU,UAAA,CACJ,KACA,KACA,MACA,MACA,KACA,KACA,MAEF,OAIL,MAGa4E,UAAAkX,4BAA2C,WACxD,OAAAtX,KAAAoX,kBAAApX,KAAAwR,OAAAiD,aAAA5a,UAAAmG,KAAAwR,OAAAiD,aAAA7Z,eAGawF,UAAAmX,kCAAmD,WAChE,OAAAvX,KAAAoX,kBAAApX,KAAAwR,OAAAiB,YAAA5Y,UAAAmG,KAAAwR,OAAAiB,YAAA7X,mCAgCDoV,EAAA5P,UAAA,yBACE,WACD,OAAAJ,KAAAmQ,YAAAb,UAAAhS,IAAA,SAAAC,GAAA,UAAAA,EAAAia,sBAAAC,cAAA,MAKkBrX,UAAKsX,2BAAqC,WAC3D,IAAItd,EAAS4F,KAAAmQ,YAAmBkH,gCAClB,MAAZjd,EAAOA,EAAKE,OAAA,GACb,KAEFF,KAGWgG,UAAWuX,0BAAkC,cACrD3X,KAAA+Q,WAAO6B,sBAAA8C,eAIV,OAAA1V,KAAA+Q,WAAA4G,4BAAA5F,MAAA/R,KAAAgS,qBAAAC,KAAAjS,UAGaI,UAAWwX,sBAA2B,WACnD,OAAA5X,KAAA+Q,WAAA6G,sBAAA5X,KAAAwR,OAAA2C,UAGa/T,UAAUyX,0BAAA,WACvB,OAAA7X,KAAAuS,aAgBAnS,UAAA0X,8BAAA,WAbC,IAAIhY,EAAME,QACRA,KAAAwR,OAAOiB,YAAA9B,YAAA3Q,KAAAwR,OAAAiB,YAAA9B,aAAA3Q,KAAAoQ,4BAINpQ,KAAA+Q,WACAgH,6BAAkG/X,KAAA+K,QAAA/K,KAAAwR,OAAAiB,YAAA9B,aACjGe,KAAK,SAAOsG,GAIZ,OAHAlY,EAAK0R,OAAOiB,YAAY5B,WAAamH,EAAQnB,kBAC7C/W,EAAK0R,OAAOiB,YAAYwD,WAAW+B,EAAUC,iBAC7CnY,EAAA0R,OAAYiB,YAAUuD,YAAAgC,EAAAlB,eACtBhX,EAAAyS,YAELR,MAAA/R,KAAAgS,qBAAAC,KAAAjS,UAeQI,UAAM8X,8BAAwB,SAAY5V,UAC/CvI,EAAeC,EAAAsD,IAAQ0C,KAAKwR,OAAQiB,YAAGwD,WAAA,SAAAkC,GACtC,OAAAzc,KAAAyc,EAAA3c,MAAA2c,QAIS/X,UAAYgY,wBAAmB,WAC3CpY,KAAKwR,OAAOiB,YAAGrB,UAAA,OAChBpR,KAAAuS,aAGanS,UAAYiY,iBAAuB,WAChDrY,KAAAwR,OAAAiB,YAAAvB,UAAAlR,KAAAwR,OAAAiB,YAAAvB,YAGiB9Q,UAAYkY,oBAAkB,WACH,aAAzCtY,KAAKwR,OAAOiB,YAAY8F,eACxBvY,KAAKwR,OAAOiB,YAAYmC,eAAgB,IACxC5U,KAAKwR,OAAOiB,YAAY3Y,cAAY,SAIrCkG,KAAAwR,OAAAiB,YAAA5Y,UAAA6a,EAAA9a,sBAAAoG,KAAAwR,OAAAiB,YAAAmC,eAAA5U,KAAAwR,OAAAiB,YAAA3Y,iBAECkG,KAAKwR,OAAOiB,YAAYmC,eAAgB,GACzC5U,KAAAwR,OAAAiB,YAAA3Y,cAAA,OAIesG,UAAYoY,2BAA6B,WACvDxY,KAAKwR,OAAOiB,YAAY3Y,eAAYkG,KAAAwR,OAAAiB,YAAmBmC,iBAIxD5U,KAAAwR,OAAAiB,YAAA5Y,UAAA6a,EAAA9a,sBAAAoG,KAAAwR,OAAAiB,YAAAmC,eAAA5U,KAAAwR,OAAAiB,YAAA3Y,gBAEFkG,KAAAuS,WACHvC,EAAAyI,YAAC,6BA9nB0CzI,EAA3C,CAAkC0I,EAAA,aCjBlC,WAqDA,SAACC,KAAA,SA5CQC,wCAA2C,SAAMC,EAAA/C,EAAAvF,EAAAC,EAAAC,EAAAqI,OACpDtI,EAAWrE,MAAa,QAAW,IAAA7R,OAAA,GACnC,IAAMye,EAAAtI,EAAU/R,MAAA,KACVsa,EAAKxI,EAAiBjV,UAAaiV,EAAiByI,YAAY,KAAM,UAG1EJ,EAAA,IAAA/C,EAAA,mBAAAvF,EAA8D,cAD3DC,EAAWjV,UAAA,EAAciV,EAAAyI,YAAmB,MAE/C,IAAAF,EAAA,OAAAC,EAAA,IAAAD,EAAA,GACH,8DAAAD,SAICD,EAAA,IAAA/C,EAAA,mBAAAvF,EAA8D,cAC9DC,EAAA,IAAAC,EACH,8DAAAqI,KAWMI,mCAAqC,SAAYL,EAAA/C,EAAAvF,EAAAC,EAAAC,EAAAC,EAAAoI,OACpDtI,EAAWrE,MAAa,QAAW,IAAA7R,OAAA,GACnC,IAAMye,EAAAtI,EAAU/R,MAAA,KACVsa,EAAKxI,EAAiBjV,UAAaiV,EAAiByI,YAAY,KAAM,UAG1EJ,EAAA,IAAA/C,EAAA,mBAAAvF,EAA+D,cAD5DC,EAAWjV,UAAA,EAAciV,EAAAyI,YAAmB,MAC0B,IAAoBF,EAAA,OAAAC,EAC3F,IAAAD,EAAA,GAGL,+DAAAD,EAAA,oBAAAK,mBAAAzI,UAICmI,EAAA,IAAA/C,EAAA,mBAAAvF,EAA+D,cAAUC,EAAoB,IAAAC,EAIhG,+DAAAqI,EAAA,oBAAAK,mBAAAzI,IACFiI,EArDD,KCEA,WAqJA,SAACS,KAAA,SA/IwDC,oBAAG,SAAAC,EAAAC,EAAAC,GAExD,IAAI7H,EAAO,OACT2H,EACD,OAAA3H,MAGC,IAAKxW,EAAA,EAAAA,EAAAme,EAAE1c,KAAKpB,MAAOlB,OAAOa,QACxBpB,EAAcC,EAAAka,KAAAvC,EAAE,SAAU5X,EAAcC,EAAE6C,IAAAyc,EAAA1c,KAAgBpB,MAAAL,GAAAqe,KAAA,CAC1D,IAAMhe,EAAOzB,EAACC,EAAC6C,IAAIyc,EAAO1c,KAAKpB,MAAOL,GAAGqe,GAErC9d,EAAM3B,EAAAC,EAAA6C,IAAAyc,EAAA1c,KAAApB,MAAAL,GAAAoe,EAAA/d,KACR2D,KAAM,CACNzD,KAAKA,EACJF,UAIR,OAAAmW,KAGsD8H,mBAAG,SAAAH,EAAA9I,GAExD,IAAImB,EAAO,OACT2H,EACD,OAAA3H,MAGC,IAAIxW,EAAA,EAAOA,EAAKme,EAAO1c,KAAEpB,MAASlB,OAAAa,IAChCme,EAAK1c,KAAKpB,MAAAL,GAAAuB,OAAA8T,KACRrR,KAAM,CACNzD,KAAK4d,EAAQ1c,KAAKpB,MAAML,GAAGqc,KAC1Bhc,MAAA8d,EAAA1c,KAAApB,MAAAL,GAAAqc,OAKR,OAAA7F,KAGO+H,cAAmB,SAAQJ,EAAW3I,GAE5C,IAAIgJ,EAAS,2DACXL,QACE,CACAxC,eAAA,GACAD,kBAAmB8C,EACnB5C,oBAAc,GACdd,WAAA,QAIF2D,EAAO7f,EAAMC,EAACka,KAAEoF,EAAA1c,KAAapB,MAAK,SAAWV,GAC5C,OAAAf,EAAAC,EAAA6C,IAAA/B,EAAA,gBAAA6V,UAGD,CACAmG,eAAA8C,EAAmBC,uBACnBhD,kBAAmB+C,EAAEE,2BAA+BH,EACpD5C,oBAAYqC,EAAeW,gBAAgBH,EAAWI,sBAAA,IACtD/D,WAAAmD,EAAAa,gBAAAL,OAIIG,gBAAuB,SAAAC,GAC7B,IAAIpf,EAAC,UACHof,KAIU9C,QAAW,SAAAgD,GACnBA,EAAArgB,aACQsF,KAAA,CACNzD,KAAKgZ,EAAiBtZ,mCAAA8e,EAAArgB,WACrB2B,MAAA0e,EAAArgB,cAIRe,GAXEA,KAcKqf,gBAAwD,SAAAL,GAC9D,IAAI3D,EAAY,OACd2D,EAAO3D,YAAW,IAAA2D,EAAA3D,WAAA3b,OACnB,OAAA2b,EAGC2D,EAAWO,qBACZlE,EAAA9W,KAAA,CAAAzD,KAAA,OAAAF,MAAA,aAGC,IAAML,EAAI,EAAGA,EAAAye,EAAW3D,WAAc3b,OAAAa,IAAe,CACrD,IAAMO,EAAKke,EAAa3D,WAAW9a,GAAGif,eAEtC5e,EAAWoe,EAAK3D,WAAA9a,GAAAK,QACP2D,KAAK,CACZzD,KAAOA,GAAKF,EACXA,UAGN,OAAAya,KAGsDoE,mBAAG,SAAAf,GAExD,IAAI3H,EAAO,OACT2H,EACD,OAAA3H,MAGD,IAEOxW,EAAA,EAAAA,EAAAme,EAAE1c,KAAKpB,MAAOlB,OAAOa,IACxBpB,EAAUC,EAAAka,KAAAvC,EAAA,SAAA5X,EAAAC,EAAA6C,IAAAyc,EAAA1c,KAAApB,MAAAL,GAHQ,uBAIhBgE,KAAS,CACTzD,KAAK3B,EAAEC,EAAC6C,IAAIyc,EAAO1c,KAAKpB,MAAML,GAJhB,eAIoC,MAAApB,EAAAC,EAAA6C,IAAAyc,EAAA1c,KAAApB,MAAAL,GALlC,kBAMfK,MAAAzB,EAAAC,EAAA6C,IAAAyc,EAAA1c,KAAApB,MAAAL,GANe,oBAWvB,OAAAwW,KAGuD2I,4BAAG,SAAAhB,GAEzD,IAAI3H,EAAO,OACT2H,EACD,OAAA3H,MAGD,IAEOxW,EAAA,EAAAA,EAAAme,EAAE1c,KAAKpB,MAAOlB,OAAOa,IACxBpB,EAAUC,EAAAka,KAAAvC,EAAA,SAAA5X,EAAAC,EAAA6C,IAAAyc,EAAA1c,KAAApB,MAAAL,GAHQ,uBAIhBgE,KAAK,CACL6B,MAAOjH,EAAAC,EAAE6C,IAAIyc,EAAO1c,KAAKpB,MAAML,GAJjB,eAIoC,MAAApB,EAAAC,EAAA6C,IAAAyc,EAAA1c,KAAApB,MAAAL,GALlC,kBAMfK,MAAAzB,EAAAC,EAAA6C,IAAAyc,EAAA1c,KAAApB,MAAAL,GANe,oBAWvB,OAAAwW,GACFyH,EArJD,KC2OsB,oBAAAmB,EAAAC,GA5OpBxa,KAAAwa,iBACEC,0BAAc,cACZ,CACA,qCACA,kCACA,0CACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,8CACA,yCACA,6CACA,kCACA,2CACA,sCACA,kCACA,uCACA,mCACA,iCACA,+BACA,oCACA,4BACA,yCACA,wCACA,6BACA,yCACA,sCACA,gCACA,8BACA,+BACA,uCACA,gCACA,4BACA,2BACA,2CACA,4BACA,iDACA,gDACA,wDACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4CACA,uDACA,uEACA,8DACA,0CACA,4BACA,sBACA,4BACA,mDACD,iEAEC,CACA,qCACA,kCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,6BACA,yCACA,sCACA,gCACA,8BACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4BACA,sBACA,4BACA,mDACD,qEAEC,CACA,qCACA,gCACA,wBACA,2CACA,mDACA,oCACA,4C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","file":"azureMonitorPlugin.5d0a2c90becb1849160c.js","sourcesContent":["import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport default class TimeGrainConverter {\n  static createISO8601Duration(timeGrain: string | number, timeGrainUnit: any) {\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\n    if (_.includes(timeIntervals, timeGrainUnit)) {\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n    }\n\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n  }\n\n  static createISO8601DurationFromInterval(interval: string) {\n    const timeGrain = +interval.slice(0, interval.length - 1);\n    const unit = interval[interval.length - 1];\n\n    if (interval.indexOf('ms') > -1) {\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\n    }\n\n    if (interval[interval.length - 1] === 's') {\n      let toMinutes = (timeGrain * 60) % 60;\n\n      if (toMinutes < 1) {\n        toMinutes = 1;\n      }\n\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\n    }\n\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\n  }\n\n  static findClosestTimeGrain(interval: any, allowedTimeGrains: string[]) {\n    const timeGrains = _.filter(allowedTimeGrains, o => o !== 'auto');\n\n    let closest = timeGrains[0];\n    const intervalMs = kbn.interval_to_ms(interval);\n\n    for (let i = 0; i < timeGrains.length; i++) {\n      // abs (num - val) < abs (num - curr):\n      if (intervalMs > kbn.interval_to_ms(timeGrains[i])) {\n        if (i + 1 < timeGrains.length) {\n          closest = timeGrains[i + 1];\n        } else {\n          closest = timeGrains[i];\n        }\n      }\n    }\n\n    return closest;\n  }\n\n  static createTimeGrainFromISO8601Duration(duration: string) {\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\n  }\n\n  static timeUnitToText(value: number, unit: string) {\n    let text = '';\n\n    if (unit === 'S') {\n      text = 'second';\n    }\n    if (unit === 'M') {\n      text = 'minute';\n    }\n    if (unit === 'H') {\n      text = 'hour';\n    }\n    if (unit === 'D') {\n      text = 'day';\n    }\n\n    if (value > 1) {\n      return text + 's';\n    }\n\n    return text;\n  }\n\n  static createKbnUnitFromISO8601Duration(duration: string) {\n    if (duration === 'auto') {\n      return 'auto';\n    }\n\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\n  }\n\n  static timeUnitToKbn(value: number, unit: string) {\n    if (unit === 'S') {\n      return 's';\n    }\n    if (unit === 'M') {\n      return 'm';\n    }\n    if (unit === 'H') {\n      return 'h';\n    }\n    if (unit === 'D') {\n      return 'd';\n    }\n\n    return '';\n  }\n}\n","import React from 'react';\nimport Prism from 'prismjs';\nimport { Decoration } from 'slate';\nimport { Editor } from '@grafana/slate-react';\n\nconst TOKEN_MARK = 'prism-token';\n\nexport function setPrismTokens(language: string, field: string | number, values: any, alias = 'variable') {\n  Prism.languages[language][field] = {\n    alias,\n    pattern: new RegExp(`(?:^|\\\\s)(${values.join('|')})(?:$|\\\\s)`),\n  };\n}\n\n/**\n * Code-highlighting plugin based on Prism and\n * https://github.com/ianstormtaylor/slate/blob/master/examples/code-highlighting/index.js\n *\n * (Adapted to handle nested grammar definitions.)\n */\n\nexport default function PrismPlugin({ definition, language }: { definition: any; language: string }) {\n  if (definition) {\n    // Don't override exising modified definitions\n    Prism.languages[language] = Prism.languages[language] || definition;\n  }\n\n  return {\n    /**\n     * Render a Slate mark with appropiate CSS class names\n     *\n     * @param {Object} props\n     * @return {Element}\n     */\n\n    renderDecoration(props: any, editor: Editor, next: () => any): JSX.Element {\n      const { children, decoration } = props;\n      // Only apply spans to marks identified by this plugin\n      if (decoration.type !== TOKEN_MARK) {\n        return next();\n      }\n      const className = `token ${decoration.data.get('types')}`;\n      return <span className={className}>{children}</span>;\n    },\n\n    /**\n     * Decorate code blocks with Prism.js highlighting.\n     *\n     * @param {Node} node\n     * @return {Array}\n     */\n\n    decorateNode(node: any, editor: Editor, next: () => any): any[] {\n      if (node.type !== 'paragraph') {\n        return [];\n      }\n\n      const texts = node.getTexts().toArray();\n      const tstring = texts.map((t: { text: any }) => t.text).join('\\n');\n      const grammar = Prism.languages[language];\n      const tokens = Prism.tokenize(tstring, grammar);\n      const decorations: Decoration[] = [];\n      let startText = texts.shift();\n      let endText = startText;\n      let startOffset = 0;\n      let endOffset = 0;\n      let start = 0;\n\n      function processToken(token: any, acc?: string) {\n        // Accumulate token types down the tree\n        const types = `${acc || ''} ${token.type || ''} ${token.alias || ''}`;\n\n        // Add mark for token node\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          startText = endText;\n          startOffset = endOffset;\n\n          const content = typeof token === 'string' ? token : token.content;\n          const newlines = content.split('\\n').length - 1;\n          const length = content.length - newlines;\n          const end = start + length;\n\n          let available = startText.text.length - startOffset;\n          let remaining = length;\n\n          endOffset = startOffset + remaining;\n\n          while (available < remaining) {\n            endText = texts.shift();\n            remaining = length - available;\n            available = endText.text.length;\n            endOffset = remaining;\n          }\n\n          // Inject marks from up the tree (acc) as well\n          if (typeof token !== 'string' || acc) {\n            const range = node.createDecoration({\n              anchor: {\n                key: startText.key,\n                offset: startOffset,\n              },\n              focus: {\n                key: endText.key,\n                offset: endOffset,\n              },\n              type: TOKEN_MARK,\n              data: { types },\n            });\n\n            decorations.push(range);\n          }\n\n          start = end;\n        } else if (token.content && token.content.length) {\n          // Tokens can be nested\n          for (const subToken of token.content) {\n            processToken(subToken, types);\n          }\n        }\n      }\n\n      // Process top-level tokens\n      for (const token of tokens) {\n        processToken(token);\n      }\n\n      return decorations;\n    },\n  };\n}\n","import React from 'react';\n\nfunction scrollIntoView(el: any) {\n  if (!el || !el.offsetParent) {\n    return;\n  }\n  const container = el.offsetParent;\n  if (el.offsetTop > container.scrollTop + container.offsetHeight || el.offsetTop < container.scrollTop) {\n    container.scrollTop = el.offsetTop - container.offsetTop;\n  }\n}\n\nclass TypeaheadItem extends React.PureComponent<any, any> {\n  el: any;\n  componentDidUpdate(prevProps: any) {\n    if (this.props.isSelected && !prevProps.isSelected) {\n      scrollIntoView(this.el);\n    }\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  render() {\n    const { hint, isSelected, label, onClickItem } = this.props;\n    const className = isSelected ? 'typeahead-item typeahead-item__selected' : 'typeahead-item';\n    const onClick = () => onClickItem(label);\n    return (\n      <li ref={this.getRef} className={className} onClick={onClick}>\n        {label}\n        {hint && isSelected ? <div className=\"typeahead-item-hint\">{hint}</div> : null}\n      </li>\n    );\n  }\n}\n\nclass TypeaheadGroup extends React.PureComponent<any, any> {\n  render() {\n    const { items, label, selected, onClickItem } = this.props;\n    return (\n      <li className=\"typeahead-group\">\n        <div className=\"typeahead-group__title\">{label}</div>\n        <ul className=\"typeahead-group__list\">\n          {items.map((item: any) => {\n            const text = typeof item === 'object' ? item.text : item;\n            const label = typeof item === 'object' ? item.display || item.text : item;\n            return (\n              <TypeaheadItem\n                key={text}\n                onClickItem={onClickItem}\n                isSelected={selected.indexOf(text) > -1}\n                hint={item.hint}\n                label={label}\n              />\n            );\n          })}\n        </ul>\n      </li>\n    );\n  }\n}\n\nclass Typeahead extends React.PureComponent<any, any> {\n  render() {\n    const { groupedItems, menuRef, selectedItems, onClickItem } = this.props;\n    return (\n      <ul className=\"typeahead\" ref={menuRef}>\n        {groupedItems.map((g: any) => (\n          <TypeaheadGroup key={g.label} onClickItem={onClickItem} selected={selectedItems} {...g} />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Typeahead;\n","import PluginPrism from 'app/features/explore/slate-plugins/prism';\nimport { BracesPlugin, ClearPlugin, RunnerPlugin, NewlinePlugin } from '@grafana/ui';\nimport Typeahead from './typeahead';\nimport { getKeybindingSrv, KeybindingSrv } from 'app/core/services/keybindingSrv';\n\nimport { Block, Document, Text, Value, Editor as CoreEditor } from 'slate';\nimport { Editor } from '@grafana/slate-react';\nimport Plain from 'slate-plain-serializer';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport _ from 'lodash';\n\nfunction flattenSuggestions(s: any) {\n  return s ? s.reduce((acc: any, g: any) => acc.concat(g.items), []) : [];\n}\n\nexport const makeFragment = (text: string) => {\n  const lines = text.split('\\n').map((line: any) =>\n    Block.create({\n      type: 'paragraph',\n      nodes: [Text.create(line)],\n    } as any)\n  );\n\n  const fragment = Document.create({\n    nodes: lines,\n  });\n  return fragment;\n};\n\nexport const getInitialValue = (query: string) => Value.create({ document: makeFragment(query) });\n\nclass Portal extends React.Component<any, any> {\n  node: any;\n\n  constructor(props: any) {\n    super(props);\n    const { index = 0, prefix = 'query' } = props;\n    this.node = document.createElement('div');\n    this.node.classList.add(`slate-typeahead`, `slate-typeahead-${prefix}-${index}`);\n    document.body.appendChild(this.node);\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.node);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.node);\n  }\n}\n\nclass QueryField extends React.Component<any, any> {\n  menuEl: any;\n  plugins: any;\n  resetTimer: any;\n  keybindingSrv: KeybindingSrv = getKeybindingSrv();\n\n  constructor(props: any, context: any) {\n    super(props, context);\n\n    const { prismDefinition = {}, prismLanguage = 'kusto' } = props;\n\n    this.plugins = [\n      BracesPlugin(),\n      ClearPlugin(),\n      RunnerPlugin({ handler: props.onPressEnter }),\n      NewlinePlugin(),\n      PluginPrism({ definition: prismDefinition, language: prismLanguage }),\n    ];\n\n    this.state = {\n      labelKeys: {},\n      labelValues: {},\n      suggestions: [],\n      typeaheadIndex: 0,\n      typeaheadPrefix: '',\n      value: getInitialValue(props.initialQuery || ''),\n    };\n  }\n\n  componentDidMount() {\n    this.updateMenu();\n  }\n\n  componentWillUnmount() {\n    this.restoreEscapeKeyBinding();\n    clearTimeout(this.resetTimer);\n  }\n\n  componentDidUpdate() {\n    this.updateMenu();\n  }\n\n  onChange = ({ value }: { value: Value }) => {\n    const changed = value.document !== this.state.value.document;\n    this.setState({ value }, () => {\n      if (changed) {\n        // call typeahead only if query changed\n        requestAnimationFrame(() => this.onTypeahead());\n        this.onChangeQuery();\n      }\n    });\n  };\n\n  request = (url?: string) => {\n    if (this.props.request) {\n      return this.props.request(url);\n    }\n    return fetch(url);\n  };\n\n  onChangeQuery = () => {\n    // Send text change to parent\n    const { onQueryChange } = this.props;\n    if (onQueryChange) {\n      onQueryChange(Plain.serialize(this.state.value));\n    }\n  };\n\n  onKeyDown = (event: Event, editor: CoreEditor, next: Function) => {\n    const { typeaheadIndex, suggestions } = this.state;\n    const keyboardEvent = event as KeyboardEvent;\n\n    switch (keyboardEvent.key) {\n      case 'Escape': {\n        if (this.menuEl) {\n          keyboardEvent.preventDefault();\n          keyboardEvent.stopPropagation();\n          this.resetTypeahead();\n          return true;\n        }\n        break;\n      }\n\n      case ' ': {\n        if (keyboardEvent.ctrlKey) {\n          keyboardEvent.preventDefault();\n          this.onTypeahead(true);\n          return true;\n        }\n        break;\n      }\n\n      case 'Tab':\n      case 'Enter': {\n        if (this.menuEl) {\n          // Dont blur input\n          keyboardEvent.preventDefault();\n          if (!suggestions || !suggestions.length) {\n            return next();\n          }\n\n          // Get the currently selected suggestion\n          const flattenedSuggestions = flattenSuggestions(suggestions);\n          const selected = Math.abs(typeaheadIndex);\n          const selectedIndex = selected % flattenedSuggestions.length || 0;\n          const suggestion = flattenedSuggestions[selectedIndex];\n\n          return this.applyTypeahead(editor, suggestion);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        if (this.menuEl) {\n          // Select next suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: typeaheadIndex + 1 });\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        if (this.menuEl) {\n          // Select previous suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: Math.max(0, typeaheadIndex - 1) });\n        }\n        break;\n      }\n\n      default: {\n        // console.log('default key', event.key, event.which, event.charCode, event.locale, data.key);\n        break;\n      }\n    }\n    return next();\n  };\n\n  onTypeahead = (change = false, item?: any): boolean | void => {\n    return change;\n  };\n\n  applyTypeahead = (\n    editor?: CoreEditor,\n    suggestion?: { text: any; type: string; deleteBackwards: any }\n  ): { value: Value } => {\n    return { value: new Value() };\n  };\n\n  resetTypeahead = (callback?: () => void) => {\n    this.setState(\n      {\n        suggestions: [],\n        typeaheadIndex: 0,\n        typeaheadPrefix: '',\n        typeaheadContext: null,\n      },\n      callback\n    );\n  };\n\n  handleBlur = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onBlur } = this.props;\n    // If we dont wait here, menu clicks wont work because the menu\n    // will be gone.\n    this.resetTimer = setTimeout(this.resetTypeahead, 100);\n    if (onBlur) {\n      onBlur();\n    }\n    this.restoreEscapeKeyBinding();\n    return next();\n  };\n\n  handleFocus = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus();\n    }\n    // Don't go back to dashboard if Escape pressed inside the editor.\n    this.removeEscapeKeyBinding();\n    return next();\n  };\n\n  removeEscapeKeyBinding() {\n    this.keybindingSrv.unbind('esc', 'keydown');\n  }\n\n  restoreEscapeKeyBinding() {\n    this.keybindingSrv.setupGlobal();\n  }\n\n  onClickItem = (item: any) => {\n    const { suggestions } = this.state;\n    if (!suggestions || suggestions.length === 0) {\n      return;\n    }\n\n    // Manually triggering change\n    const change = this.applyTypeahead();\n    this.onChange(change);\n  };\n\n  updateMenu = () => {\n    const { suggestions } = this.state;\n    const menu = this.menuEl;\n    const selection = window.getSelection();\n    const node = selection.anchorNode;\n\n    // No menu, nothing to do\n    if (!menu) {\n      return;\n    }\n\n    // No suggestions or blur, remove menu\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      menu.removeAttribute('style');\n      return;\n    }\n\n    // Align menu overlay to editor node\n    if (node && node.parentElement) {\n      // Read from DOM\n      const rect = node.parentElement.getBoundingClientRect();\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      const screenHeight = window.innerHeight;\n\n      const menuLeft = rect.left + scrollX - 2;\n      const menuTop = rect.top + scrollY + rect.height + 4;\n      const menuHeight = screenHeight - menuTop - 10;\n\n      // Write DOM\n      requestAnimationFrame(() => {\n        menu.style.opacity = 1;\n        menu.style.top = `${menuTop}px`;\n        menu.style.left = `${menuLeft}px`;\n        menu.style.maxHeight = `${menuHeight}px`;\n      });\n    }\n  };\n\n  menuRef = (el: any) => {\n    this.menuEl = el;\n  };\n\n  renderMenu = () => {\n    const { portalPrefix } = this.props;\n    const { suggestions } = this.state;\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      return null;\n    }\n\n    // Guard selectedIndex to be within the length of the suggestions\n    let selectedIndex = Math.max(this.state.typeaheadIndex, 0);\n    const flattenedSuggestions = flattenSuggestions(suggestions);\n    selectedIndex = selectedIndex % flattenedSuggestions.length || 0;\n    const selectedKeys = (flattenedSuggestions.length > 0 ? [flattenedSuggestions[selectedIndex]] : []).map(i =>\n      typeof i === 'object' ? i.text : i\n    );\n\n    // Create typeahead in DOM root so we can later position it absolutely\n    return (\n      <Portal prefix={portalPrefix}>\n        <Typeahead\n          menuRef={this.menuRef}\n          selectedItems={selectedKeys}\n          onClickItem={this.onClickItem}\n          groupedItems={suggestions}\n        />\n      </Portal>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slate-query-field\">\n        {this.renderMenu()}\n        <Editor\n          autoCorrect={false}\n          onBlur={this.handleBlur}\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          onFocus={this.handleFocus}\n          placeholder={this.props.placeholder}\n          plugins={this.plugins}\n          spellCheck={false}\n          value={this.state.value}\n        />\n      </div>\n    );\n  }\n}\n\nexport default QueryField;\n","/* tslint:disable:max-line-length */\nexport const operatorTokens = [\n  { text: '!between', hint: 'Matches the input that is outside the inclusive range.' },\n  { text: 'as', hint: \"Binds a name to the operator's input tabular expression.\" },\n  { text: 'between', hint: 'Matches the input that is inside the inclusive range.' },\n  {\n    text: 'consume',\n    hint:\n      'The `consume` operator consumes the tabular data stream handed to it. It is\\r\\nmostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.',\n  },\n  { text: 'count', hint: 'Returns the number of records in the input record set.' },\n  { text: 'datatable', hint: 'Returns a table whose schema and values are defined in the query itself.' },\n  {\n    text: 'distinct',\n    hint: 'Produces a table with the distinct combination of the provided columns of the input table.',\n  },\n  { text: 'evaluate', hint: 'Invokes a service-side query extension (plugin).' },\n  { text: 'extend', hint: 'Create calculated columns and append them to the result set.' },\n  {\n    text: 'externaldata',\n    hint:\n      'Returns a table whose schema is defined in the query itself, and whose data is read from an external raw file.',\n  },\n  {\n    text: 'facet',\n    hint:\n      'Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.',\n  },\n  { text: 'find', hint: 'Finds rows that match a predicate across a set of tables.' },\n  { text: 'fork', hint: 'Runs multiple consumer operators in parallel.' },\n  { text: 'getschema', hint: 'Produce a table that represents a tabular schema of the input.' },\n  { text: 'in', hint: 'Filters a recordset based on the provided set of values.' },\n  { text: 'invoke', hint: 'Invokes lambda that receives the source of `invoke` as tabular parameter argument.' },\n  {\n    text: 'join',\n    hint:\n      'Merge the rows of two tables to form a new table by matching values of the specified column(s) from each table.',\n  },\n  { text: 'limit', hint: 'Return up to the specified number of rows.' },\n  { text: 'make-series', hint: 'Create series of specified aggregated values along specified axis.' },\n  { text: 'mvexpand', hint: 'Expands multi-value array or property bag.' },\n  { text: 'order', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'parse', hint: 'Evaluates a string expression and parses its value into one or more calculated columns.' },\n  {\n    text: 'print',\n    hint:\n      'Evaluates one or more scalar expressions and inserts the results (as a single-row table with as many columns as there are expressions) into the output.',\n  },\n  { text: 'project', hint: 'Select the columns to include, rename or drop, and insert new computed columns.' },\n  { text: 'project-away', hint: 'Select what  columns to exclude from the input.' },\n  { text: 'project-rename', hint: 'Renames columns in the result output.' },\n  { text: 'range', hint: 'Generates a single-column table of values.' },\n  { text: 'reduce', hint: 'Groups a set of strings together based on values similarity.' },\n  { text: 'render', hint: 'Instructs the user agent to render the results of the query in a particular way.' },\n  { text: 'sample', hint: 'Returns up to the specified number of random rows from the input table.' },\n  {\n    text: 'sample-distinct',\n    hint:\n      'Returns a single column that contains up to the specified number of distinct values of the requested column.',\n  },\n  { text: 'search', hint: 'The search operator provides a multi-table/multi-column search experience.' },\n  { text: 'serialize', hint: 'Marks that order of the input row set is safe for window functions usage.' },\n  { text: 'sort', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'summarize', hint: 'Produces a table that aggregates the content of the input table.' },\n  { text: 'take', hint: 'Return up to the specified number of rows.' },\n  { text: 'top', hint: 'Returns the first *N* records sorted by the specified columns.' },\n  {\n    text: 'top-hitters',\n    hint: 'Returns an approximation of the first *N* results (assuming skewed distribution of the input).',\n  },\n  {\n    text: 'top-nested',\n    hint: 'Produces hierarchical top results, where each level is a drill-down based on previous level values.',\n  },\n  { text: 'union', hint: 'Takes two or more tables and returns the rows of all of them.' },\n  { text: 'where', hint: 'Filters a table to the subset of rows that satisfy a predicate.' },\n];\n\nexport const functionTokens = [\n  { text: 'abs', hint: 'Calculates the absolute value of the input.' },\n  {\n    text: 'acos',\n    hint:\n      'Returns the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)) .',\n  },\n  { text: 'ago', hint: 'Subtracts the given timespan from the current UTC clock time.' },\n  { text: 'any', hint: 'Returns random non-empty value from the specified expression values.' },\n  {\n    text: 'arg_max',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'arg_min',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmax',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmin',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  { text: 'array_concat', hint: 'Concatenates a number of dynamic arrays to a single array.' },\n  { text: 'array_length', hint: 'Calculates the number of elements in a dynamic array.' },\n  { text: 'array_slice', hint: 'Extracts a slice of a dynamic array.' },\n  {\n    text: 'array_split',\n    hint:\n      'Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.',\n  },\n  {\n    text: 'asin',\n    hint: 'Returns the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)) .',\n  },\n  {\n    text: 'assert',\n    hint: 'Checks for a condition; if the condition is false, outputs error messages and fails the query.',\n  },\n  {\n    text: 'atan',\n    hint:\n      'Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)) .',\n  },\n  {\n    text: 'atan2',\n    hint:\n      'Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).',\n  },\n  { text: 'avg', hint: 'Calculates the average of *Expr* across the group.' },\n  {\n    text: 'avgif',\n    hint:\n      'Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  { text: 'bag_keys', hint: 'Enumerates all the root keys in a dynamic property-bag object.' },\n  { text: 'base64_decodestring', hint: 'Decodes a base64 string to a UTF-8 string' },\n  { text: 'base64_encodestring', hint: 'Encodes a string as base64 string' },\n  { text: 'beta_cdf', hint: 'Returns the standard cumulative beta distribution function.' },\n  { text: 'beta_inv', hint: 'Returns the inverse of the beta cumulative probability beta density function.' },\n  { text: 'beta_pdf', hint: 'Returns the probability density beta function.' },\n  { text: 'bin', hint: 'Rounds values down to an integer multiple of a given bin size.' },\n  {\n    text: 'bin_at',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin's starting point.\\r\\n(See also [`bin function`](./binfunction.md).)\",\n  },\n  {\n    text: 'bin_auto',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin size and starting point provided by a query property.\",\n  },\n  { text: 'binary_and', hint: 'Returns a result of the bitwise `and` operation between two values.' },\n  { text: 'binary_not', hint: 'Returns a bitwise negation of the input value.' },\n  { text: 'binary_or', hint: 'Returns a result of the bitwise `or` operation of the two values.' },\n  { text: 'binary_shift_left', hint: 'Returns binary shift left operation on a pair of numbers.' },\n  { text: 'binary_shift_right', hint: 'Returns binary shift right operation on a pair of numbers.' },\n  { text: 'binary_xor', hint: 'Returns a result of the bitwise `xor` operation of the two values.' },\n  { text: 'buildschema', hint: 'Returns the minimal schema that admits all values of *DynamicExpr*.' },\n  {\n    text: 'case',\n    hint: 'Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.',\n  },\n  {\n    text: 'ceiling',\n    hint: 'Calculates the smallest integer greater than, or equal to, the specified numeric expression.',\n  },\n  { text: 'cluster', hint: 'Changes the reference of the query to a remote cluster.' },\n  {\n    text: 'coalesce',\n    hint: 'Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.',\n  },\n  { text: 'cos', hint: 'Returns the cosine function.' },\n  { text: 'cot', hint: 'Calculates the trigonometric cotangent of the specified angle, in radians.' },\n  {\n    text: 'count',\n    hint:\n      'Returns a count of the records per summarization group (or in total if summarization is done without grouping).',\n  },\n  { text: 'countif', hint: 'Returns a count of rows for which *Predicate* evaluates to `true`.' },\n  {\n    text: 'countof',\n    hint: 'Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches do not.',\n  },\n  { text: 'current_principal', hint: 'Returns the current principal running this query.' },\n  {\n    text: 'cursor_after',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  {\n    text: 'cursor_before_or_at',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  { text: 'database', hint: 'Changes the reference of the query to a specific database within the cluster scope.' },\n  {\n    text: 'datetime_add',\n    hint:\n      'Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).',\n  },\n  {\n    text: 'datetime_diff',\n    hint: 'Calculates calendarian difference between two [datetime](./scalar-data-types/datetime.md) values.',\n  },\n  { text: 'datetime_part', hint: 'Extracts the requested date part as an integer value.' },\n  { text: 'dayofmonth', hint: 'Returns the integer number representing the day number of the given month' },\n  { text: 'dayofweek', hint: 'Returns the integer number of days since the preceding Sunday, as a `timespan`.' },\n  { text: 'dayofyear', hint: 'Returns the integer number represents the day number of the given year.' },\n  { text: 'dcount', hint: 'Returns an estimate of the number of distinct values of *Expr* in the group.' },\n  {\n    text: 'dcount_hll',\n    hint:\n      'Calculates the dcount from hll results (which was generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).',\n  },\n  {\n    text: 'dcountif',\n    hint:\n      'Returns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'degrees',\n    hint:\n      'Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`',\n  },\n  { text: 'distance', hint: 'Returns the distance between two points in meters.' },\n  { text: 'endofday', hint: 'Returns the end of the day containing the date, shifted by an offset, if provided.' },\n  { text: 'endofmonth', hint: 'Returns the end of the month containing the date, shifted by an offset, if provided.' },\n  { text: 'endofweek', hint: 'Returns the end of the week containing the date, shifted by an offset, if provided.' },\n  { text: 'endofyear', hint: 'Returns the end of the year containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'estimate_data_size',\n    hint: 'Returns an estimated data size of the selected columns of the tabular expression.',\n  },\n  { text: 'exp', hint: 'The base-e exponential function of x, which is e raised to the power x: e^x.' },\n  {\n    text: 'exp10',\n    hint: 'The base-10 exponential function of x, which is 10 raised to the power x: 10^x.  \\r\\n**Syntax**',\n  },\n  { text: 'exp2', hint: 'The base-2 exponential function of x, which is 2 raised to the power x: 2^x.' },\n  {\n    text: 'extent_id',\n    hint: 'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\n  },\n  {\n    text: 'extent_tags',\n    hint:\n      'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record resides in.',\n  },\n  { text: 'extract', hint: 'Get a match for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extract_all', hint: 'Get all matches for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extractjson', hint: 'Get a specified element out of a JSON text using a path expression.' },\n  { text: 'floor', hint: 'An alias for [`bin()`](binfunction.md).' },\n  { text: 'format_datetime', hint: 'Formats a datetime parameter based on the format pattern parameter.' },\n  { text: 'format_timespan', hint: 'Formats a timespan parameter based on the format pattern parameter.' },\n  { text: 'gamma', hint: 'Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)' },\n  { text: 'getmonth', hint: 'Get the month number (1-12) from a datetime.' },\n  { text: 'gettype', hint: 'Returns the runtime type of its single argument.' },\n  { text: 'getyear', hint: 'Returns the year part of the `datetime` argument.' },\n  { text: 'hash', hint: 'Returns a hash value for the input value.' },\n  { text: 'hash_sha256', hint: 'Returns a sha256 hash value for the input value.' },\n  { text: 'hll', hint: 'Calculates the Intermediate results of [dcount](dcount-aggfunction.md) across the group.' },\n  {\n    text: 'hll_merge',\n    hint: 'Merges hll results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).',\n  },\n  { text: 'hourofday', hint: 'Returns the integer number representing the hour number of the given date' },\n  {\n    text: 'iff',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'iif',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'indexof',\n    hint: 'Function reports the zero-based index of the first occurrence of a specified string within input string.',\n  },\n  { text: 'ingestion_time', hint: \"Retrieves the record's `$IngestionTime` hidden `datetime` column, or null.\" },\n  {\n    text: 'iscolumnexists',\n    hint:\n      'Returns a boolean value indicating if the given string argument exists in the schema produced by the preceding tabular operator.',\n  },\n  { text: 'isempty', hint: 'Returns `true` if the argument is an empty string or is null.' },\n  { text: 'isfinite', hint: 'Returns whether input is a finite value (is neither infinite nor NaN).' },\n  { text: 'isinf', hint: 'Returns whether input is an infinite (positive or negative) value.' },\n  { text: 'isnan', hint: 'Returns whether input is Not-a-Number (NaN) value.' },\n  { text: 'isnotempty', hint: 'Returns `true` if the argument is not an empty string nor it is a null.' },\n  { text: 'isnotnull', hint: 'Returns `true` if the argument is not null.' },\n  {\n    text: 'isnull',\n    hint:\n      'Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.',\n  },\n  { text: 'log', hint: 'Returns the natural logarithm function.' },\n  { text: 'log10', hint: 'Returns the common (base-10) logarithm function.' },\n  { text: 'log2', hint: 'Returns the base-2 logarithm function.' },\n  {\n    text: 'loggamma',\n    hint: 'Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)',\n  },\n  {\n    text: 'make_datetime',\n    hint: 'Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.',\n  },\n  {\n    text: 'make_dictionary',\n    hint: 'Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *Expr* in the group.',\n  },\n  { text: 'make_string', hint: 'Returns the string generated by the Unicode characters.' },\n  {\n    text: 'make_timespan',\n    hint: 'Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.',\n  },\n  { text: 'makelist', hint: 'Returns a `dynamic` (JSON) array of all the values of *Expr* in the group.' },\n  {\n    text: 'makeset',\n    hint: 'Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.',\n  },\n  {\n    text: 'materialize',\n    hint:\n      'Allows caching a sub-query result during the time of query execution in a way that other subqueries can reference the partial result.',\n  },\n  { text: 'max', hint: 'Returns the maximum value across the group.' },\n  { text: 'max_of', hint: 'Returns the maximum value of several evaluated numeric expressions.' },\n  {\n    text: 'merge_tdigests',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`merge_tdigests()`](merge-tdigests-aggfunction.md)).',\n  },\n  { text: 'min', hint: 'Returns the minimum value agross the group.' },\n  { text: 'min_of', hint: 'Returns the minimum value of several evaluated numeric expressions.' },\n  { text: 'monthofyear', hint: 'Returns the integer number represents the month number of the given year.' },\n  {\n    text: 'next',\n    hint:\n      'Returns the value of a column in a row that it at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  { text: 'not', hint: 'Reverses the value of its `bool` argument.' },\n  {\n    text: 'now',\n    hint:\n      'Returns the current UTC clock time, optionally offset by a given timespan.\\r\\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.',\n  },\n  { text: 'pack', hint: 'Creates a `dynamic` object (property bag) from a list of names and values.' },\n  {\n    text: 'pack_all',\n    hint: 'Creates a `dynamic` object (property bag) from all the columns of the tabular expression.',\n  },\n  { text: 'pack_array', hint: 'Packs all input values into a dynamic array.' },\n  { text: 'parse_ipv4', hint: 'Converts input to integer (signed 64-bit) number representation.' },\n  {\n    text: 'parse_json',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/)) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md). \\r\\nIt is superior to using [extractjson() function](./extractjsonfunction.md)\\r\\nwhen you need to extract more than one element of a JSON compound object.',\n  },\n  {\n    text: 'parse_path',\n    hint:\n      'Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path: \\r\\nScheme, RootPath, DirectoryPath, DirectoryName, FileName, Extension, AlternateDataStreamName.\\r\\nIn addition to the simple paths with both types of slashes, supports paths with schemas (e.g. \"file://...\"), shared paths (e.g. \"\\\\\\\\shareddrive\\\\users...\"), long paths (e.g \"\\\\\\\\?\\\\C:...\"\"), alternate data streams (e.g. \"file1.exe:file2.exe\")',\n  },\n  {\n    text: 'parse_url',\n    hint:\n      'Parses an absolute URL `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains all parts of the URL (Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment).',\n  },\n  {\n    text: 'parse_urlquery',\n    hint:\n      'Parses a url query `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains the Query parameters.',\n  },\n  {\n    text: 'parse_user_agent',\n    hint:\n      \"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",\n  },\n  { text: 'parse_version', hint: 'Converts input string representation of version to a comparable decimal number.' },\n  {\n    text: 'parse_xml',\n    hint:\n      'Interprets a `string` as a XML value, converts the value to a [JSON value](https://json.org/) and returns the value as  [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  {\n    text: 'percentile',\n    hint:\n      'Returns an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by *Expr*. \\r\\nThe accuracy depends on the density of population in the region of the percentile.',\n  },\n  {\n    text: 'percentile_tdigest',\n    hint:\n      'Calculates the percentile result from tdigest results (which was generated by [tdigest](tdigest-aggfunction.md) or [merge-tdigests](merge-tdigests-aggfunction.md))',\n  },\n  {\n    text: 'percentrank_tdigest',\n    hint:\n      \"Calculates the approximate rank of the value in a set where rank is expressed as percentage of set's size. \\r\\nThis function can be viewed as the inverse of the percentile.\",\n  },\n  { text: 'pi', hint: 'Returns the constant value of Pi (π).' },\n  { text: 'point', hint: 'Returns a dynamic array representation of a point.' },\n  { text: 'pow', hint: 'Returns a result of raising to power' },\n  {\n    text: 'prev',\n    hint:\n      'Returns the value of a column in a row that it at some offset prior to the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'radians',\n    hint:\n      'Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`',\n  },\n  { text: 'rand', hint: 'Returns a random number.' },\n  { text: 'range', hint: 'Generates a dynamic array holding a series of equally-spaced values.' },\n  { text: 'repeat', hint: 'Generates a dynamic array holding a series of equal values.' },\n  { text: 'replace', hint: 'Replace all regex matches with another string.' },\n  { text: 'reverse', hint: 'Function makes reverse of input string.' },\n  { text: 'round', hint: 'Returns the rounded source to the specified precision.' },\n  {\n    text: 'row_cumsum',\n    hint:\n      'Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'row_number',\n    hint:\n      \"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\",\n  },\n  { text: 'series_add', hint: 'Calculates the element-wise addition of two numeric series inputs.' },\n  { text: 'series_decompose', hint: 'Applies a decomposition transformation on a series.' },\n  {\n    text: 'series_decompose_anomalies',\n    hint:\n      'Anomaly Detection based on series decomposition (refer to [series_decompose()](series-decomposefunction.md))',\n  },\n  { text: 'series_decompose_forecast', hint: 'Forecast based on series decomposition.' },\n  { text: 'series_divide', hint: 'Calculates the element-wise division of two numeric series inputs.' },\n  {\n    text: 'series_equals',\n    hint: 'Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_fill_backward', hint: 'Performs backward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_const', hint: 'Replaces missing values in a series with a specified constant value.' },\n  { text: 'series_fill_forward', hint: 'Performs forward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_linear', hint: 'Performs linear interpolation of missing values in a series.' },\n  { text: 'series_fir', hint: 'Applies a Finite Impulse Response filter on a series.' },\n  {\n    text: 'series_fit_2lines',\n    hint: 'Applies two segments linear regression on a series, returning multiple columns.',\n  },\n  {\n    text: 'series_fit_2lines_dynamic',\n    hint: 'Applies two segments linear regression on a series, returning dynamic object.',\n  },\n  { text: 'series_fit_line', hint: 'Applies linear regression on a series, returning multiple columns.' },\n  { text: 'series_fit_line_dynamic', hint: 'Applies linear regression on a series, returning dynamic object.' },\n  {\n    text: 'series_greater',\n    hint: 'Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.',\n  },\n  {\n    text: 'series_greater_equals',\n    hint: 'Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_iir', hint: 'Applies a Infinite Impulse Response filter on a series.' },\n  { text: 'series_less', hint: 'Calculates the element-wise less (`<`) logic operation of two numeric series inputs.' },\n  {\n    text: 'series_less_equals',\n    hint: 'Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_multiply', hint: 'Calculates the element-wise multiplication of two numeric series inputs.' },\n  {\n    text: 'series_not_equals',\n    hint: 'Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_outliers', hint: 'Scores anomaly points in a series.' },\n  { text: 'series_periods_detect', hint: 'Finds the most significant periods that exist in a time series.' },\n  {\n    text: 'series_periods_validate',\n    hint: 'Checks whether a time series contains periodic patterns of given lengths.',\n  },\n  {\n    text: 'series_seasonal',\n    hint: 'Calculates the seasonal component of a series according to the detected or given seasonal period.',\n  },\n  { text: 'series_stats', hint: 'Returns statistics for a series in multiple columns.' },\n  { text: 'series_stats_dynamic', hint: 'Returns statistics for a series in dynamic object.' },\n  { text: 'series_subtract', hint: 'Calculates the element-wise subtraction of two numeric series inputs.' },\n  { text: 'sign', hint: 'Sign of a numeric expression' },\n  { text: 'sin', hint: 'Returns the sine function.' },\n  {\n    text: 'split',\n    hint:\n      'Splits a given string according to a given delimiter and returns a string array with the contained substrings.',\n  },\n  { text: 'sqrt', hint: 'Returns the square root function.' },\n  { text: 'startofday', hint: 'Returns the start of the day containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'startofmonth',\n    hint: 'Returns the start of the month containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofweek',\n    hint: 'Returns the start of the week containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofyear',\n    hint: 'Returns the start of the year containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'stdev',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'stdevif',\n    hint:\n      'Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'stdevp',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'strcat', hint: 'Concatenates between 1 and 64 arguments.' },\n  { text: 'strcat_array', hint: 'Creates a concatenated string of array values using specified delimiter.' },\n  {\n    text: 'strcat_delim',\n    hint: 'Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.',\n  },\n  { text: 'strcmp', hint: 'Compares two strings.' },\n  { text: 'string_size', hint: 'Returns the size, in bytes, of the input string.' },\n  { text: 'strlen', hint: 'Returns the length, in characters, of the input string.' },\n  { text: 'strrep', hint: 'Repeats given [string](./scalar-data-types/string.md) provided amount of times.' },\n  {\n    text: 'substring',\n    hint: 'Extracts a substring from a source string starting from some index to the end of the string.',\n  },\n  { text: 'sum', hint: 'Calculates the sum of *Expr* across the group.' },\n  { text: 'sumif', hint: 'Returns a sum of *Expr* for which *Predicate* evaluates to `true`.' },\n  { text: 'table', hint: 'References specific table using an query-time evaluated string-expression.' },\n  { text: 'tan', hint: 'Returns the tangent function.' },\n  {\n    text: 'tdigest',\n    hint: 'Calculates the Intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.',\n  },\n  {\n    text: 'tdigest_merge',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).',\n  },\n  { text: 'tobool', hint: 'Converts input to boolean (signed 8-bit) representation.' },\n  { text: 'todatetime', hint: 'Converts input to [datetime](./scalar-data-types/datetime.md) scalar.' },\n  { text: 'todecimal', hint: 'Converts input to decimal number representation.' },\n  {\n    text: 'todouble',\n    hint: 'Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)',\n  },\n  {\n    text: 'todynamic',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  { text: 'toguid', hint: 'Converts input to [`guid`](./scalar-data-types/guid.md) representation.' },\n  { text: 'tohex', hint: 'Converts input to a hexadecimal string.' },\n  { text: 'toint', hint: 'Converts input to integer (signed 32-bit) number representation.' },\n  { text: 'tolong', hint: 'Converts input to long (signed 64-bit) number representation.' },\n  { text: 'tolower', hint: 'Converts input string to lower case.' },\n  { text: 'toscalar', hint: 'Returns a scalar constant value of the evaluated expression.' },\n  { text: 'tostring', hint: 'Converts input to a string representation.' },\n  { text: 'totimespan', hint: 'Converts input  to [timespan](./scalar-data-types/timespan.md) scalar.' },\n  { text: 'toupper', hint: 'Converts a string to upper case.' },\n  {\n    text: 'translate',\n    hint:\n      \"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\n  },\n  { text: 'treepath', hint: 'Enumerates all the path expressions that identify leaves in a dynamic object.' },\n  { text: 'trim', hint: 'Removes all leading and trailing matches of the specified regular expression.' },\n  { text: 'trim_end', hint: 'Removes trailing match of the specified regular expression.' },\n  { text: 'trim_start', hint: 'Removes leading match of the specified regular expression.' },\n  { text: 'url_decode', hint: 'The function converts encoded URL into a to regular URL representation.' },\n  {\n    text: 'url_encode',\n    hint: 'The function converts characters of the input URL into a format that can be transmitted over the Internet.',\n  },\n  {\n    text: 'variance',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'varianceif',\n    hint:\n      'Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'variancep',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'weekofyear', hint: 'Returns the integer number represents the week number.' },\n  {\n    text: 'welch_test',\n    hint: 'Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)',\n  },\n  {\n    text: 'zip',\n    hint:\n      'The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.',\n  },\n];\n\nexport const KEYWORDS = [\n  'by',\n  'on',\n  'contains',\n  'notcontains',\n  'containscs',\n  'notcontainscs',\n  'startswith',\n  'has',\n  'matches',\n  'regex',\n  'true',\n  'false',\n  'and',\n  'or',\n  'typeof',\n  'int',\n  'string',\n  'date',\n  'datetime',\n  'time',\n  'long',\n  'real',\n  '​boolean',\n  'bool',\n];\n\nexport const grafanaMacros = [\n  {\n    text: '$__timeFilter',\n    display: '$__timeFilter()',\n    hint: 'Macro that uses the selected timerange in Grafana to filter the query.',\n  },\n  {\n    text: '$__timeTo',\n    display: '$__timeTo()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T20:09:58.907Z).',\n  },\n  {\n    text: '$__timeFrom',\n    display: '$__timeFrom()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T18:09:58.907Z).',\n  },\n  {\n    text: '$__escapeMulti',\n    display: '$__escapeMulti()',\n    hint: 'Macro to escape multi-value template variables that contain illegal characters.',\n  },\n  { text: '$__contains', display: '$__contains()', hint: 'Macro for multi-value template variables.' },\n];\n\n// Kusto operators\n// export const OPERATORS = ['+', '-', '*', '/', '>', '<', '==', '<>', '<=', '>=', '~', '!~'];\n\nexport const DURATION = ['SECONDS', 'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS', 'YEARS'];\n\nconst tokenizer = {\n  comment: {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true,\n  },\n  'function-context': {\n    pattern: /[a-z0-9_]+\\([^)]*\\)?/i,\n    inside: {},\n  },\n  duration: {\n    pattern: new RegExp(`${DURATION.join('?|')}?`, 'i'),\n    alias: 'number',\n  },\n  builtin: new RegExp(`\\\\b(?:${functionTokens.map(f => f.text).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n  },\n  keyword: new RegExp(`\\\\b(?:${KEYWORDS.join('|')}|${operatorTokens.map(f => f.text).join('|')}|\\\\*)\\\\b`, 'i'),\n  boolean: /\\b(?:true|false)\\b/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  operator: /-|\\+|\\*|\\/|>|<|==|<=?|>=?|<>|!~|~|=|\\|/,\n  punctuation: /[{};(),.:]/,\n  variable: /(\\[\\[(.+?)\\]\\])|(\\$(.+?))\\b/,\n};\n\ntokenizer['function-context'].inside = {\n  argument: {\n    pattern: /[a-z0-9_]+(?=:)/i,\n    alias: 'symbol',\n  },\n  duration: tokenizer.duration,\n  number: tokenizer.number,\n  builtin: tokenizer.builtin,\n  string: tokenizer.string,\n  variable: tokenizer.variable,\n};\n\n// console.log(tokenizer.builtin);\n\nexport default tokenizer;\n\n// function escapeRegExp(str: string): string {\n//   return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n// }\n","import _ from 'lodash';\nimport Plain from 'slate-plain-serializer';\n\nimport QueryField from './query_field';\nimport debounce from 'lodash/debounce';\nimport { DOMUtil } from '@grafana/ui';\nimport { Editor as CoreEditor } from 'slate';\n\nimport { KEYWORDS, functionTokens, operatorTokens, grafanaMacros } from './kusto/kusto';\n// import '../sass/editor.base.scss';\n\nconst TYPEAHEAD_DELAY = 100;\n\ninterface Suggestion {\n  text: string;\n  deleteBackwards?: number;\n  type?: string;\n}\n\ninterface SuggestionGroup {\n  label: string;\n  items: Suggestion[];\n  prefixMatch?: boolean;\n  skipFilter?: boolean;\n}\n\ninterface KustoSchema {\n  Databases: {\n    Default?: KustoDBSchema;\n  };\n  Plugins?: any[];\n}\n\ninterface KustoDBSchema {\n  Name?: string;\n  Functions?: any;\n  Tables?: any;\n}\n\nconst defaultSchema: any = () => ({\n  Databases: {\n    Default: {},\n  },\n});\n\nconst cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%]/g, '').trim();\nconst wrapText = (text: string) => ({ text });\n\nexport default class KustoQueryField extends QueryField {\n  fields: any;\n  events: any;\n  schema: KustoSchema;\n\n  constructor(props: any, context: any) {\n    super(props, context);\n    this.schema = defaultSchema();\n\n    this.onTypeahead = debounce(this.onTypeahead, TYPEAHEAD_DELAY);\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.fetchSchema();\n  }\n\n  onTypeahead = (force = false) => {\n    const selection = window.getSelection();\n    if (selection.anchorNode) {\n      const wrapperNode = selection.anchorNode.parentElement;\n      if (wrapperNode === null) {\n        return;\n      }\n      const editorNode = wrapperNode.closest('.slate-query-field');\n      if (!editorNode || this.state.value.isBlurred) {\n        // Not inside this editor\n        return;\n      }\n\n      // DOM ranges\n      const range = selection.getRangeAt(0);\n      const text = selection.anchorNode.textContent;\n      if (text === null) {\n        return;\n      }\n      const offset = range.startOffset;\n      let prefix = cleanText(text.substr(0, offset));\n\n      // Model ranges\n      const modelOffset = this.state.value.anchorOffset;\n      const modelPrefix = this.state.value.anchorText.text.slice(0, modelOffset);\n\n      // Determine candidates by context\n      let suggestionGroups: SuggestionGroup[] = [];\n      const wrapperClasses = wrapperNode.classList;\n      let typeaheadContext: string | null = null;\n\n      // Built-in functions\n      if (wrapperClasses.contains('function-context')) {\n        typeaheadContext = 'context-function';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // where\n      } else if (modelPrefix.match(/(where\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-where';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // summarize by\n      } else if (modelPrefix.match(/(summarize\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize';\n        suggestionGroups = this.getFunctionSuggestions();\n      } else if (modelPrefix.match(/(summarize\\s(.+\\s)?by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // order by, top X by, ... by ...\n      } else if (modelPrefix.match(/(by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // join\n      } else if (modelPrefix.match(/(on\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-join-on';\n        suggestionGroups = this.getColumnSuggestions();\n      } else if (modelPrefix.match(/(join\\s+(\\(\\s+)?(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-join';\n        suggestionGroups = this.getTableSuggestions();\n\n        // distinct\n      } else if (modelPrefix.match(/(distinct\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-distinct';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // database()\n      } else if (modelPrefix.match(/(database\\(\\\"(\\w+)\\\"\\)\\.(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-database-table';\n        const db = this.getDBFromDatabaseFunction(modelPrefix);\n        console.log(db);\n        suggestionGroups = this.getTableSuggestions(db);\n        prefix = prefix.replace('.', '');\n\n        // new\n      } else if (normalizeQuery(Plain.serialize(this.state.value)).match(/^\\s*\\w*$/i)) {\n        typeaheadContext = 'context-new';\n        if (this.schema) {\n          suggestionGroups = this.getInitialSuggestions();\n        } else {\n          this.fetchSchema();\n          setTimeout(this.onTypeahead, 0);\n          return;\n        }\n\n        // built-in\n      } else if (prefix && !wrapperClasses.contains('argument') && !force) {\n        // Use only last typed word as a prefix for searching\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n          return;\n        }\n        prefix = getLastWord(prefix);\n        typeaheadContext = 'context-builtin';\n        suggestionGroups = this.getKeywordSuggestions();\n      } else if (force === true) {\n        typeaheadContext = 'context-builtin-forced';\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n        }\n        suggestionGroups = this.getKeywordSuggestions();\n      }\n\n      let results = 0;\n      prefix = prefix.toLowerCase();\n      const filteredSuggestions = suggestionGroups\n        .map(group => {\n          if (group.items && prefix && !group.skipFilter) {\n            group.items = group.items.filter(c => c.text.length >= prefix.length);\n            if (group.prefixMatch) {\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) === 0);\n            } else {\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) > -1);\n            }\n          }\n          results += group.items.length;\n          return group;\n        })\n        .filter(group => group.items.length > 0);\n\n      // console.log('onTypeahead', selection.anchorNode, wrapperClasses, text, offset, prefix, typeaheadContext);\n      // console.log('onTypeahead', prefix, typeaheadContext, force);\n\n      this.setState({\n        typeaheadPrefix: prefix,\n        typeaheadContext,\n        typeaheadText: text,\n        suggestions: results > 0 ? filteredSuggestions : [],\n      });\n    }\n  };\n\n  applyTypeahead = (editor: CoreEditor, suggestion: { text: any; type: string; deleteBackwards: any }): CoreEditor => {\n    const { typeaheadPrefix, typeaheadContext, typeaheadText } = this.state;\n    let suggestionText = suggestion.text || suggestion;\n    const move = 0;\n\n    // Modify suggestion based on context\n\n    const nextChar = DOMUtil.getNextCharacter();\n    if (suggestion.type === 'function') {\n      if (!nextChar || nextChar !== '(') {\n        suggestionText += '(';\n      }\n    } else if (typeaheadContext === 'context-function') {\n      if (!nextChar || nextChar !== ')') {\n        suggestionText += ')';\n      }\n    } else {\n      if (!nextChar || nextChar !== ' ') {\n        suggestionText += ' ';\n      }\n    }\n\n    // Remove the current, incomplete text and replace it with the selected suggestion\n    const backward = suggestion.deleteBackwards || typeaheadPrefix.length;\n    const text = cleanText(typeaheadText);\n    const suffixLength = text.length - typeaheadPrefix.length;\n    const offset = typeaheadText.indexOf(typeaheadPrefix);\n    const midWord = typeaheadPrefix && ((suffixLength > 0 && offset > -1) || suggestionText === typeaheadText);\n    const forward = midWord ? suffixLength + offset : 0;\n\n    this.resetTypeahead(() =>\n      editor\n        .deleteBackward(backward)\n        .deleteForward(forward)\n        .insertText(suggestionText)\n        .moveForward(move)\n        .focus()\n    );\n\n    return editor;\n  };\n\n  // private _getFieldsSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterFromSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       skipFilter: true,\n  //       label: 'Events',\n  //       items: this.events.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables\n  //         .map(wrapText)\n  //         .map(suggestion => {\n  //           suggestion.deleteBackwards = 0;\n  //           return suggestion;\n  //         })\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterSelectSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Functions',\n  //       items: FUNCTIONS.map((s: any) => { s.type = 'function'; return s; })\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  private getInitialSuggestions(): SuggestionGroup[] {\n    return this.getTableSuggestions();\n  }\n\n  private getKeywordSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Keywords',\n        items: KEYWORDS.map(wrapText),\n      },\n      {\n        prefixMatch: true,\n        label: 'Operators',\n        items: operatorTokens,\n      },\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Tables',\n        items: _.map(this.schema.Databases.Default.Tables, (t: any) => ({ text: t.Name })),\n      },\n    ];\n  }\n\n  private getFunctionSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n    ];\n  }\n\n  getTableSuggestions(db = 'Default'): SuggestionGroup[] {\n    // @ts-ignore\n    if (this.schema.Databases[db]) {\n      return [\n        {\n          prefixMatch: true,\n          label: 'Tables',\n          // @ts-ignore\n          items: _.map(this.schema.Databases[db].Tables, (t: any) => ({ text: t.Name })),\n        },\n      ];\n    } else {\n      return [];\n    }\n  }\n\n  private getColumnSuggestions(): SuggestionGroup[] {\n    const table = this.getTableFromContext();\n    if (table) {\n      const tableSchema = this.schema.Databases.Default.Tables[table];\n      if (tableSchema) {\n        return [\n          {\n            prefixMatch: true,\n            label: 'Fields',\n            items: _.map(tableSchema.OrderedColumns, (f: any) => ({\n              text: f.Name,\n              hint: f.Type,\n            })),\n          },\n        ];\n      }\n    }\n    return [];\n  }\n\n  private getTableFromContext() {\n    const query = Plain.serialize(this.state.value);\n    const tablePattern = /^\\s*(\\w+)\\s*|/g;\n    const normalizedQuery = normalizeQuery(query);\n    const match = tablePattern.exec(normalizedQuery);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private getDBFromDatabaseFunction(prefix: string) {\n    const databasePattern = /database\\(\\\"(\\w+)\\\"\\)/gi;\n    const match = databasePattern.exec(prefix);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private async fetchSchema() {\n    let schema = await this.props.getSchema();\n    if (schema) {\n      if (schema.Type === 'AppInsights') {\n        schema = castSchema(schema);\n      }\n      this.schema = schema;\n    } else {\n      this.schema = defaultSchema();\n    }\n  }\n}\n\n/**\n * Cast schema from App Insights to default Kusto schema\n */\nfunction castSchema(schema: any) {\n  const defaultSchemaTemplate = defaultSchema();\n  defaultSchemaTemplate.Databases.Default = schema;\n  return defaultSchemaTemplate;\n}\n\nfunction normalizeQuery(query: string): string {\n  const commentPattern = /\\/\\/.*$/gm;\n  let normalizedQuery = query.replace(commentPattern, '');\n  normalizedQuery = normalizedQuery.replace('\\n', ' ');\n  return normalizedQuery;\n}\n\nfunction getLastWord(str: string): string {\n  const lastWordPattern = /(?:.*\\s)?([^\\s]+\\s*)$/gi;\n  const match = lastWordPattern.exec(str);\n  if (match && match.length > 1) {\n    return match[1];\n  }\n  return '';\n}\n","import KustoQueryField from './KustoQueryField';\nimport Kusto from './kusto/kusto';\n\nimport React, { Component } from 'react';\nimport coreModule from 'app/core/core_module';\n\ninterface EditorProps {\n  index: number;\n  placeholder?: string;\n  change: (value: string, index: number) => void;\n  variables: () => string[] | string[];\n  getSchema?: () => Promise<any>;\n  execute?: () => void;\n  query?: string;\n}\n\nclass Editor extends Component<EditorProps, any> {\n  static defaultProps = {\n    placeholder: 'Enter a query',\n  };\n\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      edited: false,\n      query: props.query || '',\n    };\n  }\n\n  onChangeQuery = (value: any) => {\n    const { index, change } = this.props;\n    const { query } = this.state;\n    const edited = query !== value;\n    this.setState({ edited, query: value });\n    if (change) {\n      change(value, index);\n    }\n  };\n\n  onPressEnter = () => {\n    const { execute } = this.props;\n    if (execute) {\n      execute();\n    }\n  };\n\n  render() {\n    const { variables, getSchema, placeholder } = this.props;\n    const { edited, query } = this.state;\n\n    return (\n      <div className=\"gf-form-input\" style={{ height: 'auto' }}>\n        <KustoQueryField\n          initialQuery={edited ? null : query}\n          onPressEnter={this.onPressEnter}\n          onQueryChange={this.onChangeQuery}\n          prismLanguage=\"kusto\"\n          prismDefinition={Kusto}\n          placeholder={placeholder}\n          templateVariables={variables}\n          getSchema={getSchema}\n        />\n      </div>\n    );\n  }\n}\n\ncoreModule.directive('kustoEditor', [\n  'reactDirective',\n  reactDirective => {\n    return reactDirective(Editor, [\n      'change',\n      'database',\n      'execute',\n      'query',\n      'variables',\n      'placeholder',\n      ['getSchema', { watchDepth: 'reference' }],\n    ]);\n  },\n]);\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n// import './css/query_editor.css';\nimport TimegrainConverter from './time_grain_converter';\nimport './editor/editor_component';\nimport kbn from 'app/core/utils/kbn';\n\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { auto, IPromise } from 'angular';\nimport { DataFrame } from '@grafana/data';\nimport { PanelEvents } from '@grafana/data';\n\nexport interface ResultFormat {\n  text: string;\n  value: string;\n}\n\nexport class AzureMonitorQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  defaultDropdownValue = 'select';\n\n  target: {\n    refId: string;\n    queryType: string;\n    subscription: string;\n    azureMonitor: {\n      resourceGroup: string;\n      resourceName: string;\n      metricDefinition: string;\n      metricNamespace: string;\n      metricName: string;\n      dimensionFilter: string;\n      timeGrain: string;\n      timeGrainUnit: string;\n      allowedTimeGrainsMs: number[];\n      dimensions: any[];\n      dimension: any;\n      top: string;\n      aggregation: string;\n      aggOptions: string[];\n      timeGrains: Array<{ text: string; value: string }>;\n    };\n    azureLogAnalytics: {\n      query: string;\n      resultFormat: string;\n      workspace: string;\n    };\n    appInsights: {\n      rawQuery: boolean;\n      // metric style query when rawQuery == false\n      metricName: string;\n      dimension: any;\n      dimensionFilter: string;\n      dimensions: string[];\n\n      aggOptions: string[];\n      aggregation: string;\n\n      timeGrainType: string;\n      timeGrainCount: string;\n      timeGrainUnit: string;\n      timeGrain: string;\n      timeGrains: Array<{ text: string; value: string }>;\n      allowedTimeGrainsMs: number[];\n\n      // query style query when rawQuery == true\n      rawQueryString: string;\n      timeColumn: string;\n      valueColumn: string;\n      segmentColumn: string;\n    };\n  };\n\n  defaults = {\n    queryType: 'Azure Monitor',\n    azureMonitor: {\n      resourceGroup: this.defaultDropdownValue,\n      metricDefinition: this.defaultDropdownValue,\n      resourceName: this.defaultDropdownValue,\n      metricNamespace: this.defaultDropdownValue,\n      metricName: this.defaultDropdownValue,\n      dimensionFilter: '*',\n      timeGrain: 'auto',\n      top: '10',\n      aggOptions: [] as string[],\n      timeGrains: [] as string[],\n    },\n    azureLogAnalytics: {\n      query: [\n        '//change this example to create your own time series query',\n        '<table name>                                                              ' +\n          '//the table to query (e.g. Usage, Heartbeat, Perf)',\n        '| where $__timeFilter(TimeGenerated)                                      ' +\n          '//this is a macro used to show the full chart’s time range, choose the datetime column here',\n        '| summarize count() by <group by column>, bin(TimeGenerated, $__interval) ' +\n          '//change “group by column” to a column in your table, such as “Computer”. ' +\n          'The $__interval macro is used to auto-select the time grain. Can also use 1h, 5m etc.',\n        '| order by TimeGenerated asc',\n      ].join('\\n'),\n      resultFormat: 'time_series',\n      workspace:\n        this.datasource && this.datasource.azureLogAnalyticsDatasource\n          ? this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace\n          : '',\n    },\n    appInsights: {\n      metricName: this.defaultDropdownValue,\n      rawQuery: false,\n      rawQueryString: '',\n      dimension: 'none',\n      timeGrain: 'auto',\n      timeColumn: 'timestamp',\n      valueColumn: '',\n    },\n  };\n\n  resultFormats: ResultFormat[];\n  workspaces: any[];\n  showHelp: boolean;\n  showLastQuery: boolean;\n  lastQuery: string;\n  lastQueryError?: string;\n  subscriptions: Array<{ text: string; value: string }>;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, private templateSrv: TemplateSrv) {\n    super($scope, $injector);\n\n    _.defaultsDeep(this.target, this.defaults);\n\n    this.migrateTimeGrains();\n\n    this.migrateToFromTimes();\n\n    this.migrateToDefaultNamespace();\n\n    this.migrateApplicationInsightsKeys();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n    this.getSubscriptions();\n    if (this.target.queryType === 'Azure Log Analytics') {\n      this.getWorkspaces();\n    }\n  }\n\n  onDataReceived(dataList: DataFrame[]) {\n    this.lastQueryError = undefined;\n    this.lastQuery = '';\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery && anySeriesFromQuery.meta) {\n      this.lastQuery = anySeriesFromQuery.meta.query;\n    }\n  }\n\n  onDataError(err: any) {\n    this.handleQueryCtrlError(err);\n  }\n\n  handleQueryCtrlError(err: any) {\n    if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n      return;\n    }\n\n    if (err.error && err.error.data && err.error.data.error && err.error.data.error.innererror) {\n      if (err.error.data.error.innererror.innererror) {\n        this.lastQueryError = err.error.data.error.innererror.innererror.message;\n      } else {\n        this.lastQueryError = err.error.data.error.innererror.message;\n      }\n    } else if (err.error && err.error.data && err.error.data.error) {\n      this.lastQueryError = err.error.data.error.message;\n    } else if (err.error && err.error.data) {\n      this.lastQueryError = err.error.data.message;\n    } else if (err.data && err.data.error) {\n      this.lastQueryError = err.data.error.message;\n    } else if (err.data && err.data.message) {\n      this.lastQueryError = err.data.message;\n    } else {\n      this.lastQueryError = err;\n    }\n  }\n\n  migrateTimeGrains() {\n    if (this.target.azureMonitor.timeGrainUnit) {\n      if (this.target.azureMonitor.timeGrain !== 'auto') {\n        this.target.azureMonitor.timeGrain = TimegrainConverter.createISO8601Duration(\n          this.target.azureMonitor.timeGrain,\n          this.target.azureMonitor.timeGrainUnit\n        );\n      }\n\n      delete this.target.azureMonitor.timeGrainUnit;\n      this.onMetricNameChange();\n    }\n\n    if (this.target.appInsights.timeGrainUnit) {\n      if (this.target.appInsights.timeGrain !== 'auto') {\n        if (this.target.appInsights.timeGrainCount) {\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrainCount,\n            this.target.appInsights.timeGrainUnit\n          );\n        } else {\n          this.target.appInsights.timeGrainCount = this.target.appInsights.timeGrain;\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrain,\n            this.target.appInsights.timeGrainUnit\n          );\n        }\n      }\n    }\n\n    if (\n      this.target.azureMonitor.timeGrains &&\n      this.target.azureMonitor.timeGrains.length > 0 &&\n      (!this.target.azureMonitor.allowedTimeGrainsMs || this.target.azureMonitor.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(this.target.azureMonitor.timeGrains);\n    }\n\n    if (\n      this.target.appInsights.timeGrains &&\n      this.target.appInsights.timeGrains.length > 0 &&\n      (!this.target.appInsights.allowedTimeGrainsMs || this.target.appInsights.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.appInsights.allowedTimeGrainsMs = this.convertTimeGrainsToMs(this.target.appInsights.timeGrains);\n    }\n  }\n\n  migrateToFromTimes() {\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ');\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ');\n  }\n\n  async migrateToDefaultNamespace() {\n    if (\n      this.target.azureMonitor.metricNamespace &&\n      this.target.azureMonitor.metricNamespace !== this.defaultDropdownValue &&\n      this.target.azureMonitor.metricDefinition\n    ) {\n      return;\n    }\n\n    this.target.azureMonitor.metricNamespace = this.target.azureMonitor.metricDefinition;\n  }\n\n  migrateApplicationInsightsKeys(): void {\n    const appInsights = this.target.appInsights as any;\n\n    // Migrate old app insights data keys to match other datasources\n    const mappings = {\n      xaxis: 'timeColumn',\n      yaxis: 'valueColumn',\n      spliton: 'segmentColumn',\n      groupBy: 'dimension',\n      groupByOptions: 'dimensions',\n      filter: 'dimensionFilter',\n    } as { [old: string]: string };\n\n    for (const old in mappings) {\n      if (appInsights[old]) {\n        appInsights[mappings[old]] = appInsights[old];\n        delete appInsights[old];\n      }\n    }\n  }\n\n  replace(variable: string) {\n    return this.templateSrv.replace(variable, this.panelCtrl.panel.scopedVars);\n  }\n\n  onQueryTypeChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n  }\n\n  getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any) => {\n      this.subscriptions = subs;\n      if (!this.target.subscription && this.target.queryType === 'Azure Monitor') {\n        this.target.subscription = this.datasource.azureMonitorDatasource.subscriptionId;\n      } else if (!this.target.subscription && this.target.queryType === 'Azure Log Analytics') {\n        this.target.subscription = this.datasource.azureLogAnalyticsDatasource.logAnalyticsSubscriptionId;\n      }\n\n      if (!this.target.subscription && this.subscriptions.length > 0) {\n        this.target.subscription = this.subscriptions[0].value;\n      }\n\n      return this.subscriptions;\n    });\n  }\n\n  onSubscriptionChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n\n    if (this.target.queryType === 'Azure Monitor') {\n      this.target.azureMonitor.resourceGroup = this.defaultDropdownValue;\n      this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\n      this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n      this.target.azureMonitor.metricName = this.defaultDropdownValue;\n      this.target.azureMonitor.aggregation = '';\n      this.target.azureMonitor.timeGrains = [];\n      this.target.azureMonitor.timeGrain = '';\n      this.target.azureMonitor.dimensions = [];\n      this.target.azureMonitor.dimension = '';\n    }\n  }\n\n  /* Azure Monitor Section */\n  getResourceGroups(query: any) {\n    if (this.target.queryType !== 'Azure Monitor' || !this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource\n      .getResourceGroups(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricDefinitions(query: any) {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue\n    ) {\n      return;\n    }\n    return this.datasource\n      .getMetricDefinitions(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getResourceNames(query: any) {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getResourceNames(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricNamespaces() {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\n      !this.target.azureMonitor.resourceName ||\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getMetricNamespaces(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricNames() {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\n      !this.target.azureMonitor.resourceName ||\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricNamespace ||\n      this.target.azureMonitor.metricNamespace === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getMetricNames(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName),\n        this.replace(this.target.azureMonitor.metricNamespace)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onResourceGroupChange() {\n    this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrains = [];\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n    this.refresh();\n  }\n\n  onMetricDefinitionChange() {\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrains = [];\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n  }\n\n  onResourceNameChange() {\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrains = [];\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n    this.refresh();\n  }\n\n  onMetricNamespacesChange() {\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n  }\n\n  onMetricNameChange(): IPromise<void> {\n    if (!this.target.azureMonitor.metricName || this.target.azureMonitor.metricName === this.defaultDropdownValue) {\n      return Promise.resolve();\n    }\n\n    return this.datasource\n      .getMetricMetadata(\n        this.replace(this.target.subscription),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName),\n        this.replace(this.target.azureMonitor.metricNamespace),\n        this.replace(this.target.azureMonitor.metricName)\n      )\n      .then((metadata: any) => {\n        this.target.azureMonitor.aggOptions = metadata.supportedAggTypes || [metadata.primaryAggType];\n        this.target.azureMonitor.aggregation = metadata.primaryAggType;\n        this.target.azureMonitor.timeGrains = [{ text: 'auto', value: 'auto' }].concat(metadata.supportedTimeGrains);\n        this.target.azureMonitor.timeGrain = 'auto';\n\n        this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(metadata.supportedTimeGrains || []);\n\n        this.target.azureMonitor.dimensions = metadata.dimensions;\n        if (metadata.dimensions.length > 0) {\n          this.target.azureMonitor.dimension = metadata.dimensions[0].value;\n        }\n\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  convertTimeGrainsToMs(timeGrains: Array<{ text: string; value: string }>) {\n    const allowedTimeGrainsMs: number[] = [];\n    timeGrains.forEach((tg: any) => {\n      if (tg.value !== 'auto') {\n        allowedTimeGrainsMs.push(kbn.interval_to_ms(TimegrainConverter.createKbnUnitFromISO8601Duration(tg.value)));\n      }\n    });\n    return allowedTimeGrainsMs;\n  }\n\n  generateAutoUnits(timeGrain: string, timeGrains: Array<{ value: string }>) {\n    if (timeGrain === 'auto') {\n      return TimegrainConverter.findClosestTimeGrain(\n        this.templateSrv.getBuiltInIntervalValue(),\n        _.map(timeGrains, o => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\n          '1m',\n          '5m',\n          '15m',\n          '30m',\n          '1h',\n          '6h',\n          '12h',\n          '1d',\n        ]\n      );\n    }\n\n    return '';\n  }\n\n  getAzureMonitorAutoInterval() {\n    return this.generateAutoUnits(this.target.azureMonitor.timeGrain, this.target.azureMonitor.timeGrains);\n  }\n\n  getApplicationInsightAutoInterval() {\n    return this.generateAutoUnits(this.target.appInsights.timeGrain, this.target.appInsights.timeGrains);\n  }\n\n  /* Azure Log Analytics */\n\n  getWorkspaces = () => {\n    return this.datasource.azureLogAnalyticsDatasource\n      .getWorkspaces(this.target.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n        if (list.length > 0 && !this.target.azureLogAnalytics.workspace) {\n          this.target.azureLogAnalytics.workspace = list[0].value;\n        }\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.target.azureLogAnalytics.workspace);\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.azureLogAnalytics.query = nextQuery;\n  };\n\n  onLogAnalyticsQueryExecute = () => {\n    this.panelCtrl.refresh();\n  };\n\n  get templateVariables() {\n    return this.templateSrv.variables.map(t => '$' + t.name);\n  }\n\n  /* Application Insights Section */\n\n  getAppInsightsAutoInterval() {\n    const interval = this.templateSrv.getBuiltInIntervalValue();\n    if (interval[interval.length - 1] === 's') {\n      return '1m';\n    }\n    return interval;\n  }\n\n  getAppInsightsMetricNames() {\n    if (!this.datasource.appInsightsDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.getAppInsightsMetricNames().catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getAppInsightsColumns() {\n    return this.datasource.getAppInsightsColumns(this.target.refId);\n  }\n\n  onAppInsightsColumnChange() {\n    return this.refresh();\n  }\n\n  onAppInsightsMetricNameChange() {\n    if (!this.target.appInsights.metricName || this.target.appInsights.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource\n      .getAppInsightsMetricMetadata(this.replace(this.target.appInsights.metricName))\n      .then((aggData: { supportedAggTypes: string[]; supportedGroupBy: string[]; primaryAggType: string }) => {\n        this.target.appInsights.aggOptions = aggData.supportedAggTypes;\n        this.target.appInsights.dimensions = aggData.supportedGroupBy;\n        this.target.appInsights.aggregation = aggData.primaryAggType;\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onAppInsightsQueryChange = (nextQuery: string) => {\n    this.target.appInsights.rawQueryString = nextQuery;\n  };\n\n  onAppInsightsQueryExecute = () => {\n    return this.refresh();\n  };\n\n  getAppInsightsQuerySchema = () => {\n    return this.datasource.appInsightsDatasource.getQuerySchema().catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  getAppInsightsGroupBySegments(query: any) {\n    return _.map(this.target.appInsights.dimensions, (option: string) => {\n      return { text: option, value: option };\n    });\n  }\n\n  resetAppInsightsGroupBy() {\n    this.target.appInsights.dimension = 'none';\n    this.refresh();\n  }\n\n  toggleEditorMode() {\n    this.target.appInsights.rawQuery = !this.target.appInsights.rawQuery;\n  }\n\n  updateTimeGrainType() {\n    if (this.target.appInsights.timeGrainType === 'specific') {\n      this.target.appInsights.timeGrainCount = '1';\n      this.target.appInsights.timeGrainUnit = 'minute';\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    } else {\n      this.target.appInsights.timeGrainCount = '';\n      this.target.appInsights.timeGrainUnit = '';\n    }\n  }\n\n  updateAppInsightsTimeGrain() {\n    if (this.target.appInsights.timeGrainUnit && this.target.appInsights.timeGrainCount) {\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    }\n    this.refresh();\n  }\n}\n","export default class UrlBuilder {\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n    );\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n          metricNamespace\n        )}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n        metricNamespace\n      )}`\n    );\n  }\n}\n","import _ from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        const value = _.get(result.data.value[i], valueFieldName);\n        const text = _.get(result.data.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (result.data.value[i].type === metricDefinition) {\n        list.push({\n          text: result.data.value[i].name,\n          value: result.data.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: any, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n\n    if (!result) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    const metricData: any = _.find(result.data.value, o => {\n      return _.get(o, 'name.value') === metricName;\n    });\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n      supportedTimeGrains: ResponseParser.parseTimeGrains(metricData.metricAvailabilities || []),\n      dimensions: ResponseParser.parseDimensions(metricData),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: any[]): Array<{ text: string; value: string }> {\n    const timeGrains: any[] = [];\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach(avail => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          text: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n    return timeGrains;\n  }\n\n  static parseDimensions(metricData: any): Array<{ text: string; value: string }> {\n    const dimensions: Array<{ text: string; value: string }> = [];\n    if (!metricData.dimensions || metricData.dimensions.length === 0) {\n      return dimensions;\n    }\n\n    if (!metricData.isDimensionRequired) {\n      dimensions.push({ text: 'None', value: 'None' });\n    }\n\n    for (let i = 0; i < metricData.dimensions.length; i++) {\n      const text = metricData.dimensions[i].localizedValue;\n      const value = metricData.dimensions[i].value;\n\n      dimensions.push({\n        text: !text ? value : text,\n        value: value,\n      });\n    }\n    return dimensions;\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          text: `${_.get(result.data.value[i], textFieldName)} - ${_.get(result.data.value[i], valueFieldName)}`,\n          value: _.get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${_.get(result.data.value[i], textFieldName)} - ${_.get(result.data.value[i], valueFieldName)}`,\n          value: _.get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces: any = {\n    azuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerInstance/containerGroups',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.ContainerService/managedClusters',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMariaDB/servers',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.DocumentDB/databaseAccounts',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.HDInsight/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Kusto/clusters',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Logic/integrationServiceEnvironments',\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\n      'Microsoft.NetApp/netAppAccounts/capacityPools/Volumes',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.Search/searchServices',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StorageSync/storageSyncServices',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    govazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    germanyazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    chinaazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n  };\n\n  constructor(private cloudName: string) {}\n\n  get(): string[] {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","import _ from 'lodash';\nimport UrlBuilder from './url_builder';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorResourceGroupsResponse,\n} from '../types';\nimport { DataQueryRequest, DataQueryResponseData, DataSourceInstanceSettings } from '@grafana/data';\n\nimport { TimeSeries, toDataFrame } from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport default class AzureMonitorDatasource {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  id: number;\n  subscriptionId: string;\n  baseUrl: string;\n  resourceGroup: string;\n  resourceName: string;\n  url: string;\n  defaultDropdownValue = 'select';\n  cloudName: string;\n  supportedMetricNamespaces: string[] = [];\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv\n  ) {\n    this.id = instanceSettings.id;\n    this.subscriptionId = instanceSettings.jsonData.subscriptionId;\n    this.cloudName = instanceSettings.jsonData.cloudName || 'azuremonitor';\n    this.baseUrl = `/${this.cloudName}/subscriptions`;\n    this.url = instanceSettings.url;\n\n    this.supportedMetricNamespaces = new SupportedNamespaces(this.cloudName).get();\n  }\n\n  isConfigured(): boolean {\n    return !!this.subscriptionId && this.subscriptionId.length > 0;\n  }\n\n  async query(options: DataQueryRequest<AzureMonitorQuery>): Promise<DataQueryResponseData[]> {\n    const queries = _.filter(options.targets, item => {\n      return (\n        item.hide !== true &&\n        item.azureMonitor.resourceGroup &&\n        item.azureMonitor.resourceGroup !== this.defaultDropdownValue &&\n        item.azureMonitor.resourceName &&\n        item.azureMonitor.resourceName !== this.defaultDropdownValue &&\n        item.azureMonitor.metricDefinition &&\n        item.azureMonitor.metricDefinition !== this.defaultDropdownValue &&\n        item.azureMonitor.metricName &&\n        item.azureMonitor.metricName !== this.defaultDropdownValue\n      );\n    }).map(target => {\n      const item = target.azureMonitor;\n\n      // fix for timeGrainUnit which is a deprecated/removed field name\n      if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n        item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n      }\n\n      const subscriptionId = this.templateSrv.replace(target.subscription || this.subscriptionId, options.scopedVars);\n      const resourceGroup = this.templateSrv.replace(item.resourceGroup, options.scopedVars);\n      const resourceName = this.templateSrv.replace(item.resourceName, options.scopedVars);\n      const metricNamespace = this.templateSrv.replace(item.metricNamespace, options.scopedVars);\n      const metricDefinition = this.templateSrv.replace(item.metricDefinition, options.scopedVars);\n      const timeGrain = this.templateSrv.replace((item.timeGrain || '').toString(), options.scopedVars);\n      const aggregation = this.templateSrv.replace(item.aggregation, options.scopedVars);\n      const top = this.templateSrv.replace(item.top || '', options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        datasourceId: this.id,\n        subscription: subscriptionId,\n        queryType: 'Azure Monitor',\n        type: 'timeSeriesQuery',\n        raw: false,\n        azureMonitor: {\n          resourceGroup: resourceGroup,\n          resourceName: resourceName,\n          metricDefinition: metricDefinition,\n          timeGrain: timeGrain,\n          allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n          metricName: this.templateSrv.replace(item.metricName, options.scopedVars),\n          metricNamespace:\n            metricNamespace && metricNamespace !== this.defaultDropdownValue ? metricNamespace : metricDefinition,\n          aggregation: aggregation,\n          dimension: this.templateSrv.replace(item.dimension, options.scopedVars),\n          top: top || '10',\n          dimensionFilter: this.templateSrv.replace(item.dimensionFilter, options.scopedVars),\n          alias: item.alias,\n          format: target.format,\n        },\n      };\n    });\n\n    if (!queries || queries.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const { data } = await this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n\n    const result: DataQueryResponseData[] = [];\n    if (data.results) {\n      Object['values'](data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        queryRes.series.forEach((series: any) => {\n          const timeSerie: TimeSeries = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          result.push(toDataFrame(timeSerie));\n        });\n      });\n      return result;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {}\n\n  metricFindQuery(query: string) {\n    const subscriptionsQuery = query.match(/^Subscriptions\\(\\)/i);\n    if (subscriptionsQuery) {\n      return this.getSubscriptions();\n    }\n\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\n    if (resourceGroupsQuery) {\n      return this.getResourceGroups(this.subscriptionId);\n    }\n\n    const resourceGroupsQueryWithSub = query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (resourceGroupsQueryWithSub) {\n      return this.getResourceGroups(this.toVariable(resourceGroupsQueryWithSub[1]));\n    }\n\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (metricDefinitionsQuery) {\n      if (!metricDefinitionsQuery[3]) {\n        return this.getMetricDefinitions(this.subscriptionId, this.toVariable(metricDefinitionsQuery[1]));\n      }\n    }\n\n    const metricDefinitionsQueryWithSub = query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricDefinitionsQueryWithSub) {\n      return this.getMetricDefinitions(\n        this.toVariable(metricDefinitionsQueryWithSub[1]),\n        this.toVariable(metricDefinitionsQueryWithSub[2])\n      );\n    }\n\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (resourceNamesQuery) {\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\n      return this.getResourceNames(this.subscriptionId, resourceGroup, metricDefinition);\n    }\n\n    const resourceNamesQueryWithSub = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\n    if (resourceNamesQueryWithSub) {\n      const subscription = this.toVariable(resourceNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(resourceNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(resourceNamesQueryWithSub[3]);\n      return this.getResourceNames(subscription, resourceGroup, metricDefinition);\n    }\n\n    const metricNamespaceQuery = query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamespaceQuery) {\n      const resourceGroup = this.toVariable(metricNamespaceQuery[1]);\n      const metricDefinition = this.toVariable(metricNamespaceQuery[2]);\n      const resourceName = this.toVariable(metricNamespaceQuery[3]);\n      return this.getMetricNamespaces(this.subscriptionId, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamespaceQueryWithSub = query.match(\n      /^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i\n    );\n    if (metricNamespaceQueryWithSub) {\n      const subscription = this.toVariable(metricNamespaceQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamespaceQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamespaceQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamespaceQueryWithSub[4]);\n      return this.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamesQuery) {\n      if (metricNamesQuery[3].indexOf(',') === -1) {\n        const resourceGroup = this.toVariable(metricNamesQuery[1]);\n        const metricDefinition = this.toVariable(metricNamesQuery[2]);\n        const resourceName = this.toVariable(metricNamesQuery[3]);\n        const metricNamespace = this.toVariable(metricNamesQuery[4]);\n        return this.getMetricNames(this.subscriptionId, resourceGroup, metricDefinition, resourceName, metricNamespace);\n      }\n    }\n\n    const metricNamesQueryWithSub = query.match(\n      /^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i\n    );\n\n    if (metricNamesQueryWithSub) {\n      const subscription = this.toVariable(metricNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamesQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamesQueryWithSub[4]);\n      const metricNamespace = this.toVariable(metricNamesQueryWithSub[5]);\n      return this.getMetricNames(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace);\n    }\n\n    return undefined;\n  }\n\n  toVariable(metric: string) {\n    return this.templateSrv.replace((metric || '').trim());\n  }\n\n  getSubscriptions(route?: string) {\n    const url = `/${route || this.cloudName}/subscriptions?api-version=2019-03-01`;\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups?api-version=${this.apiVersion}`;\n    return this.doRequest(url).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${\n      this.apiVersion\n    }`;\n    return this.doRequest(url)\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result: any) => {\n        return _.filter(result, t => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then((result: any) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result;\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${\n      this.apiVersion\n    }`;\n\n    return this.doRequest(url).then((result: any) => {\n      if (!_.startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        return ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n      for (let i = 0; i < list.length; i++) {\n        list[i].text += '/default';\n        list[i].value += '/default';\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiPreviewVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    });\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  testDatasource() {\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n      return {\n        status: 'error',\n        message: 'The Tenant Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n      return {\n        status: 'error',\n        message: 'The Client Id field is required.',\n      };\n    }\n\n    const url = `/${this.cloudName}/subscriptions?api-version=2019-03-01`;\n    return this.doRequest(url)\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Monitor service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Azure Monitor: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else if (error.data && error.data.error) {\n          message += error.data.error;\n        } else if (error.data) {\n          message += error.data;\n        } else {\n          message += 'Cannot connect to Azure Monitor REST API.';\n        }\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  isValidConfigField(field: string) {\n    return field && field.length > 0;\n  }\n\n  doRequest(url: string, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import _ from 'lodash';\nimport { dateTime } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor(private results: any) {}\n\n  parseQueryResult() {\n    let data: any = [];\n    let columns: any = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].query.raw) {\n        const xaxis = this.results[i].query.xaxis;\n        const yaxises = this.results[i].query.yaxis;\n        const spliton = this.results[i].query.spliton;\n        columns = this.results[i].result.data.Tables[0].Columns;\n        const rows = this.results[i].result.data.Tables[0].Rows;\n        data = _.concat(\n          data,\n          this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton)\n        );\n      } else {\n        const value = this.results[i].result.data.value;\n        const alias = this.results[i].query.alias;\n        data = _.concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\n      }\n    }\n    return data;\n  }\n\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\n    const data: any[] = [];\n    const columnsForDropdown = _.map(columns, column => ({ text: column.ColumnName, value: column.ColumnName }));\n\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\n    const yaxisesSplit = yaxises.split(',');\n    const yaxisColumns: any = {};\n    _.forEach(yaxisesSplit, yaxis => {\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\n    });\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\n    const convertTimestamp = xaxis === 'timestamp';\n\n    _.forEach(rows, row => {\n      _.forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\n        const bucket =\n          splitonColumn === -1\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\n        bucket.refId = query.refId;\n        bucket.query = query.query;\n        bucket.columnsForDropdown = columnsForDropdown;\n      });\n    });\n\n    return data;\n  }\n\n  parseQueryResultRow(query: any, value: any, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({\n        target: metricName,\n        datapoints: [[value[metricName][aggField], epoch]],\n        refId: query.refId,\n        query: query.query,\n      });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n      dataTarget.refId = query.refId;\n      dataTarget.query = query.query;\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n          bucket.refId = query.refId;\n          bucket.meta = {\n            query: query.query,\n          };\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment: { [x: string]: string }, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (const prop in segment) {\n      if (_.isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value: any) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data: any[], target: string) {\n    let dataTarget: any = _.find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj: any) {\n    const keys = _.keys(obj);\n    return _.indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment: { [x: string]: any }) {\n    const keys = _.keys(segment);\n\n    return _.filter(_.without(keys, 'start', 'end'), key => {\n      return _.isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj: any): string {\n    const keys = _.keys(dataObj);\n    return _.intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseMetricNames(result: { data: { metrics: any } }) {\n    const keys = _.keys(result.data.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.data.metrics[metricName];\n\n    if (!metric) {\n      throw Error('No data found for metric: ' + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  parseQuerySchema() {\n    const result: any = {\n      Type: 'AppInsights',\n      Tables: {},\n    };\n    if (this.results && this.results.data && this.results.data.Tables) {\n      for (let i = 0; i < this.results.data.Tables[0].Rows.length; i++) {\n        const column = this.results.data.Tables[0].Rows[i];\n        const columnTable = column[0];\n        const columnName = column[1];\n        const columnType = column[2];\n        if (result.Tables[columnTable]) {\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\n        } else {\n          result.Tables[columnTable] = {\n            Name: columnTable,\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\n          };\n        }\n      }\n    }\n    return result;\n  }\n\n  static toTextValueList(values: any) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^\\)]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from)\n      .startOf('minute')\n      .toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now)\n        .startOf('minute')\n        .toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until)\n        .startOf('minute')\n        .toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map(v => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import { TimeSeries, toDataFrame } from '@grafana/data';\nimport { DataQueryRequest, DataQueryResponseData, DataSourceInstanceSettings } from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport _ from 'lodash';\n\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureDataSourceJsonData, AzureMonitorQuery } from '../types';\nimport ResponseParser from './response_parser';\n\nexport interface LogAnalyticsColumn {\n  text: string;\n  value: string;\n}\nexport default class AppInsightsDatasource {\n  id: number;\n  url: string;\n  baseUrl: string;\n  version = 'beta';\n  applicationId: string;\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv\n  ) {\n    this.id = instanceSettings.id;\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId;\n    this.baseUrl = `/appinsights/${this.version}/apps/${this.applicationId}`;\n    this.url = instanceSettings.url;\n  }\n\n  isConfigured(): boolean {\n    return !!this.applicationId && this.applicationId.length > 0;\n  }\n\n  createRawQueryRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\n    if (item.xaxis && !item.timeColumn) {\n      item.timeColumn = item.xaxis;\n    }\n\n    if (item.yaxis && !item.valueColumn) {\n      item.valueColumn = item.yaxis;\n    }\n\n    if (item.spliton && !item.segmentColumn) {\n      item.segmentColumn = item.spliton;\n    }\n\n    return {\n      type: 'timeSeriesQuery',\n      raw: false,\n      appInsights: {\n        rawQuery: true,\n        rawQueryString: this.templateSrv.replace(item.rawQueryString, options.scopedVars),\n        timeColumn: item.timeColumn,\n        valueColumn: item.valueColumn,\n        segmentColumn: item.segmentColumn,\n      },\n    };\n  }\n\n  createMetricsRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrainCount) {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrainCount, item.timeGrainUnit);\n    } else if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    // migration for non-standard names\n    if (item.groupBy && !item.dimension) {\n      item.dimension = item.groupBy;\n    }\n\n    if (item.filter && !item.dimensionFilter) {\n      item.dimensionFilter = item.filter;\n    }\n\n    return {\n      type: 'timeSeriesQuery',\n      raw: false,\n      appInsights: {\n        rawQuery: false,\n        timeGrain: this.templateSrv.replace((item.timeGrain || '').toString(), options.scopedVars),\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: this.templateSrv.replace(item.metricName, options.scopedVars),\n        aggregation: this.templateSrv.replace(item.aggregation, options.scopedVars),\n        dimension: this.templateSrv.replace(item.dimension, options.scopedVars),\n        dimensionFilter: this.templateSrv.replace(item.dimensionFilter, options.scopedVars),\n        alias: item.alias,\n        format: target.format,\n      },\n    };\n  }\n\n  async query(options: DataQueryRequest<AzureMonitorQuery>): Promise<DataQueryResponseData[]> {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map((target: AzureMonitorQuery) => {\n      const item = target.appInsights;\n      let query: any;\n      if (item.rawQuery) {\n        query = this.createRawQueryRequest(item, options, target);\n      } else {\n        query = this.createMetricsRequest(item, options, target);\n      }\n      query.refId = target.refId;\n      query.intervalMs = options.intervalMs;\n      query.datasourceId = this.id;\n      query.queryType = 'Application Insights';\n      return query;\n    });\n\n    if (!queries || queries.length === 0) {\n      // @ts-ignore\n      return;\n    }\n\n    const { data } = await this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n\n    const result: DataQueryResponseData[] = [];\n    if (data.results) {\n      Object.values(data.results).forEach((queryRes: any) => {\n        if (queryRes.meta && queryRes.meta.columns) {\n          const columnNames = queryRes.meta.columns as string[];\n          this.logAnalyticsColumns[queryRes.refId] = _.map(columnNames, n => ({ text: n, value: n }));\n        }\n\n        if (!queryRes.series) {\n          return;\n        }\n\n        queryRes.series.forEach((series: any) => {\n          const timeSerie: TimeSeries = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          result.push(toDataFrame(timeSerie));\n        });\n      });\n      return result;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  doQueries(queries: any) {\n    return _.map(queries, query => {\n      return this.doRequest(query.url)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  annotationQuery(options: any) {}\n\n  metricFindQuery(query: string) {\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\n    if (appInsightsMetricNameQuery) {\n      return this.getMetricNames();\n    }\n\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (appInsightsGroupByQuery) {\n      const metricName = appInsightsGroupByQuery[1];\n      return this.getGroupBys(this.templateSrv.replace(metricName));\n    }\n\n    return undefined;\n  }\n\n  testDatasource() {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url)\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Application Insights service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  doRequest(url: any, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n\n  getMetricNames() {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then((result: any) => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then((result: any) => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n\n  getQuerySchema() {\n    const url = `${this.baseUrl}/query/schema`;\n    return this.doRequest(url).then((result: any) => {\n      const schema = new ResponseParser(result).parseQuerySchema();\n      // console.log(schema);\n      return schema;\n    });\n  }\n}\n","import _ from 'lodash';\nimport { dateTime } from '@grafana/data';\nimport {\n  AzureLogsVariable,\n  AzureLogsTableData,\n  KustoDatabase,\n  KustoFunction,\n  KustoTable,\n  KustoSchema,\n  KustoColumn,\n} from '../types';\nimport { TimeSeries, AnnotationEvent } from '@grafana/data';\n\nexport default class ResponseParser {\n  columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.data.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.data.tables[0].columns;\n      const rows = this.results[i].result.data.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = _.concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = _.concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    _.forEach(rows, row => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        query: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: _.map(columns, col => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        query: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    _.forEach(queryResult, result => {\n      _.forEach(_.flattenDeep(result.rows), row => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    _.forEach(queryResult, result => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      _.forEach(result.rows, row => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  parseSchemaResult(): KustoSchema {\n    return {\n      Plugins: [\n        {\n          Name: 'pivot',\n        },\n      ],\n      Databases: this.createSchemaDatabaseWithTables(),\n    };\n  }\n\n  createSchemaDatabaseWithTables(): { [key: string]: KustoDatabase } {\n    const databases = {\n      Default: {\n        Name: 'Default',\n        Tables: this.createSchemaTables(),\n        Functions: this.createSchemaFunctions(),\n      },\n    };\n\n    return databases;\n  }\n\n  createSchemaTables(): { [key: string]: KustoTable } {\n    const tables: { [key: string]: KustoTable } = {};\n\n    for (const table of this.results.tables) {\n      tables[table.name] = {\n        Name: table.name,\n        OrderedColumns: [],\n      };\n      for (const col of table.columns) {\n        tables[table.name].OrderedColumns.push(this.convertToKustoColumn(col));\n      }\n    }\n\n    return tables;\n  }\n\n  convertToKustoColumn(col: any): KustoColumn {\n    return {\n      Name: col.name,\n      Type: col.type,\n    };\n  }\n\n  createSchemaFunctions(): { [key: string]: KustoFunction } {\n    const functions: { [key: string]: KustoFunction } = {};\n\n    for (const func of this.results.functions) {\n      functions[func.name] = {\n        Name: func.name,\n        Body: func.body,\n        DocString: func.displayName,\n        Folder: func.category,\n        FunctionKind: 'Unknown',\n        InputParameters: [],\n        OutputColumns: [],\n      };\n    }\n\n    return functions;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = _.find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n}\n","import _ from 'lodash';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\nimport { DataSourceApi, DataQueryRequest, DataSourceInstanceSettings } from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { IQService } from 'angular';\n\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\n  azureMonitorDatasource: AzureMonitorDatasource;\n  appInsightsDatasource: AppInsightsDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private $q: IQService\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings, this.backendSrv, this.templateSrv);\n    this.appInsightsDatasource = new AppInsightsDatasource(instanceSettings, this.backendSrv, this.templateSrv);\n\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(\n      instanceSettings,\n      this.backendSrv,\n      this.templateSrv\n    );\n  }\n\n  async query(options: DataQueryRequest<AzureMonitorQuery>) {\n    const promises: any[] = [];\n    const azureMonitorOptions = _.cloneDeep(options);\n    const appInsightsOptions = _.cloneDeep(options);\n    const azureLogAnalyticsOptions = _.cloneDeep(options);\n\n    azureMonitorOptions.targets = _.filter(azureMonitorOptions.targets, ['queryType', 'Azure Monitor']);\n    appInsightsOptions.targets = _.filter(appInsightsOptions.targets, ['queryType', 'Application Insights']);\n    azureLogAnalyticsOptions.targets = _.filter(azureLogAnalyticsOptions.targets, ['queryType', 'Azure Log Analytics']);\n\n    if (azureMonitorOptions.targets.length > 0) {\n      const amPromise = this.azureMonitorDatasource.query(azureMonitorOptions);\n      if (amPromise) {\n        promises.push(amPromise);\n      }\n    }\n\n    if (appInsightsOptions.targets.length > 0) {\n      const aiPromise = this.appInsightsDatasource.query(appInsightsOptions);\n      if (aiPromise) {\n        promises.push(aiPromise);\n      }\n    }\n\n    if (azureLogAnalyticsOptions.targets.length > 0) {\n      const alaPromise = this.azureLogAnalyticsDatasource.query(azureLogAnalyticsOptions);\n      if (alaPromise) {\n        promises.push(alaPromise);\n      }\n    }\n\n    if (promises.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return Promise.all(promises).then(results => {\n      return { data: _.flatten(results) };\n    });\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  async metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const aiResult = this.appInsightsDatasource.metricFindQuery(query);\n    if (aiResult) {\n      return aiResult;\n    }\n\n    const amResult = this.azureMonitorDatasource.metricFindQuery(query);\n    if (amResult) {\n      return amResult;\n    }\n\n    const alaResult = this.azureLogAnalyticsDatasource.metricFindQuery(query);\n    if (alaResult) {\n      return alaResult;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async testDatasource() {\n    const promises: any[] = [];\n\n    if (this.azureMonitorDatasource.isConfigured()) {\n      promises.push(this.azureMonitorDatasource.testDatasource());\n    }\n\n    if (this.appInsightsDatasource.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    if (this.azureLogAnalyticsDatasource.isConfigured()) {\n      promises.push(this.azureLogAnalyticsDatasource.testDatasource());\n    }\n\n    if (promises.length === 0) {\n      return {\n        status: 'error',\n        message: `Nothing configured. At least one of the API's must be configured.`,\n        title: 'Error',\n      };\n    }\n\n    return Promise.all(promises).then(results => {\n      let status = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: _.upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(subscriptionId);\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(subscriptionId, resourceGroup);\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(subscriptionId, resourceGroup, metricDefinition);\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    return this.azureMonitorDatasource.getMetricNames(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace\n    );\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNamespaces(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName\n    );\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    return this.azureMonitorDatasource.getMetricMetadata(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      metricName\n    );\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName: string) {\n    return this.appInsightsDatasource.getMetricMetadata(metricName);\n  }\n\n  getAppInsightsColumns(refId: string | number) {\n    return this.appInsightsDatasource.logAnalyticsColumns[refId];\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n}\n","import _ from 'lodash';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport ResponseParser from './response_parser';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from '../types';\nimport { DataQueryRequest, DataSourceInstanceSettings } from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport default class AzureLogAnalyticsDatasource {\n  id: number;\n  url: string;\n  baseUrl: string;\n  applicationId: string;\n  azureMonitorUrl: string;\n  defaultOrFirstWorkspace: string;\n  subscriptionId: string;\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv\n  ) {\n    this.id = instanceSettings.id;\n    this.baseUrl = this.instanceSettings.jsonData.azureLogAnalyticsSameAs\n      ? '/sameasloganalyticsazure'\n      : `/loganalyticsazure`;\n    this.url = instanceSettings.url;\n    this.defaultOrFirstWorkspace = this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\n\n    this.setWorkspaceUrl();\n  }\n\n  isConfigured(): boolean {\n    return (\n      (!!this.instanceSettings.jsonData.logAnalyticsSubscriptionId &&\n        this.instanceSettings.jsonData.logAnalyticsSubscriptionId.length > 0) ||\n      !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs\n    );\n  }\n\n  setWorkspaceUrl() {\n    if (!!this.instanceSettings.jsonData.subscriptionId || !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\n      this.subscriptionId = this.instanceSettings.jsonData.subscriptionId;\n      const azureCloud = this.instanceSettings.jsonData.cloudName || 'azuremonitor';\n      this.azureMonitorUrl = `/${azureCloud}/subscriptions`;\n    } else {\n      this.subscriptionId = this.instanceSettings.jsonData.logAnalyticsSubscriptionId;\n      this.azureMonitorUrl = `/workspacesloganalytics/subscriptions`;\n    }\n  }\n\n  getWorkspaces(subscription: string) {\n    const subscriptionId = this.templateSrv.replace(subscription || this.subscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorUrl +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.doRequest(workspaceListUrl).then((response: any) => {\n      return (\n        _.map(response.data.value, val => {\n          return { text: val.name, value: val.properties.customerId };\n        }) || []\n      );\n    });\n  }\n\n  getSchema(workspace: string) {\n    if (!workspace) {\n      return Promise.resolve();\n    }\n    const url = `${this.baseUrl}/${workspace}/metadata`;\n\n    return this.doRequest(url).then((response: any) => {\n      return new ResponseParser(response.data).parseSchemaResult();\n    });\n  }\n\n  async query(options: DataQueryRequest<AzureMonitorQuery>) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(target => {\n      const item = target.azureLogAnalytics;\n\n      const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n        this.templateSrv.replace(item.query, options.scopedVars, this.interpolateVariable),\n        options,\n        'TimeGenerated'\n      );\n      const generated = querystringBuilder.generate();\n\n      const workspace = this.templateSrv.replace(item.workspace, options.scopedVars);\n\n      const url = `${this.baseUrl}/${workspace}/query?${generated.uriString}`;\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        url: url,\n        query: generated.rawQuery,\n        format: target.format,\n        resultFormat: item.resultFormat,\n      };\n    });\n\n    if (!queries || queries.length === 0) {\n      return;\n    }\n\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then(results => {\n      return new ResponseParser(results).parseQueryResult();\n    });\n  }\n\n  metricFindQuery(query: string) {\n    return this.getDefaultOrFirstWorkspace().then((workspace: any) => {\n      const queries: any[] = this.buildQuery(query, null, workspace);\n\n      const promises = this.doQueries(queries);\n\n      return Promise.all(promises)\n        .then(results => {\n          return new ResponseParser(results).parseToVariables();\n        })\n        .catch(err => {\n          if (\n            err.error &&\n            err.error.data &&\n            err.error.data.error &&\n            err.error.data.error.innererror &&\n            err.error.data.error.innererror.innererror\n          ) {\n            throw { message: err.error.data.error.innererror.innererror.message };\n          } else if (err.error && err.error.data && err.error.data.error) {\n            throw { message: err.error.data.error.message };\n          }\n        });\n    });\n  }\n\n  private buildQuery(query: string, options: any, workspace: any) {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      this.templateSrv.replace(query, {}, this.interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n    const querystring = querystringBuilder.generate().uriString;\n    const url = `${this.baseUrl}/${workspace}/query?${querystring}`;\n    const queries: any[] = [];\n    queries.push({\n      datasourceId: this.id,\n      url: url,\n      resultFormat: 'table',\n    });\n    return queries;\n  }\n\n  interpolateVariable(value: string, variable: { multi: any; includeAll: any }) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  getDefaultOrFirstWorkspace() {\n    if (this.defaultOrFirstWorkspace) {\n      return Promise.resolve(this.defaultOrFirstWorkspace);\n    }\n\n    return this.getWorkspaces(this.subscriptionId).then((workspaces: any[]) => {\n      this.defaultOrFirstWorkspace = workspaces[0].value;\n      return this.defaultOrFirstWorkspace;\n    });\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries: any[] = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then(results => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: any[]) {\n    return _.map(queries, query => {\n      return this.doRequest(query.url)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  doRequest(url: string, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n\n  testDatasource() {\n    const validationError = this.isValidConfig();\n    if (validationError) {\n      return validationError;\n    }\n\n    return this.getDefaultOrFirstWorkspace()\n      .then((ws: any) => {\n        const url = `${this.baseUrl}/${ws}/metadata`;\n\n        return this.doRequest(url);\n      })\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Log Analytics service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Azure Log Analytics: ';\n        if (error.config && error.config.url && error.config.url.indexOf('workspacesloganalytics') > -1) {\n          message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\n        }\n\n        message = this.getErrorMessage(message, error);\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  private getErrorMessage(message: string, error: any) {\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error && error.data.error.code) {\n      message += error.data.error.code + '. ' + error.data.error.message;\n    } else if (error.data && error.data.error) {\n      message += error.data.error;\n    } else if (error.data) {\n      message += error.data;\n    } else {\n      message += 'Cannot connect to Azure Log Analytics REST API.';\n    }\n    return message;\n  }\n\n  isValidConfig() {\n    if (this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\n      return undefined;\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsSubscriptionId)) {\n      return {\n        status: 'error',\n        message: 'The Subscription Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsTenantId)) {\n      return {\n        status: 'error',\n        message: 'The Tenant Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsClientId)) {\n      return {\n        status: 'error',\n        message: 'The Client Id field is required.',\n      };\n    }\n\n    return undefined;\n  }\n\n  isValidConfigField(field: string) {\n    return field && field.length > 0;\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Input, FormLabel, Select, Button } from '@grafana/ui';\n\nexport interface Props {\n  selectedAzureCloud?: string;\n  selectedSubscription?: string;\n  azureCloudOptions?: SelectableValue[];\n  tenantId: string;\n  clientId: string;\n  clientSecret: string;\n  clientSecretConfigured: boolean;\n  subscriptionOptions?: SelectableValue[];\n  onAzureCloudChange?: (value: SelectableValue<string>) => void;\n  onSubscriptionSelectChange?: (value: SelectableValue<string>) => void;\n  onTenantIdChange: (tenantId: string) => void;\n  onClientIdChange: (clientId: string) => void;\n  onClientSecretChange: (clientSecret: string) => void;\n  onResetClientSecret: () => void;\n  onLoadSubscriptions?: () => void;\n}\n\nexport interface State {\n  selectedAzureCloud?: string;\n  selectedSubscription: string;\n  tenantId: string;\n  clientId: string;\n  clientSecret: string;\n  clientSecretConfigured: boolean;\n}\n\nexport class AzureCredentialsForm extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const {\n      selectedAzureCloud,\n      selectedSubscription,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    } = this.props;\n\n    this.state = {\n      selectedAzureCloud,\n      selectedSubscription,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: Props) {\n    const { selectedAzureCloud, tenantId, clientId, clientSecret, clientSecretConfigured } = nextProps;\n    return {\n      selectedAzureCloud,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    };\n  }\n\n  render() {\n    const {\n      azureCloudOptions,\n      subscriptionOptions,\n      onAzureCloudChange,\n      onSubscriptionSelectChange,\n      onTenantIdChange,\n      onClientIdChange,\n      onClientSecretChange,\n      onResetClientSecret,\n      onLoadSubscriptions,\n    } = this.props;\n    const {\n      selectedAzureCloud,\n      selectedSubscription,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    } = this.state;\n    const hasRequiredFields = tenantId && clientId && (clientSecret || clientSecretConfigured);\n    const hasSubscriptions = onLoadSubscriptions && subscriptionOptions;\n    return (\n      <>\n        <div className=\"gf-form-group\">\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud.\">\n                  Azure Cloud\n                </FormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find(azureCloud => azureCloud.value === selectedAzureCloud)}\n                  options={azureCloudOptions}\n                  defaultValue={selectedAzureCloud}\n                  onChange={onAzureCloudChange}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-12\">Directory (tenant) ID</FormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={tenantId || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => onTenantIdChange(event.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-12\">Application (client) ID</FormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={clientId || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => onClientIdChange(event.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n          {clientSecretConfigured ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">Client Secret</FormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={onResetClientSecret}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">Client Secret</FormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={clientSecret || ''}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => onClientSecretChange(event.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {hasSubscriptions && (\n            <>\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <FormLabel className=\"width-12\">Default Subscription</FormLabel>\n                  <div className=\"width-25\">\n                    <Select\n                      value={subscriptionOptions.find(subscription => subscription.value === selectedSubscription)}\n                      options={subscriptionOptions}\n                      defaultValue={selectedSubscription}\n                      onChange={onSubscriptionSelectChange}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      type=\"button\"\n                      onClick={onLoadSubscriptions}\n                      disabled={!hasRequiredFields}\n                    >\n                      Load Subscriptions\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AzureCredentialsForm;\n","import React, { PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport interface Props {\n  datasourceConfig: any;\n  subscriptions: SelectableValue[];\n  onDatasourceUpdate: (config: any) => void;\n  onLoadSubscriptions: () => void;\n}\n\nexport interface State {\n  config: any;\n  azureClouds: SelectableValue[];\n  subscriptions: SelectableValue[];\n}\n\nexport class MonitorConfig extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { datasourceConfig } = this.props;\n\n    this.state = {\n      config: datasourceConfig,\n      azureClouds: [\n        { value: 'azuremonitor', label: 'Azure' },\n        { value: 'govazuremonitor', label: 'Azure US Government' },\n        { value: 'germanyazuremonitor', label: 'Azure Germany' },\n        { value: 'chinaazuremonitor', label: 'Azure China' },\n      ],\n      subscriptions: [],\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: props.datasourceConfig,\n      subscriptions: props.subscriptions,\n    };\n  }\n\n  onAzureCloudSelect = (cloudName: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        cloudName: cloudName.value,\n      },\n    });\n  };\n\n  onTenantIdChange = (tenantId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        tenantId,\n      },\n    });\n  };\n\n  onClientIdChange = (clientId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        clientId,\n      },\n    });\n  };\n\n  onClientSecretChange = (clientSecret: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        clientSecret,\n      },\n    });\n  };\n\n  onResetClientSecret = () => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      version: this.state.config.version + 1,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        clientSecret: false,\n      },\n    });\n  };\n\n  onSubscriptionSelect = (subscription: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        subscriptionId: subscription.value,\n      },\n    });\n  };\n\n  render() {\n    const { azureClouds, config, subscriptions } = this.state;\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Monitor Details</h3>\n        <AzureCredentialsForm\n          selectedAzureCloud={config.jsonData.cloudName}\n          azureCloudOptions={azureClouds}\n          subscriptionOptions={subscriptions}\n          selectedSubscription={config.jsonData.subscriptionId}\n          tenantId={config.jsonData.tenantId}\n          clientId={config.jsonData.clientId}\n          clientSecret={config.secureJsonData.clientSecret}\n          clientSecretConfigured={config.secureJsonFields.clientSecret}\n          onAzureCloudChange={this.onAzureCloudSelect}\n          onSubscriptionSelectChange={this.onSubscriptionSelect}\n          onTenantIdChange={this.onTenantIdChange}\n          onClientIdChange={this.onClientIdChange}\n          onClientSecretChange={this.onClientSecretChange}\n          onResetClientSecret={this.onResetClientSecret}\n          onLoadSubscriptions={this.props.onLoadSubscriptions}\n        />\n      </>\n    );\n  }\n}\n\nexport default MonitorConfig;\n","import React, { PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { Switch, FormLabel, Select, Button } from '@grafana/ui';\n\nexport interface Props {\n  datasourceConfig: any;\n  logAnalyticsSubscriptions: SelectableValue[];\n  logAnalyticsWorkspaces: SelectableValue[];\n  onDatasourceUpdate: (config: any) => void;\n  onLoadSubscriptions: (type?: string) => void;\n  onLoadWorkspaces: (type?: string) => void;\n}\n\nexport interface State {\n  config: any;\n  logAnalyticsSubscriptions: SelectableValue[];\n  logAnalyticsWorkspaces: SelectableValue[];\n}\n\nexport class AnalyticsConfig extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { datasourceConfig } = this.props;\n\n    this.state = {\n      config: datasourceConfig,\n      logAnalyticsSubscriptions: [],\n      logAnalyticsWorkspaces: [],\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: props.datasourceConfig,\n      logAnalyticsSubscriptions: props.logAnalyticsSubscriptions,\n      logAnalyticsWorkspaces: props.logAnalyticsWorkspaces,\n    };\n  }\n\n  onLogAnalyticsTenantIdChange = (logAnalyticsTenantId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        logAnalyticsTenantId,\n      },\n    });\n  };\n\n  onLogAnalyticsClientIdChange = (logAnalyticsClientId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        logAnalyticsClientId,\n      },\n    });\n  };\n\n  onLogAnalyticsClientSecretChange = (logAnalyticsClientSecret: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        logAnalyticsClientSecret,\n      },\n    });\n  };\n\n  onLogAnalyticsResetClientSecret = () => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      version: this.state.config.version + 1,\n      secureJsonFields: { ...this.state.config.secureJsonFields, logAnalyticsClientSecret: false },\n    });\n  };\n\n  onLogAnalyticsSubscriptionSelect = (logAnalyticsSubscription: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        logAnalyticsSubscriptionId: logAnalyticsSubscription.value,\n      },\n    });\n  };\n\n  onWorkspaceSelectChange = (logAnalyticsDefaultWorkspace: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        logAnalyticsDefaultWorkspace: logAnalyticsDefaultWorkspace.value,\n      },\n    });\n  };\n\n  onAzureLogAnalyticsSameAsChange = (azureLogAnalyticsSameAs: boolean) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        azureLogAnalyticsSameAs,\n      },\n    });\n  };\n\n  hasWorkspaceRequiredFields = () => {\n    const {\n      config: { jsonData, secureJsonData, secureJsonFields },\n    } = this.state;\n\n    if (jsonData.azureLogAnalyticsSameAs) {\n      return (\n        jsonData.tenantId &&\n        jsonData.clientId &&\n        jsonData.subscriptionId &&\n        (secureJsonData.clientSecret || secureJsonFields.clientSecret)\n      );\n    }\n\n    return (\n      jsonData.logAnalyticsTenantId &&\n      jsonData.logAnalyticsTenantId.length &&\n      (jsonData.logAnalyticsClientId && jsonData.logAnalyticsClientId.length) &&\n      jsonData.logAnalyticsSubscriptionId &&\n      (secureJsonFields.logAnalyticsClientSecret || secureJsonData.logAnalyticsClientSecret)\n    );\n  };\n\n  render() {\n    const {\n      config: { jsonData, secureJsonData, secureJsonFields },\n      logAnalyticsSubscriptions,\n      logAnalyticsWorkspaces,\n    } = this.state;\n\n    const addtlAttrs = {\n      ...(jsonData.azureLogAnalyticsSameAs && {\n        tooltip: 'Workspaces are pulled from default subscription selected above.',\n      }),\n    };\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Log Analytics API Details</h3>\n        <Switch\n          label=\"Same details as Azure Monitor API\"\n          checked={jsonData.azureLogAnalyticsSameAs}\n          onChange={event => this.onAzureLogAnalyticsSameAsChange(!jsonData.azureLogAnalyticsSameAs)}\n          {...addtlAttrs}\n        />\n        {!jsonData.azureLogAnalyticsSameAs && (\n          <AzureCredentialsForm\n            subscriptionOptions={logAnalyticsSubscriptions}\n            selectedSubscription={jsonData.logAnalyticsSubscriptionId}\n            tenantId={jsonData.logAnalyticsTenantId}\n            clientId={jsonData.logAnalyticsClientId}\n            clientSecret={secureJsonData.logAnalyticsClientSecret}\n            clientSecretConfigured={secureJsonFields.logAnalyticsClientSecret}\n            onSubscriptionSelectChange={this.onLogAnalyticsSubscriptionSelect}\n            onTenantIdChange={this.onLogAnalyticsTenantIdChange}\n            onClientIdChange={this.onLogAnalyticsClientIdChange}\n            onClientSecretChange={this.onLogAnalyticsClientSecretChange}\n            onResetClientSecret={this.onLogAnalyticsResetClientSecret}\n            onLoadSubscriptions={() => this.props.onLoadSubscriptions('workspacesloganalytics')}\n          />\n        )}\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel\n                className=\"width-12\"\n                tooltip=\"Choose the default/preferred Workspace for Azure Log Analytics queries.\"\n              >\n                Default Workspace\n              </FormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={logAnalyticsWorkspaces.find(\n                    workspace => workspace.value === jsonData.logAnalyticsDefaultWorkspace\n                  )}\n                  options={logAnalyticsWorkspaces}\n                  defaultValue={jsonData.logAnalyticsDefaultWorkspace}\n                  onChange={this.onWorkspaceSelectChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={() => this.props.onLoadWorkspaces()}\n                  disabled={!this.hasWorkspaceRequiredFields()}\n                >\n                  Load Workspaces\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AnalyticsConfig;\n","import React, { PureComponent } from 'react';\nimport { FormLabel, Button, Input } from '@grafana/ui';\n\nexport interface Props {\n  datasourceConfig: any;\n  onDatasourceUpdate: (config: any) => void;\n}\n\nexport interface State {\n  config: any;\n}\n\nexport class InsightsConfig extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { datasourceConfig } = this.props;\n\n    this.state = {\n      config: datasourceConfig,\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: props.datasourceConfig,\n    };\n  }\n\n  onAppInsightsAppIdChange = (appInsightsAppId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        appInsightsAppId,\n      },\n    });\n  };\n\n  onAppInsightsApiKeyChange = (appInsightsApiKey: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        appInsightsApiKey,\n      },\n    });\n  };\n\n  onAppInsightsResetApiKey = () => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      version: this.state.config.version + 1,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        appInsightsApiKey: false,\n      },\n    });\n  };\n\n  render() {\n    const { config } = this.state;\n    return (\n      <>\n        <h3 className=\"page-heading\">Application Insights Details</h3>\n        <div className=\"gf-form-group\">\n          {config.secureJsonFields.appInsightsApiKey ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">API Key</FormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={this.onAppInsightsResetApiKey}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">API Key</FormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={config.secureJsonData.appInsightsApiKey || ''}\n                    onChange={event => this.onAppInsightsApiKeyChange(event.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-12\">Application ID</FormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  value={config.jsonData.appInsightsAppId || ''}\n                  onChange={event => this.onAppInsightsAppIdChange(event.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default InsightsConfig;\n","import React, { PureComponent } from 'react';\nimport { SelectableValue, DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { MonitorConfig } from './MonitorConfig';\nimport { AnalyticsConfig } from './AnalyticsConfig';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { getBackendSrv, BackendSrv } from 'app/core/services/backend_srv';\nimport { InsightsConfig } from './InsightsConfig';\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData } from '../types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData>;\n\ntype AzureDataSourceSettings = DataSourceSettings<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\nexport interface State {\n  config: AzureDataSourceSettings;\n  subscriptions: SelectableValue[];\n  logAnalyticsSubscriptions: SelectableValue[];\n  logAnalyticsWorkspaces: SelectableValue[];\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = this.props;\n\n    this.state = {\n      config: ConfigEditor.defaults(options),\n      subscriptions: [],\n      logAnalyticsSubscriptions: [],\n      logAnalyticsWorkspaces: [],\n    };\n\n    this.backendSrv = getBackendSrv();\n    this.templateSrv = new TemplateSrv();\n\n    if (options.id) {\n      this.state.config.url = '/api/datasources/proxy/' + options.id;\n      this.init();\n    }\n\n    this.updateDatasource(this.state.config);\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: ConfigEditor.defaults(props.options),\n    };\n  }\n\n  static defaults = (options: any) => {\n    options.jsonData.cloudName = options.jsonData.cloudName || 'azuremonitor';\n\n    if (!options.jsonData.hasOwnProperty('azureLogAnalyticsSameAs')) {\n      options.jsonData.azureLogAnalyticsSameAs = true;\n    }\n\n    if (!options.hasOwnProperty('secureJsonData')) {\n      options.secureJsonData = {};\n    }\n\n    if (!options.hasOwnProperty('secureJsonFields')) {\n      options.secureJsonFields = {\n        clientSecret: false,\n        logAnalyticsClientSecret: false,\n        appInsightsApiKey: false,\n      };\n    }\n\n    return options;\n  };\n\n  backendSrv: BackendSrv = null;\n  templateSrv: TemplateSrv = null;\n\n  init = async () => {\n    await this.getSubscriptions();\n\n    if (!this.state.config.jsonData.azureLogAnalyticsSameAs) {\n      await this.getLogAnalyticsSubscriptions();\n    }\n  };\n\n  updateDatasource = async (config: any) => {\n    for (const j in config.jsonData) {\n      if (config.jsonData[j].length === 0) {\n        delete config.jsonData[j];\n      }\n    }\n\n    for (const k in config.secureJsonData) {\n      if (config.secureJsonData[k].length === 0) {\n        delete config.secureJsonData[k];\n      }\n    }\n\n    this.props.onOptionsChange({\n      ...config,\n    });\n  };\n\n  hasNecessaryCredentials = () => {\n    if (!this.state.config.secureJsonFields.clientSecret && !this.state.config.secureJsonData.clientSecret) {\n      return false;\n    }\n\n    if (!this.state.config.jsonData.clientId || !this.state.config.jsonData.tenantId) {\n      return false;\n    }\n\n    return true;\n  };\n\n  logAnalyticsHasNecessaryCredentials = () => {\n    if (\n      !this.state.config.secureJsonFields.logAnalyticsClientSecret &&\n      !this.state.config.secureJsonData.logAnalyticsClientSecret\n    ) {\n      return false;\n    }\n\n    if (!this.state.config.jsonData.logAnalyticsClientId || !this.state.config.jsonData.logAnalyticsTenantId) {\n      return false;\n    }\n\n    return true;\n  };\n\n  onConfigUpdate = (config: any) => {\n    this.updateDatasource(config);\n  };\n\n  onLoadSubscriptions = async (type?: string) => {\n    await this.backendSrv.put(`/api/datasources/${this.state.config.id}`, this.state.config).then(() => {\n      this.updateDatasource({\n        ...this.state.config,\n        version: this.state.config.version + 1,\n      });\n    });\n\n    if (type && type === 'workspacesloganalytics') {\n      this.getLogAnalyticsSubscriptions();\n    } else {\n      this.getSubscriptions();\n    }\n  };\n\n  loadSubscriptions = async (route?: string) => {\n    const url = `/${route || this.state.config.jsonData.cloudName}/subscriptions?api-version=2019-03-01`;\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.state.config.url + url,\n        method: 'GET',\n      })\n      .then((result: any) => {\n        return ResponseParser.parseSubscriptionsForSelect(result);\n      })\n      .catch((error: any) => {\n        throw error;\n      });\n  };\n\n  loadWorkspaces = async (subscription: string) => {\n    const { azureLogAnalyticsSameAs, cloudName, logAnalyticsSubscriptionId } = this.state.config.jsonData;\n    let azureMonitorUrl = '',\n      subscriptionId = this.templateSrv.replace(subscription || this.state.config.jsonData.subscriptionId);\n\n    if (!!subscriptionId || !!azureLogAnalyticsSameAs) {\n      const azureCloud = cloudName || 'azuremonitor';\n      azureMonitorUrl = `/${azureCloud}/subscriptions`;\n    } else {\n      subscriptionId = logAnalyticsSubscriptionId;\n      azureMonitorUrl = `/workspacesloganalytics/subscriptions`;\n    }\n\n    const workspaceListUrl =\n      azureMonitorUrl +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.state.config.url + workspaceListUrl,\n        method: 'GET',\n      })\n      .then((result: any) => {\n        return result.data.value.map((val: any) => {\n          return {\n            value: val.properties.customerId,\n            label: val.name,\n          };\n        });\n      })\n      .catch((error: any) => {\n        throw error;\n      });\n  };\n\n  getSubscriptions = async () => {\n    if (!this.hasNecessaryCredentials()) {\n      return;\n    }\n\n    const subscriptions = (await this.loadSubscriptions()) || [];\n\n    if (subscriptions && subscriptions.length > 0) {\n      this.setState({ subscriptions });\n\n      this.state.config.jsonData.subscriptionId = this.state.config.jsonData.subscriptionId || subscriptions[0].value;\n    }\n\n    if (this.state.config.jsonData.subscriptionId && this.state.config.jsonData.azureLogAnalyticsSameAs) {\n      await this.getWorkspaces();\n    }\n  };\n\n  getLogAnalyticsSubscriptions = async () => {\n    if (!this.logAnalyticsHasNecessaryCredentials()) {\n      return;\n    }\n\n    const logAnalyticsSubscriptions = (await this.loadSubscriptions('workspacesloganalytics')) || [];\n\n    if (logAnalyticsSubscriptions && logAnalyticsSubscriptions.length > 0) {\n      this.setState({ logAnalyticsSubscriptions });\n\n      this.state.config.jsonData.logAnalyticsSubscriptionId =\n        this.state.config.jsonData.logAnalyticsSubscriptionId || logAnalyticsSubscriptions[0].value;\n    }\n\n    if (this.state.config.jsonData.logAnalyticsSubscriptionId) {\n      await this.getWorkspaces();\n    }\n  };\n\n  getWorkspaces = async () => {\n    const sameAs = this.state.config.jsonData.azureLogAnalyticsSameAs && this.state.config.jsonData.subscriptionId;\n    if (!sameAs && !this.state.config.jsonData.logAnalyticsSubscriptionId) {\n      return;\n    }\n\n    const logAnalyticsWorkspaces = await this.loadWorkspaces(\n      sameAs ? this.state.config.jsonData.subscriptionId : this.state.config.jsonData.logAnalyticsSubscriptionId\n    );\n\n    if (logAnalyticsWorkspaces.length > 0) {\n      this.setState({ logAnalyticsWorkspaces });\n\n      this.state.config.jsonData.logAnalyticsDefaultWorkspace =\n        this.state.config.jsonData.logAnalyticsDefaultWorkspace || logAnalyticsWorkspaces[0].value;\n    }\n  };\n\n  render() {\n    const { config, subscriptions, logAnalyticsSubscriptions, logAnalyticsWorkspaces } = this.state;\n\n    return (\n      <>\n        <MonitorConfig\n          datasourceConfig={config}\n          subscriptions={subscriptions}\n          onLoadSubscriptions={this.onLoadSubscriptions}\n          onDatasourceUpdate={this.onConfigUpdate}\n        />\n\n        <AnalyticsConfig\n          datasourceConfig={config}\n          logAnalyticsWorkspaces={logAnalyticsWorkspaces}\n          logAnalyticsSubscriptions={logAnalyticsSubscriptions}\n          onLoadSubscriptions={this.onLoadSubscriptions}\n          onDatasourceUpdate={this.onConfigUpdate}\n          onLoadWorkspaces={this.getWorkspaces}\n        />\n\n        <InsightsConfig datasourceConfig={config} onDatasourceUpdate={this.onConfigUpdate} />\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport class AzureMonitorAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  datasource: any;\n  annotation: any;\n  workspaces: any[];\n  subscriptions: Array<{ text: string; value: string }>;\n\n  defaultQuery =\n    '<your table>\\n| where $__timeFilter() \\n| project TimeGenerated, Text=YourTitleColumn, Tags=\"tag1,tag2\"';\n\n  /** @ngInject */\n  constructor(private templateSrv: TemplateSrv) {\n    this.annotation.queryType = this.annotation.queryType || 'Azure Log Analytics';\n    this.annotation.rawQuery = this.annotation.rawQuery || this.defaultQuery;\n    this.initDropdowns();\n  }\n\n  async initDropdowns() {\n    await this.getSubscriptions();\n    await this.getWorkspaces();\n  }\n\n  async getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any[]) => {\n      this.subscriptions = subs;\n\n      if (!this.annotation.subscription && this.annotation.queryType === 'Azure Log Analytics') {\n        this.annotation.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\n      }\n\n      if (!this.annotation.subscription && this.subscriptions.length > 0) {\n        this.annotation.subscription = this.subscriptions[0].value;\n      }\n    });\n  }\n\n  async getWorkspaces(bustCache?: boolean) {\n    if (!bustCache && this.workspaces && this.workspaces.length > 0) {\n      return this.workspaces;\n    }\n\n    return this.datasource\n      .getAzureLogAnalyticsWorkspaces(this.annotation.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n        if (list.length > 0 && !this.annotation.workspace) {\n          this.annotation.workspace = list[0].value;\n        }\n        return this.workspaces;\n      })\n      .catch(() => {});\n  }\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.annotation.workspace);\n      })\n      .catch(() => {});\n  };\n\n  onSubscriptionChange = () => {\n    this.getWorkspaces(true);\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.annotation.rawQuery = nextQuery;\n  };\n\n  get templateVariables() {\n    return this.templateSrv.variables.map((t: any) => '$' + t.name);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { AzureMonitorQueryCtrl } from './query_ctrl';\nimport Datasource from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { AzureMonitorAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(AzureMonitorQueryCtrl)\n  .setAnnotationQueryCtrl(AzureMonitorAnnotationsQueryCtrl);\n"],"sourceRoot":""}