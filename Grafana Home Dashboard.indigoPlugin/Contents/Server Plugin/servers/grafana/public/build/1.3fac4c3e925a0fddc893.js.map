{"version":3,"sources":["webpack:///./public/app/core/table_model.ts","webpack:///./public/vendor/flot/jquery.flot.js","webpack:///./public/vendor/flot/jquery.flot.time.js"],"names":["TableModel","this","columns","columnMap","rows","type","prototype","sort","options","col","length","a","b","desc","reverse","addColumn","text","push","addRow","row","$","color","make","r","g","o","add","c","d","i","charAt","normalize","scale","f","toString","join","clamp","min","value","max","parseInt","clone","extract","elem","css","toLowerCase","parent","nodeName","get","parse","str","res","m","exec","parseFloat","name","trim","lookupColors","aqua","azure","beige","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightcyan","lightgreen","lightgrey","lightpink","lightyellow","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","white","yellow","jQuery","hasOwnProperty","Object","Canvas","cls","container","element","children","document","createElement","className","direction","position","left","top","appendTo","getContext","window","G_vmlCanvasManager","Error","initElement","context","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","resize","width","height","textContainer","_textCache","_textSizeCache","flotTextSizeCache","Plot","placeholder","data_","options_","plugins","series","colors","legend","show","noColumns","labelFormatter","labelBoxBorderColor","margin","backgroundColor","backgroundOpacity","sorted","xaxis","mode","font","tickColor","transform","inverseTransform","autoscaleMargin","ticks","tickFormatter","labelWidth","labelHeight","reserveSpace","tickLength","alignTicksWithAxis","tickDecimals","tickSize","minTickSize","yaxis","xaxes","yaxes","points","radius","lineWidth","fill","fillColor","symbol","lines","steps","bars","barWidth","align","horizontal","zero","shadowSize","highlightColor","grid","aboveData","borderColor","labelMargin","eventSectionHeight","axisMargin","borderWidth","minBorderMargin","markings","markingsColor","markingsLineWidth","clickable","hoverable","autoHighlight","mouseActiveRadius","interaction","redrawOverlayInterval","hooks","surface","overlay","eventHolder","ctx","octx","plotOffset","right","bottom","plotWidth","plotHeight","processOptions","processRawData","processDatapoints","processOffset","processRange","drawBackground","drawSeries","draw","bindEvents","drawOverlay","shutdown","plot","executeHooks","hook","args","concat","apply","setData","s","extend","data","parseData","neededColors","maxIndex","sc","colorPool","colorPoolSize","variation","colori","v","getOrCreateAxis","axisNumber","fillInSeriesOptions","j","k","ps","val","p","format","topSentry","Number","POSITIVE_INFINITY","bottomSentry","NEGATIVE_INFINITY","fakeInfinity","MAX_VALUE","updateAxis","axis","datamin","datamax","each","allAxes","_","used","datapoints","x","number","required","y","stack","autoscale","defaultValue","pointsize","insertSteps","nullify","isNaN","Infinity","xmin","ymin","xmax","ymax","delta","processData","obj","coord","n","grep","canvasToAxisCoords","pos","c2p","undefined","x1","y1","axes","redrawTimeout","clearTimeout","unbind","onMouseMove","onMouseLeave","onClick","measureTickLabels","opts","maxWidth","Math","floor","legacyStyles","layer","t","label","info","getTextInfo","allocateAxisBoxFirstPhase","lw","lh","isXAxis","padding","eventSectionPadding","innermost","outermost","first","found","box","setupGrid","showGrid","axisOpts","widen","abs","setRange","allocatedAxes","snaped","setupTickGeneration","setTicks","snapRangeToTicks","minMargin","margins","ceil","adjustLayoutForThingsStickingOut","allocateAxisBoxSecondPhase","identity","it","p2c","setTransformationHelpers","tick","halign","valign","removeText","addText","html","find","remove","fragments","entries","rowStarted","lf","isFunction","ascending","entry","table","replace","div","prependTo","insertLegend","noTicks","sqrt","dec","log","LN10","maxDec","size","magn","pow","norm","scaledDecimals","tickGenerator","prev","start","base","floorInBase","NaN","factor","formatted","round","decimal","indexOf","precision","substr","otherAxis","niceTicks","extraDec","ts","test","toFixed","oticks","changed","clear","save","translate","fillStyle","getColorOrGradient","fillRect","restore","drawGrid","render","triggerRedrawOverlay","extractRange","ranges","from","to","key","tmp","bw","bc","getAxes","xrange","yrange","xequal","yequal","subPixel","beginPath","strokeStyle","moveTo","lineTo","stroke","xoff","yoff","strokeRect","plotLine","xoffset","yoffset","axisx","axisy","prevx","prevy","x2","y2","lineJoin","sw","angle","PI","sin","cos","getFillStyle","areaOpen","ypos","segmentStart","segmentEnd","x1old","x2old","plotLineArea","drawSeriesLines","barLeft","fillStyleCallback","barRight","drawBar","plotBars","drawSeriesBars","plotPoints","offset","shadow","arc","closePath","w","drawSeriesPoints","drawLeft","drawRight","drawTop","drawBottom","filloptions","seriesColor","getPlaceholder","getCanvas","getPlotOffset","getData","getXAxes","getYAxes","getOptions","highlight","unhighlight","pointOffset","point","destroy","removeData","empty","highlights","classes","init","initPlugins","axisOptions","axisCount","fontSize","fontSizeDefault","fontDefaults","style","variant","weight","family","lineHeight","x2axis","y2axis","coloredAreas","coloredAreasColor","parseOptions","existing","setupCanvases","mousemove","bind","click","e","triggerClickHoverEvent","isSelecting","eventname","event","seriesFilter","canvasX","pageX","canvasY","pageY","ctrlKey","metaKey","item","mouseX","mouseY","maxDistance","smallestDistance","mx","my","maxx","maxy","dx","dy","dist","datapoint","slice","dataIndex","seriesIndex","findNearbyItem","h","auto","trigger","setTimeout","hi","drawBarHighlight","drawPointHighlight","indexOfHighlight","splice","pointRadius","spec","defaultColor","gradient","createLinearGradient","l","co","brightness","opacity","addColorStop","fn","detach","parentNode","removeChild","clearRect","cache","layerKey","call","getTextLayer","layerCache","styleKey","hide","styleCache","positions","active","rendered","append","font-size","insertAfter","addClass","textStyle","max-width","outerWidth","outerHeight","text-align","version","formatDate","fmt","monthNames","dayNames","strftime","hours12","leftPad","pad","escape","hours","getHours","isAM","getDay","getMonth","getDate","getMinutes","getSeconds","getFullYear","makeUtcWrapper","addProxyMethod","sourceObj","sourceMethod","targetObj","targetMethod","arguments","utc","date","props","dateGenerator","timezone","Date","timezoneJS","setTimezone","setTime","timeUnitSize","second","minute","hour","day","month","quarter","year","baseSpec","specMonths","specQuarters","axisName","minSize","unit","step","setSeconds","setMinutes","setHours","setMonth","setFullYear","setMilliseconds","setDate","carry","getTime","end","timeformat","useQuarters","span","suffix","hourCode","twelveHourClock"],"mappings":"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","file":"1.3fac4c3e925a0fddc893.js","sourcesContent":["interface Column {\n  text: string;\n  title?: string;\n  type?: string;\n  sort?: boolean;\n  desc?: boolean;\n  filterable?: boolean;\n  unit?: string;\n}\n\nexport default class TableModel {\n  columns: Column[];\n  rows: any[];\n  type: string;\n  columnMap: any;\n\n  constructor() {\n    this.columns = [];\n    this.columnMap = {};\n    this.rows = [];\n    this.type = 'table';\n  }\n\n  sort(options) {\n    if (options.col === null || this.columns.length <= options.col) {\n      return;\n    }\n\n    this.rows.sort((a, b) => {\n      a = a[options.col];\n      b = b[options.col];\n      // Sort null or undefined seperately from comparable values\n      return +(a == null) - +(b == null) || +(a > b) || -(a < b);\n    });\n\n    if (options.desc) {\n      this.rows.reverse();\n    }\n\n    this.columns[options.col].sort = true;\n    this.columns[options.col].desc = options.desc;\n  }\n\n  addColumn(col) {\n    if (!this.columnMap[col.text]) {\n      this.columns.push(col);\n      this.columnMap[col.text] = col;\n    }\n  }\n\n  addRow(row) {\n    this.rows.push(row);\n  }\n}\n","/* Javascript plotting library for jQuery, version 0.8.3.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\n*/\n\n// first an inline dependency, jquery.colorhelpers.js, we inline it here\n// for convenience\n\n/* Plugin for jQuery for working with colors.\n *\n * Version 1.1.\n *\n * Inspiration from jQuery color animation plugin by John Resig.\n *\n * Released under the MIT license by Ole Laursen, October 2009.\n *\n * Examples:\n *\n *   $.color.parse(\"#fff\").scale('rgb', 0.25).add('a', -0.5).toString()\n *   var c = $.color.extract($(\"#mydiv\"), 'background-color');\n *   console.log(c.r, c.g, c.b, c.a);\n *   $.color.make(100, 50, 25, 0.4).toString() // returns \"rgba(100,50,25,0.4)\"\n *\n * Note that .scale() and .add() return the same modified object\n * instead of making a new one.\n *\n * V. 1.1: Fix error handling so e.g. parsing an empty string does\n * produce a color rather than just crashing.\n */\n(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return\"rgb(\"+[o.r,o.g,o.b].join(\",\")+\")\"}else{return\"rgba(\"+[o.r,o.g,o.b,o.a].join(\",\")+\")\"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=\"\"&&c!=\"transparent\")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),\"body\"));if(c==\"rgba(0, 0, 0, 0)\")c=\"transparent\";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name==\"transparent\")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);\n\n// the actual Flot code\n(function($) {\n\n\t// Cache the prototype hasOwnProperty for faster access\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    // A shim to provide 'detach' to jQuery versions prior to 1.4.  Using a DOM\n    // operation produces the same effect as detach, i.e. removing the element\n    // without touching its jQuery data.\n\n    // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.\n\n    if (!$.fn.detach) {\n        $.fn.detach = function() {\n            return this.each(function() {\n                if (this.parentNode) {\n                    this.parentNode.removeChild( this );\n                }\n            });\n        };\n    }\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// The Canvas object is a wrapper around an HTML5 <canvas> tag.\n\t//\n\t// @constructor\n\t// @param {string} cls List of classes to apply to the canvas.\n\t// @param {element} container Element onto which to append the canvas.\n\t//\n\t// Requiring a container is a little iffy, but unfortunately canvas\n\t// operations don't work unless the canvas is attached to the DOM.\n\n\tfunction Canvas(cls, container) {\n\n\t\tvar element = container.children(\".\" + cls)[0];\n\n\t\tif (element == null) {\n\n\t\t\telement = document.createElement(\"canvas\");\n\t\t\telement.className = cls;\n\n\t\t\t$(element).css({ direction: \"ltr\", position: \"absolute\", left: 0, top: 0 })\n\t\t\t\t.appendTo(container);\n\n\t\t\t// If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas\n\n\t\t\tif (!element.getContext) {\n\t\t\t\tif (window.G_vmlCanvasManager) {\n\t\t\t\t\telement = window.G_vmlCanvasManager.initElement(element);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element = element;\n\n\t\tvar context = this.context = element.getContext(\"2d\");\n\n\t\t// Determine the screen's ratio of physical to device-independent\n\t\t// pixels.  This is the ratio between the canvas width that the browser\n\t\t// advertises and the number of pixels actually present in that space.\n\n\t\t// The iPhone 4, for example, has a device-independent width of 320px,\n\t\t// but its screen is actually 640px wide.  It therefore has a pixel\n\t\t// ratio of 2, while most normal devices have a ratio of 1.\n\n\t\tvar devicePixelRatio = window.devicePixelRatio || 1,\n\t\t\tbackingStoreRatio =\n\t\t\t\tcontext.webkitBackingStorePixelRatio ||\n\t\t\t\tcontext.mozBackingStorePixelRatio ||\n\t\t\t\tcontext.msBackingStorePixelRatio ||\n\t\t\t\tcontext.oBackingStorePixelRatio ||\n\t\t\t\tcontext.backingStorePixelRatio || 1;\n\n\t\tthis.pixelRatio = devicePixelRatio / backingStoreRatio;\n\n\t\t// Size the canvas to match the internal dimensions of its container\n\n\t\tthis.resize(container.width(), container.height());\n\n\t\t// Collection of HTML div layers for text overlaid onto the canvas\n\n\t\tthis.textContainer = null;\n\t\tthis.text = {};\n\n\t\t// Cache of text fragments and metrics, so we can avoid expensively\n\t\t// re-calculating them when the plot is re-rendered in a loop.\n\n\t\tthis._textCache = {};\n\t\tthis._textSizeCache = window.flotTextSizeCache = window.flotTextSizeCache || {};\n\t}\n\n\t// Resizes the canvas to the given dimensions.\n\t//\n\t// @param {number} width New width of the canvas, in pixels.\n\t// @param {number} width New height of the canvas, in pixels.\n\n\tCanvas.prototype.resize = function(width, height) {\n\n\t\tif (width <= 0 || height <= 0) {\n\t\t\tthrow new Error(\"Invalid dimensions for plot, width = \" + width + \", height = \" + height);\n\t\t}\n\n\t\tvar element = this.element,\n\t\t\tcontext = this.context,\n\t\t\tpixelRatio = this.pixelRatio;\n\n\t\t// Resize the canvas, increasing its density based on the display's\n\t\t// pixel ratio; basically giving it more pixels without increasing the\n\t\t// size of its element, to take advantage of the fact that retina\n\t\t// displays have that many more pixels in the same advertised space.\n\n\t\t// Resizing should reset the state (excanvas seems to be buggy though)\n\n\t\tif (this.width != width) {\n\t\t\telement.width = width * pixelRatio;\n\t\t\telement.style.width = width + \"px\";\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tif (this.height != height) {\n\t\t\telement.height = height * pixelRatio;\n\t\t\telement.style.height = height + \"px\";\n\t\t\tthis.height = height;\n\t\t}\n\n\t\t// Save the context, so we can reset in case we get replotted.  The\n\t\t// restore ensure that we're really back at the initial state, and\n\t\t// should be safe even if we haven't saved the initial state yet.\n\n\t\tcontext.restore();\n\t\tcontext.save();\n\n\t\t// Scale the coordinate space to match the display density; so even though we\n\t\t// may have twice as many pixels, we still want lines and other drawing to\n\t\t// appear at the same size; the extra pixels will just make them crisper.\n\n\t\tcontext.scale(pixelRatio, pixelRatio);\n\t};\n\n\t// Clears the entire canvas area, not including any overlaid HTML text\n\n\tCanvas.prototype.clear = function() {\n\t\tthis.context.clearRect(0, 0, this.width, this.height);\n\t};\n\n\t// Finishes rendering the canvas, including managing the text overlay.\n\n\tCanvas.prototype.render = function() {\n\n\t\tvar cache = this._textCache;\n\n\t\t// For each text layer, add elements marked as active that haven't\n\t\t// already been rendered, and remove those that are no longer active.\n\n\t\tfor (var layerKey in cache) {\n\t\t\tif (hasOwnProperty.call(cache, layerKey)) {\n\n\t\t\t\tvar layer = this.getTextLayer(layerKey),\n\t\t\t\t\tlayerCache = cache[layerKey];\n\n\t\t\t\tlayer.hide();\n\n\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\tif (position.active) {\n\t\t\t\t\t\t\t\t\t\tif (!position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\tlayer.append(position.element);\n\t\t\t\t\t\t\t\t\t\t\tposition.rendered = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tpositions.splice(i--, 1);\n\t\t\t\t\t\t\t\t\t\tif (position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\tposition.element.detach();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (positions.length == 0) {\n\t\t\t\t\t\t\t\t\tdelete styleCache[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlayer.show();\n\t\t\t}\n\t\t}\n\t};\n\n\t// Creates (if necessary) and returns the text overlay container.\n\t//\n\t// @param {string} classes String of space-separated CSS classes used to\n\t//     uniquely identify the text layer.\n\t// @return {object} The jQuery-wrapped text-layer div.\n\n\tCanvas.prototype.getTextLayer = function(classes) {\n\n\t\tvar layer = this.text[classes];\n\n\t\t// Create the text layer if it doesn't exist\n\n\t\tif (layer == null) {\n\n\t\t\t// Create the text layer container, if it doesn't exist\n\n\t\t\tif (this.textContainer == null) {\n\t\t\t\tthis.textContainer = $(\"<div class='flot-text flot-temp-elem'></div>\")\n\t\t\t\t\t.css({\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\t'font-size': \"smaller\",\n\t\t\t\t\t\tcolor: \"#545454\"\n\t\t\t\t\t})\n\t\t\t\t\t.insertAfter(this.element);\n\t\t\t}\n\n\t\t\tlayer = this.text[classes] = $(\"<div></div>\")\n\t\t\t\t.addClass(classes)\n\t\t\t\t.css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tright: 0\n\t\t\t\t})\n\t\t\t\t.appendTo(this.textContainer);\n\t\t}\n\n\t\treturn layer;\n\t};\n\n\t// Creates (if necessary) and returns a text info object.\n\t//\n\t// The object looks like this:\n\t//\n\t// {\n\t//     width: Width of the text's wrapper div.\n\t//     height: Height of the text's wrapper div.\n\t//     element: The jQuery-wrapped HTML div containing the text.\n\t//     positions: Array of positions at which this text is drawn.\n\t// }\n\t//\n\t// The positions array contains objects that look like this:\n\t//\n\t// {\n\t//     active: Flag indicating whether the text should be visible.\n\t//     rendered: Flag indicating whether the text is currently visible.\n\t//     element: The jQuery-wrapped HTML div containing the text.\n\t//     x: X coordinate at which to draw the text.\n\t//     y: Y coordinate at which to draw the text.\n\t// }\n\t//\n\t// Each position after the first receives a clone of the original element.\n\t//\n\t// The idea is that that the width, height, and general 'identity' of the\n\t// text is constant no matter where it is placed; the placements are a\n\t// secondary property.\n\t//\n\t// Canvas maintains a cache of recently-used text info objects; getTextInfo\n\t// either returns the cached element or creates a new entry.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {string} text Text string to retrieve info for.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\t// @param {number=} width Maximum width of the text before it wraps.\n\t// @return {object} a text info object.\n\n\tCanvas.prototype.getTextInfo = function(layer, text, font, angle, width) {\n\n\t\tvar textStyle, layerCache, styleCache, info;\n\n\t\t// Cast the value to a string, in case we were given a number or such\n\n\t\ttext = \"\" + text;\n\n\t\t// If the font is a font-spec object, generate a CSS font definition\n\n\t\tif (typeof font === \"object\") {\n\t\t\ttextStyle = font.style + \" \" + font.variant + \" \" + font.weight + \" \" + font.size + \"px/\" + font.lineHeight + \"px \" + font.family;\n\t\t} else {\n\t\t\ttextStyle = font;\n\t\t}\n\n\t\t// Retrieve (or create) the cache for the text's layer and styles\n\n\t\tlayerCache = this._textCache[layer];\n\n\t\tif (layerCache == null) {\n\t\t\tlayerCache = this._textCache[layer] = {};\n\t\t}\n\n\t\tstyleCache = layerCache[textStyle];\n\n\t\tif (styleCache == null) {\n\t\t\tstyleCache = layerCache[textStyle] = {};\n\t\t}\n\n\t\tinfo = styleCache[text];\n\n\t\t// If we can't find a matching element in our cache, create a new one\n\n\t\tif (info == null) {\n\n\t\t\tvar element = $(\"<div></div>\").html(text)\n\t\t\t\t.css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t'max-width': width,\n\t\t\t\t\ttop: -9999\n\t\t\t\t})\n\t\t\t\t.appendTo(this.getTextLayer(layer));\n\n\t\t\tif (typeof font === \"object\") {\n\t\t\t\telement.css({\n\t\t\t\t\tfont: textStyle,\n\t\t\t\t\tcolor: font.color\n\t\t\t\t});\n\t\t\t} else if (typeof font === \"string\") {\n\t\t\t\telement.addClass(font);\n\t\t\t}\n\n      info = styleCache[text] = { element: element, positions: [] };\n\n      var size = this._textSizeCache[text];\n\t\t\tif (size) {\n        info.width = size.width;\n        info.height = size.height;\n\t\t\t} else {\n        info.width = element.outerWidth(true);\n        info.height = element.outerHeight(true);\n        this._textSizeCache[text] = { width: info.width, height: info.height };\n\t\t\t}\n\t\t\telement.detach();\n\t\t}\n\n\t\treturn info;\n\t};\n\n\t// Adds a text string to the canvas text overlay.\n\t//\n\t// The text isn't drawn immediately; it is marked as rendering, which will\n\t// result in its addition to the canvas on the next render pass.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {number} x X coordinate at which to draw the text.\n\t// @param {number} y Y coordinate at which to draw the text.\n\t// @param {string} text Text string to draw.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\t// @param {number=} width Maximum width of the text before it wraps.\n\t// @param {string=} halign Horizontal alignment of the text; either \"left\",\n\t//     \"center\" or \"right\".\n\t// @param {string=} valign Vertical alignment of the text; either \"top\",\n\t//     \"middle\" or \"bottom\".\n\n\tCanvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {\n\n\t\tvar info = this.getTextInfo(layer, text, font, angle, width),\n\t\t\tpositions = info.positions;\n\n\t\t// Tweak the div's position to match the text's alignment\n\n\t\tif (halign == \"center\") {\n\t\t\tx -= info.width / 2;\n\t\t} else if (halign == \"right\") {\n\t\t\tx -= info.width;\n\t\t}\n\n\t\tif (valign == \"middle\") {\n\t\t\ty -= info.height / 2;\n\t\t} else if (valign == \"bottom\") {\n\t\t\ty -= info.height;\n\t\t}\n\n\t\t// Determine whether this text already exists at this position.\n\t\t// If so, mark it for inclusion in the next render pass.\n\n\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\tposition.active = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If the text doesn't exist at this position, create a new entry\n\n\t\t// For the very first position we'll re-use the original element,\n\t\t// while for subsequent ones we'll clone it.\n\n\t\tposition = {\n\t\t\tactive: true,\n\t\t\trendered: false,\n\t\t\telement: positions.length ? info.element.clone() : info.element,\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\n\t\tpositions.push(position);\n\n\t\t// Move the element to its final position within the container\n\n\t\tposition.element.css({\n\t\t\ttop: Math.round(y),\n\t\t\tleft: Math.round(x),\n\t\t\t'text-align': halign\t// In case the text wraps\n\t\t});\n\t};\n\n\t// Removes one or more text strings from the canvas text overlay.\n\t//\n\t// If no parameters are given, all text within the layer is removed.\n\t//\n\t// Note that the text is not immediately removed; it is simply marked as\n\t// inactive, which will result in its removal on the next render pass.\n\t// This avoids the performance penalty for 'clear and redraw' behavior,\n\t// where we potentially get rid of all text on a layer, but will likely\n\t// add back most or all of it later, as when redrawing axes, for example.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {number=} x X coordinate of the text.\n\t// @param {number=} y Y coordinate of the text.\n\t// @param {string=} text Text string to remove.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which the text is rotated, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\n\tCanvas.prototype.removeText = function(layer, x, y, text, font, angle) {\n\t\tif (text == null) {\n\t\t\tvar layerCache = this._textCache[layer];\n\t\t\tif (layerCache != null) {\n\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\tposition.active = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar positions = this.getTextInfo(layer, text, font, angle).positions;\n\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\t\tposition.active = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// The top-level container for the entire plot.\n\n    function Plot(placeholder, data_, options_, plugins) {\n        // data is on the form:\n        //   [ series1, series2 ... ]\n        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]\n        // or { data: [ [x1, y1], [x2, y2], ... ], label: \"some label\", ... }\n\n        var series = [],\n            options = {\n                // the color theme used for graphs\n                colors: [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"],\n                legend: {\n                    show: true,\n                    noColumns: 1, // number of colums in legend table\n                    labelFormatter: null, // fn: string -> string\n                    labelBoxBorderColor: \"#ccc\", // border color for the little label boxes\n                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph\n                    position: \"ne\", // position of default legend container within plot\n                    margin: 5, // distance from grid edge to default legend container within plot\n                    backgroundColor: null, // null means auto-detect\n                    backgroundOpacity: 0.85, // set to 0 to avoid background\n                    sorted: null    // default to no legend sorting\n                },\n                xaxis: {\n                    show: null, // null = auto-detect, true = always, false = never\n                    position: \"bottom\", // or \"top\"\n                    mode: null, // null or \"time\"\n                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: \"italic\", weight: \"bold\", family: \"sans-serif\", variant: \"small-caps\" }\n                    color: null, // base color, labels, ticks\n                    tickColor: null, // possibly different color of ticks, e.g. \"rgba(0,0,0,0.15)\"\n                    transform: null, // null or f: number -> number to transform axis\n                    inverseTransform: null, // if transform is set, this should be the inverse function\n                    min: null, // min. value to show, null means set automatically\n                    max: null, // max. value to show, null means set automatically\n                    autoscaleMargin: null, // margin in % to add if auto-setting min/max\n                    ticks: null, // either [1, 3] or [[1, \"a\"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks\n                    tickFormatter: null, // fn: number -> string\n                    labelWidth: null, // size of tick labels in pixels\n                    labelHeight: null,\n                    reserveSpace: null, // whether to reserve space even if axis isn't shown\n                    tickLength: null, // size in pixels of ticks, or \"full\" for whole line\n                    alignTicksWithAxis: null, // axis number or null for no sync\n                    tickDecimals: null, // no. of decimals, null means auto\n                    tickSize: null, // number or [number, \"unit\"]\n                    minTickSize: null // number or [number, \"unit\"]\n                },\n                yaxis: {\n                    autoscaleMargin: 0.02,\n                    position: \"left\" // or \"right\"\n                },\n                xaxes: [],\n                yaxes: [],\n                series: {\n                    points: {\n                        show: false,\n                        radius: 3,\n                        lineWidth: 2, // in pixels\n                        fill: true,\n                        fillColor: \"#ffffff\",\n                        symbol: \"circle\" // or callback\n                    },\n                    lines: {\n                        // we don't put in show: false so we can see\n                        // whether lines were actively disabled\n                        lineWidth: 2, // in pixels\n                        fill: false,\n                        fillColor: null,\n                        steps: false\n                        // Omit 'zero', so we can later default its value to\n                        // match that of the 'fill' option.\n                    },\n                    bars: {\n                        show: false,\n                        lineWidth: 2, // in pixels\n                        barWidth: 1, // in units of the x axis\n                        fill: true,\n                        fillColor: null,\n                        align: \"left\", // \"left\", \"right\", or \"center\"\n                        horizontal: false,\n                        zero: true\n                    },\n                    shadowSize: 3,\n                    highlightColor: null\n                },\n                grid: {\n                    show: true,\n                    aboveData: false,\n                    color: \"#545454\", // primary color used for outline and labels\n                    backgroundColor: null, // null for transparent, else color\n                    borderColor: null, // set if different from the grid color\n                    tickColor: null, // color for the ticks, e.g. \"rgba(0,0,0,0.15)\"\n                    margin: 0, // distance from the canvas edge to the grid\n                    labelMargin: 5, // in pixels\n                    eventSectionHeight: 0, // space for event section\n                    axisMargin: 8, // in pixels\n                    borderWidth: 2, // in pixels\n                    minBorderMargin: null, // in pixels, null means taken from points radius\n                    markings: null, // array of ranges or fn: axes -> array of ranges\n                    markingsColor: \"#f4f4f4\",\n                    markingsLineWidth: 2,\n                    // interactive stuff\n                    clickable: false,\n                    hoverable: false,\n                    autoHighlight: true, // highlight in case mouse is near\n                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item\n                },\n                interaction: {\n                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow\n                },\n                hooks: {}\n            },\n        surface = null,     // the canvas for the plot itself\n        overlay = null,     // canvas for interactive stuff on top of plot\n        eventHolder = null, // jQuery object that events should be bound to\n        ctx = null, octx = null,\n        xaxes = [], yaxes = [],\n        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},\n        plotWidth = 0, plotHeight = 0,\n        hooks = {\n            processOptions: [],\n            processRawData: [],\n            processDatapoints: [],\n            processOffset: [],\n            processRange: [],\n            drawBackground: [],\n            drawSeries: [],\n            draw: [],\n            bindEvents: [],\n            drawOverlay: [],\n            shutdown: []\n        },\n        plot = this;\n\n        // public functions\n        plot.setData = setData;\n        plot.setupGrid = setupGrid;\n        plot.draw = draw;\n        plot.getPlaceholder = function() { return placeholder; };\n        plot.getCanvas = function() { return surface.element; };\n        plot.getPlotOffset = function() { return plotOffset; };\n        plot.width = function () { return plotWidth; };\n        plot.height = function () { return plotHeight; };\n        plot.offset = function () {\n            var o = eventHolder.offset();\n            o.left += plotOffset.left;\n            o.top += plotOffset.top;\n            return o;\n        };\n        plot.getData = function () { return series; };\n        plot.getAxes = function () {\n            var res = {}, i;\n            $.each(xaxes.concat(yaxes), function (_, axis) {\n                if (axis)\n                    res[axis.direction + (axis.n != 1 ? axis.n : \"\") + \"axis\"] = axis;\n            });\n            return res;\n        };\n        plot.getXAxes = function () { return xaxes; };\n        plot.getYAxes = function () { return yaxes; };\n        plot.c2p = canvasToAxisCoords;\n        plot.p2c = axisToCanvasCoords;\n        plot.getOptions = function () { return options; };\n        plot.highlight = highlight;\n        plot.unhighlight = unhighlight;\n        plot.triggerRedrawOverlay = triggerRedrawOverlay;\n        plot.pointOffset = function(point) {\n            return {\n                left: parseInt(xaxes[axisNumber(point, \"x\") - 1].p2c(+point.x) + plotOffset.left, 10),\n                top: parseInt(yaxes[axisNumber(point, \"y\") - 1].p2c(+point.y) + plotOffset.top, 10)\n            };\n        };\n        plot.shutdown = shutdown;\n        plot.destroy = function () {\n            shutdown();\n            placeholder.removeData(\"plot\").empty();\n\n            series = [];\n            options = null;\n            surface = null;\n            overlay = null;\n            eventHolder = null;\n            ctx = null;\n            octx = null;\n            xaxes = [];\n            yaxes = [];\n            hooks = null;\n            highlights = [];\n            plot = null;\n        };\n        plot.resize = function () {\n        \tvar width = placeholder.width(),\n        \t\theight = placeholder.height();\n            surface.resize(width, height);\n            overlay.resize(width, height);\n        };\n\n        // public attributes\n        plot.hooks = hooks;\n\n        // initialize\n        initPlugins(plot);\n        parseOptions(options_);\n        setupCanvases();\n        setData(data_);\n        setupGrid();\n        draw();\n        bindEvents();\n\n\n        function executeHooks(hook, args) {\n            args = [plot].concat(args);\n            for (var i = 0; i < hook.length; ++i)\n                hook[i].apply(this, args);\n        }\n\n        function initPlugins() {\n\n            // References to key classes, allowing plugins to modify them\n\n            var classes = {\n                Canvas: Canvas\n            };\n\n            for (var i = 0; i < plugins.length; ++i) {\n                var p = plugins[i];\n                p.init(plot, classes);\n                if (p.options)\n                    $.extend(true, options, p.options);\n            }\n        }\n\n        function parseOptions(opts) {\n\n            $.extend(true, options, opts);\n\n            // $.extend merges arrays, rather than replacing them.  When less\n            // colors are provided than the size of the default palette, we\n            // end up with those colors plus the remaining defaults, which is\n            // not expected behavior; avoid it by replacing them here.\n\n            if (opts && opts.colors) {\n            \toptions.colors = opts.colors;\n            }\n\n            if (options.xaxis.color == null)\n                options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n            if (options.yaxis.color == null)\n                options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\n            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility\n                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;\n            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility\n                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;\n\n            if (options.grid.borderColor == null)\n                options.grid.borderColor = options.grid.color;\n            if (options.grid.tickColor == null)\n                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\n            // Fill in defaults for axis options, including any unspecified\n            // font-spec fields, if a font-spec was provided.\n\n            // If no x/y axis options were provided, create one of each anyway,\n            // since the rest of the code assumes that they exist.\n\n            var i, axisOptions, axisCount,\n                fontSize = placeholder.css(\"font-size\"),\n                fontSizeDefault = fontSize ? +fontSize.replace(\"px\", \"\") : 13,\n                fontDefaults = {\n                    style: placeholder.css(\"font-style\"),\n                    size: Math.round(0.8 * fontSizeDefault),\n                    variant: placeholder.css(\"font-variant\"),\n                    weight: placeholder.css(\"font-weight\"),\n                    family: placeholder.css(\"font-family\")\n                };\n\n            axisCount = options.xaxes.length || 1;\n            for (i = 0; i < axisCount; ++i) {\n\n                axisOptions = options.xaxes[i];\n                if (axisOptions && !axisOptions.tickColor) {\n                    axisOptions.tickColor = axisOptions.color;\n                }\n\n                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);\n                options.xaxes[i] = axisOptions;\n\n                if (axisOptions.font) {\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n                    if (!axisOptions.font.color) {\n                        axisOptions.font.color = axisOptions.color;\n                    }\n                    if (!axisOptions.font.lineHeight) {\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n                    }\n                }\n            }\n\n            axisCount = options.yaxes.length || 1;\n            for (i = 0; i < axisCount; ++i) {\n\n                axisOptions = options.yaxes[i];\n                if (axisOptions && !axisOptions.tickColor) {\n                    axisOptions.tickColor = axisOptions.color;\n                }\n\n                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);\n                options.yaxes[i] = axisOptions;\n\n                if (axisOptions.font) {\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n                    if (!axisOptions.font.color) {\n                        axisOptions.font.color = axisOptions.color;\n                    }\n                    if (!axisOptions.font.lineHeight) {\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n                    }\n                }\n            }\n\n            // backwards compatibility, to be removed in future\n            if (options.xaxis.noTicks && options.xaxis.ticks == null)\n                options.xaxis.ticks = options.xaxis.noTicks;\n            if (options.yaxis.noTicks && options.yaxis.ticks == null)\n                options.yaxis.ticks = options.yaxis.noTicks;\n            if (options.x2axis) {\n                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);\n                options.xaxes[1].position = \"top\";\n                // Override the inherit to allow the axis to auto-scale\n                if (options.x2axis.min == null) {\n                    options.xaxes[1].min = null;\n                }\n                if (options.x2axis.max == null) {\n                    options.xaxes[1].max = null;\n                }\n            }\n            if (options.y2axis) {\n                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);\n                options.yaxes[1].position = \"right\";\n                // Override the inherit to allow the axis to auto-scale\n                if (options.y2axis.min == null) {\n                    options.yaxes[1].min = null;\n                }\n                if (options.y2axis.max == null) {\n                    options.yaxes[1].max = null;\n                }\n            }\n            if (options.grid.coloredAreas)\n                options.grid.markings = options.grid.coloredAreas;\n            if (options.grid.coloredAreasColor)\n                options.grid.markingsColor = options.grid.coloredAreasColor;\n            if (options.lines)\n                $.extend(true, options.series.lines, options.lines);\n            if (options.points)\n                $.extend(true, options.series.points, options.points);\n            if (options.bars)\n                $.extend(true, options.series.bars, options.bars);\n            if (options.shadowSize != null)\n                options.series.shadowSize = options.shadowSize;\n            if (options.highlightColor != null)\n                options.series.highlightColor = options.highlightColor;\n\n            // save options on axes for future reference\n            for (i = 0; i < options.xaxes.length; ++i)\n                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];\n            for (i = 0; i < options.yaxes.length; ++i)\n                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];\n\n            // add hooks from options\n            for (var n in hooks)\n                if (options.hooks[n] && options.hooks[n].length)\n                    hooks[n] = hooks[n].concat(options.hooks[n]);\n\n            executeHooks(hooks.processOptions, [options]);\n        }\n\n        function setData(d) {\n            series = parseData(d);\n            fillInSeriesOptions();\n            processData();\n        }\n\n        function parseData(d) {\n            var res = [];\n            for (var i = 0; i < d.length; ++i) {\n                var s = $.extend(true, {}, options.series);\n\n                if (d[i].data != null) {\n                    s.data = d[i].data; // move the data instead of deep-copy\n                    delete d[i].data;\n\n                    $.extend(true, s, d[i]);\n\n                    d[i].data = s.data;\n                }\n                else\n                    s.data = d[i];\n                res.push(s);\n            }\n\n            return res;\n        }\n\n        function axisNumber(obj, coord) {\n            var a = obj[coord + \"axis\"];\n            if (typeof a == \"object\") // if we got a real axis, extract number\n                a = a.n;\n            if (typeof a != \"number\")\n                a = 1; // default to first axis\n            return a;\n        }\n\n        function allAxes() {\n            // return flat array without annoying null entries\n            return $.grep(xaxes.concat(yaxes), function (a) { return a; });\n        }\n\n        function canvasToAxisCoords(pos) {\n            // return an object with x/y corresponding to all used axes\n            var res = {}, i, axis;\n            for (i = 0; i < xaxes.length; ++i) {\n                axis = xaxes[i];\n                if (axis && axis.used)\n                    res[\"x\" + axis.n] = axis.c2p(pos.left);\n            }\n\n            for (i = 0; i < yaxes.length; ++i) {\n                axis = yaxes[i];\n                if (axis && axis.used)\n                    res[\"y\" + axis.n] = axis.c2p(pos.top);\n            }\n\n            if (res.x1 !== undefined)\n                res.x = res.x1;\n            if (res.y1 !== undefined)\n                res.y = res.y1;\n\n            return res;\n        }\n\n        function axisToCanvasCoords(pos) {\n            // get canvas coords from the first pair of x/y found in pos\n            var res = {}, i, axis, key;\n\n            for (i = 0; i < xaxes.length; ++i) {\n                axis = xaxes[i];\n                if (axis && axis.used) {\n                    key = \"x\" + axis.n;\n                    if (pos[key] == null && axis.n == 1)\n                        key = \"x\";\n\n                    if (pos[key] != null) {\n                        res.left = axis.p2c(pos[key]);\n                        break;\n                    }\n                }\n            }\n\n            for (i = 0; i < yaxes.length; ++i) {\n                axis = yaxes[i];\n                if (axis && axis.used) {\n                    key = \"y\" + axis.n;\n                    if (pos[key] == null && axis.n == 1)\n                        key = \"y\";\n\n                    if (pos[key] != null) {\n                        res.top = axis.p2c(pos[key]);\n                        break;\n                    }\n                }\n            }\n\n            return res;\n        }\n\n        function getOrCreateAxis(axes, number) {\n            if (!axes[number - 1])\n                axes[number - 1] = {\n                    n: number, // save the number for future reference\n                    direction: axes == xaxes ? \"x\" : \"y\",\n                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)\n                };\n\n            return axes[number - 1];\n        }\n\n        function fillInSeriesOptions() {\n\n            var neededColors = series.length, maxIndex = -1, i;\n\n            // Subtract the number of series that already have fixed colors or\n            // color indexes from the number that we still need to generate.\n\n            for (i = 0; i < series.length; ++i) {\n                var sc = series[i].color;\n                if (sc != null) {\n                    neededColors--;\n                    if (typeof sc == \"number\" && sc > maxIndex) {\n                        maxIndex = sc;\n                    }\n                }\n            }\n\n            // If any of the series have fixed color indexes, then we need to\n            // generate at least as many colors as the highest index.\n\n            if (neededColors <= maxIndex) {\n                neededColors = maxIndex + 1;\n            }\n\n            // Generate all the colors, using first the option colors and then\n            // variations on those colors once they're exhausted.\n\n            var c, colors = [], colorPool = options.colors,\n                colorPoolSize = colorPool.length, variation = 0;\n\n            for (i = 0; i < neededColors; i++) {\n\n                c = $.color.parse(colorPool[i % colorPoolSize] || \"#666\");\n\n                // Each time we exhaust the colors in the pool we adjust\n                // a scaling factor used to produce more variations on\n                // those colors. The factor alternates negative/positive\n                // to produce lighter/darker colors.\n\n                // Reset the variation after every few cycles, or else\n                // it will end up producing only white or black colors.\n\n                if (i % colorPoolSize == 0 && i) {\n                    if (variation >= 0) {\n                        if (variation < 0.5) {\n                            variation = -variation - 0.2;\n                        } else variation = 0;\n                    } else variation = -variation;\n                }\n\n                colors[i] = c.scale('rgb', 1 + variation);\n            }\n\n            // Finalize the series options, filling in their colors\n\n            var colori = 0, s;\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                // assign colors\n                if (s.color == null) {\n                    s.color = colors[colori].toString();\n                    ++colori;\n                }\n                else if (typeof s.color == \"number\")\n                    s.color = colors[s.color].toString();\n\n                // turn on lines automatically in case nothing is set\n                if (s.lines.show == null) {\n                    var v, show = true;\n                    for (v in s)\n                        if (s[v] && s[v].show) {\n                            show = false;\n                            break;\n                        }\n                    if (show)\n                        s.lines.show = true;\n                }\n\n                // If nothing was provided for lines.zero, default it to match\n                // lines.fill, since areas by default should extend to zero.\n\n                if (s.lines.zero == null) {\n                    s.lines.zero = !!s.lines.fill;\n                }\n\n                // setup axes\n                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, \"x\"));\n                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, \"y\"));\n            }\n        }\n\n        function processData() {\n            var topSentry = Number.POSITIVE_INFINITY,\n                bottomSentry = Number.NEGATIVE_INFINITY,\n                fakeInfinity = Number.MAX_VALUE,\n                i, j, k, m, length,\n                s, points, ps, x, y, axis, val, f, p,\n                data, format;\n\n            function updateAxis(axis, min, max) {\n                if (min < axis.datamin && min != -fakeInfinity)\n                    axis.datamin = min;\n                if (max > axis.datamax && max != fakeInfinity)\n                    axis.datamax = max;\n            }\n\n            $.each(allAxes(), function (_, axis) {\n                // init axis\n                axis.datamin = topSentry;\n                axis.datamax = bottomSentry;\n                axis.used = false;\n            });\n\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n                s.datapoints = { points: [] };\n\n                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);\n            }\n\n            // first pass: clean and copy data\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                data = s.data;\n                format = s.datapoints.format;\n\n                if (!format) {\n                    format = [];\n                    // find out how to copy\n                    format.push({ x: true, number: true, required: true });\n                    format.push({ y: true, number: true, required: true });\n\n                    if (s.stack || s.bars.show || (s.lines.show && s.lines.fill)) {\n                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));\n                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });\n                        if (s.bars.horizontal) {\n                            delete format[format.length - 1].y;\n                            format[format.length - 1].x = true;\n                        }\n                    }\n\n                    s.datapoints.format = format;\n                }\n\n                if (s.datapoints.pointsize != null)\n                    continue; // already filled in\n\n                s.datapoints.pointsize = format.length;\n\n                ps = s.datapoints.pointsize;\n                points = s.datapoints.points;\n\n                var insertSteps = s.lines.show && s.lines.steps;\n                s.xaxis.used = s.yaxis.used = true;\n\n                for (j = k = 0; j < data.length; ++j, k += ps) {\n                    p = data[j];\n\n                    var nullify = p == null;\n                    if (!nullify) {\n                        for (m = 0; m < ps; ++m) {\n                            val = p[m];\n                            f = format[m];\n\n                            if (f) {\n                                if (f.number && val != null) {\n                                    val = +val; // convert to number\n                                    if (isNaN(val))\n                                        val = null;\n                                    else if (val == Infinity)\n                                        val = fakeInfinity;\n                                    else if (val == -Infinity)\n                                        val = -fakeInfinity;\n                                }\n\n                                if (val == null) {\n                                    if (f.required)\n                                        nullify = true;\n\n                                    if (f.defaultValue != null)\n                                        val = f.defaultValue;\n                                }\n                            }\n\n                            points[k + m] = val;\n                        }\n                    }\n\n                    if (nullify) {\n                        for (m = 0; m < ps; ++m) {\n                            val = points[k + m];\n                            if (val != null) {\n                                f = format[m];\n                                // extract min/max info\n                                if (f.autoscale !== false) {\n                                    if (f.x) {\n                                        updateAxis(s.xaxis, val, val);\n                                    }\n                                    if (f.y) {\n                                        updateAxis(s.yaxis, val, val);\n                                    }\n                                }\n                            }\n                            points[k + m] = null;\n                        }\n                    }\n\n                    if (insertSteps && k > 0 && (!nullify || points[k - ps] != null)) {\n                        // copy the point to make room for a middle point\n                        for (m = 0; m < ps; ++m)\n                            points[k + ps + m] = points[k + m];\n\n                        // middle point has same y\n                        points[k + 1] = points[k - ps + 1] || 0;\n\n                        // if series has null values, let's give the last !null value a nice step\n                        if(nullify)\n                        \tpoints[k] = p[0];\n\n                        // we've added a point, better reflect that\n                        k += ps;\n                    }\n                }\n            }\n\n            // give the hooks a chance to run\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n                points = s.datapoints.points;\n                ps = s.datapoints.pointsize;\n\n                // grafana\n                if (s.transform === 'negative-Y') {\n                  for (j = 0; j < points.length; j += ps) {\n                    if (points[j] == null)\n                        continue;\n\n                      val = points[j + 1];\n                      points[j + 1] = -val;\n                  }\n                }\n\n                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);\n            }\n\n            // second pass: find datamax/datamin for auto-scaling\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n                points = s.datapoints.points;\n                ps = s.datapoints.pointsize;\n                format = s.datapoints.format;\n\n                var xmin = topSentry, ymin = topSentry,\n                    xmax = bottomSentry, ymax = bottomSentry;\n\n                for (j = 0; j < points.length; j += ps) {\n                    if (points[j] == null)\n                        continue;\n\n                    for (m = 0; m < ps; ++m) {\n                        val = points[j + m];\n                        f = format[m];\n                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)\n                            continue;\n\n                        if (f.x) {\n                            if (val < xmin)\n                                xmin = val;\n                            if (val > xmax)\n                                xmax = val;\n                        }\n                        if (f.y) {\n                            if (val < ymin)\n                                ymin = val;\n                            if (val > ymax)\n                                ymax = val;\n                        }\n                    }\n                }\n\n                if (s.bars.show) {\n                    // make sure we got room for the bar on the dancing floor\n                    var delta;\n\n                    switch (s.bars.align) {\n                        case \"left\":\n                            delta = 0;\n                            break;\n                        case \"right\":\n                            delta = -s.bars.barWidth;\n                            break;\n                        default:\n                            delta = -s.bars.barWidth / 2;\n                    }\n\n                    if (s.bars.horizontal) {\n                        ymin += delta;\n                        ymax += delta + s.bars.barWidth;\n                    }\n                    else {\n                        xmin += delta;\n                        xmax += delta + s.bars.barWidth;\n                    }\n                }\n\n                updateAxis(s.xaxis, xmin, xmax);\n                updateAxis(s.yaxis, ymin, ymax);\n            }\n\n            $.each(allAxes(), function (_, axis) {\n                if (axis.datamin == topSentry)\n                    axis.datamin = null;\n                if (axis.datamax == bottomSentry)\n                    axis.datamax = null;\n            });\n        }\n\n        function setupCanvases() {\n            // Make sure the placeholder is clear of everything except canvases\n            // from a previous plot in this container that we'll try to re-use.\n\n            placeholder.find(\".flot-temp-elem\").remove();\n\n            if (placeholder.css(\"position\") == 'static')\n                placeholder.css(\"position\", \"relative\"); // for positioning labels and overlay\n\n            surface = new Canvas(\"flot-base\", placeholder);\n            overlay = new Canvas(\"flot-overlay\", placeholder); // overlay canvas for interactive features\n\n            ctx = surface.context;\n            octx = overlay.context;\n\n            // define which element we're listening for events on\n            eventHolder = $(overlay.element).unbind();\n\n            // If we're re-using a plot object, shut down the old one\n\n            var existing = placeholder.data(\"plot\");\n\n            if (existing) {\n                existing.shutdown();\n                overlay.clear();\n            }\n\n            // save in case we get replotted\n            placeholder.data(\"plot\", plot);\n        }\n\n        function bindEvents() {\n            // bind events\n            if (options.grid.hoverable) {\n                eventHolder.mousemove(onMouseMove);\n\n                // Use bind, rather than .mouseleave, because we officially\n                // still support jQuery 1.2.6, which doesn't define a shortcut\n                // for mouseenter or mouseleave.  This was a bug/oversight that\n                // was fixed somewhere around 1.3.x.  We can return to using\n                // .mouseleave when we drop support for 1.2.6.\n\n                eventHolder.bind(\"mouseleave\", onMouseLeave);\n            }\n\n            if (options.grid.clickable)\n                eventHolder.click(onClick);\n\n            executeHooks(hooks.bindEvents, [eventHolder]);\n        }\n\n        function shutdown() {\n            if (redrawTimeout)\n                clearTimeout(redrawTimeout);\n\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mouseleave\", onMouseLeave);\n            eventHolder.unbind(\"click\", onClick);\n\n            executeHooks(hooks.shutdown, [eventHolder]);\n        }\n\n        function setTransformationHelpers(axis) {\n            // set helper functions on the axis, assumes plot area\n            // has been computed already\n\n            function identity(x) { return x; }\n\n            var s, m, t = axis.options.transform || identity,\n                it = axis.options.inverseTransform;\n\n            // precompute how much the axis is scaling a point\n            // in canvas space\n            if (axis.direction == \"x\") {\n                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));\n                m = Math.min(t(axis.max), t(axis.min));\n            }\n            else {\n                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));\n                s = -s;\n                m = Math.max(t(axis.max), t(axis.min));\n            }\n\n            // data point to canvas coordinate\n            if (t == identity) // slight optimization\n                axis.p2c = function (p) { return (p - m) * s; };\n            else\n                axis.p2c = function (p) { return (t(p) - m) * s; };\n            // canvas coordinate to data point\n            if (!it)\n                axis.c2p = function (c) { return m + c / s; };\n            else\n                axis.c2p = function (c) { return it(m + c / s); };\n        }\n\n        function measureTickLabels(axis) {\n\n            var opts = axis.options,\n                ticks = axis.ticks || [],\n                labelWidth = opts.labelWidth || 0,\n                labelHeight = opts.labelHeight || 0,\n                maxWidth = labelWidth || (axis.direction == \"x\" ? Math.floor(surface.width / (ticks.length || 1)) : null),\n                legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n                layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n                font = opts.font || \"flot-tick-label tickLabel\";\n\n            for (var i = 0; i < ticks.length; ++i) {\n\n                var t = ticks[i];\n\n                if (!t.label)\n                    continue;\n\n                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);\n\n                /// Grafana fix, add +1 to label width\n                labelWidth = Math.max(labelWidth, info.width + 1);\n                labelHeight = Math.max(labelHeight, info.height);\n            }\n\n            axis.labelWidth = opts.labelWidth || labelWidth;\n            axis.labelHeight = opts.labelHeight || labelHeight;\n        }\n\n        function allocateAxisBoxFirstPhase(axis) {\n            // find the bounding box of the axis by looking at label\n            // widths/heights and ticks, make room by diminishing the\n            // plotOffset; this first phase only looks at one\n            // dimension per axis, the other dimension depends on the\n            // other axes so will have to wait\n\n            var lw = axis.labelWidth,\n                lh = axis.labelHeight,\n                pos = axis.options.position,\n                isXAxis = axis.direction === \"x\",\n                tickLength = axis.options.tickLength,\n                axisMargin = options.grid.axisMargin,\n                padding = options.grid.labelMargin,\n                eventSectionPadding = options.grid.eventSectionHeight,\n                innermost = true,\n                outermost = true,\n                first = true,\n                found = false;\n\n            // Determine the axis's position in its direction and on its side\n\n            $.each(isXAxis ? xaxes : yaxes, function(i, a) {\n                if (a && (a.show || a.reserveSpace)) {\n                    if (a === axis) {\n                        found = true;\n                    } else if (a.options.position === pos) {\n                        if (found) {\n                            outermost = false;\n                        } else {\n                            innermost = false;\n                        }\n                    }\n                    if (!found) {\n                        first = false;\n                    }\n                }\n            });\n\n            // The outermost axis on each side has no margin\n\n            if (outermost) {\n                axisMargin = 0;\n            }\n\n            // The ticks for the first axis in each direction stretch across\n\n            if (tickLength == null) {\n                tickLength = first ? \"full\" : 5;\n            }\n\n            if (!isNaN(+tickLength))\n                padding += +tickLength;\n\n            if (isXAxis) {\n                // Add space for event section\n                lh += padding;\n                lh += eventSectionPadding;\n\n                if (pos == \"bottom\") {\n                    plotOffset.bottom += lh + axisMargin;\n                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };\n                }\n                else {\n                    axis.box = { top: plotOffset.top + axisMargin, height: lh };\n                    plotOffset.top += lh + axisMargin;\n                }\n            }\n            else {\n                lw += padding;\n\n                if (pos == \"left\") {\n                    axis.box = { left: plotOffset.left + axisMargin, width: lw };\n                    plotOffset.left += lw + axisMargin;\n                }\n                else {\n                    plotOffset.right += lw + axisMargin;\n                    axis.box = { left: surface.width - plotOffset.right, width: lw };\n                }\n            }\n\n             // save for future reference\n            axis.position = pos;\n            axis.tickLength = tickLength;\n            axis.box.padding = padding;\n            axis.box.eventSectionPadding = eventSectionPadding;\n            axis.innermost = innermost;\n        }\n\n        function allocateAxisBoxSecondPhase(axis) {\n            // now that all axis boxes have been placed in one\n            // dimension, we can set the remaining dimension coordinates\n            if (axis.direction == \"x\") {\n                axis.box.left = plotOffset.left - axis.labelWidth / 2;\n                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;\n            }\n            else {\n                axis.box.top = plotOffset.top - axis.labelHeight / 2;\n                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;\n            }\n        }\n\n        function adjustLayoutForThingsStickingOut() {\n            // possibly adjust plot offset to ensure everything stays\n            // inside the canvas and isn't clipped off\n\n            var minMargin = options.grid.minBorderMargin,\n                axis, i;\n\n            // check stuff from the plot (FIXME: this should just read\n            // a value from the series, otherwise it's impossible to\n            // customize)\n            if (minMargin == null) {\n                minMargin = 0;\n                for (i = 0; i < series.length; ++i)\n                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));\n            }\n\n            var margins = {\n                left: minMargin,\n                right: minMargin,\n                top: minMargin,\n                bottom: minMargin\n            };\n\n            // check axis labels, note we don't check the actual\n            // labels but instead use the overall width/height to not\n            // jump as much around with replots\n            $.each(allAxes(), function (_, axis) {\n                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {\n                    if (axis.direction === \"x\") {\n                        margins.left = Math.max(margins.left, axis.labelWidth / 2);\n                        margins.right = Math.max(margins.right, axis.labelWidth / 2);\n                    } else {\n                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);\n                        margins.top = Math.max(margins.top, axis.labelHeight / 2);\n                    }\n                }\n            });\n\n            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));\n            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));\n            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));\n            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));\n        }\n\n        function setupGrid() {\n            var i, axes = allAxes(), showGrid = options.grid.show;\n\n            // Initialize the plot's offset from the edge of the canvas\n\n            for (var a in plotOffset) {\n                var margin = options.grid.margin || 0;\n                plotOffset[a] = typeof margin == \"number\" ? margin : margin[a] || 0;\n            }\n\n            executeHooks(hooks.processOffset, [plotOffset]);\n\n            // If the grid is visible, add its border width to the offset\n\n            for (var a in plotOffset) {\n                if(typeof(options.grid.borderWidth) == \"object\") {\n                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;\n                }\n                else {\n                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;\n                }\n            }\n\n            $.each(axes, function (_, axis) {\n                var axisOpts = axis.options;\n                axis.show = axisOpts.show == null ? axis.used : axisOpts.show;\n                axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;\n                setRange(axis);\n            });\n\n            executeHooks(hooks.processRange, []);\n\n            if (showGrid) {\n\n                var allocatedAxes = $.grep(axes, function (axis) {\n                    return axis.show || axis.reserveSpace;\n                });\n\n                var snaped = false;\n                for (var i = 0; i < 2; i++) {\n                    $.each(allocatedAxes, function (_, axis) {\n                        // make the ticks\n                        setupTickGeneration(axis);\n                        setTicks(axis);\n                        snaped = snapRangeToTicks(axis, axis.ticks) || snaped;\n                        // find labelWidth/Height for axis\n                        measureTickLabels(axis);\n                    });\n\n                    if (snaped && hooks.processRange.length > 0) {\n                        executeHooks(hooks.processRange, []);\n                        snaped = false;\n                    } else {\n                        break;\n                    }\n                }\n\n                // with all dimensions calculated, we can compute the\n                // axis bounding boxes, start from the outside\n                // (reverse order)\n                for (i = allocatedAxes.length - 1; i >= 0; --i)\n                    allocateAxisBoxFirstPhase(allocatedAxes[i]);\n\n                // make sure we've got enough space for things that\n                // might stick out\n                adjustLayoutForThingsStickingOut();\n\n                $.each(allocatedAxes, function (_, axis) {\n                    allocateAxisBoxSecondPhase(axis);\n                });\n            }\n\n\n            plotWidth = surface.width - plotOffset.left - plotOffset.right;\n            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;\n\n            // now we got the proper plot dimensions, we can compute the scaling\n            $.each(axes, function (_, axis) {\n                setTransformationHelpers(axis);\n            });\n\n            if (showGrid) {\n                drawAxisLabels();\n            }\n\n            insertLegend();\n        }\n\n        function setRange(axis) {\n            var opts = axis.options,\n                min = +(opts.min != null ? opts.min : axis.datamin),\n                max = +(opts.max != null ? opts.max : axis.datamax),\n                delta = max - min;\n\n            if (delta == 0.0) {\n                // Grafana fix: wide Y min and max using increased wideFactor\n                // when all series values are the same\n                var wideFactor = 0.25;\n                var widen = Math.abs(max == 0 ? 1 : max * wideFactor);\n\n                if (opts.min == null) {\n                  min -= widen;\n                }\n                // always widen max if we couldn't widen min to ensure we\n                // don't fall into min == max which doesn't work\n                if (opts.max == null || opts.min != null) {\n                  max += widen;\n                }\n            }\n            else {\n                // consider autoscaling\n                var margin = opts.autoscaleMargin;\n                if (margin != null) {\n                    if (opts.min == null) {\n                        min -= delta * margin;\n                        // make sure we don't go below zero if all values\n                        // are positive\n                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)\n                            min = 0;\n                    }\n                    if (opts.max == null) {\n                        max += delta * margin;\n                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)\n                            max = 0;\n                    }\n                }\n            }\n            axis.min = min;\n            axis.max = max;\n        }\n\n        function setupTickGeneration(axis) {\n            var opts = axis.options;\n\n            // estimate number of ticks\n            var noTicks;\n            if (typeof opts.ticks == \"number\" && opts.ticks > 0)\n                noTicks = opts.ticks;\n            else\n                // heuristic based on the model a*sqrt(x) fitted to\n                // some data points that seemed reasonable\n                noTicks = 0.3 * Math.sqrt(axis.direction == \"x\" ? surface.width : surface.height);\n\n            var delta = (axis.max - axis.min) / noTicks,\n                dec = -Math.floor(Math.log(delta) / Math.LN10),\n                maxDec = opts.tickDecimals;\n\n            if (maxDec != null && dec > maxDec) {\n                dec = maxDec;\n            }\n\n            var magn = Math.pow(10, -dec),\n                norm = delta / magn, // norm is between 1.0 and 10.0\n                size;\n\n            if (norm < 1.5) {\n                size = 1;\n            } else if (norm < 3) {\n                size = 2;\n                // special case for 2.5, requires an extra decimal\n                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\n                    size = 2.5;\n                    ++dec;\n                }\n            } else if (norm < 7.5) {\n                size = 5;\n            } else {\n                size = 10;\n            }\n\n            size *= magn;\n\n            if (opts.minTickSize != null && size < opts.minTickSize) {\n                size = opts.minTickSize;\n            }\n\n            axis.delta = delta;\n            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);\n            axis.tickSize = opts.tickSize || size;\n            // grafana addition\n            axis.scaledDecimals = axis.tickDecimals - Math.floor(Math.log(axis.tickSize) / Math.LN10);\n\n            // Time mode was moved to a plug-in in 0.8, and since so many people use it\n            // we'll add an especially friendly reminder to make sure they included it.\n\n            if (opts.mode == \"time\" && !axis.tickGenerator) {\n                throw new Error(\"Time mode requires the flot.time plugin.\");\n            }\n\n            // Flot supports base-10 axes; any other mode else is handled by a plug-in,\n            // like flot.time.js.\n\n            if (!axis.tickGenerator) {\n\n                axis.tickGenerator = function (axis) {\n\n                    var ticks = [],\n                        start = floorInBase(axis.min, axis.tickSize),\n                        i = 0,\n                        v = Number.NaN,\n                        prev;\n\n                    do {\n                        prev = v;\n                        v = start + i * axis.tickSize;\n                        ticks.push(v);\n                        ++i;\n                    } while (v < axis.max && v != prev);\n                    return ticks;\n                };\n\n\t\t\t\taxis.tickFormatter = function (value, axis) {\n\n\t\t\t\t\tvar factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\n\t\t\t\t\tvar formatted = \"\" + Math.round(value * factor) / factor;\n\n\t\t\t\t\t// If tickDecimals was specified, ensure that we have exactly that\n\t\t\t\t\t// much precision; otherwise default to the value's own precision.\n\n\t\t\t\t\tif (axis.tickDecimals != null) {\n\t\t\t\t\t\tvar decimal = formatted.indexOf(\".\");\n\t\t\t\t\t\tvar precision = decimal == -1 ? 0 : formatted.length - decimal - 1;\n\t\t\t\t\t\tif (precision < axis.tickDecimals) {\n\t\t\t\t\t\t\treturn (precision ? formatted : formatted + \".\") + (\"\" + factor).substr(1, axis.tickDecimals - precision);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                    return formatted;\n                };\n            }\n\n            if ($.isFunction(opts.tickFormatter))\n                axis.tickFormatter = function (v, axis) { return \"\" + opts.tickFormatter(v, axis); };\n\n            if (opts.alignTicksWithAxis != null) {\n                var otherAxis = (axis.direction == \"x\" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];\n                if (otherAxis && otherAxis.used && otherAxis != axis) {\n                    // consider snapping min/max to outermost nice ticks\n                    var niceTicks = axis.tickGenerator(axis);\n                    if (niceTicks.length > 0) {\n                        if (opts.min == null)\n                            axis.min = Math.min(axis.min, niceTicks[0]);\n                        if (opts.max == null && niceTicks.length > 1)\n                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);\n                    }\n\n                    axis.tickGenerator = function (axis) {\n                        // copy ticks, scaled to this axis\n                        var ticks = [], v, i;\n                        for (i = 0; i < otherAxis.ticks.length; ++i) {\n                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);\n                            v = axis.min + v * (axis.max - axis.min);\n                            ticks.push(v);\n                        }\n                        return ticks;\n                    };\n\n                    // we might need an extra decimal since forced\n                    // ticks don't necessarily fit naturally\n                    if (!axis.mode && opts.tickDecimals == null) {\n                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),\n                            ts = axis.tickGenerator(axis);\n\n                        // only proceed if the tick interval rounded\n                        // with an extra decimal doesn't give us a\n                        // zero at end\n                        if (!(ts.length > 1 && /\\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))\n                            axis.tickDecimals = extraDec;\n                    }\n                }\n            }\n        }\n\n        function setTicks(axis) {\n            var oticks = axis.options.ticks, ticks = [];\n            if (oticks == null || (typeof oticks == \"number\" && oticks > 0))\n                ticks = axis.tickGenerator(axis);\n            else if (oticks) {\n                if ($.isFunction(oticks))\n                    // generate the ticks\n                    ticks = oticks(axis);\n                else\n                    ticks = oticks;\n            }\n\n            // clean up/labelify the supplied ticks, copy them over\n            var i, v;\n            axis.ticks = [];\n            for (i = 0; i < ticks.length; ++i) {\n                var label = null;\n                var t = ticks[i];\n                if (typeof t == \"object\") {\n                    v = +t[0];\n                    if (t.length > 1)\n                        label = t[1];\n                }\n                else\n                    v = +t;\n                if (label == null)\n                    label = axis.tickFormatter(v, axis);\n                if (!isNaN(v))\n                    axis.ticks.push({ v: v, label: label });\n            }\n        }\n\n        function snapRangeToTicks(axis, ticks) {\n            var changed = false;\n            if (axis.options.autoscaleMargin && ticks.length > 0) {\n                // snap to ticks\n                if (axis.options.min == null) {\n                    axis.min = Math.min(axis.min, ticks[0].v);\n                    changed = true;\n                }\n                if (axis.options.max == null && ticks.length > 1) {\n                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);\n                    changed = true;\n                }\n            }\n            return changed;\n        }\n\n        function draw() {\n\n            surface.clear();\n\n            executeHooks(hooks.drawBackground, [ctx]);\n\n            var grid = options.grid;\n\n            // draw background, if any\n            if (grid.show && grid.backgroundColor)\n                drawBackground();\n\n            if (grid.show && !grid.aboveData) {\n                drawGrid();\n            }\n\n            for (var i = 0; i < series.length; ++i) {\n                executeHooks(hooks.drawSeries, [ctx, series[i]]);\n                drawSeries(series[i]);\n            }\n\n            executeHooks(hooks.draw, [ctx]);\n\n            if (grid.show && grid.aboveData) {\n                drawGrid();\n            }\n\n            surface.render();\n\n            // A draw implies that either the axes or data have changed, so we\n            // should probably update the overlay highlights as well.\n\n            triggerRedrawOverlay();\n        }\n\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = allAxes();\n\n            for (var i = 0; i < axes.length; ++i) {\n                axis = axes[i];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? xaxes[0] : yaxes[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n\n            return { from: from, to: to, axis: axis };\n        }\n\n        function drawBackground() {\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, \"rgba(255, 255, 255, 0)\");\n            ctx.fillRect(0, 0, plotWidth, plotHeight);\n            ctx.restore();\n        }\n\n        function drawGrid() {\n            var i, axes, bw, bc;\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            // draw markings\n            var markings = options.grid.markings;\n            if (markings) {\n                if ($.isFunction(markings)) {\n                    axes = plot.getAxes();\n                    // xmin etc. is backwards compatibility, to be\n                    // removed in the future\n                    axes.xmin = axes.xaxis.min;\n                    axes.xmax = axes.xaxis.max;\n                    axes.ymin = axes.yaxis.min;\n                    axes.ymax = axes.yaxis.max;\n\n                    markings = markings(axes);\n                }\n\n                for (i = 0; i < markings.length; ++i) {\n                    var m = markings[i],\n                        xrange = extractRange(m, \"x\"),\n                        yrange = extractRange(m, \"y\");\n\n                    // fill in missing\n                    if (xrange.from == null)\n                        xrange.from = xrange.axis.min;\n                    if (xrange.to == null)\n                        xrange.to = xrange.axis.max;\n                    if (yrange.from == null)\n                        yrange.from = yrange.axis.min;\n                    if (yrange.to == null)\n                        yrange.to = yrange.axis.max;\n\n                    // clip\n                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||\n                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)\n                        continue;\n\n                    xrange.from = Math.max(xrange.from, xrange.axis.min);\n                    xrange.to = Math.min(xrange.to, xrange.axis.max);\n                    yrange.from = Math.max(yrange.from, yrange.axis.min);\n                    yrange.to = Math.min(yrange.to, yrange.axis.max);\n\n                    var xequal = xrange.from === xrange.to,\n                        yequal = yrange.from === yrange.to;\n\n                    if (xequal && yequal) {\n                        continue;\n                    }\n\n                    // then draw\n                    xrange.from = Math.floor(xrange.axis.p2c(xrange.from));\n                    xrange.to = Math.floor(xrange.axis.p2c(xrange.to));\n                    yrange.from = Math.floor(yrange.axis.p2c(yrange.from));\n                    yrange.to = Math.floor(yrange.axis.p2c(yrange.to));\n\n                    if (xequal || yequal) {\n                        var lineWidth = m.lineWidth || options.grid.markingsLineWidth,\n                            subPixel = lineWidth % 2 ? 0.5 : 0;\n                        ctx.beginPath();\n                        ctx.strokeStyle = m.color || options.grid.markingsColor;\n                        ctx.lineWidth = lineWidth;\n                        if (xequal) {\n                            ctx.moveTo(xrange.to + subPixel, yrange.from);\n                            ctx.lineTo(xrange.to + subPixel, yrange.to);\n                        } else {\n                            ctx.moveTo(xrange.from, yrange.to + subPixel);\n                            ctx.lineTo(xrange.to, yrange.to + subPixel);\n                        }\n                        ctx.stroke();\n                    } else {\n                        ctx.fillStyle = m.color || options.grid.markingsColor;\n                        ctx.fillRect(xrange.from, yrange.to,\n                                     xrange.to - xrange.from,\n                                     yrange.from - yrange.to);\n                    }\n                }\n            }\n\n            // draw the ticks\n            axes = allAxes();\n            bw = options.grid.borderWidth;\n\n            for (var j = 0; j < axes.length; ++j) {\n                var axis = axes[j], box = axis.box,\n                    t = axis.tickLength, x, y, xoff, yoff;\n                if (!axis.show || axis.ticks.length == 0)\n                    continue;\n\n                ctx.lineWidth = 1;\n\n                // find the edges\n                if (axis.direction == \"x\") {\n                    x = 0;\n                    if (t == \"full\")\n                        y = (axis.position == \"top\" ? 0 : plotHeight);\n                    else\n                        y = box.top - plotOffset.top + (axis.position == \"top\" ? box.height : 0);\n                }\n                else {\n                    y = 0;\n                    if (t == \"full\")\n                        x = (axis.position == \"left\" ? 0 : plotWidth);\n                    else\n                        x = box.left - plotOffset.left + (axis.position == \"left\" ? box.width : 0);\n                }\n\n                // draw tick bar\n                if (!axis.innermost) {\n                    ctx.strokeStyle = axis.options.color;\n                    ctx.beginPath();\n                    xoff = yoff = 0;\n                    if (axis.direction == \"x\")\n                        xoff = plotWidth + 1;\n                    else\n                        yoff = plotHeight + 1;\n\n                    if (ctx.lineWidth == 1) {\n                        if (axis.direction == \"x\") {\n                            y = Math.floor(y) + 0.5;\n                        } else {\n                            x = Math.floor(x) + 0.5;\n                        }\n                    }\n\n                    ctx.moveTo(x, y);\n                    ctx.lineTo(x + xoff, y + yoff);\n                    ctx.stroke();\n                }\n\n                // draw ticks\n\n                ctx.strokeStyle = axis.options.tickColor;\n\n                ctx.beginPath();\n                for (i = 0; i < axis.ticks.length; ++i) {\n                    var v = axis.ticks[i].v;\n\n                    xoff = yoff = 0;\n\n                    if (isNaN(v) || v < axis.min || v > axis.max\n                        // skip those lying on the axes if we got a border\n                        || (t == \"full\"\n                            && ((typeof bw == \"object\" && bw[axis.position] > 0) || bw > 0)\n                            && (v == axis.min || v == axis.max)))\n                        continue;\n\n                    if (axis.direction == \"x\") {\n                        x = axis.p2c(v);\n                        yoff = t == \"full\" ? -plotHeight : t;\n\n                        if (axis.position == \"top\")\n                            yoff = -yoff;\n                    }\n                    else {\n                        y = axis.p2c(v);\n                        xoff = t == \"full\" ? -plotWidth : t;\n\n                        if (axis.position == \"left\")\n                            xoff = -xoff;\n                    }\n\n                    if (ctx.lineWidth == 1) {\n                        if (axis.direction == \"x\")\n                            x = Math.floor(x) + 0.5;\n                        else\n                            y = Math.floor(y) + 0.5;\n                    }\n\n                    ctx.moveTo(x, y);\n                    ctx.lineTo(x + xoff, y + yoff);\n                }\n\n                ctx.stroke();\n            }\n\n\n            // draw border\n            if (bw) {\n                // If either borderWidth or borderColor is an object, then draw the border\n                // line by line instead of as one rectangle\n                bc = options.grid.borderColor;\n                if(typeof bw == \"object\" || typeof bc == \"object\") {\n                    if (typeof bw !== \"object\") {\n                        bw = {top: bw, right: bw, bottom: bw, left: bw};\n                    }\n                    if (typeof bc !== \"object\") {\n                        bc = {top: bc, right: bc, bottom: bc, left: bc};\n                    }\n\n                    if (bw.top > 0) {\n                        ctx.strokeStyle = bc.top;\n                        ctx.lineWidth = bw.top;\n                        ctx.beginPath();\n                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);\n                        ctx.lineTo(plotWidth, 0 - bw.top/2);\n                        ctx.stroke();\n                    }\n\n                    if (bw.right > 0) {\n                        ctx.strokeStyle = bc.right;\n                        ctx.lineWidth = bw.right;\n                        ctx.beginPath();\n                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);\n                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);\n                        ctx.stroke();\n                    }\n\n                    if (bw.bottom > 0) {\n                        ctx.strokeStyle = bc.bottom;\n                        ctx.lineWidth = bw.bottom;\n                        ctx.beginPath();\n                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);\n                        ctx.lineTo(0, plotHeight + bw.bottom / 2);\n                        ctx.stroke();\n                    }\n\n                    if (bw.left > 0) {\n                        ctx.strokeStyle = bc.left;\n                        ctx.lineWidth = bw.left;\n                        ctx.beginPath();\n                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);\n                        ctx.lineTo(0- bw.left/2, 0);\n                        ctx.stroke();\n                    }\n                }\n                else {\n                    ctx.lineWidth = bw;\n                    ctx.strokeStyle = options.grid.borderColor;\n                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);\n                }\n            }\n\n            ctx.restore();\n        }\n\n        function drawAxisLabels() {\n\n            $.each(allAxes(), function (_, axis) {\n                var box = axis.box,\n                    legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n                    layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n                    font = axis.options.font || \"flot-tick-label tickLabel\",\n                    tick, x, y, halign, valign;\n\n                // Remove text before checking for axis.show and ticks.length;\n                // otherwise plugins, like flot-tickrotor, that draw their own\n                // tick labels will end up with both theirs and the defaults.\n\n                surface.removeText(layer);\n\n                if (!axis.show || axis.ticks.length == 0)\n                    return;\n\n                for (var i = 0; i < axis.ticks.length; ++i) {\n\n                    tick = axis.ticks[i];\n                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)\n                        continue;\n\n                    if (axis.direction == \"x\") {\n                        halign = \"center\";\n                        x = plotOffset.left + axis.p2c(tick.v);\n                        if (axis.position == \"bottom\") {\n                            y = box.top + box.padding + box.eventSectionPadding;\n                        } else {\n                            y = box.top + box.height - box.padding;\n                            valign = \"bottom\";\n                        }\n                    } else {\n                        valign = \"middle\";\n                        y = plotOffset.top + axis.p2c(tick.v);\n                        if (axis.position == \"left\") {\n                            x = box.left + box.width - box.padding;\n                            halign = \"right\";\n                        } else {\n                            x = box.left + box.padding;\n                        }\n                    }\n\n                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);\n                }\n            });\n        }\n\n        function drawSeries(series) {\n            if (series.lines.show)\n                drawSeriesLines(series);\n            if (series.bars.show)\n                drawSeriesBars(series);\n            if (series.points.show)\n                drawSeriesPoints(series);\n        }\n\n        function drawSeriesLines(series) {\n            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {\n                var points = datapoints.points,\n                    ps = datapoints.pointsize,\n                    prevx = null, prevy = null;\n\n                ctx.beginPath();\n                for (var i = ps; i < points.length; i += ps) {\n                    var x1 = points[i - ps], y1 = points[i - ps + 1],\n                        x2 = points[i], y2 = points[i + 1];\n\n                    if (x1 == null || x2 == null)\n                        continue;\n\n                    // clip with ymin\n                    if (y1 <= y2 && y1 < axisy.min) {\n                        if (y2 < axisy.min)\n                            continue;   // line segment is outside\n                        // compute new intersection point\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.min;\n                    }\n                    else if (y2 <= y1 && y2 < axisy.min) {\n                        if (y1 < axisy.min)\n                            continue;\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.min;\n                    }\n\n                    // clip with ymax\n                    if (y1 >= y2 && y1 > axisy.max) {\n                        if (y2 > axisy.max)\n                            continue;\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.max;\n                    }\n                    else if (y2 >= y1 && y2 > axisy.max) {\n                        if (y1 > axisy.max)\n                            continue;\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.max;\n                    }\n\n                    // clip with xmin\n                    if (x1 <= x2 && x1 < axisx.min) {\n                        if (x2 < axisx.min)\n                            continue;\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.min;\n                    }\n                    else if (x2 <= x1 && x2 < axisx.min) {\n                        if (x1 < axisx.min)\n                            continue;\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.min;\n                    }\n\n                    // clip with xmax\n                    if (x1 >= x2 && x1 > axisx.max) {\n                        if (x2 > axisx.max)\n                            continue;\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.max;\n                    }\n                    else if (x2 >= x1 && x2 > axisx.max) {\n                        if (x1 > axisx.max)\n                            continue;\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.max;\n                    }\n\n                    if (x1 != prevx || y1 != prevy)\n                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n\n                    prevx = x2;\n                    prevy = y2;\n                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);\n                }\n                ctx.stroke();\n            }\n\n            function plotLineArea(datapoints, axisx, axisy) {\n                var points = datapoints.points,\n                    ps = datapoints.pointsize,\n                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),\n                    i = 0, top, areaOpen = false,\n                    ypos = 1, segmentStart = 0, segmentEnd = 0;\n\n                // we process each segment in two turns, first forward\n                // direction to sketch out top, then once we hit the\n                // end we go backwards to sketch the bottom\n                while (true) {\n                    if (ps > 0 && i > points.length + ps)\n                        break;\n\n                    i += ps; // ps is negative if going backwards\n\n                    var x1 = points[i - ps],\n                        y1 = points[i - ps + ypos],\n                        x2 = points[i], y2 = points[i + ypos];\n\n                    if (areaOpen) {\n                        if (ps > 0 && x1 != null && x2 == null) {\n                            // at turning point\n                            segmentEnd = i;\n                            ps = -ps;\n                            ypos = 2;\n                            continue;\n                        }\n\n                        if (ps < 0 && i == segmentStart + ps) {\n                            // done with the reverse sweep\n                            ctx.fill();\n                            areaOpen = false;\n                            ps = -ps;\n                            ypos = 1;\n                            i = segmentStart = segmentEnd + ps;\n                            continue;\n                        }\n                    }\n\n                    if (x1 == null || x2 == null)\n                        continue;\n\n                    // clip x values\n\n                    // clip with xmin\n                    if (x1 <= x2 && x1 < axisx.min) {\n                        if (x2 < axisx.min)\n                            continue;\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.min;\n                    }\n                    else if (x2 <= x1 && x2 < axisx.min) {\n                        if (x1 < axisx.min)\n                            continue;\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.min;\n                    }\n\n                    // clip with xmax\n                    if (x1 >= x2 && x1 > axisx.max) {\n                        if (x2 > axisx.max)\n                            continue;\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.max;\n                    }\n                    else if (x2 >= x1 && x2 > axisx.max) {\n                        if (x1 > axisx.max)\n                            continue;\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.max;\n                    }\n\n                    if (!areaOpen) {\n                        // open area\n                        ctx.beginPath();\n                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));\n                        areaOpen = true;\n                    }\n\n                    // now first check the case where both is outside\n                    if (y1 >= axisy.max && y2 >= axisy.max) {\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));\n                        continue;\n                    }\n                    else if (y1 <= axisy.min && y2 <= axisy.min) {\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));\n                        continue;\n                    }\n\n                    // else it's a bit more complicated, there might\n                    // be a flat maxed out rectangle first, then a\n                    // triangular cutout or reverse; to find these\n                    // keep track of the current x values\n                    var x1old = x1, x2old = x2;\n\n                    // clip the y values, without shortcutting, we\n                    // go through all cases in turn\n\n                    // clip with ymin\n                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.min;\n                    }\n                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.min;\n                    }\n\n                    // clip with ymax\n                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.max;\n                    }\n                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.max;\n                    }\n\n                    // if the x value was changed we got a rectangle\n                    // to fill\n                    if (x1 != x1old) {\n                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));\n                        // it goes to (x1, y1), but we fill that below\n                    }\n\n                    // fill triangular section, this sometimes result\n                    // in redundant points if (x1, y1) hasn't changed\n                    // from previous line to, but we just ignore that\n                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));\n                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n\n                    // fill the other rectangle if it's there\n                    if (x2 != x2old) {\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));\n                    }\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n            ctx.lineJoin = \"round\";\n\n            var lw = series.lines.lineWidth,\n                sw = series.shadowSize;\n            // FIXME: consider another form of shadow when filling is turned on\n            if (lw > 0 && sw > 0) {\n                // draw shadow as a thick and thin line with transparency\n                ctx.lineWidth = sw;\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n                // position shadow at angle from the mid of line\n                var angle = Math.PI/18;\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);\n                ctx.lineWidth = sw/2;\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);\n            }\n\n            ctx.lineWidth = lw;\n            ctx.strokeStyle = series.color;\n            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);\n            if (fillStyle) {\n                ctx.fillStyle = fillStyle;\n                plotLineArea(series.datapoints, series.xaxis, series.yaxis);\n            }\n\n            if (lw > 0)\n                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);\n            ctx.restore();\n        }\n\n        function drawSeriesPoints(series) {\n            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {\n                var points = datapoints.points, ps = datapoints.pointsize;\n\n                for (var i = 0; i < points.length; i += ps) {\n                    var x = points[i], y = points[i + 1];\n                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n                        continue;\n\n                    ctx.beginPath();\n                    x = axisx.p2c(x);\n                    y = axisy.p2c(y) + offset;\n                    if (symbol == \"circle\")\n                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);\n                    else\n                        symbol(ctx, x, y, radius, shadow);\n                    ctx.closePath();\n\n                    if (fillStyle) {\n                        ctx.fillStyle = fillStyle;\n                        ctx.fill();\n                    }\n                    ctx.stroke();\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            var lw = series.points.lineWidth,\n                sw = series.shadowSize,\n                radius = series.points.radius,\n                symbol = series.points.symbol;\n\n            // If the user sets the line width to 0, we change it to a very\n            // small value. A line width of 0 seems to force the default of 1.\n            // Doing the conditional here allows the shadow setting to still be\n            // optional even with a lineWidth of 0.\n\n            if( lw == 0 )\n                lw = 0.0001;\n\n            if (lw > 0 && sw > 0) {\n                // draw shadow in two steps\n                var w = sw / 2;\n                ctx.lineWidth = w;\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n                plotPoints(series.datapoints, radius, null, w + w/2, true,\n                           series.xaxis, series.yaxis, symbol);\n\n                ctx.strokeStyle = \"rgba(0,0,0,0.2)\";\n                plotPoints(series.datapoints, radius, null, w/2, true,\n                           series.xaxis, series.yaxis, symbol);\n            }\n\n            ctx.lineWidth = lw;\n            ctx.strokeStyle = series.color;\n            plotPoints(series.datapoints, radius,\n                       getFillStyle(series.points, series.color), 0, false,\n                       series.xaxis, series.yaxis, symbol);\n            ctx.restore();\n        }\n\n        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {\n            var left, right, bottom, top,\n                drawLeft, drawRight, drawTop, drawBottom,\n                tmp;\n\n            // in horizontal mode, we start the bar from the left\n            // instead of from the bottom so it appears to be\n            // horizontal rather than vertical\n            if (horizontal) {\n                drawBottom = drawRight = drawTop = true;\n                drawLeft = false;\n                left = b;\n                right = x;\n                top = y + barLeft;\n                bottom = y + barRight;\n\n                // account for negative bars\n                if (right < left) {\n                    tmp = right;\n                    right = left;\n                    left = tmp;\n                    drawLeft = true;\n                    drawRight = false;\n                }\n            }\n            else {\n                drawLeft = drawRight = drawTop = true;\n                drawBottom = false;\n                left = x + barLeft;\n                right = x + barRight;\n                bottom = b;\n                top = y;\n\n                // account for negative bars\n                if (top < bottom) {\n                    tmp = top;\n                    top = bottom;\n                    bottom = tmp;\n                    drawBottom = true;\n                    drawTop = false;\n                }\n            }\n\n            // clip\n            if (right < axisx.min || left > axisx.max ||\n                top < axisy.min || bottom > axisy.max)\n                return;\n\n            if (left < axisx.min) {\n                left = axisx.min;\n                drawLeft = false;\n            }\n\n            if (right > axisx.max) {\n                right = axisx.max;\n                drawRight = false;\n            }\n\n            if (bottom < axisy.min) {\n                bottom = axisy.min;\n                drawBottom = false;\n            }\n\n            if (top > axisy.max) {\n                top = axisy.max;\n                drawTop = false;\n            }\n\n            left = axisx.p2c(left);\n            bottom = axisy.p2c(bottom);\n            right = axisx.p2c(right);\n            top = axisy.p2c(top);\n\n            // fill the bar\n            if (fillStyleCallback) {\n                c.fillStyle = fillStyleCallback(bottom, top);\n                c.fillRect(left, top, right - left, bottom - top)\n            }\n\n            // draw outline\n            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {\n                c.beginPath();\n\n                // FIXME: inline moveTo is buggy with excanvas\n                c.moveTo(left, bottom);\n                if (drawLeft)\n                    c.lineTo(left, top);\n                else\n                    c.moveTo(left, top);\n                if (drawTop)\n                    c.lineTo(right, top);\n                else\n                    c.moveTo(right, top);\n                if (drawRight)\n                    c.lineTo(right, bottom);\n                else\n                    c.moveTo(right, bottom);\n                if (drawBottom)\n                    c.lineTo(left, bottom);\n                else\n                    c.moveTo(left, bottom);\n                c.stroke();\n            }\n        }\n\n        function drawSeriesBars(series) {\n            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {\n                var points = datapoints.points, ps = datapoints.pointsize;\n\n                for (var i = 0; i < points.length; i += ps) {\n                    if (points[i] == null)\n                        continue;\n                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            // FIXME: figure out a way to add shadows (for instance along the right edge)\n            ctx.lineWidth = series.bars.lineWidth;\n            ctx.strokeStyle = series.color;\n\n            var barLeft;\n\n            switch (series.bars.align) {\n                case \"left\":\n                    barLeft = 0;\n                    break;\n                case \"right\":\n                    barLeft = -series.bars.barWidth;\n                    break;\n                default:\n                    barLeft = -series.bars.barWidth / 2;\n            }\n\n            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;\n            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);\n            ctx.restore();\n        }\n\n        function getFillStyle(filloptions, seriesColor, bottom, top) {\n            var fill = filloptions.fill;\n            if (!fill)\n                return null;\n\n            if (filloptions.fillColor)\n                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);\n\n            var c = $.color.parse(seriesColor);\n            c.a = typeof fill == \"number\" ? fill : 0.4;\n            c.normalize();\n            return c.toString();\n        }\n\n        function insertLegend() {\n\n            if (options.legend.container != null) {\n                $(options.legend.container).html(\"\");\n            } else {\n                placeholder.find(\".legend\").remove();\n            }\n\n            if (!options.legend.show) {\n                return;\n            }\n\n            var fragments = [], entries = [], rowStarted = false,\n                lf = options.legend.labelFormatter, s, label;\n\n            // Build a list of legend entries, with each having a label and a color\n\n            for (var i = 0; i < series.length; ++i) {\n                s = series[i];\n                if (s.label) {\n                    label = lf ? lf(s.label, s) : s.label;\n                    if (label) {\n                        entries.push({\n                            label: label,\n                            color: s.color\n                        });\n                    }\n                }\n            }\n\n            // Sort the legend using either the default or a custom comparator\n\n            if (options.legend.sorted) {\n                if ($.isFunction(options.legend.sorted)) {\n                    entries.sort(options.legend.sorted);\n                } else if (options.legend.sorted == \"reverse\") {\n                \tentries.reverse();\n                } else {\n                    var ascending = options.legend.sorted != \"descending\";\n                    entries.sort(function(a, b) {\n                        return a.label == b.label ? 0 : (\n                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR\n                        );\n                    });\n                }\n            }\n\n            // Generate markup for the list of entries, in their final order\n\n            for (var i = 0; i < entries.length; ++i) {\n\n                var entry = entries[i];\n\n                if (i % options.legend.noColumns == 0) {\n                    if (rowStarted)\n                        fragments.push('</tr>');\n                    fragments.push('<tr>');\n                    rowStarted = true;\n                }\n\n                fragments.push(\n                    '<td class=\"legendColorBox\"><div style=\"border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px\"><div style=\"width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden\"></div></div></td>' +\n                    '<td class=\"legendLabel\">' + entry.label + '</td>'\n                );\n            }\n\n            if (rowStarted)\n                fragments.push('</tr>');\n\n            if (fragments.length == 0)\n                return;\n\n            var table = '<table style=\"font-size:smaller;color:' + options.grid.color + '\">' + fragments.join(\"\") + '</table>';\n            if (options.legend.container != null)\n                $(options.legend.container).html(table);\n            else {\n                var pos = \"\",\n                    p = options.legend.position,\n                    m = options.legend.margin;\n                if (m[0] == null)\n                    m = [m, m];\n                if (p.charAt(0) == \"n\")\n                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';\n                else if (p.charAt(0) == \"s\")\n                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';\n                if (p.charAt(1) == \"e\")\n                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';\n                else if (p.charAt(1) == \"w\")\n                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';\n                var legend = $('<div class=\"legend\">' + table.replace('style=\"', 'style=\"position:absolute;' + pos +';') + '</div>').appendTo(placeholder);\n                if (options.legend.backgroundOpacity != 0.0) {\n                    // put in the transparent background\n                    // separately to avoid blended labels and\n                    // label boxes\n                    var c = options.legend.backgroundColor;\n                    if (c == null) {\n                        c = options.grid.backgroundColor;\n                        if (c && typeof c == \"string\")\n                            c = $.color.parse(c);\n                        else\n                            c = $.color.extract(legend, 'background-color');\n                        c.a = 1;\n                        c = c.toString();\n                    }\n                    var div = legend.children();\n                    $('<div style=\"position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';\"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);\n                }\n            }\n        }\n\n\n        // interactive features\n\n        var highlights = [],\n            redrawTimeout = null;\n\n        // returns the data item the mouse is over, or null if none is found\n        function findNearbyItem(mouseX, mouseY, seriesFilter) {\n            var maxDistance = options.grid.mouseActiveRadius,\n                smallestDistance = maxDistance * maxDistance + 1,\n                item = null, foundPoint = false, i, j, ps;\n\n            for (i = series.length - 1; i >= 0; --i) {\n                if (!seriesFilter(series[i]))\n                    continue;\n\n                var s = series[i],\n                    axisx = s.xaxis,\n                    axisy = s.yaxis,\n                    points = s.datapoints.points,\n                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster\n                    my = axisy.c2p(mouseY),\n                    maxx = maxDistance / axisx.scale,\n                    maxy = maxDistance / axisy.scale;\n\n                ps = s.datapoints.pointsize;\n                // with inverse transforms, we can't use the maxx/maxy\n                // optimization, sadly\n                if (axisx.options.inverseTransform)\n                    maxx = Number.MAX_VALUE;\n                if (axisy.options.inverseTransform)\n                    maxy = Number.MAX_VALUE;\n\n                if (s.lines.show || s.points.show) {\n                    for (j = 0; j < points.length; j += ps) {\n                        var x = points[j], y = points[j + 1];\n                        if (x == null)\n                            continue;\n\n                        // For points and lines, the cursor must be within a\n                        // certain distance to the data point\n                        if (x - mx > maxx || x - mx < -maxx ||\n                            y - my > maxy || y - my < -maxy)\n                            continue;\n\n                        // We have to calculate distances in pixels, not in\n                        // data units, because the scales of the axes may be different\n                        var dx = Math.abs(axisx.p2c(x) - mouseX),\n                            dy = Math.abs(axisy.p2c(y) - mouseY),\n                            dist = dx * dx + dy * dy; // we save the sqrt\n\n                        // use <= to ensure last point takes precedence\n                        // (last generally means on top of)\n                        if (dist < smallestDistance) {\n                            smallestDistance = dist;\n                            item = [i, j / ps];\n                        }\n                    }\n                }\n\n                if (s.bars.show && !item) { // no other point can be nearby\n\n                    var barLeft, barRight;\n\n                    switch (s.bars.align) {\n                        case \"left\":\n                            barLeft = 0;\n                            break;\n                        case \"right\":\n                            barLeft = -s.bars.barWidth;\n                            break;\n                        default:\n                            barLeft = -s.bars.barWidth / 2;\n                    }\n\n                    barRight = barLeft + s.bars.barWidth;\n\n                    for (j = 0; j < points.length; j += ps) {\n                        var x = points[j], y = points[j + 1], b = points[j + 2];\n                        if (x == null)\n                            continue;\n\n                        // for a bar graph, the cursor must be inside the bar\n                        if (series[i].bars.horizontal ?\n                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&\n                             my >= y + barLeft && my <= y + barRight) :\n                            (mx >= x + barLeft && mx <= x + barRight &&\n                             my >= Math.min(b, y) && my <= Math.max(b, y)))\n                                item = [i, j / ps];\n                    }\n                }\n            }\n\n            if (item) {\n                i = item[0];\n                j = item[1];\n                ps = series[i].datapoints.pointsize;\n\n                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),\n                         dataIndex: j,\n                         series: series[i],\n                         seriesIndex: i };\n            }\n\n            return null;\n        }\n\n        function onMouseMove(e) {\n            if (options.grid.hoverable)\n                triggerClickHoverEvent(\"plothover\", e,\n                                       function (s) { return s[\"hoverable\"] != false; });\n        }\n\n        function onMouseLeave(e) {\n            if (options.grid.hoverable)\n                triggerClickHoverEvent(\"plothover\", e,\n                                       function (s) { return false; });\n        }\n\n        function onClick(e) {\n          if (plot.isSelecting) {\n            return;\n          }\n\n          triggerClickHoverEvent(\"plotclick\", e, function (s) { return s[\"clickable\"] != false; });\n        }\n\n        // trigger click or hover event (they send the same parameters\n        // so we share their code)\n        function triggerClickHoverEvent(eventname, event, seriesFilter) {\n            var offset = eventHolder.offset(),\n                canvasX = event.pageX - offset.left - plotOffset.left,\n                canvasY = event.pageY - offset.top - plotOffset.top,\n            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });\n\n            pos.pageX = event.pageX;\n            pos.pageY = event.pageY;\n\n            // Add ctrlKey and metaKey to event\n            pos.ctrlKey = event.ctrlKey;\n            pos.metaKey = event.metaKey;\n\n            var item = findNearbyItem(canvasX, canvasY, seriesFilter);\n\n            if (item) {\n                // fill in mouse pos for any listeners out there\n                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);\n                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);\n            }\n\n            if (options.grid.autoHighlight) {\n                // clear auto-highlights\n                for (var i = 0; i < highlights.length; ++i) {\n                    var h = highlights[i];\n                    if (h.auto == eventname &&\n                        !(item && h.series == item.series &&\n                          h.point[0] == item.datapoint[0] &&\n                          h.point[1] == item.datapoint[1]))\n                        unhighlight(h.series, h.point);\n                }\n\n                if (item)\n                    highlight(item.series, item.datapoint, eventname);\n            }\n\n            placeholder.trigger(eventname, [ pos, item ]);\n        }\n\n        function triggerRedrawOverlay() {\n            var t = options.interaction.redrawOverlayInterval;\n            if (t == -1) {      // skip event queue\n                drawOverlay();\n                return;\n            }\n\n            if (!redrawTimeout)\n                redrawTimeout = setTimeout(drawOverlay, t);\n        }\n\n        function drawOverlay() {\n            redrawTimeout = null;\n\n            // draw highlights\n            octx.save();\n            overlay.clear();\n            octx.translate(plotOffset.left, plotOffset.top);\n\n            var i, hi;\n            for (i = 0; i < highlights.length; ++i) {\n                hi = highlights[i];\n\n                if (hi.series.bars.show)\n                    drawBarHighlight(hi.series, hi.point);\n                else\n                    drawPointHighlight(hi.series, hi.point);\n            }\n            octx.restore();\n\n            executeHooks(hooks.drawOverlay, [octx]);\n        }\n\n        function highlight(s, point, auto) {\n            if (typeof s == \"number\")\n                s = series[s];\n\n            if (typeof point == \"number\") {\n                var ps = s.datapoints.pointsize;\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n            }\n\n            var i = indexOfHighlight(s, point);\n            if (i == -1) {\n                highlights.push({ series: s, point: point, auto: auto });\n\n                triggerRedrawOverlay();\n            }\n            else if (!auto)\n                highlights[i].auto = false;\n        }\n\n        function unhighlight(s, point) {\n            if (s == null && point == null) {\n                highlights = [];\n                triggerRedrawOverlay();\n                return;\n            }\n\n            if (typeof s == \"number\")\n                s = series[s];\n\n            if (typeof point == \"number\") {\n                var ps = s.datapoints.pointsize;\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n            }\n\n            var i = indexOfHighlight(s, point);\n            if (i != -1) {\n                highlights.splice(i, 1);\n\n                triggerRedrawOverlay();\n            }\n        }\n\n        function indexOfHighlight(s, p) {\n            for (var i = 0; i < highlights.length; ++i) {\n                var h = highlights[i];\n                if (h.series == s && h.point[0] == p[0]\n                    && h.point[1] == p[1])\n                    return i;\n            }\n            return -1;\n        }\n\n        function drawPointHighlight(series, point) {\n            var x = point[0], y = point[1],\n                axisx = series.xaxis, axisy = series.yaxis,\n                highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();\n\n            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n                return;\n\n            var pointRadius = series.points.radius + series.points.lineWidth / 2;\n            octx.lineWidth = pointRadius;\n            octx.strokeStyle = highlightColor;\n            var radius = 1.5 * pointRadius;\n            x = axisx.p2c(x);\n            y = axisy.p2c(y);\n\n            octx.beginPath();\n            if (series.points.symbol == \"circle\")\n                octx.arc(x, y, radius, 0, 2 * Math.PI, false);\n            else\n                series.points.symbol(octx, x, y, radius, false);\n            octx.closePath();\n            octx.stroke();\n        }\n\n        function drawBarHighlight(series, point) {\n            var highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),\n                fillStyle = highlightColor,\n                barLeft;\n\n            switch (series.bars.align) {\n                case \"left\":\n                    barLeft = 0;\n                    break;\n                case \"right\":\n                    barLeft = -series.bars.barWidth;\n                    break;\n                default:\n                    barLeft = -series.bars.barWidth / 2;\n            }\n\n            octx.lineWidth = series.bars.lineWidth;\n            octx.strokeStyle = highlightColor;\n\n            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,\n                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);\n        }\n\n        function getColorOrGradient(spec, bottom, top, defaultColor) {\n            if (typeof spec == \"string\")\n                return spec;\n            else {\n                // assume this is a gradient spec; IE currently only\n                // supports a simple vertical gradient properly, so that's\n                // what we support too\n                var gradient = ctx.createLinearGradient(0, top, 0, bottom);\n\n                for (var i = 0, l = spec.colors.length; i < l; ++i) {\n                    var c = spec.colors[i];\n                    if (typeof c != \"string\") {\n                        var co = $.color.parse(defaultColor);\n                        if (c.brightness != null)\n                            co = co.scale('rgb', c.brightness);\n                        if (c.opacity != null)\n                            co.a *= c.opacity;\n                        c = co.toString();\n                    }\n                    gradient.addColorStop(i / (l - 1), c);\n                }\n\n                return gradient;\n            }\n        }\n    }\n\n    // Add the plot function to the top level of the jQuery object\n\n    $.plot = function(placeholder, data, options) {\n        //var t0 = new Date();\n        var plot = new Plot($(placeholder), data, options, $.plot.plugins);\n        //(window.console ? console.log : alert)(\"time used (msecs): \" + ((new Date()).getTime() - t0.getTime()));\n        return plot;\n    };\n\n    $.plot.version = \"0.8.3\";\n\n    $.plot.plugins = [];\n\n    // Also add the plot function as a chainable property\n\n    $.fn.plot = function(data, options) {\n        return this.each(function() {\n            $.plot(this, data, options);\n        });\n    };\n\n    // round to nearby lower multiple of base\n    function floorInBase(n, base) {\n        return base * Math.floor(n / base);\n    }\n\n})(jQuery);\n","/* Pretty handling of time axes.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nSet axis.mode to \"time\" to enable. See the section \"Time series data\" in\nAPI.txt for details.\n\n*/\n\n(function($) {\n\n\tvar options = {\n\t\txaxis: {\n\t\t\ttimezone: null,\t\t// \"browser\" for local to the client or timezone for timezone-js\n\t\t\ttimeformat: null,\t// format string to use\n\t\t\ttwelveHourClock: false,\t// 12 or 24 time in time mode\n\t\t\tmonthNames: null\t// list of names of months\n\t\t}\n\t};\n\n\t// round to nearby lower multiple of base\n\n\tfunction floorInBase(n, base) {\n\t\treturn base * Math.floor(n / base);\n\t}\n\n\t// Returns a string with the date d formatted according to fmt.\n\t// A subset of the Open Group's strftime format is supported.\n\n\tfunction formatDate(d, fmt, monthNames, dayNames) {\n\n\t\tif (typeof d.strftime == \"function\") {\n\t\t\treturn d.strftime(fmt);\n\t\t}\n\n\t\tvar leftPad = function(n, pad) {\n\t\t\tn = \"\" + n;\n\t\t\tpad = \"\" + (pad == null ? \"0\" : pad);\n\t\t\treturn n.length == 1 ? pad + n : n;\n\t\t};\n\n\t\tvar r = [];\n\t\tvar escape = false;\n\t\tvar hours = d.getHours();\n\t\tvar isAM = hours < 12;\n\n\t\tif (monthNames == null) {\n\t\t\tmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\t\t}\n\n\t\tif (dayNames == null) {\n\t\t\tdayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\t\t}\n\n\t\tvar hours12;\n\n\t\tif (hours > 12) {\n\t\t\thours12 = hours - 12;\n\t\t} else if (hours == 0) {\n\t\t\thours12 = 12;\n\t\t} else {\n\t\t\thours12 = hours;\n\t\t}\n\n\t\tfor (var i = 0; i < fmt.length; ++i) {\n\n\t\t\tvar c = fmt.charAt(i);\n\n\t\t\tif (escape) {\n\t\t\t\tswitch (c) {\n\t\t\t\t\tcase 'a': c = \"\" + dayNames[d.getDay()]; break;\n\t\t\t\t\tcase 'b': c = \"\" + monthNames[d.getMonth()]; break;\n\t\t\t\t\tcase 'd': c = leftPad(d.getDate(), \"\"); break;\n\t\t\t\t\tcase 'e': c = leftPad(d.getDate(), \" \"); break;\n\t\t\t\t\tcase 'h':\t// For back-compat with 0.7; remove in 1.0\n\t\t\t\t\tcase 'H': c = leftPad(hours); break;\n\t\t\t\t\tcase 'I': c = leftPad(hours12); break;\n\t\t\t\t\tcase 'l': c = leftPad(hours12, \" \"); break;\n\t\t\t\t\tcase 'm': c = leftPad(d.getMonth() + 1, \"\"); break;\n\t\t\t\t\tcase 'M': c = leftPad(d.getMinutes()); break;\n\t\t\t\t\t// quarters not in Open Group's strftime specification\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\tc = \"\" + (Math.floor(d.getMonth() / 3) + 1); break;\n\t\t\t\t\tcase 'S': c = leftPad(d.getSeconds()); break;\n\t\t\t\t\tcase 'y': c = leftPad(d.getFullYear() % 100); break;\n\t\t\t\t\tcase 'Y': c = \"\" + d.getFullYear(); break;\n\t\t\t\t\tcase 'p': c = (isAM) ? (\"\" + \"am\") : (\"\" + \"pm\"); break;\n\t\t\t\t\tcase 'P': c = (isAM) ? (\"\" + \"AM\") : (\"\" + \"PM\"); break;\n\t\t\t\t\tcase 'w': c = \"\" + d.getDay(); break;\n\t\t\t\t}\n\t\t\t\tr.push(c);\n\t\t\t\tescape = false;\n\t\t\t} else {\n\t\t\t\tif (c == \"%\") {\n\t\t\t\t\tescape = true;\n\t\t\t\t} else {\n\t\t\t\t\tr.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn r.join(\"\");\n\t}\n\n\t// To have a consistent view of time-based data independent of which time\n\t// zone the client happens to be in we need a date-like object independent\n\t// of time zones.  This is done through a wrapper that only calls the UTC\n\t// versions of the accessor methods.\n\n\tfunction makeUtcWrapper(d) {\n\n\t\tfunction addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {\n\t\t\tsourceObj[sourceMethod] = function() {\n\t\t\t\treturn targetObj[targetMethod].apply(targetObj, arguments);\n\t\t\t};\n\t\t};\n\n\t\tvar utc = {\n\t\t\tdate: d\n\t\t};\n\n\t\t// support strftime, if found\n\n\t\tif (d.strftime != undefined) {\n\t\t\taddProxyMethod(utc, \"strftime\", d, \"strftime\");\n\t\t}\n\n\t\taddProxyMethod(utc, \"getTime\", d, \"getTime\");\n\t\taddProxyMethod(utc, \"setTime\", d, \"setTime\");\n\n\t\tvar props = [\"Date\", \"Day\", \"FullYear\", \"Hours\", \"Milliseconds\", \"Minutes\", \"Month\", \"Seconds\"];\n\n\t\tfor (var p = 0; p < props.length; p++) {\n\t\t\taddProxyMethod(utc, \"get\" + props[p], d, \"getUTC\" + props[p]);\n\t\t\taddProxyMethod(utc, \"set\" + props[p], d, \"setUTC\" + props[p]);\n\t\t}\n\n\t\treturn utc;\n\t};\n\n\t// select time zone strategy.  This returns a date-like object tied to the\n\t// desired timezone\n\n\tfunction dateGenerator(ts, opts) {\n\t\tif (opts.timezone == \"browser\") {\n\t\t\treturn new Date(ts);\n\t\t} else if (!opts.timezone || opts.timezone == \"utc\") {\n\t\t\treturn makeUtcWrapper(new Date(ts));\n\t\t} else if (typeof timezoneJS != \"undefined\" && typeof timezoneJS.Date != \"undefined\") {\n\t\t\tvar d = new timezoneJS.Date();\n\t\t\t// timezone-js is fickle, so be sure to set the time zone before\n\t\t\t// setting the time.\n\t\t\td.setTimezone(opts.timezone);\n\t\t\td.setTime(ts);\n\t\t\treturn d;\n\t\t} else {\n\t\t\treturn makeUtcWrapper(new Date(ts));\n\t\t}\n\t}\n\n\t// map of app. size of time units in milliseconds\n\n\tvar timeUnitSize = {\n\t\t\"second\": 1000,\n\t\t\"minute\": 60 * 1000,\n\t\t\"hour\": 60 * 60 * 1000,\n\t\t\"day\": 24 * 60 * 60 * 1000,\n\t\t\"month\": 30 * 24 * 60 * 60 * 1000,\n\t\t\"quarter\": 3 * 30 * 24 * 60 * 60 * 1000,\n\t\t\"year\": 365.2425 * 24 * 60 * 60 * 1000\n\t};\n\n\t// the allowed tick sizes, after 1 year we use\n\t// an integer algorithm\n\n\tvar baseSpec = [\n\t\t[1, \"second\"], [2, \"second\"], [5, \"second\"], [10, \"second\"],\n\t\t[30, \"second\"],\n\t\t[1, \"minute\"], [2, \"minute\"], [5, \"minute\"], [10, \"minute\"],\n\t\t[30, \"minute\"],\n\t\t[1, \"hour\"], [2, \"hour\"], [4, \"hour\"],\n\t\t[8, \"hour\"], [12, \"hour\"],\n\t\t[1, \"day\"], [2, \"day\"], [3, \"day\"],\n\t\t[0.25, \"month\"], [0.5, \"month\"], [1, \"month\"],\n\t\t[2, \"month\"]\n\t];\n\n\t// we don't know which variant(s) we'll need yet, but generating both is\n\t// cheap\n\n\tvar specMonths = baseSpec.concat([[3, \"month\"], [6, \"month\"],\n\t\t[1, \"year\"]]);\n\tvar specQuarters = baseSpec.concat([[1, \"quarter\"], [2, \"quarter\"],\n\t\t[1, \"year\"]]);\n\n\tfunction init(plot) {\n\t\tplot.hooks.processOptions.push(function (plot, options) {\n\t\t\t$.each(plot.getAxes(), function(axisName, axis) {\n\n\t\t\t\tvar opts = axis.options;\n\n\t\t\t\tif (opts.mode == \"time\") {\n\t\t\t\t\taxis.tickGenerator = function(axis) {\n\n\t\t\t\t\t\tvar ticks = [];\n\t\t\t\t\t\tvar d = dateGenerator(axis.min, opts);\n\t\t\t\t\t\tvar minSize = 0;\n\n\t\t\t\t\t\t// make quarter use a possibility if quarters are\n\t\t\t\t\t\t// mentioned in either of these options\n\n\t\t\t\t\t\tvar spec = (opts.tickSize && opts.tickSize[1] ===\n\t\t\t\t\t\t\t\"quarter\") ||\n\t\t\t\t\t\t\t(opts.minTickSize && opts.minTickSize[1] ===\n\t\t\t\t\t\t\t\"quarter\") ? specQuarters : specMonths;\n\n\t\t\t\t\t\tif (opts.minTickSize != null) {\n\t\t\t\t\t\t\tif (typeof opts.tickSize == \"number\") {\n\t\t\t\t\t\t\t\tminSize = opts.tickSize;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tminSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (var i = 0; i < spec.length - 1; ++i) {\n\t\t\t\t\t\t\tif (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]]\n\t\t\t\t\t\t\t\t\t\t\t  + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2\n\t\t\t\t\t\t\t\t&& spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar size = spec[i][0];\n\t\t\t\t\t\tvar unit = spec[i][1];\n\n\t\t\t\t\t\t// special-case the possibility of several years\n\n\t\t\t\t\t\tif (unit == \"year\") {\n\n\t\t\t\t\t\t\t// if given a minTickSize in years, just use it,\n\t\t\t\t\t\t\t// ensuring that it's an integer\n\n\t\t\t\t\t\t\tif (opts.minTickSize != null && opts.minTickSize[1] == \"year\") {\n\t\t\t\t\t\t\t\tsize = Math.floor(opts.minTickSize[0]);\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));\n\t\t\t\t\t\t\t\tvar norm = (axis.delta / timeUnitSize.year) / magn;\n\n\t\t\t\t\t\t\t\tif (norm < 1.5) {\n\t\t\t\t\t\t\t\t\tsize = 1;\n\t\t\t\t\t\t\t\t} else if (norm < 3) {\n\t\t\t\t\t\t\t\t\tsize = 2;\n\t\t\t\t\t\t\t\t} else if (norm < 7.5) {\n\t\t\t\t\t\t\t\t\tsize = 5;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsize = 10;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsize *= magn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// minimum size for years is 1\n\n\t\t\t\t\t\t\tif (size < 1) {\n\t\t\t\t\t\t\t\tsize = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\taxis.tickSize = opts.tickSize || [size, unit];\n\t\t\t\t\t\tvar tickSize = axis.tickSize[0];\n\t\t\t\t\t\tunit = axis.tickSize[1];\n\n\t\t\t\t\t\tvar step = tickSize * timeUnitSize[unit];\n\n\t\t\t\t\t\tif (unit == \"second\") {\n\t\t\t\t\t\t\td.setSeconds(floorInBase(d.getSeconds(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"minute\") {\n\t\t\t\t\t\t\td.setMinutes(floorInBase(d.getMinutes(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"hour\") {\n\t\t\t\t\t\t\td.setHours(floorInBase(d.getHours(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"month\") {\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"quarter\") {\n\t\t\t\t\t\t\td.setMonth(3 * floorInBase(d.getMonth() / 3,\n\t\t\t\t\t\t\t\ttickSize));\n\t\t\t\t\t\t} else if (unit == \"year\") {\n\t\t\t\t\t\t\td.setFullYear(floorInBase(d.getFullYear(), tickSize));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// reset smaller components\n\n\t\t\t\t\t\td.setMilliseconds(0);\n\n\t\t\t\t\t\tif (step >= timeUnitSize.minute) {\n\t\t\t\t\t\t\td.setSeconds(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.hour) {\n\t\t\t\t\t\t\td.setMinutes(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.day) {\n\t\t\t\t\t\t\td.setHours(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.day * 4) {\n\t\t\t\t\t\t\td.setDate(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.month * 2) {\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 3));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.quarter * 2) {\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 6));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.year) {\n\t\t\t\t\t\t\td.setMonth(0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar carry = 0;\n\t\t\t\t\t\tvar v = Number.NaN;\n\t\t\t\t\t\tvar prev;\n\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\tprev = v;\n\t\t\t\t\t\t\tv = d.getTime();\n\t\t\t\t\t\t\tticks.push(v);\n\n\t\t\t\t\t\t\tif (unit == \"month\" || unit == \"quarter\") {\n\t\t\t\t\t\t\t\tif (tickSize < 1) {\n\n\t\t\t\t\t\t\t\t\t// a bit complicated - we'll divide the\n\t\t\t\t\t\t\t\t\t// month/quarter up but we need to take\n\t\t\t\t\t\t\t\t\t// care of fractions so we don't end up in\n\t\t\t\t\t\t\t\t\t// the middle of a day\n\n\t\t\t\t\t\t\t\t\td.setDate(1);\n\t\t\t\t\t\t\t\t\tvar start = d.getTime();\n\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\n\t\t\t\t\t\t\t\t\t\t(unit == \"quarter\" ? 3 : 1));\n\t\t\t\t\t\t\t\t\tvar end = d.getTime();\n\t\t\t\t\t\t\t\t\td.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);\n\t\t\t\t\t\t\t\t\tcarry = d.getHours();\n\t\t\t\t\t\t\t\t\td.setHours(0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\n\t\t\t\t\t\t\t\t\t\ttickSize * (unit == \"quarter\" ? 3 : 1));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (unit == \"year\") {\n\t\t\t\t\t\t\t\td.setFullYear(d.getFullYear() + tickSize);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\td.setTime(v + step);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (v < axis.max && v != prev);\n\n\t\t\t\t\t\treturn ticks;\n\t\t\t\t\t};\n\n\t\t\t\t\taxis.tickFormatter = function (v, axis) {\n\n\t\t\t\t\t\tvar d = dateGenerator(v, axis.options);\n\n\t\t\t\t\t\t// first check global format\n\n\t\t\t\t\t\tif (opts.timeformat != null) {\n\t\t\t\t\t\t\treturn formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// possibly use quarters if quarters are mentioned in\n\t\t\t\t\t\t// any of these places\n\n\t\t\t\t\t\tvar useQuarters = (axis.options.tickSize &&\n\t\t\t\t\t\t\t\taxis.options.tickSize[1] == \"quarter\") ||\n\t\t\t\t\t\t\t(axis.options.minTickSize &&\n\t\t\t\t\t\t\t\taxis.options.minTickSize[1] == \"quarter\");\n\n\t\t\t\t\t\tvar t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];\n\t\t\t\t\t\tvar span = axis.max - axis.min;\n\t\t\t\t\t\tvar suffix = (opts.twelveHourClock) ? \" %p\" : \"\";\n\t\t\t\t\t\tvar hourCode = (opts.twelveHourClock) ? \"%I\" : \"%H\";\n\t\t\t\t\t\tvar fmt;\n\n\t\t\t\t\t\tif (t < timeUnitSize.minute) {\n\t\t\t\t\t\t\tfmt = hourCode + \":%M:%S\" + suffix;\n\t\t\t\t\t\t} else if (t < timeUnitSize.day) {\n\t\t\t\t\t\t\tif (span < 2 * timeUnitSize.day) {\n\t\t\t\t\t\t\t\tfmt = hourCode + \":%M\" + suffix;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfmt = \"%b %d \" + hourCode + \":%M\" + suffix;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (t < timeUnitSize.month) {\n\t\t\t\t\t\t\tfmt = \"%b %d\";\n\t\t\t\t\t\t} else if ((useQuarters && t < timeUnitSize.quarter) ||\n\t\t\t\t\t\t\t(!useQuarters && t < timeUnitSize.year)) {\n\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\n\t\t\t\t\t\t\t\tfmt = \"%b\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfmt = \"%b %Y\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (useQuarters && t < timeUnitSize.year) {\n\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\n\t\t\t\t\t\t\t\tfmt = \"Q%q\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfmt = \"Q%q %Y\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfmt = \"%Y\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);\n\n\t\t\t\t\t\treturn rt;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t$.plot.plugins.push({\n\t\tinit: init,\n\t\toptions: options,\n\t\tname: 'time',\n\t\tversion: '1.0'\n\t});\n\n\t// Time-axis support used to be in Flot core, which exposed the\n\t// formatDate function on the plot object.  Various plugins depend\n\t// on the function, so we need to re-expose it here.\n\n\t$.plot.formatDate = formatDate;\n\n})(jQuery);\n"],"sourceRoot":""}