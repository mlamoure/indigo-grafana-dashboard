{"version":3,"file":"graphPlugin.d32aef4f2822e56fb2d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/state/ThresholdMapper.ts","webpack://grafana/./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack://grafana/./public/app/plugins/panel/graph/Legend/LegendSeriesItem.tsx","webpack://grafana/./public/app/plugins/panel/graph/Legend/Legend.tsx","webpack://grafana/./public/app/plugins/panel/graph/align_yaxes.ts","webpack://grafana/./public/app/plugins/panel/graph/event_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/graph_tooltip.ts","webpack://grafana/./public/app/plugins/panel/graph/histogram.ts","webpack://grafana/./public/app/plugins/panel/graph/threshold_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/time_region_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/graph.ts","webpack://grafana/./public/app/plugins/panel/graph/utils.ts","webpack://grafana/./public/app/plugins/panel/graph/series_overrides_ctrl.ts","webpack://grafana/./public/app/plugins/panel/graph/thresholds_form.ts","webpack://grafana/./public/app/plugins/panel/graph/time_regions_form.ts","webpack://grafana/./public/app/plugins/panel/graph/annotation_tooltip.ts","webpack://grafana/./public/app/plugins/panel/graph/event_editor.ts","webpack://grafana/./public/app/plugins/panel/graph/GraphContextMenuCtrl.ts","webpack://grafana/./public/app/plugins/panel/graph/axes_editor.ts","webpack://grafana/./public/app/plugins/panel/graph/module.ts","webpack://grafana/./public/app/plugins/panel/graph/template.ts","webpack://grafana/./public/app/plugins/panel/graph/GraphMigrations.ts"],"sourcesContent":["import { config } from 'app/core/config';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nexport const hiddenReducerTypes = ['percent_diff', 'percent_diff_abs'];\nexport class ThresholdMapper {\n  static alertToGraphThresholds(panel: PanelModel) {\n    if (!panel.alert || config.unifiedAlertingEnabled) {\n      return false; // no update when no alerts\n    }\n\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      const condition = panel.alert.conditions[i];\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds: any[] = (panel.thresholds = []);\n      const visible = hiddenReducerTypes.indexOf(condition.reducer?.type) === -1;\n\n      switch (evaluator.type) {\n        case 'gt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'gt', visible });\n          break;\n        }\n        case 'lt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'lt', visible });\n          break;\n        }\n        case 'outside_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          }\n\n          break;\n        }\n        case 'within_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          }\n          break;\n        }\n      }\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = panel.options.alertThreshold;\n      t.line = panel.options.alertThreshold;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n}\n","import $ from 'jquery';\nimport { partition, each } from 'lodash';\n//@ts-ignore\nimport Drop from 'tether-drop';\n\nimport { CreatePlotOverlay } from '@grafana/data';\nimport { getLegacyAngularInjector } from '@grafana/runtime';\n\n/** @ngInject */\nconst createAnnotationToolip: CreatePlotOverlay = (element, event, plot) => {\n  const injector = getLegacyAngularInjector();\n  const content = document.createElement('div');\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\n\n  injector.invoke([\n    '$compile',\n    '$rootScope',\n    ($compile, $rootScope) => {\n      const eventManager = plot.getOptions().events.manager;\n      const tmpScope = $rootScope.$new(true);\n      tmpScope.event = event;\n      tmpScope.onEdit = () => {\n        eventManager.editEvent(event);\n      };\n\n      $compile(content)(tmpScope);\n      tmpScope.$digest();\n      tmpScope.$destroy();\n\n      const drop = new Drop({\n        target: element[0],\n        content: content,\n        position: 'bottom center',\n        classes: 'drop-popover drop-popover--annotation',\n        openOn: 'hover',\n        hoverCloseDelay: 200,\n        tetherOptions: {\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n        },\n      });\n\n      drop.open();\n\n      drop.on('close', () => {\n        setTimeout(() => {\n          drop.destroy();\n        });\n      });\n    },\n  ]);\n};\n\nlet markerElementToAttachTo: any = null;\n\n/** @ngInject */\nconst createEditPopover: CreatePlotOverlay = (element, event, plot) => {\n  const eventManager = plot.getOptions().events.manager;\n  if (eventManager.editorOpen) {\n    // update marker element to attach to (needed in case of legend on the right\n    // when there is a double render pass and the initial marker element is removed)\n    markerElementToAttachTo = element;\n    return;\n  }\n\n  // mark as openend\n  eventManager.editorOpened();\n  // set marker elment to attache to\n  markerElementToAttachTo = element;\n\n  // wait for element to be attached and positioned\n  setTimeout(() => {\n    const injector = getLegacyAngularInjector();\n    const content = document.createElement('div');\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\n\n    injector.invoke([\n      '$compile',\n      '$rootScope',\n      ($compile, $rootScope) => {\n        const scope = $rootScope.$new(true);\n        let drop: any;\n\n        scope.event = event;\n        scope.panelCtrl = eventManager.panelCtrl;\n        scope.close = () => {\n          drop.close();\n        };\n\n        $compile(content)(scope);\n        scope.$digest();\n\n        drop = new Drop({\n          target: markerElementToAttachTo[0],\n          content: content,\n          position: 'bottom center',\n          classes: 'drop-popover drop-popover--form',\n          openOn: 'click',\n          tetherOptions: {\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n          },\n        });\n\n        drop.open();\n        eventManager.editorOpened();\n\n        drop.on('close', () => {\n          // need timeout here in order call drop.destroy\n          setTimeout(() => {\n            eventManager.editorClosed();\n            scope.$destroy();\n            drop.destroy();\n          });\n        });\n      },\n    ]);\n  }, 100);\n};\n\nexport { createEditPopover, createAnnotationToolip };\n\n/*\n * jquery.flot.events\n *\n * description: Flot plugin for adding events/markers to the plot\n * version: 0.2.5\n * authors:\n *    Alexander Wunschik <alex@wunschik.net>\n *    Joel Oughton <joeloughton@gmail.com>\n *    Nicolas Joseph <www.nicolasjoseph.com>\n *\n * website: https://github.com/mojoaxel/flot-events\n *\n * released under MIT License and GPLv2+\n */\n\n/**\n * A class that allows for the drawing an remove of some object\n */\nexport class DrawableEvent {\n  _object: any;\n  _drawFunc: any;\n  _clearFunc: any;\n  _moveFunc: any;\n  _position: any;\n  _width: any;\n  _height: any;\n\n  /** @ngInject */\n  constructor(\n    object: JQuery,\n    drawFunc: any,\n    clearFunc: any,\n    moveFunc: any,\n    left: number,\n    top: number,\n    width: number,\n    height: number\n  ) {\n    this._object = object;\n    this._drawFunc = drawFunc;\n    this._clearFunc = clearFunc;\n    this._moveFunc = moveFunc;\n    this._position = { left, top };\n    this._width = width;\n    this._height = height;\n  }\n\n  width() {\n    return this._width;\n  }\n  height() {\n    return this._height;\n  }\n  position() {\n    return this._position;\n  }\n  draw() {\n    this._drawFunc(this._object);\n  }\n  clear() {\n    this._clearFunc(this._object);\n  }\n  getObject() {\n    return this._object;\n  }\n  moveTo(position: { left: number; top: number }) {\n    this._position = position;\n    this._moveFunc(this._object, this._position);\n  }\n}\n\n/**\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\n */\nexport class VisualEvent {\n  _parent: any;\n  _options: any;\n  _drawableEvent: any;\n  _hidden: any;\n\n  /** @ngInject */\n  constructor(options: any, drawableEvent: DrawableEvent) {\n    this._options = options;\n    this._drawableEvent = drawableEvent;\n    this._hidden = false;\n  }\n\n  visual() {\n    return this._drawableEvent;\n  }\n  getOptions() {\n    return this._options;\n  }\n  getParent() {\n    return this._parent;\n  }\n  isHidden() {\n    return this._hidden;\n  }\n  hide() {\n    this._hidden = true;\n  }\n  unhide() {\n    this._hidden = false;\n  }\n}\n\n/**\n * A Class that handles the event-markers inside the given plot\n */\nexport class EventMarkers {\n  _events: any;\n  _types: any;\n  _plot: any;\n  eventsEnabled: any;\n\n  /** @ngInject */\n  constructor(plot: any) {\n    this._events = [];\n    this._types = [];\n    this._plot = plot;\n    this.eventsEnabled = false;\n  }\n\n  getEvents() {\n    return this._events;\n  }\n\n  setTypes(types: any) {\n    return (this._types = types);\n  }\n\n  /**\n   * create internal objects for the given events\n   */\n  setupEvents(events: any[]) {\n    const parts = partition(events, 'isRegion');\n    const regions = parts[0];\n    events = parts[1];\n\n    $.each(events, (index, event) => {\n      const ve = new VisualEvent(event, this._buildDiv(event));\n      this._events.push(ve);\n    });\n\n    $.each(regions, (index, event) => {\n      const vre = new VisualEvent(event, this._buildRegDiv(event));\n      this._events.push(vre);\n    });\n\n    this._events.sort((a: any, b: any) => {\n      const ao = a.getOptions(),\n        bo = b.getOptions();\n      if (ao.min > bo.min) {\n        return 1;\n      }\n      if (ao.min < bo.min) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * draw the events to the plot\n   */\n  drawEvents() {\n    // var o = this._plot.getPlotOffset();\n\n    $.each(this._events, (index, event) => {\n      const options = event.getOptions();\n      const insidePlot = this._insidePlot(options.min) || this._insidePlot(options.timeEnd);\n      const overlapPlot = this._overlapPlot(options.min, options.timeEnd);\n      // check event is inside the graph range\n      if ((insidePlot || overlapPlot) && !event.isHidden()) {\n        event.visual().draw();\n      } else {\n        event.visual().getObject().hide();\n      }\n    });\n  }\n\n  /**\n   * update the position of the event-markers (e.g. after scrolling or zooming)\n   */\n  updateEvents() {\n    const o = this._plot.getPlotOffset();\n    let left;\n    let top;\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n\n    $.each(this._events, (index, event) => {\n      top = o.top + this._plot.height() - event.visual().height();\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\n      event.visual().moveTo({ top: top, left: left });\n    });\n  }\n\n  /**\n   * remove all events from the plot\n   */\n  _clearEvents() {\n    $.each(this._events, (index, val) => {\n      val.visual().clear();\n    });\n    this._events = [];\n  }\n\n  /**\n   * create a DOM element for the given event\n   */\n  _buildDiv(event: { eventType: any; min: any; editModel: any }) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\n    let markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\n      markerSize = 8; //default marker size\n    } else {\n      markerSize = this._types[eventTypeId].markerSize;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\n      markerShow = true;\n    } else {\n      markerShow = this._types[eventTypeId].markerShow;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    let topOffset = xaxis.options.eventSectionHeight || 0;\n    topOffset = topOffset / 3;\n\n    top = o.top + this._plot.height() + topOffset;\n    left = xaxis.p2c(event.min) + o.left;\n\n    const line = $('<div class=\"events_line flot-temp-elem\"></div>')\n      .css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: left + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset * 0.8,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      })\n      .appendTo(container);\n\n    if (markerShow) {\n      const marker = $('<div class=\"events_marker\"></div>').css({\n        position: 'absolute',\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\n        'font-size': 0,\n        'line-height': 0,\n        width: 0,\n        height: 0,\n        'border-left': markerSize + 'px solid transparent',\n        'border-right': markerSize + 'px solid transparent',\n      });\n\n      marker.appendTo(line);\n\n      if (\n        this._types[eventTypeId] &&\n        this._types[eventTypeId].position &&\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\n      ) {\n        marker.css({\n          top: top - markerSize - 8 + 'px',\n          'border-top': 'none',\n          'border-bottom': markerSize + 'px solid ' + color,\n        });\n      } else {\n        marker.css({\n          top: '0px',\n          'border-top': markerSize + 'px solid ' + color,\n          'border-bottom': 'none',\n        });\n      }\n\n      marker.data({\n        event: event,\n      });\n\n      const mouseenter = function (this: any) {\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\n      };\n\n      if (event.editModel) {\n        createEditPopover(marker, event.editModel, that._plot);\n      }\n\n      const mouseleave = () => {\n        that._plot.clearSelection();\n      };\n\n      if (markerTooltip) {\n        marker.css({ cursor: 'help' });\n        marker.hover(mouseenter, mouseleave);\n      }\n    }\n\n    const drawableEvent = new DrawableEvent(\n      line,\n      function drawFunc(obj: { show: () => void }) {\n        obj.show();\n      },\n      (obj: { remove: () => void }) => {\n        obj.remove();\n      },\n      (obj: any, position: { top: any; left: any }) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      line.width() ?? 1,\n      line.height() ?? 1\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * create a DOM element for the given region\n   */\n  _buildRegDiv(event: { eventType: any; min: number; timeEnd: number; editModel: any }) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top,\n      left,\n      lineWidth: number,\n      regionWidth,\n      lineStyle: string | number | cssPropertySetter,\n      color: string,\n      markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    const topOffset = 2;\n    top = o.top + this._plot.height() + topOffset;\n\n    const timeFrom = Math.min(event.min, event.timeEnd);\n    const timeTo = Math.max(event.min, event.timeEnd);\n    left = xaxis.p2c(timeFrom) + o.left;\n    const right = xaxis.p2c(timeTo) + o.left;\n\n    const [xmin, xmax] = [o.left, o.left + this._plot.width()];\n    const regionStart = Math.max(left, xmin);\n    const regionEnd = Math.min(right, xmax);\n    const regionOffset = right > xmax ? 0 : lineWidth; // only include lineWidth when right line is visible\n    regionWidth = regionEnd - regionStart + regionOffset;\n\n    each([left, right], (position) => {\n      // only draw visible region lines\n      if (xmin <= position && position < xmax) {\n        const line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\n          position: 'absolute',\n          opacity: 0.8,\n          left: position + 'px',\n          top: 8,\n          width: lineWidth + 'px',\n          height: this._plot.height() + topOffset,\n          'border-left-width': lineWidth + 'px',\n          'border-left-style': lineStyle,\n          'border-left-color': color,\n          color: color,\n        });\n        line.appendTo(container);\n      }\n    });\n\n    const region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\n      position: 'absolute',\n      opacity: 0.5,\n      left: regionStart + 'px',\n      top: top,\n      width: regionWidth + 'px',\n      height: '0.5rem',\n      'border-left-color': color,\n      color: color,\n      'background-color': color,\n    });\n    region.appendTo(container);\n\n    region.data({\n      event: event,\n    });\n\n    const mouseenter = function (this: any) {\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\n    };\n\n    if (event.editModel) {\n      createEditPopover(region, event.editModel, that._plot);\n    }\n\n    const mouseleave = () => {\n      that._plot.clearSelection();\n    };\n\n    if (markerTooltip) {\n      region.css({ cursor: 'help' });\n      region.hover(mouseenter, mouseleave);\n    }\n\n    const drawableEvent = new DrawableEvent(\n      region,\n      function drawFunc(obj: { show: () => void }) {\n        obj.show();\n      },\n      (obj: { remove: () => void }) => {\n        obj.remove();\n      },\n      (obj: { css: (arg0: { top: any; left: any }) => void }, position: { top: any; left: any }) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      region.width() ?? 1,\n      region.height() ?? 1\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * check if the event is inside visible range\n   */\n  _insidePlot(x: any) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const xc = xaxis.p2c(x);\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\n  }\n\n  /**\n   * check if the event overlaps the visible range\n   */\n  _overlapPlot(point0: number, point1: number) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const [coord0, coord1] = [xaxis.p2c(point0), xaxis.p2c(point1)];\n    const [coordMin, coordMax] = [0, xaxis.p2c(xaxis.max)];\n    return coordMin < coord0 && coord1 < coordMax;\n  }\n}\n\n/**\n * initialize the plugin for the given plot\n */\n\n/** @ngInject */\nexport function init(this: any, plot: any) {\n  const that = this;\n  const eventMarkers = new EventMarkers(plot);\n\n  plot.getEvents = () => {\n    return eventMarkers._events;\n  };\n\n  plot.hideEvents = () => {\n    $.each(eventMarkers._events, (index, event) => {\n      event.visual().getObject().hide();\n    });\n  };\n\n  plot.showEvents = () => {\n    plot.hideEvents();\n    $.each(eventMarkers._events, (index, event) => {\n      event.hide();\n    });\n\n    that.eventMarkers.drawEvents();\n  };\n\n  // change events on an existing plot\n  plot.setEvents = (events: any[]) => {\n    if (eventMarkers.eventsEnabled) {\n      eventMarkers.setupEvents(events);\n    }\n  };\n\n  plot.hooks.processOptions.push((plot: any, options: any) => {\n    // enable the plugin\n    if (options.events.data != null) {\n      eventMarkers.eventsEnabled = true;\n    }\n  });\n\n  plot.hooks.draw.push((plot: any) => {\n    const options = plot.getOptions();\n\n    if (eventMarkers.eventsEnabled) {\n      // check for first run\n      if (eventMarkers.getEvents().length < 1) {\n        eventMarkers.setTypes(options.events.types);\n        eventMarkers.setupEvents(options.events.data);\n      } else {\n        eventMarkers.updateEvents();\n      }\n    }\n\n    eventMarkers.drawEvents();\n  });\n}\n\nconst defaultOptions: any = {\n  events: {\n    data: null,\n    types: null,\n    xaxis: 1,\n    position: 'BOTTOM',\n  },\n};\n\n$.plot.plugins.push({\n  init: init,\n  options: defaultOptions,\n  name: 'events',\n  version: '0.2.5',\n});\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { SeriesColorPicker, SeriesIcon } from '@grafana/ui';\nimport { TimeSeries } from 'app/core/core';\n\nexport const LEGEND_STATS = ['min', 'max', 'avg', 'current', 'total'] as const;\nexport type LegendStat = typeof LEGEND_STATS[number];\n\nexport interface LegendLabelProps {\n  series: TimeSeries;\n  asTable?: boolean;\n  hidden?: boolean;\n  onLabelClick: (series: any, event: any) => void;\n  onColorChange: (series: any, color: string) => void;\n  onToggleAxis: (series: any) => void;\n}\n\nexport interface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ntype LegendItemProps = LegendLabelProps & LegendValuesProps;\n\ninterface LegendItemState {\n  yaxis: number;\n}\n\nexport class LegendItem extends PureComponent<LegendItemProps, LegendItemState> {\n  static defaultProps = {\n    asTable: false,\n    hidden: false,\n    onLabelClick: () => {},\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  constructor(props: LegendItemProps) {\n    super(props);\n    this.state = {\n      yaxis: this.props.series.yaxis,\n    };\n  }\n\n  onLabelClick = (e: any) => this.props.onLabelClick(this.props.series, e);\n\n  onToggleAxis = () => {\n    const yaxis = this.state.yaxis === 2 ? 1 : 2;\n    const info = { alias: this.props.series.alias, yaxis: yaxis };\n    this.setState({ yaxis: yaxis });\n    this.props.onToggleAxis(info);\n  };\n\n  onColorChange = (color: string) => {\n    this.props.onColorChange(this.props.series, color);\n    // Because of PureComponent nature it makes only shallow props comparison and changing of series.color doesn't run\n    // component re-render. In this case we can't rely on color, selected by user, because it may be overwritten\n    // by series overrides. So we need to use forceUpdate() to make sure we have proper series color.\n    this.forceUpdate();\n  };\n\n  renderLegendValues() {\n    const { series, asTable } = this.props;\n    const legendValueItems = [];\n    for (const valueName of LEGEND_STATS) {\n      // @ts-ignore\n      if (this.props[valueName]) {\n        const valueFormatted = series.formatValue(series.stats[valueName]);\n        legendValueItems.push(\n          <LegendValue\n            key={valueName}\n            valueName={valueName}\n            value={valueFormatted}\n            asTable={asTable}\n            onValueClick={this.onLabelClick}\n          />\n        );\n      }\n    }\n    return legendValueItems;\n  }\n\n  render() {\n    const { series, values, asTable, hidden } = this.props;\n    const seriesOptionClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n      'graph-legend-series--right-y': series.yaxis === 2,\n    });\n    const valueItems = values ? this.renderLegendValues() : [];\n    const seriesLabel = (\n      <LegendSeriesLabel\n        label={series.alias}\n        color={series.color}\n        yaxis={this.state.yaxis}\n        onLabelClick={this.onLabelClick}\n        onColorChange={this.onColorChange}\n        onToggleAxis={this.onToggleAxis}\n      />\n    );\n\n    if (asTable) {\n      return (\n        <tr className={`graph-legend-series ${seriesOptionClasses}`}>\n          <td>\n            <div className=\"graph-legend-series__table-name\">{seriesLabel}</div>\n          </td>\n          {valueItems}\n        </tr>\n      );\n    } else {\n      return (\n        <div className={`graph-legend-series ${seriesOptionClasses}`}>\n          {seriesLabel}\n          {valueItems}\n        </div>\n      );\n    }\n  }\n}\n\ninterface LegendSeriesLabelProps {\n  label: string;\n  color: string;\n  yaxis?: number;\n  onLabelClick: (event: any) => void;\n}\n\nclass LegendSeriesLabel extends PureComponent<LegendSeriesLabelProps & LegendSeriesIconProps> {\n  static defaultProps: Partial<LegendSeriesLabelProps> = {\n    yaxis: undefined,\n    onLabelClick: () => {},\n  };\n\n  render() {\n    const { label, color, yaxis } = this.props;\n    const { onColorChange, onToggleAxis } = this.props;\n    const onLabelClick = this.props.onLabelClick ? this.props.onLabelClick : () => {};\n\n    return [\n      <LegendSeriesIcon\n        key=\"icon\"\n        color={color}\n        yaxis={yaxis}\n        onColorChange={onColorChange}\n        onToggleAxis={onToggleAxis}\n      />,\n      <a\n        className=\"graph-legend-alias pointer\"\n        title={label}\n        key=\"label\"\n        onClick={onLabelClick}\n        aria-label={selectors.components.Panels.Visualization.Graph.Legend.legendItemAlias(label)}\n      >\n        {label}\n      </a>,\n    ];\n  }\n}\n\ninterface LegendSeriesIconProps {\n  color: string;\n  yaxis?: number;\n  onColorChange?: (color: string) => void;\n  onToggleAxis?: () => void;\n}\n\ninterface LegendSeriesIconState {\n  color: string;\n}\n\nclass LegendSeriesIcon extends PureComponent<LegendSeriesIconProps, LegendSeriesIconState> {\n  static defaultProps: Partial<LegendSeriesIconProps> = {\n    yaxis: undefined,\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  onColorChange = (color: string) => {\n    const { onColorChange } = this.props;\n    if (onColorChange) {\n      onColorChange(color);\n    }\n  };\n  render() {\n    return (\n      <SeriesColorPicker\n        yaxis={this.props.yaxis}\n        color={this.props.color}\n        onChange={this.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n        enableNamedColors\n      >\n        {({ ref, showColorPicker, hideColorPicker }) => (\n          <SeriesIcon\n            color={this.props.color}\n            ref={ref}\n            onClick={showColorPicker}\n            onMouseLeave={hideColorPicker}\n            className=\"graph-legend-icon\"\n          />\n        )}\n      </SeriesColorPicker>\n    );\n  }\n}\n\ninterface LegendValueProps {\n  value: string;\n  valueName: string;\n  asTable?: boolean;\n  onValueClick?: (event: any) => void;\n}\n\nfunction LegendValue({ value, valueName, asTable, onValueClick }: LegendValueProps) {\n  if (asTable) {\n    return (\n      <td className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n        {value}\n      </td>\n    );\n  }\n  return (\n    <div className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n      {value}\n    </div>\n  );\n}\n","import { sortBy as _sortBy } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { CustomScrollbar, Icon } from '@grafana/ui';\nimport { TimeSeries } from 'app/core/core';\n\nimport { LegendStat, LegendItem, LEGEND_STATS } from './LegendSeriesItem';\n\ninterface LegendProps {\n  seriesList: TimeSeries[];\n  optionalClass?: string;\n}\n\ninterface LegendEventHandlers {\n  onToggleSeries?: (hiddenSeries: any) => void;\n  onToggleSort?: (sortBy: any, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendComponentEventHandlers {\n  onToggleSeries?: (series: TimeSeries, event: any) => void;\n  onToggleSort?: (sortBy: LegendStat | undefined, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendDisplayProps {\n  hiddenSeries: any;\n  hideEmpty?: boolean;\n  hideZero?: boolean;\n  alignAsTable?: boolean;\n  rightSide?: boolean;\n  sideWidth?: number;\n}\n\ninterface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ninterface LegendSortProps {\n  sort?: LegendStat;\n  sortDesc?: boolean;\n}\n\nexport type GraphLegendProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendEventHandlers;\nexport type LegendComponentProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendComponentEventHandlers;\n\ninterface LegendState {\n  hiddenSeries: { [seriesAlias: string]: boolean };\n}\n\nexport class GraphLegend extends PureComponent<GraphLegendProps, LegendState> {\n  static defaultProps: Partial<GraphLegendProps> = {\n    values: false,\n    min: false,\n    max: false,\n    avg: false,\n    current: false,\n    total: false,\n    alignAsTable: false,\n    rightSide: false,\n    sort: undefined,\n    sortDesc: false,\n    optionalClass: '',\n    onToggleSeries: () => {},\n    onToggleSort: () => {},\n    onToggleAxis: () => {},\n    onColorChange: () => {},\n  };\n\n  constructor(props: GraphLegendProps) {\n    super(props);\n    this.state = {\n      hiddenSeries: this.props.hiddenSeries,\n    };\n  }\n\n  sortLegend() {\n    let seriesList: TimeSeries[] = [...this.props.seriesList] || [];\n    const sortBy = this.props.sort;\n    if (sortBy && this.props[sortBy] && this.props.alignAsTable) {\n      seriesList = _sortBy(seriesList, (series) => {\n        let sort = series.stats[sortBy];\n        if (sort === null) {\n          sort = -Infinity;\n        }\n        return sort;\n      }) as TimeSeries[];\n      if (this.props.sortDesc) {\n        seriesList = seriesList.reverse();\n      }\n    }\n    return seriesList;\n  }\n\n  onToggleSeries = (series: TimeSeries, event: any) => {\n    if (!this.props.onToggleSeries) {\n      return;\n    }\n\n    let hiddenSeries = { ...this.state.hiddenSeries };\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (hiddenSeries[series.alias]) {\n        delete hiddenSeries[series.alias];\n      } else {\n        hiddenSeries[series.alias] = true;\n      }\n    } else {\n      hiddenSeries = this.toggleSeriesExclusiveMode(series);\n    }\n    this.setState({ hiddenSeries: hiddenSeries });\n    this.props.onToggleSeries(hiddenSeries);\n  };\n\n  toggleSeriesExclusiveMode(series: TimeSeries) {\n    const hiddenSeries = { ...this.state.hiddenSeries };\n\n    if (hiddenSeries[series.alias]) {\n      delete hiddenSeries[series.alias];\n    }\n\n    // check if every other series is hidden\n    const alreadyExclusive = this.props.seriesList.every((value) => {\n      if (value.alias === series.alias) {\n        return true;\n      }\n\n      return hiddenSeries[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      this.props.seriesList.forEach((value) => {\n        delete hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      this.props.seriesList.forEach((value) => {\n        if (value.alias === series.alias) {\n          return;\n        }\n\n        hiddenSeries[value.alias] = true;\n      });\n    }\n\n    return hiddenSeries;\n  }\n\n  render() {\n    const {\n      optionalClass,\n      rightSide,\n      sideWidth,\n      sort,\n      sortDesc,\n      hideEmpty,\n      hideZero,\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total,\n    } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    const hiddenSeries = this.state.hiddenSeries;\n    const seriesHideProps = { hideEmpty, hideZero };\n    const sortProps = { sort, sortDesc };\n    const seriesList = this.sortLegend().filter((series) => !series.hideFromLegend(seriesHideProps));\n    const legendClass = `${this.props.alignAsTable ? 'graph-legend-table' : ''} ${optionalClass}`;\n\n    // Set min-width if side style and there is a value, otherwise remove the CSS property\n    // Set width so it works with IE11\n    const width: any = rightSide && sideWidth ? sideWidth : undefined;\n    const ieWidth: any = rightSide && sideWidth ? sideWidth - 1 : undefined;\n    const legendStyle: React.CSSProperties = {\n      minWidth: width,\n      width: ieWidth,\n    };\n\n    const legendProps: LegendComponentProps = {\n      seriesList: seriesList,\n      hiddenSeries: hiddenSeries,\n      onToggleSeries: this.onToggleSeries,\n      onToggleAxis: this.props.onToggleAxis,\n      onToggleSort: this.props.onToggleSort,\n      onColorChange: this.props.onColorChange,\n      ...seriesValuesProps,\n      ...sortProps,\n    };\n\n    return (\n      <div className={`graph-legend-content ${legendClass}`} style={legendStyle}>\n        {this.props.alignAsTable ? <LegendTable {...legendProps} /> : <LegendSeriesList {...legendProps} />}\n      </div>\n    );\n  }\n}\n\nclass LegendSeriesList extends PureComponent<LegendComponentProps> {\n  render() {\n    const { seriesList, hiddenSeries, values, min, max, avg, current, total } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    return seriesList.map((series, i) => (\n      <LegendItem\n        // This trick required because TimeSeries.id is not unique (it's just TimeSeries.alias).\n        // In future would be good to make id unique across the series list.\n        key={`${series.id}-${i}`}\n        series={series}\n        hidden={hiddenSeries[series.alias]}\n        {...seriesValuesProps}\n        onLabelClick={this.props.onToggleSeries}\n        onColorChange={this.props.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n      />\n    ));\n  }\n}\n\nclass LegendTable extends PureComponent<Partial<LegendComponentProps>> {\n  onToggleSort = (stat: LegendStat) => {\n    if (!this.props.onToggleSort) {\n      return;\n    }\n\n    let sortDesc = this.props.sortDesc;\n    let sortBy = this.props.sort;\n    if (stat !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = stat;\n    }\n    this.props.onToggleSort(sortBy, sortDesc);\n  };\n\n  render() {\n    const seriesList = this.props.seriesList;\n    const { values, min, max, avg, current, total, sort, sortDesc, hiddenSeries } = this.props;\n    const seriesValuesProps: any = { values, min, max, avg, current, total };\n\n    if (!seriesList) {\n      return null;\n    }\n\n    return (\n      <table>\n        <colgroup>\n          <col style={{ width: '100%' }} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th style={{ textAlign: 'left' }} />\n            {LEGEND_STATS.map(\n              (statName) =>\n                seriesValuesProps[statName] && (\n                  <LegendTableHeaderItem\n                    key={statName}\n                    statName={statName}\n                    sort={sort}\n                    sortDesc={sortDesc}\n                    onClick={this.onToggleSort}\n                  />\n                )\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {seriesList &&\n            seriesList.map((series, i) => (\n              <LegendItem\n                key={`${series.id}-${i}`}\n                asTable={true}\n                series={series}\n                hidden={hiddenSeries[series.alias]}\n                onLabelClick={this.props.onToggleSeries}\n                onColorChange={this.props.onColorChange}\n                onToggleAxis={this.props.onToggleAxis}\n                {...seriesValuesProps}\n              />\n            ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\ninterface LegendTableHeaderProps {\n  statName: LegendStat;\n  onClick?: (statName: LegendStat) => void;\n}\n\nclass LegendTableHeaderItem extends PureComponent<LegendTableHeaderProps & LegendSortProps> {\n  onClick = () => {\n    if (this.props.onClick) {\n      this.props.onClick(this.props.statName);\n    }\n  };\n\n  render() {\n    const { statName, sort, sortDesc } = this.props;\n    return (\n      <th className=\"pointer\" onClick={this.onClick}>\n        {statName}\n        {sort === statName && <Icon name={sortDesc ? 'angle-down' : 'angle-up'} />}\n      </th>\n    );\n  }\n}\n\nexport class Legend extends PureComponent<GraphLegendProps> {\n  render() {\n    return (\n      <CustomScrollbar hideHorizontalTrack>\n        <GraphLegend {...this.props} />\n      </CustomScrollbar>\n    );\n  }\n}\n\nexport default Legend;\n","/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes: any, level: any) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n\n  expandStuckValues(yLeft, yRight);\n\n  // one of graphs on zero\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft: { max: number; min: number }, yRight: { max: number; min: number }) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft: { min: number; max: number }, yRight: { min: number; max: number }, level: number) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(\n  yLeft: { min: number; max: number },\n  yRight: { min: number; max: number },\n  level: number\n) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\ninterface AxisSide {\n  max: number;\n  min: number;\n}\n\nfunction checkCorrectAxis(axis: any[]): boolean {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes: any): boolean {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the one hand with respect to zero\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\n}\n\nfunction checkTwoCross(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the opposite sides with respect to zero\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\n}\n\nfunction getRate(yLeft: AxisSide, yRight: AxisSide): number {\n  if (checkTwoCross(yLeft, yRight)) {\n    const rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    const rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (checkOneSide(yLeft, yRight)) {\n    const absLeftMin = Math.abs(yLeft.min);\n    const absLeftMax = Math.abs(yLeft.max);\n    const absRightMin = Math.abs(yRight.min);\n    const absRightMax = Math.abs(yRight.max);\n    const upLeft = Math.max(absLeftMin, absLeftMax);\n    const downLeft = Math.min(absLeftMin, absLeftMax);\n    const upRight = Math.max(absRightMin, absRightMax);\n    const downRight = Math.min(absRightMin, absRightMax);\n\n    const rateLeft = downLeft !== 0 ? upLeft / downLeft : upLeft;\n    const rateRight = downRight !== 0 ? upRight / downRight : upRight;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (yLeft.min > 0 || yRight.min > 0) {\n    return yLeft.max / yRight.max;\n  } else {\n    return yLeft.min / yRight.min;\n  }\n}\n","import { each, filter, keys } from 'lodash';\nimport tinycolor from 'tinycolor2';\n\nimport { AnnotationEvent } from '@grafana/data';\nimport {\n  ALERTING_COLOR,\n  DEFAULT_ANNOTATION_COLOR,\n  NO_DATA_COLOR,\n  OK_COLOR,\n  PENDING_COLOR,\n  REGION_FILL_ALPHA,\n} from '@grafana/ui';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\n\nexport class EventManager {\n  event: AnnotationEvent | null = null;\n  editorOpen = false;\n\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range: { from: any; to: any }) {\n    if (!this.event) {\n      this.event = {};\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\n      this.event.panelId = this.panelCtrl.panel.id;\n    }\n\n    // update time\n    this.event.time = range.from;\n    this.event.isRegion = false;\n\n    if (range.to) {\n      this.event.timeEnd = range.to;\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event: AnnotationEvent, elem?: any) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations: any, flotOptions: any) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types: any = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__pending: {\n        color: PENDING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [\n          {\n            isRegion: true,\n            min: this.event.time,\n            timeEnd: this.event.timeEnd,\n            text: this.event.text,\n            eventType: '$__editing',\n            editModel: this.event,\n          },\n        ];\n      } else {\n        annotations = [\n          {\n            min: this.event.time,\n            text: this.event.text,\n            editModel: this.event,\n            eventType: '$__editing',\n          },\n        ];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i];\n\n        // add properties used by jquery flot events\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.type;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.type]) {\n          types[item.type] = {\n            color: item.color,\n            position: 'BOTTOM',\n            markerSize: 5,\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n\n    flotOptions.events = {\n      levels: keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this,\n    };\n  }\n}\n\nfunction getRegions(events: AnnotationEvent[]) {\n  return filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions: any[], flotOptions: { grid: { markings: any } }) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n\n  each(regions, (region) => {\n    if (region.source) {\n      fillColor = region.color || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: { from: region.min, to: region.timeEnd },\n      color: fillColor,\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\n  const color = tinycolor(colorString);\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}\n","import $ from 'jquery';\n\nimport {\n  textUtil,\n  systemDateFormats,\n  LegacyGraphHoverClearEvent,\n  LegacyGraphHoverEvent,\n  DataHoverClearEvent,\n} from '@grafana/data';\nimport { appEvents } from 'app/core/core';\nimport { CoreEvents } from 'app/types';\n\nexport default function GraphTooltip(this: any, elem: any, dashboard: any, scope: any, getSeriesFn: any) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n  const hoverEvent = new LegacyGraphHoverEvent({ pos: {}, point: {}, panel: this.panel });\n\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = () => {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = (posX: number, series: any, last: number) => {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = (posX: any, series: any) => {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = (absoluteTime: string, innerHtml: string, pos: { pageX: number; pageY: any }, xMode: string) => {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX, pos.pageY, { offset: 10 });\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function (seriesList: any[], pos: { x: number }) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let lastValue = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      value = series.data[hoverIndex][1];\n\n      if (series.stack && value !== null && panel.tooltip.value_type !== 'individual') {\n        lastValue += value;\n        value = lastValue;\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(() => {\n    if (panel.tooltip?.shared) {\n      const plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    dashboard.events.publish(new LegacyGraphHoverClearEvent());\n    dashboard.events.publish(new DataHoverClearEvent());\n  });\n\n  elem.bind('plothover', (event: any, pos: { panelRelY: number; pageY: number }, item: any) => {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    if (!dashboard.panelInEdit) {\n      pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n      hoverEvent.payload.pos = pos;\n      hoverEvent.payload.panel = panel;\n      hoverEvent.payload.point['time'] = (pos as any).x;\n      dashboard.events.publish(hoverEvent);\n    }\n  });\n\n  elem.bind('plotclick', (event: any, pos: any, item: any) => {\n    appEvents.emit(CoreEvents.graphClicked, { pos: pos, panel: panel, item: item });\n  });\n\n  elem.bind('plotleave', () => {\n    if (!panel.tooltip.shared) {\n      return;\n    }\n\n    const plot = elem.data().plot;\n    if (plot) {\n      $tooltip.detach();\n      plot.unhighlight();\n    }\n  });\n\n  this.clear = (plot: { clearCrosshair: () => void; unhighlight: () => void }) => {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = (pos: any, item: any) => {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      const pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n\n      const scrollTop = $(window).scrollTop() ?? 0;\n      const isVisible = pos.pageY >= scrollTop && pos.pageY <= $(window).innerHeight()! + scrollTop;\n\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = systemDateFormats.fullDateMS;\n    } else {\n      tooltipFormat = systemDateFormats.fullDate;\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n        value = textUtil.sanitize(series.formatValue(hoverInfo.value));\n\n        const color = textUtil.sanitize(hoverInfo.color);\n        const label = textUtil.sanitize(hoverInfo.label);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      const color = textUtil.sanitize(item.series.color);\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = textUtil.sanitize(series.formatValue(value));\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n","import { histogram } from 'd3';\n\nimport TimeSeries from 'app/core/time_series2';\n\n/**\n * Convert series into array of series values.\n * @param data Array of series\n */\nexport function getSeriesValues(dataList: TimeSeries[]): number[] {\n  const VALUE_INDEX = 0;\n  const values = [];\n\n  // Count histogam stats\n  for (let i = 0; i < dataList.length; i++) {\n    const series = dataList[i];\n    const datapoints = series.datapoints;\n    for (let j = 0; j < datapoints.length; j++) {\n      if (datapoints[j][VALUE_INDEX] !== null) {\n        values.push(datapoints[j][VALUE_INDEX]);\n      }\n    }\n  }\n\n  return values;\n}\n\n/**\n * Convert array of values into timeseries-like histogram:\n * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]\n * @param values\n * @param bucketSize\n */\nexport function convertValuesToHistogram(values: number[], bucketSize: number, min: number, max: number): any[] {\n  const minBound = getBucketBound(min, bucketSize);\n  const maxBound = getBucketBound(max, bucketSize);\n\n  const histGenerator = histogram()\n    .domain([minBound, maxBound])\n    .thresholds(Math.round(max - min) / bucketSize);\n\n  return histGenerator(values).map((bin) => {\n    return [bin.x0, bin.length];\n  });\n}\n\n/**\n * Convert series into array of histogram data.\n * @param data Array of series\n * @param bucketSize\n */\nexport function convertToHistogramData(\n  data: any,\n  bucketSize: number,\n  hiddenSeries: any,\n  min: number,\n  max: number\n): any[] {\n  return data.map((series: any) => {\n    const values = getSeriesValues([series]);\n    series.histogram = true;\n    if (!hiddenSeries[series.alias]) {\n      const histogram = convertValuesToHistogram(values, bucketSize, min, max);\n      series.data = histogram;\n    } else {\n      series.data = [];\n    }\n    return series;\n  });\n}\n\nfunction getBucketBound(value: number, bucketSize: number): number {\n  return Math.floor(value / bucketSize) * bucketSize;\n}\n","import 'vendor/flot/jquery.flot';\nimport $ from 'jquery';\nimport { isNumber } from 'lodash';\n\nimport { getColorForTheme } from '@grafana/data';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { config } from 'app/core/config';\nimport { CoreEvents } from 'app/types';\n\nexport class ThresholdManager {\n  plot: any;\n  placeholder: any;\n  height: any;\n  thresholds: any;\n  needsCleanup = false;\n  hasSecondYAxis: any;\n\n  constructor(private panelCtrl: PanelCtrl) {}\n\n  getHandleHtml(handleIndex: any, model: { colorMode: string }, valueStr: any) {\n    let stateClass = model.colorMode;\n    if (model.colorMode === 'custom') {\n      stateClass = 'critical';\n    }\n\n    return `\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>`;\n  }\n\n  initDragging(evt: any) {\n    const handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\n    const handleIndex = $(evt.currentTarget).data('handleIndex');\n\n    let lastY: number | null = null;\n    let posTop: number;\n    const plot = this.plot;\n    const panelCtrl = this.panelCtrl;\n    const model = this.thresholds[handleIndex];\n\n    function dragging(evt: any) {\n      if (lastY === null) {\n        lastY = evt.clientY;\n      } else {\n        const diff = evt.clientY - lastY;\n        posTop = posTop + diff;\n        lastY = evt.clientY;\n        handleElem.css({ top: posTop + diff });\n      }\n    }\n\n    function stopped() {\n      // calculate graph level\n      let graphValue = plot.c2p({ left: 0, top: posTop }).y;\n      graphValue = parseInt(graphValue.toFixed(0), 10);\n      model.value = graphValue;\n\n      handleElem.off('mousemove', dragging);\n      document.removeEventListener('mouseup', stopped);\n\n      // trigger digest and render\n      panelCtrl.$scope.$apply(() => {\n        panelCtrl.render();\n        panelCtrl.events.emit(CoreEvents.thresholdChanged, {\n          threshold: model,\n          handleIndex: handleIndex,\n        });\n      });\n    }\n\n    lastY = null;\n    posTop = handleElem.position().top;\n\n    handleElem.on('mousemove', dragging);\n    document.addEventListener('mouseup', stopped);\n  }\n\n  cleanUp() {\n    this.placeholder.find('.alert-handle-wrapper').remove();\n    this.needsCleanup = false;\n  }\n\n  renderHandle(handleIndex: number, defaultHandleTopPos: number) {\n    const model = this.thresholds[handleIndex];\n    // alerting defines\n    if (!model.visible && (this.panelCtrl as any).alert) {\n      return;\n    }\n\n    const value = model.value;\n    let valueStr = value;\n    let handleTopPos = 0;\n\n    // handle no value\n    if (!isNumber(value)) {\n      valueStr = '';\n      handleTopPos = defaultHandleTopPos;\n    } else {\n      const valueCanvasPos = this.plot.p2c({ x: 0, y: value });\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\n    }\n\n    const handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\n    this.placeholder.append(handleElem);\n\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\n    handleElem.css({ top: handleTopPos });\n  }\n\n  shouldDrawHandles() {\n    // @ts-ignore\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\n  }\n\n  prepare(elem: JQuery, data: any[]) {\n    this.hasSecondYAxis = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].yaxis > 1) {\n        this.hasSecondYAxis = true;\n        break;\n      }\n    }\n\n    if (this.shouldDrawHandles()) {\n      const thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\n      elem.css('margin-right', thresholdMargin);\n    } else if (this.needsCleanup) {\n      elem.css('margin-right', '0');\n    }\n  }\n\n  draw(plot: any) {\n    this.thresholds = this.panelCtrl.panel.thresholds;\n    this.plot = plot;\n    this.placeholder = plot.getPlaceholder();\n\n    if (this.needsCleanup) {\n      this.cleanUp();\n    }\n\n    if (!this.shouldDrawHandles()) {\n      return;\n    }\n\n    this.height = plot.height();\n\n    if (this.thresholds.length > 0) {\n      this.renderHandle(0, 10);\n    }\n    if (this.thresholds.length > 1) {\n      this.renderHandle(1, this.height - 30);\n    }\n\n    this.placeholder.off('mousedown', '.alert-handle');\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\n    this.needsCleanup = true;\n  }\n\n  addFlotOptions(options: any, panel: any) {\n    if (!panel.thresholds || panel.thresholds.length === 0) {\n      return;\n    }\n\n    let gtLimit = Infinity;\n    let ltLimit = -Infinity;\n    let i, threshold, other;\n\n    for (i = 0; i < panel.thresholds.length; i++) {\n      threshold = panel.thresholds[i];\n      if (!isNumber(threshold.value)) {\n        continue;\n      }\n\n      let limit;\n      switch (threshold.op) {\n        case 'gt': {\n          limit = gtLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value > threshold.value) {\n              limit = other.value;\n              ltLimit = limit;\n            }\n          }\n          break;\n        }\n        case 'lt': {\n          limit = ltLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value < threshold.value) {\n              limit = other.value;\n              gtLimit = limit;\n            }\n          }\n          break;\n        }\n      }\n\n      let fillColor, lineColor;\n\n      switch (threshold.colorMode) {\n        case 'critical': {\n          fillColor = 'rgba(234, 112, 112, 0.12)';\n          lineColor = 'rgba(237, 46, 24, 0.60)';\n          break;\n        }\n        case 'warning': {\n          fillColor = 'rgba(235, 138, 14, 0.12)';\n          lineColor = 'rgba(247, 149, 32, 0.60)';\n          break;\n        }\n        case 'ok': {\n          fillColor = 'rgba(11, 237, 50, 0.090)';\n          lineColor = 'rgba(6,163,69, 0.60)';\n          break;\n        }\n        case 'custom': {\n          fillColor = threshold.fillColor;\n          lineColor = threshold.lineColor;\n          break;\n        }\n      }\n\n      // fill\n      if (threshold.fill) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: limit },\n            color: getColorForTheme(fillColor, config.theme),\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: limit },\n            color: getColorForTheme(fillColor, config.theme),\n          });\n        }\n      }\n      if (threshold.line) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: threshold.value },\n            color: getColorForTheme(lineColor, config.theme),\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: threshold.value },\n            color: getColorForTheme(lineColor, config.theme),\n          });\n        }\n      }\n    }\n  }\n}\n","import 'vendor/flot/jquery.flot';\nimport { map } from 'lodash';\n\nimport { getColorForTheme, dateTime, DateTime, AbsoluteTimeRange, GrafanaTheme } from '@grafana/data';\nimport { config } from 'app/core/config';\n\ntype TimeRegionColorDefinition = {\n  fill: string | null;\n  line: string | null;\n};\n\nexport const colorModes: any = {\n  gray: {\n    themeDependent: true,\n    title: 'Gray',\n    darkColor: { fill: 'rgba(255, 255, 255, 0.09)', line: 'rgba(255, 255, 255, 0.2)' },\n    lightColor: { fill: 'rgba(0, 0, 0, 0.09)', line: 'rgba(0, 0, 0, 0.2)' },\n  },\n  red: {\n    title: 'Red',\n    color: { fill: 'rgba(234, 112, 112, 0.12)', line: 'rgba(237, 46, 24, 0.60)' },\n  },\n  green: {\n    title: 'Green',\n    color: { fill: 'rgba(11, 237, 50, 0.090)', line: 'rgba(6,163,69, 0.60)' },\n  },\n  blue: {\n    title: 'Blue',\n    color: { fill: 'rgba(11, 125, 238, 0.12)', line: 'rgba(11, 125, 238, 0.60)' },\n  },\n  yellow: {\n    title: 'Yellow',\n    color: { fill: 'rgba(235, 138, 14, 0.12)', line: 'rgba(247, 149, 32, 0.60)' },\n  },\n  custom: { title: 'Custom' },\n};\n\nexport function getColorModes() {\n  return map(Object.keys(colorModes), (key) => {\n    return {\n      key,\n      value: colorModes[key].title,\n    };\n  });\n}\n\nfunction getColor(timeRegion: any, theme: GrafanaTheme): TimeRegionColorDefinition {\n  if (Object.keys(colorModes).indexOf(timeRegion.colorMode) === -1) {\n    timeRegion.colorMode = 'red';\n  }\n\n  if (timeRegion.colorMode === 'custom') {\n    return {\n      fill: timeRegion.fill && timeRegion.fillColor ? getColorForTheme(timeRegion.fillColor, theme) : null,\n      line: timeRegion.line && timeRegion.lineColor ? getColorForTheme(timeRegion.lineColor, theme) : null,\n    };\n  }\n\n  const colorMode = colorModes[timeRegion.colorMode];\n\n  if (colorMode.themeDependent === true) {\n    return theme.isLight ? colorMode.lightColor : colorMode.darkColor;\n  }\n\n  return {\n    fill: timeRegion.fill ? getColorForTheme(colorMode.color.fill, theme) : null,\n    line: timeRegion.fill ? getColorForTheme(colorMode.color.line, theme) : null,\n  };\n}\n\nexport class TimeRegionManager {\n  plot: any;\n  timeRegions: any;\n\n  constructor(private panelCtrl: any) {}\n\n  draw(plot: any) {\n    this.timeRegions = this.panelCtrl.panel.timeRegions;\n    this.plot = plot;\n  }\n\n  addFlotOptions(options: any, panel: any) {\n    if (!panel.timeRegions || panel.timeRegions.length === 0) {\n      return;\n    }\n\n    const tRange = {\n      from: dateTime(this.panelCtrl.range.from).utc(),\n      to: dateTime(this.panelCtrl.range.to).utc(),\n    };\n\n    let i: number,\n      hRange: { from: any; to: any },\n      timeRegion: any,\n      regions: AbsoluteTimeRange[],\n      fromStart: DateTime,\n      fromEnd: DateTime,\n      timeRegionColor: TimeRegionColorDefinition;\n\n    const timeRegionsCopy = panel.timeRegions.map((a: any) => ({ ...a }));\n\n    for (i = 0; i < timeRegionsCopy.length; i++) {\n      timeRegion = timeRegionsCopy[i];\n\n      if (!(timeRegion.fromDayOfWeek || timeRegion.from) && !(timeRegion.toDayOfWeek || timeRegion.to)) {\n        continue;\n      }\n\n      if (timeRegion.from && !timeRegion.to) {\n        timeRegion.to = timeRegion.from;\n      }\n\n      if (!timeRegion.from && timeRegion.to) {\n        timeRegion.from = timeRegion.to;\n      }\n\n      hRange = {\n        from: this.parseTimeRange(timeRegion.from),\n        to: this.parseTimeRange(timeRegion.to),\n      };\n\n      if (!timeRegion.fromDayOfWeek && timeRegion.toDayOfWeek) {\n        timeRegion.fromDayOfWeek = timeRegion.toDayOfWeek;\n      }\n\n      if (!timeRegion.toDayOfWeek && timeRegion.fromDayOfWeek) {\n        timeRegion.toDayOfWeek = timeRegion.fromDayOfWeek;\n      }\n\n      if (timeRegion.fromDayOfWeek) {\n        hRange.from.dayOfWeek = Number(timeRegion.fromDayOfWeek);\n      }\n\n      if (timeRegion.toDayOfWeek) {\n        hRange.to.dayOfWeek = Number(timeRegion.toDayOfWeek);\n      }\n\n      if (hRange.from.dayOfWeek && hRange.from.h === null && hRange.from.m === null) {\n        hRange.from.h = 0;\n        hRange.from.m = 0;\n        hRange.from.s = 0;\n      }\n\n      if (hRange.to.dayOfWeek && hRange.to.h === null && hRange.to.m === null) {\n        hRange.to.h = 23;\n        hRange.to.m = 59;\n        hRange.to.s = 59;\n      }\n\n      if (!hRange.from || !hRange.to) {\n        continue;\n      }\n\n      regions = [];\n\n      fromStart = dateTime(tRange.from);\n      fromStart.set('hour', 0);\n      fromStart.set('minute', 0);\n      fromStart.set('second', 0);\n      fromStart.add(hRange.from.h, 'hours');\n      fromStart.add(hRange.from.m, 'minutes');\n      fromStart.add(hRange.from.s, 'seconds');\n\n      while (fromStart.unix() <= tRange.to.unix()) {\n        while (hRange.from.dayOfWeek && hRange.from.dayOfWeek !== fromStart.isoWeekday()) {\n          fromStart.add(24, 'hours');\n        }\n\n        if (fromStart.unix() > tRange.to.unix()) {\n          break;\n        }\n\n        fromEnd = dateTime(fromStart);\n\n        if (fromEnd.hour) {\n          if (hRange.from.h <= hRange.to.h) {\n            fromEnd.add(hRange.to.h - hRange.from.h, 'hours');\n          } else if (hRange.from.h > hRange.to.h) {\n            while (fromEnd.hour() !== hRange.to.h) {\n              fromEnd.add(1, 'hours');\n            }\n          } else {\n            fromEnd.add(24 - hRange.from.h, 'hours');\n\n            while (fromEnd.hour() !== hRange.to.h) {\n              fromEnd.add(1, 'hours');\n            }\n          }\n        }\n\n        fromEnd.set('minute', hRange.to.m);\n        fromEnd.set('second', hRange.to.s);\n\n        while (hRange.to.dayOfWeek && hRange.to.dayOfWeek !== fromEnd.isoWeekday()) {\n          fromEnd.add(24, 'hours');\n        }\n\n        const outsideRange =\n          (fromStart.unix() < tRange.from.unix() && fromEnd.unix() < tRange.from.unix()) ||\n          (fromStart.unix() > tRange.to.unix() && fromEnd.unix() > tRange.to.unix());\n\n        if (!outsideRange) {\n          regions.push({ from: fromStart.valueOf(), to: fromEnd.valueOf() });\n        }\n\n        fromStart.add(24, 'hours');\n      }\n\n      timeRegionColor = getColor(timeRegion, config.theme);\n\n      for (let j = 0; j < regions.length; j++) {\n        const r = regions[j];\n        if (timeRegion.fill) {\n          options.grid.markings.push({\n            xaxis: { from: r.from, to: r.to },\n            color: timeRegionColor.fill,\n          });\n        }\n\n        if (timeRegion.line) {\n          options.grid.markings.push({\n            xaxis: { from: r.from, to: r.from },\n            color: timeRegionColor.line,\n          });\n          options.grid.markings.push({\n            xaxis: { from: r.to, to: r.to },\n            color: timeRegionColor.line,\n          });\n        }\n      }\n    }\n  }\n\n  parseTimeRange(str: string) {\n    const timeRegex = /^([\\d]+):?(\\d{2})?/;\n    const result: any = { h: null, m: null };\n    const match = timeRegex.exec(str);\n\n    if (!match) {\n      return result;\n    }\n\n    if (match.length > 1) {\n      result.h = Number(match[1]);\n      result.m = 0;\n\n      if (match.length > 2 && match[2] !== undefined) {\n        result.m = Number(match[2]);\n      }\n\n      if (result.h > 23) {\n        result.h = 23;\n      }\n\n      if (result.m > 59) {\n        result.m = 59;\n      }\n    }\n\n    return result;\n  }\n}\n","import 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport './jquery.flot.events';\n\nimport $ from 'jquery';\nimport { clone, find, flatten, isUndefined, map, max as _max, min as _min, sortBy as _sortBy, toNumber } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  DataFrame,\n  DataFrameView,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  FieldDisplay,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  getFlotPairsConstant,\n  getTimeField,\n  getValueFormat,\n  hasLinks,\n  LegacyEventHandler,\n  LegacyGraphHoverClearEvent,\n  LegacyGraphHoverEvent,\n  LegacyGraphHoverEventPayload,\n  LinkModelSupplier,\n  PanelEvents,\n  toUtc,\n} from '@grafana/data';\nimport { graphTickFormatter, graphTimeFormat, IconName, MenuItemProps, MenuItemsGroup } from '@grafana/ui';\nimport { coreModule } from 'app/angular/core_module';\nimport config from 'app/core/config';\nimport { updateLegendValues } from 'app/core/core';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport { provideTheme } from 'app/core/utils/ConfigProvider';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getFieldLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\n\nimport { DashboardModel } from '../../../features/dashboard/state';\n\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { GraphLegendProps, Legend } from './Legend/Legend';\nimport { alignYLevel } from './align_yaxes';\nimport { EventManager } from './event_manager';\nimport GraphTooltip from './graph_tooltip';\nimport { convertToHistogramData } from './histogram';\nimport { GraphCtrl } from './module';\nimport { ThresholdManager } from './threshold_manager';\nimport { TimeRegionManager } from './time_region_manager';\nimport { isLegacyGraphHoverEvent } from './utils';\n\nconst LegendWithThemeProvider = provideTheme(Legend);\n\nclass GraphElement {\n  ctrl: GraphCtrl;\n  contextMenu: GraphContextMenuCtrl;\n  tooltip: any;\n  dashboard: DashboardModel;\n  annotations: object[];\n  panel: any;\n  plot: any;\n  sortedSeries?: any[];\n  data: any[] = [];\n  panelWidth: number;\n  eventManager: EventManager;\n  thresholdManager: ThresholdManager;\n  timeRegionManager: TimeRegionManager;\n  declare legendElem: HTMLElement;\n\n  constructor(\n    private scope: any,\n    private elem: JQuery & {\n      bind(eventType: string, handler: (eventObject: JQueryEventObject, ...args: any[]) => any): JQuery; // need to extend with Plot\n    },\n    private timeSrv: TimeSrv\n  ) {\n    this.ctrl = scope.ctrl;\n    this.contextMenu = scope.ctrl.contextMenuCtrl;\n    this.dashboard = this.ctrl.dashboard;\n    this.panel = this.ctrl.panel;\n    this.annotations = [];\n\n    this.panelWidth = 0;\n    this.eventManager = new EventManager(this.ctrl);\n    this.thresholdManager = new ThresholdManager(this.ctrl);\n    this.timeRegionManager = new TimeRegionManager(this.ctrl);\n    // @ts-ignore\n    this.tooltip = new GraphTooltip(this.elem, this.ctrl.dashboard, this.scope, () => {\n      return this.sortedSeries;\n    });\n\n    // panel events\n    this.ctrl.events.on(PanelEvents.panelTeardown, this.onPanelTeardown.bind(this));\n    this.ctrl.events.on(PanelEvents.render, this.onRender.bind(this));\n\n    // global events\n    // Using old way here to use the scope unsubscribe model as the new $on function does not take scope\n    this.ctrl.dashboard.events.on(LegacyGraphHoverEvent.type, this.onGraphHover.bind(this), this.scope);\n    this.ctrl.dashboard.events.on(LegacyGraphHoverClearEvent.type, this.onGraphHoverClear.bind(this), this.scope);\n\n    this.ctrl.dashboard.events.on(DataHoverEvent.type, this.onGraphHover.bind(this), this.scope);\n    this.ctrl.dashboard.events.on(DataHoverClearEvent.type, this.onGraphHoverClear.bind(this), this.scope);\n\n    // plot events\n    this.elem.bind('plotselected', this.onPlotSelected.bind(this));\n    this.elem.bind('plotclick', this.onPlotClick.bind(this));\n\n    // get graph legend element\n    if (this.elem && this.elem.parent) {\n      this.legendElem = this.elem.parent().find('.graph-legend')[0];\n    }\n  }\n\n  onRender(renderData: any[]) {\n    this.data = renderData || this.data;\n    if (!this.data) {\n      return;\n    }\n\n    this.annotations = this.ctrl.annotations || [];\n    this.buildFlotPairs(this.data);\n    const graphHeight = this.ctrl.height;\n    updateLegendValues(this.data, this.panel, graphHeight);\n\n    if (!this.panel.legend.show) {\n      if (this.legendElem.hasChildNodes()) {\n        ReactDOM.unmountComponentAtNode(this.legendElem);\n      }\n      this.renderPanel();\n      return;\n    }\n\n    const { values, min, max, avg, current, total } = this.panel.legend;\n    const { alignAsTable, rightSide, sideWidth, sort, sortDesc, hideEmpty, hideZero } = this.panel.legend;\n    const legendOptions = { alignAsTable, rightSide, sideWidth, sort, sortDesc, hideEmpty, hideZero };\n    const valueOptions = { values, min, max, avg, current, total };\n    const legendProps: GraphLegendProps = {\n      seriesList: this.data,\n      hiddenSeries: this.ctrl.hiddenSeries,\n      ...legendOptions,\n      ...valueOptions,\n      onToggleSeries: this.ctrl.onToggleSeries,\n      onToggleSort: this.ctrl.onToggleSort,\n      onColorChange: this.ctrl.onColorChange,\n      onToggleAxis: this.ctrl.onToggleAxis,\n    };\n\n    const legendReactElem = React.createElement(LegendWithThemeProvider, legendProps);\n    ReactDOM.render(legendReactElem, this.legendElem, () => this.renderPanel());\n  }\n\n  onGraphHover(evt: LegacyGraphHoverEventPayload | DataHoverPayload) {\n    // ignore other graph hover events if shared tooltip is disabled\n    if (!this.dashboard.sharedTooltipModeEnabled()) {\n      return;\n    }\n\n    if (isLegacyGraphHoverEvent(evt)) {\n      // ignore if we are the emitter\n      if (!this.plot || evt.panel?.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {\n        return;\n      }\n\n      this.tooltip.show(evt.pos);\n    }\n\n    // DataHoverEvent can come from multiple panels that doesn't include x position\n    if (!evt.point?.time) {\n      return;\n    }\n\n    this.tooltip.show({ x: evt.point.time, panelRelY: evt.point.panelRelY ?? 1 });\n  }\n\n  onPanelTeardown() {\n    if (this.plot) {\n      this.plot.destroy();\n      this.plot = null;\n    }\n\n    this.tooltip.destroy();\n    this.elem.off();\n    this.elem.remove();\n\n    ReactDOM.unmountComponentAtNode(this.legendElem);\n  }\n\n  onGraphHoverClear(handler: LegacyEventHandler<any>) {\n    if (this.plot) {\n      this.tooltip.clear(this.plot);\n    }\n  }\n\n  onPlotSelected(event: JQueryEventObject, ranges: any) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      this.plot.clearSelection();\n      return;\n    }\n\n    if ((ranges.ctrlKey || ranges.metaKey) && this.dashboard.canAddAnnotations()) {\n      // Add annotation\n      setTimeout(() => {\n        this.eventManager.updateTime(ranges.xaxis);\n      }, 100);\n    } else {\n      this.scope.$apply(() => {\n        this.timeSrv.setTime({\n          from: toUtc(ranges.xaxis.from),\n          to: toUtc(ranges.xaxis.to),\n        });\n      });\n    }\n  }\n\n  getContextMenuItemsSupplier = (\n    flotPosition: { x: number; y: number },\n    linksSupplier?: LinkModelSupplier<FieldDisplay>\n  ): (() => MenuItemsGroup[]) => {\n    return () => {\n      // Fixed context menu items\n      const items: MenuItemsGroup[] = this.dashboard.canAddAnnotations()\n        ? [\n            {\n              items: [\n                {\n                  label: 'Add annotation',\n                  ariaLabel: 'Add annotation',\n                  icon: 'comment-alt',\n                  onClick: () => this.eventManager.updateTime({ from: flotPosition.x, to: null }),\n                },\n              ],\n            },\n          ]\n        : [];\n\n      if (!linksSupplier) {\n        return items;\n      }\n\n      const dataLinks = [\n        {\n          items: linksSupplier.getLinks(this.panel.replaceVariables).map<MenuItemProps>((link) => {\n            return {\n              label: link.title,\n              ariaLabel: link.title,\n              url: link.href,\n              target: link.target,\n              icon: `${link.target === '_self' ? 'link' : 'external-link-alt'}` as IconName,\n              onClick: link.onClick,\n            };\n          }),\n        },\n      ];\n\n      return [...items, ...dataLinks];\n    };\n  };\n\n  onPlotClick(event: JQueryEventObject, pos: any, item: any) {\n    const scrollContextElement = this.elem.closest('.view') ? this.elem.closest('.view').get()[0] : null;\n    const contextMenuSourceItem = item;\n\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      return;\n    }\n\n    if (pos.ctrlKey || pos.metaKey) {\n      // Skip if range selected (added in \"plotselected\" event handler)\n      if (pos.x !== pos.x1) {\n        return;\n      }\n\n      // skip if dashboard is not saved yet (exists in db) or user cannot edit\n      if (!this.dashboard.id || !this.dashboard.canAddAnnotations()) {\n        return;\n      }\n\n      setTimeout(() => {\n        this.eventManager.updateTime({ from: pos.x, to: null });\n      }, 100);\n      return;\n    } else {\n      this.tooltip.clear(this.plot);\n      let linksSupplier: LinkModelSupplier<FieldDisplay> | undefined;\n\n      if (item) {\n        // pickup y-axis index to know which field's config to apply\n        const yAxisConfig = this.panel.yaxes[item.series.yaxis.n === 2 ? 1 : 0];\n        const dataFrame = this.ctrl.dataList[item.series.dataFrameIndex];\n        const field = dataFrame.fields[item.series.fieldIndex];\n        const dataIndex = this.getDataIndexWithNullValuesCorrection(item, dataFrame);\n\n        let links: any[] = this.panel.options.dataLinks || [];\n        const hasLinksValue = hasLinks(field);\n        if (hasLinksValue) {\n          // Append the configured links to the panel datalinks\n          links = [...links, ...field.config.links!];\n        }\n        const fieldConfig = {\n          decimals: yAxisConfig.decimals,\n          links,\n        };\n        const fieldDisplay = getDisplayProcessor({\n          field: { config: fieldConfig, type: FieldType.number },\n          theme: config.theme2,\n          timeZone: this.dashboard.getTimezone(),\n        })(field.values.get(dataIndex));\n        linksSupplier = links.length\n          ? getFieldLinksSupplier({\n              display: fieldDisplay,\n              name: field.name,\n              view: new DataFrameView(dataFrame),\n              rowIndex: dataIndex,\n              colIndex: item.series.fieldIndex,\n              field: fieldConfig,\n              hasLinks: hasLinksValue,\n            })\n          : undefined;\n      }\n\n      this.scope.$apply(() => {\n        // Setting nearest CustomScrollbar element as a scroll context for graph context menu\n        this.contextMenu.setScrollContextElement(scrollContextElement);\n        this.contextMenu.setSource(contextMenuSourceItem);\n        this.contextMenu.setMenuItemsSupplier(this.getContextMenuItemsSupplier(pos, linksSupplier) as any);\n        this.contextMenu.toggleMenu(pos);\n      });\n    }\n  }\n\n  getDataIndexWithNullValuesCorrection(item: any, dataFrame: DataFrame): number {\n    /** This is one added to handle the scenario where we have null values in\n     *  the time series data and the: \"visualization options -> null value\"\n     *  set to \"connected\". In this scenario we will get the wrong dataIndex.\n     *\n     *  https://github.com/grafana/grafana/issues/22651\n     */\n    const { datapoint, dataIndex } = item;\n\n    if (!Array.isArray(datapoint) || datapoint.length === 0) {\n      return dataIndex;\n    }\n\n    const ts = datapoint[0];\n    const { timeField } = getTimeField(dataFrame);\n\n    if (!timeField || !timeField.values) {\n      return dataIndex;\n    }\n\n    const field = timeField.values.get(dataIndex);\n\n    if (field === ts) {\n      return dataIndex;\n    }\n\n    const correctIndex = timeField.values.toArray().findIndex((value) => value === ts);\n    return correctIndex > -1 ? correctIndex : dataIndex;\n  }\n\n  shouldAbortRender() {\n    if (!this.data) {\n      return true;\n    }\n\n    if (this.panelWidth === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  drawHook(plot: any) {\n    // add left axis labels\n    if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {\n      $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[0].label)\n        .appendTo(this.elem);\n    }\n\n    // add right axis labels\n    if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {\n      $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[1].label)\n        .appendTo(this.elem);\n    }\n\n    const { dataWarning } = this.ctrl;\n    if (dataWarning) {\n      const msg = $(`<div class=\"datapoints-warning flot-temp-elem\">${dataWarning.title}</div>`);\n      if (dataWarning.action) {\n        $(`<button class=\"btn btn-secondary\">${dataWarning.actionText}</button>`)\n          .click(dataWarning.action)\n          .appendTo(msg);\n      }\n      msg.appendTo(this.elem);\n    }\n    this.thresholdManager.draw(plot);\n    this.timeRegionManager.draw(plot);\n  }\n\n  processOffsetHook(plot: any, gridMargin: { left: number; right: number }) {\n    const left = this.panel.yaxes[0];\n    const right = this.panel.yaxes[1];\n    if (left.show && left.label) {\n      gridMargin.left = 20;\n    }\n    if (right.show && right.label) {\n      gridMargin.right = 20;\n    }\n\n    // apply y-axis min/max options\n    const yaxis = plot.getYAxes();\n    for (let i = 0; i < yaxis.length; i++) {\n      const axis: any = yaxis[i];\n      const panelOptions = this.panel.yaxes[i];\n      axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\n      axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\n    }\n  }\n\n  processRangeHook(plot: any) {\n    const yAxes = plot.getYAxes();\n    const align = this.panel.yaxis.align || false;\n\n    if (yAxes.length > 1 && align === true) {\n      const level = this.panel.yaxis.alignLevel || 0;\n      alignYLevel(yAxes, parseFloat(level));\n    }\n  }\n\n  // Series could have different timeSteps,\n  // let's find the smallest one so that bars are correctly rendered.\n  // In addition, only take series which are rendered as bars for this.\n  getMinTimeStepOfSeries(data: any[]) {\n    let min = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      if (!data[i].stats.timeStep) {\n        continue;\n      }\n      if (this.panel.bars) {\n        if (data[i].bars && data[i].bars.show === false) {\n          continue;\n        }\n      } else {\n        if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\n          continue;\n        }\n      }\n\n      if (data[i].stats.timeStep < min) {\n        min = data[i].stats.timeStep;\n      }\n    }\n\n    return min;\n  }\n\n  // Function for rendering panel\n  renderPanel() {\n    this.panelWidth = this.elem.width() ?? 0;\n\n    if (this.shouldAbortRender()) {\n      return;\n    }\n\n    // give space to alert editing\n    this.thresholdManager.prepare(this.elem, this.data);\n\n    // un-check dashes if lines are unchecked\n    this.panel.dashes = this.panel.lines ? this.panel.dashes : false;\n\n    // Populate element\n    const options: any = this.buildFlotOptions(this.panel);\n    this.prepareXAxis(options, this.panel);\n    this.configureYAxisOptions(this.data, options);\n    this.thresholdManager.addFlotOptions(options, this.panel);\n    this.timeRegionManager.addFlotOptions(options, this.panel);\n    this.eventManager.addFlotEvents(this.annotations, options);\n    this.sortedSeries = this.sortSeries(this.data, this.panel);\n    this.callPlot(options, true);\n  }\n\n  buildFlotPairs(data: any) {\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);\n\n      if (series.transform === 'constant') {\n        series.data = getFlotPairsConstant(series.data, this.ctrl.range!);\n      }\n\n      // if hidden remove points and disable stack\n      if (this.ctrl.hiddenSeries[series.alias]) {\n        series.data = [];\n        series.stack = false;\n      }\n    }\n  }\n\n  prepareXAxis(options: any, panel: any) {\n    switch (panel.xaxis.mode) {\n      case 'series': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n\n        for (let i = 0; i < this.data.length; i++) {\n          const series = this.data[i];\n          series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\n        }\n\n        this.addXSeriesAxis(options);\n        break;\n      }\n      case 'histogram': {\n        let bucketSize: number;\n\n        if (this.data.length) {\n          let histMin = _min(map(this.data, (s) => s.stats.min));\n          let histMax = _max(map(this.data, (s) => s.stats.max));\n          const ticks = panel.xaxis.buckets || this.panelWidth / 50;\n          if (panel.xaxis.min != null) {\n            const isInvalidXaxisMin = tickStep(panel.xaxis.min, histMax, ticks) <= 0;\n            histMin = isInvalidXaxisMin ? histMin : panel.xaxis.min;\n          }\n          if (panel.xaxis.max != null) {\n            const isInvalidXaxisMax = tickStep(histMin, panel.xaxis.max, ticks) <= 0;\n            histMax = isInvalidXaxisMax ? histMax : panel.xaxis.max;\n          }\n          bucketSize = tickStep(histMin, histMax, ticks);\n          options.series.bars.barWidth = bucketSize * 0.8;\n          this.data = convertToHistogramData(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);\n        } else {\n          bucketSize = 0;\n        }\n\n        this.addXHistogramAxis(options, bucketSize);\n        break;\n      }\n      case 'table': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n        this.addXTableAxis(options);\n        break;\n      }\n      default: {\n        options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;\n        this.addTimeAxis(options);\n        break;\n      }\n    }\n  }\n\n  callPlot(options: any, incrementRenderCounter: boolean) {\n    try {\n      this.plot = $.plot(this.elem, this.sortedSeries, options);\n      if (this.ctrl.renderError) {\n        delete this.ctrl.error;\n      }\n    } catch (e) {\n      console.error('flotcharts error', e);\n      this.ctrl.error = e.message || 'Render Error';\n      this.ctrl.renderError = true;\n    }\n\n    if (incrementRenderCounter) {\n      this.ctrl.renderingCompleted();\n    }\n  }\n\n  buildFlotOptions(panel: any) {\n    let gridColor = '#c8c8c8';\n    if (config.bootData.user.lightTheme === true) {\n      gridColor = '#a1a1a1';\n    }\n    const stack = panel.stack ? true : null;\n    const options: any = {\n      hooks: {\n        draw: [this.drawHook.bind(this)],\n        processOffset: [this.processOffsetHook.bind(this)],\n        processRange: [this.processRangeHook.bind(this)],\n      },\n      legend: { show: false },\n      series: {\n        stackpercent: panel.stack ? panel.percentage : false,\n        stack: panel.percentage ? null : stack,\n        lines: {\n          show: panel.lines,\n          zero: false,\n          fill: this.translateFillOption(panel.fill),\n          fillColor: this.getFillGradient(panel.fillGradient),\n          lineWidth: panel.dashes ? 0 : panel.linewidth,\n          steps: panel.steppedLine,\n        },\n        dashes: {\n          show: panel.dashes,\n          lineWidth: panel.linewidth,\n          dashLength: [panel.dashLength, panel.spaceLength],\n        },\n        bars: {\n          show: panel.bars,\n          fill: 1,\n          barWidth: 1,\n          zero: false,\n          lineWidth: 0,\n        },\n        points: {\n          show: panel.points,\n          fill: 1,\n          fillColor: false,\n          radius: panel.points ? panel.pointradius : 2,\n        },\n        shadowSize: 0,\n      },\n      yaxes: [],\n      xaxis: {},\n      grid: {\n        minBorderMargin: 0,\n        markings: [],\n        backgroundColor: null,\n        borderWidth: 0,\n        hoverable: true,\n        clickable: true,\n        color: gridColor,\n        margin: { left: 0, right: 0 },\n        labelMarginX: 0,\n        mouseActiveRadius: 30,\n      },\n      selection: {\n        mode: 'x',\n        color: '#666',\n      },\n      crosshair: {\n        mode: 'x',\n      },\n    };\n    return options;\n  }\n\n  sortSeries(series: any, panel: any) {\n    const sortBy = panel.legend.sort;\n    const sortOrder = panel.legend.sortDesc;\n    const haveSortBy = sortBy !== null && sortBy !== undefined && panel.legend[sortBy];\n    const haveSortOrder = sortOrder !== null && sortOrder !== undefined;\n    const shouldSortBy = panel.stack && haveSortBy && haveSortOrder && panel.legend.alignAsTable;\n    const sortDesc = panel.legend.sortDesc === true ? -1 : 1;\n\n    if (shouldSortBy) {\n      return _sortBy(series, (s) => s.stats[sortBy] * sortDesc);\n    } else {\n      return _sortBy(series, (s) => s.zindex);\n    }\n  }\n\n  getFillGradient(amount: number) {\n    if (!amount) {\n      return null;\n    }\n\n    return {\n      colors: [{ opacity: 0.0 }, { opacity: amount / 10 }],\n    };\n  }\n\n  translateFillOption(fill: number) {\n    if (this.panel.percentage && this.panel.stack) {\n      return fill === 0 ? 0.001 : fill / 10;\n    } else {\n      return fill / 10;\n    }\n  }\n\n  addTimeAxis(options: any) {\n    const ticks = this.panelWidth / 100;\n    const min = isUndefined(this.ctrl.range!.from) ? null : this.ctrl.range!.from.valueOf();\n    const max = isUndefined(this.ctrl.range!.to) ? null : this.ctrl.range!.to.valueOf();\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: 'time',\n      min: min,\n      max: max,\n      label: 'Datetime',\n      ticks: ticks,\n      timeformat: graphTimeFormat(ticks, min, max),\n      tickFormatter: graphTickFormatter,\n    };\n  }\n\n  addXSeriesAxis(options: any) {\n    const ticks = map(this.data, (series, index) => {\n      return [index + 1, series.alias];\n    });\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  addXHistogramAxis(options: any, bucketSize: number) {\n    let ticks: number | number[];\n    let min: number | undefined;\n    let max: number | undefined;\n\n    const defaultTicks = this.panelWidth / 50;\n\n    if (this.data.length && bucketSize) {\n      const tickValues = [];\n\n      for (const d of this.data) {\n        for (const point of d.data) {\n          tickValues[point[0]] = true;\n        }\n      }\n\n      ticks = Object.keys(tickValues).map((v) => Number(v));\n      min = _min(ticks)!;\n      max = _max(ticks)!;\n\n      // Adjust tick step\n      let tickStep = bucketSize;\n      let ticksNum = Math.floor((max - min) / tickStep);\n      while (ticksNum > defaultTicks) {\n        tickStep = tickStep * 2;\n        ticksNum = Math.ceil((max - min) / tickStep);\n      }\n\n      // Expand ticks for pretty view\n      min = Math.floor(min / tickStep) * tickStep;\n      // 1.01 is 101% - ensure we have enough space for last bar\n      max = Math.ceil((max * 1.01) / tickStep) * tickStep;\n\n      ticks = [];\n      for (let i = min; i <= max; i += tickStep) {\n        ticks.push(i);\n      }\n    } else {\n      // Set defaults if no data\n      ticks = defaultTicks / 2;\n      min = 0;\n      max = 1;\n    }\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: min,\n      max: max,\n      label: 'Histogram',\n      ticks: ticks,\n    };\n\n    // Use 'short' format for histogram values\n    this.configureAxisMode(options.xaxis, 'short', null);\n  }\n\n  addXTableAxis(options: any) {\n    let ticks = map(this.data, (series, seriesIndex) => {\n      return map(series.datapoints, (point, pointIndex) => {\n        const tickIndex = seriesIndex * series.datapoints.length + pointIndex;\n        return [tickIndex + 1, point[1]];\n      });\n    });\n    // @ts-ignore, potential bug? is this flattenDeep?\n    ticks = flatten(ticks, true);\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  configureYAxisOptions(data: any, options: any) {\n    const defaults = {\n      position: 'left',\n      show: this.panel.yaxes[0].show,\n      index: 1,\n      logBase: this.panel.yaxes[0].logBase || 1,\n      min: this.parseNumber(this.panel.yaxes[0].min),\n      max: this.parseNumber(this.panel.yaxes[0].max),\n      tickDecimals: this.panel.yaxes[0].decimals,\n    };\n\n    options.yaxes.push(defaults);\n\n    if (find(data, { yaxis: 2 })) {\n      const secondY = clone(defaults);\n      secondY.index = 2;\n      secondY.show = this.panel.yaxes[1].show;\n      secondY.logBase = this.panel.yaxes[1].logBase || 1;\n      secondY.position = 'right';\n      secondY.min = this.parseNumber(this.panel.yaxes[1].min);\n      secondY.max = this.parseNumber(this.panel.yaxes[1].max);\n      secondY.tickDecimals = this.panel.yaxes[1].decimals;\n      options.yaxes.push(secondY);\n\n      this.applyLogScale(options.yaxes[1], data);\n      this.configureAxisMode(\n        options.yaxes[1],\n        this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format,\n        this.panel.yaxes[1].decimals\n      );\n    }\n    this.applyLogScale(options.yaxes[0], data);\n    this.configureAxisMode(\n      options.yaxes[0],\n      this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format,\n      this.panel.yaxes[0].decimals\n    );\n  }\n\n  parseNumber(value: any) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n\n    return toNumber(value);\n  }\n\n  applyLogScale(axis: any, data: any) {\n    if (axis.logBase === 1) {\n      return;\n    }\n\n    const minSetToZero = axis.min === 0;\n\n    if (axis.min < Number.MIN_VALUE) {\n      axis.min = null;\n    }\n    if (axis.max < Number.MIN_VALUE) {\n      axis.max = null;\n    }\n\n    let series, i;\n    let max = axis.max,\n      min = axis.min;\n\n    for (i = 0; i < data.length; i++) {\n      series = data[i];\n      if (series.yaxis === axis.index) {\n        if (!max || max < series.stats.max) {\n          max = series.stats.max;\n        }\n        if (!min || min > series.stats.logmin) {\n          min = series.stats.logmin;\n        }\n      }\n    }\n\n    axis.transform = (v: number) => {\n      return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\n    };\n    axis.inverseTransform = (v: any) => {\n      return Math.pow(axis.logBase, v);\n    };\n\n    if (!max && !min) {\n      max = axis.inverseTransform(+2);\n      min = axis.inverseTransform(-2);\n    } else if (!max) {\n      max = min * axis.inverseTransform(+4);\n    } else if (!min) {\n      min = max * axis.inverseTransform(-4);\n    }\n\n    if (axis.min) {\n      min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\n    } else {\n      min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\n    }\n    if (axis.max) {\n      max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\n    } else {\n      max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\n    }\n\n    if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\n      return;\n    }\n\n    if (Number.isFinite(min) && Number.isFinite(max)) {\n      if (minSetToZero) {\n        axis.min = 0.1;\n        min = 1;\n      }\n\n      axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);\n      if (minSetToZero) {\n        axis.ticks.unshift(0.1);\n      }\n      if (axis.ticks[axis.ticks.length - 1] > axis.max) {\n        axis.max = axis.ticks[axis.ticks.length - 1];\n      }\n    } else {\n      axis.ticks = [1, 2];\n      delete axis.min;\n      delete axis.max;\n    }\n  }\n\n  generateTicksForLogScaleYAxis(min: any, max: number, logBase: number) {\n    let ticks = [];\n\n    let nextTick;\n    for (nextTick = min; nextTick <= max; nextTick *= logBase) {\n      ticks.push(nextTick);\n    }\n\n    const maxNumTicks = Math.ceil(this.ctrl.height / 25);\n    const numTicks = ticks.length;\n    if (numTicks > maxNumTicks) {\n      const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\n      ticks = [];\n\n      for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\n        ticks.push(nextTick);\n      }\n    }\n\n    return ticks;\n  }\n\n  configureAxisMode(\n    axis: { tickFormatter: (val: any, axis: any) => string },\n    format: string,\n    decimals?: number | null\n  ) {\n    axis.tickFormatter = (val, axis) => {\n      const formatter = getValueFormat(format);\n\n      if (!formatter) {\n        throw new Error(`Unit '${format}' is not supported`);\n      }\n\n      return formattedValueToString(formatter(val, decimals));\n    };\n  }\n}\n\n/** @ngInject */\nfunction graphDirective(timeSrv: TimeSrv, popoverSrv: any, contextSrv: ContextSrv) {\n  return {\n    restrict: 'A',\n    template: '',\n    link: (scope: any, elem: JQuery) => {\n      return new GraphElement(scope, elem, timeSrv);\n    },\n  };\n}\n\ncoreModule.directive('grafanaGraph', graphDirective);\nexport { GraphElement, graphDirective };\n","import {\n  AbsoluteTimeRange,\n  DataFrame,\n  FieldType,\n  LegacyGraphHoverEventPayload,\n  reduceField,\n  ReducerID,\n} from '@grafana/data';\n\n/**\n * Find the min and max time that covers all data\n */\nexport function getDataTimeRange(frames: DataFrame[]): AbsoluteTimeRange | undefined {\n  const range: AbsoluteTimeRange = {\n    from: Number.MAX_SAFE_INTEGER,\n    to: Number.MIN_SAFE_INTEGER,\n  };\n  let found = false;\n  const reducers = [ReducerID.min, ReducerID.max];\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.time) {\n        const calcs = reduceField({ field, reducers });\n        range.from = Math.min(range.from, calcs[ReducerID.min]);\n        range.to = Math.max(range.to, calcs[ReducerID.max]);\n        found = true;\n      }\n    }\n  }\n  return found ? range : undefined;\n}\n\n// Check wether event is LegacyGraphHoverEvent\nexport function isLegacyGraphHoverEvent(event: any): event is LegacyGraphHoverEventPayload {\n  return event.hasOwnProperty('pos');\n}\n","import { map, each, isUndefined } from 'lodash';\n\nimport { textUtil } from '@grafana/data';\nimport coreModule from 'app/angular/core_module';\n\n/** @ngInject */\nexport function SeriesOverridesCtrl($scope: any, $element: JQuery, popoverSrv: any) {\n  $scope.overrideMenu = [];\n  $scope.currentOverrides = [];\n  $scope.override = $scope.override || {};\n  $scope.colorPickerModel = {};\n\n  $scope.addOverrideOption = (name: string, propertyName: string, values: any) => {\n    const option = {\n      text: name,\n      propertyName: propertyName,\n      index: $scope.overrideMenu.length,\n      values,\n      submenu: map(values, (value) => {\n        return { text: String(value), value: value };\n      }),\n    };\n\n    $scope.overrideMenu.push(option);\n  };\n\n  $scope.setOverride = (item: { propertyName: string }, subItem: { value: any }) => {\n    // handle color overrides\n    if (item.propertyName === 'color') {\n      $scope.openColorSelector($scope.override['color']);\n      return;\n    }\n\n    $scope.override[item.propertyName] = subItem.value;\n\n    // automatically disable lines for this series and the fill below to series\n    // can be removed by the user if they still want lines\n    if (item.propertyName === 'fillBelowTo') {\n      $scope.override['lines'] = false;\n      $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });\n    }\n\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.colorSelected = (color: any) => {\n    $scope.override['color'] = color;\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n\n    // update picker model so that the picker UI will also update\n    $scope.colorPickerModel.series.color = color;\n  };\n\n  $scope.openColorSelector = (color: any) => {\n    $scope.colorPickerModel = {\n      autoClose: true,\n      colorSelected: $scope.colorSelected,\n      series: { color },\n    };\n\n    popoverSrv.show({\n      element: $element.find('.dropdown')[0],\n      position: 'top center',\n      openOn: 'click',\n      template: '<series-color-picker-popover color=\"series.color\" onColorChange=\"colorSelected\" />',\n      classNames: 'drop-popover drop-popover--transparent',\n      model: $scope.colorPickerModel,\n      onClose: () => {\n        $scope.ctrl.render();\n      },\n    });\n  };\n\n  $scope.removeOverride = (option: { propertyName: string | number }) => {\n    delete $scope.override[option.propertyName];\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.refresh();\n  };\n\n  $scope.getSeriesNames = () => {\n    return map($scope.ctrl.seriesList, (series) => {\n      return textUtil.escapeHtml(series.alias);\n    });\n  };\n\n  $scope.updateCurrentOverrides = () => {\n    $scope.currentOverrides = [];\n    each($scope.overrideMenu, (option) => {\n      const value = $scope.override[option.propertyName];\n      if (isUndefined(value)) {\n        return;\n      }\n      $scope.currentOverrides.push({\n        name: option.text,\n        propertyName: option.propertyName,\n        value: String(value),\n      });\n    });\n  };\n\n  $scope.addOverrideOption('Bars', 'bars', [true, false]);\n  $scope.addOverrideOption('Lines', 'lines', [true, false]);\n  $scope.addOverrideOption('Line fill', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Fill gradient', 'fillGradient', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Line width', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Null point mode', 'nullPointMode', ['connected', 'null', 'null as zero']);\n  $scope.addOverrideOption('Fill below to', 'fillBelowTo', $scope.getSeriesNames());\n  $scope.addOverrideOption('Staircase line', 'steppedLine', [true, false]);\n  $scope.addOverrideOption('Dashes', 'dashes', [true, false]);\n  $scope.addOverrideOption('Hidden Series', 'hiddenSeries', [true, false]);\n  $scope.addOverrideOption(\n    'Dash Length',\n    'dashLength',\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  );\n  $scope.addOverrideOption(\n    'Dash Space',\n    'spaceLength',\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  );\n  $scope.addOverrideOption('Points', 'points', [true, false]);\n  $scope.addOverrideOption('Points Radius', 'pointradius', [1, 2, 3, 4, 5]);\n  $scope.addOverrideOption('Stack', 'stack', [true, false, 'A', 'B', 'C', 'D']);\n  $scope.addOverrideOption('Color', 'color', ['change']);\n  $scope.addOverrideOption('Y-axis', 'yaxis', [1, 2]);\n  $scope.addOverrideOption('Z-index', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);\n  $scope.addOverrideOption('Transform', 'transform', ['constant', 'negative-Y']);\n  $scope.addOverrideOption('Legend', 'legend', [true, false]);\n  $scope.addOverrideOption('Hide in tooltip', 'hideTooltip', [true, false]);\n  $scope.updateCurrentOverrides();\n}\n\ncoreModule.controller('SeriesOverridesCtrl', SeriesOverridesCtrl);\n","import tinycolor from 'tinycolor2';\n\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\nexport class ThresholdFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled = false;\n\n  /** @ngInject */\n  constructor(private $scope: any) {}\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert && !config.unifiedAlertingEnabled) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index: number) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n\n  onThresholdTypeChange(index: number) {\n    // Because of the ng-model binding, threshold's color mode is already set here\n    if (this.panel.thresholds[index].colorMode === 'custom') {\n      this.panel.thresholds[index].fillColor = tinycolor(config.theme.palette.blue85).setAlpha(0.2).toRgbString();\n      this.panel.thresholds[index].lineColor = tinycolor(config.theme.palette.blue77).setAlpha(0.6).toRgbString();\n    }\n    this.panelCtrl.render();\n  }\n}\n\ncoreModule.directive('graphThresholdForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/thresholds_form.html',\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","import coreModule from 'app/angular/core_module';\n\nimport { getColorModes } from './time_region_manager';\n\nexport class TimeRegionFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled = false;\n  colorModes: any;\n\n  /** @ngInject */\n  constructor(private $scope: any) {}\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingTimeRegions = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.colorModes = getColorModes();\n    this.panelCtrl.editingTimeRegions = true;\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  addTimeRegion() {\n    this.panel.timeRegions.push({\n      op: 'time',\n      fromDayOfWeek: undefined,\n      from: undefined,\n      toDayOfWeek: undefined,\n      to: undefined,\n      colorMode: 'background6',\n      fill: true,\n      line: false,\n      // Default colors for new\n      fillColor: 'rgba(234, 112, 112, 0.12)',\n      lineColor: 'rgba(237, 46, 24, 0.60)',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeTimeRegion(index: number) {\n    this.panel.timeRegions.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.timeRegions[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.timeRegions[index].lineColor = newColor;\n      this.render();\n    };\n  }\n}\n\ncoreModule.directive('graphTimeRegionForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/time_regions_form.html',\n    controller: TimeRegionFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","import $ from 'jquery';\nimport { isString, escape } from 'lodash';\n\nimport coreModule from 'app/angular/core_module';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\n\n/** @ngInject */\nexport function annotationTooltipDirective(\n  $sanitize: any,\n  dashboardSrv: DashboardSrv,\n  contextSrv: ContextSrv,\n  $compile: any\n) {\n  function sanitizeString(str: string) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: (scope: any, element: JQuery) => {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId !== undefined && event.newState) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n      if (event.login && event.avatarUrl) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${event.avatarUrl}\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard?.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard?.canEditAnnotations(event.dashboardId)) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div ng-non-bindable>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n","import { cloneDeep, isNumber } from 'lodash';\n\nimport { AnnotationEvent, dateTime } from '@grafana/data';\nimport { coreModule } from 'app/angular/core_module';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\n\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../../features/annotations/api';\nimport { getDashboardQueryRunner } from '../../../features/query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport class EventEditorCtrl {\n  // @ts-ignore initialized through Angular not constructor\n  panelCtrl: MetricsPanelCtrl;\n  // @ts-ignore initialized through Angular not constructor\n  event: AnnotationEvent;\n  timeRange?: { from: number; to: number };\n  form: any;\n  close: any;\n  timeFormated?: string;\n\n  /** @ngInject */\n  constructor() {}\n\n  $onInit() {\n    this.event.panelId = this.panelCtrl.panel.id; // set correct id if in panel edit\n    this.event.dashboardId = this.panelCtrl.dashboard.id;\n\n    // Annotations query returns time as Unix timestamp in milliseconds\n    this.event.time = tryEpochToMoment(this.event.time);\n    if (this.event.isRegion) {\n      this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);\n    }\n\n    this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time!);\n  }\n\n  canDelete(): boolean {\n    if (contextSrv.accessControlEnabled()) {\n      if (this.event.source.type === 'dashboard') {\n        return !!this.panelCtrl.dashboard.meta.annotationsPermissions?.dashboard.canDelete;\n      }\n      return !!this.panelCtrl.dashboard.meta.annotationsPermissions?.organization.canDelete;\n    }\n    return true;\n  }\n\n  async save(): Promise<void> {\n    if (!this.form.$valid) {\n      return;\n    }\n\n    const saveModel = cloneDeep(this.event);\n    saveModel.time = saveModel.time!.valueOf();\n    saveModel.timeEnd = 0;\n\n    if (saveModel.isRegion) {\n      saveModel.timeEnd = this.event.timeEnd!.valueOf();\n\n      if (saveModel.timeEnd < saveModel.time) {\n        console.log('invalid time');\n        return;\n      }\n    }\n\n    let crudFunction = saveAnnotation;\n    if (saveModel.id) {\n      crudFunction = updateAnnotation;\n    }\n\n    try {\n      await crudFunction(saveModel);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      this.close();\n      getDashboardQueryRunner().run({ dashboard: this.panelCtrl.dashboard, range: this.panelCtrl.range });\n    }\n  }\n\n  async delete(): Promise<void> {\n    try {\n      await deleteAnnotation(this.event);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      this.close();\n      getDashboardQueryRunner().run({ dashboard: this.panelCtrl.dashboard, range: this.panelCtrl.range });\n    }\n  }\n}\n\nfunction tryEpochToMoment(timestamp: any) {\n  if (timestamp && isNumber(timestamp)) {\n    const epoch = Number(timestamp);\n    return dateTime(epoch);\n  } else {\n    return timestamp;\n  }\n}\n\nexport function eventEditor() {\n  return {\n    restrict: 'E',\n    controller: EventEditorCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/annotations/partials/event_editor.html',\n    scope: {\n      panelCtrl: '=',\n      event: '=',\n      close: '&',\n    },\n  };\n}\n\ncoreModule.directive('eventEditor', eventEditor);\n","import { FlotDataPoint } from '@grafana/data';\nimport { MenuItemProps } from '@grafana/ui';\n\nexport class GraphContextMenuCtrl {\n  private source?: FlotDataPoint | null;\n  private scope?: any;\n  menuItemsSupplier?: () => MenuItemProps[];\n  scrollContextElement: HTMLElement | null = null;\n  position: {\n    x: number;\n    y: number;\n  } = { x: 0, y: 0 };\n\n  isVisible: boolean;\n\n  constructor($scope: any) {\n    this.isVisible = false;\n    this.scope = $scope;\n  }\n\n  onClose = () => {\n    if (this.scrollContextElement) {\n      this.scrollContextElement.removeEventListener('scroll', this.onClose);\n    }\n\n    this.scope.$apply(() => {\n      this.isVisible = false;\n    });\n  };\n\n  toggleMenu = (event?: { pageX: number; pageY: number }) => {\n    this.isVisible = !this.isVisible;\n    if (this.isVisible && this.scrollContextElement) {\n      this.scrollContextElement.addEventListener('scroll', this.onClose);\n    }\n\n    if (this.source) {\n      this.position = {\n        x: this.source.pageX,\n        y: this.source.pageY,\n      };\n    } else {\n      this.position = {\n        x: event ? event.pageX : 0,\n        y: event ? event.pageY : 0,\n      };\n    }\n  };\n\n  // Sets element which is considered as a scroll context of given context menu.\n  // Having access to this element allows scroll event attachement for menu to be closed when user scrolls\n  setScrollContextElement = (el: HTMLElement | null) => {\n    this.scrollContextElement = el;\n  };\n\n  setSource = (source: FlotDataPoint | null) => {\n    this.source = source;\n  };\n\n  getSource = () => {\n    return this.source;\n  };\n\n  setMenuItemsSupplier = (menuItemsSupplier: () => MenuItemProps[]) => {\n    this.menuItemsSupplier = menuItemsSupplier;\n  };\n}\n","import { selectors } from '@grafana/e2e-selectors';\n\nimport { GraphCtrl } from './module';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: GraphCtrl;\n  logScales: any;\n  xAxisModes: any;\n  xAxisStatOptions: any;\n  xNameSegment: any;\n  selectors: typeof selectors.components.Panels.Visualization.Graph.VisualizationTab;\n\n  /** @ngInject */\n  constructor(private $scope: any) {\n    this.panelCtrl = $scope.ctrl as GraphCtrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram',\n      // 'Data field': 'field',\n    };\n\n    this.xAxisStatOptions = [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Count', value: 'count' },\n      { text: 'Current', value: 'current' },\n    ];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n    this.selectors = selectors.components.Panels.Visualization.Graph.VisualizationTab;\n  }\n\n  setUnitFormat(axis: { format: any }) {\n    return (unit: string) => {\n      axis.format = unit;\n      // if already set via field config we clear that\n      if (this.panel.fieldConfig.defaults.unit) {\n        this.panel.fieldConfig.defaults.unit = undefined;\n        this.panelCtrl.refresh();\n      } else {\n        this.panelCtrl.render();\n      }\n    };\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n}\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import './graph';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\nimport './time_regions_form';\nimport './annotation_tooltip';\nimport './event_editor';\n\nimport { auto } from 'angular';\nimport { defaults, find, without } from 'lodash';\n\nimport { DataFrame, FieldConfigProperty, getColorForTheme, PanelEvents, PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { ThresholdMapper } from 'app/features/alerting/state/ThresholdMapper';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { dispatch } from 'app/store/store';\n\nimport { appEvents } from '../../../core/core';\nimport { loadSnapshotData } from '../../../features/dashboard/utils/loadSnapshotData';\nimport { annotationsFromDataFrames } from '../../../features/query/state/DashboardQueryRunner/utils';\nimport { ZoomOutEvent } from '../../../types/events';\n\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { graphPanelMigrationHandler } from './GraphMigrations';\nimport { axesEditorComponent } from './axes_editor';\nimport { DataProcessor } from './data_processor';\nimport template from './template';\nimport { DataWarning, GraphFieldConfig, GraphPanelOptions } from './types';\nimport { getDataTimeRange } from './utils';\n\nexport class GraphCtrl extends MetricsPanelCtrl {\n  static template = template;\n\n  renderError = false;\n  hiddenSeries: any = {};\n  hiddenSeriesTainted = false;\n  seriesList: TimeSeries[] = [];\n  dataList: DataFrame[] = [];\n  annotations: any = [];\n  alertState: any;\n\n  dataWarning?: DataWarning;\n  colors: any = [];\n  subTabIndex = 0;\n  processor: DataProcessor;\n  contextMenuCtrl: GraphContextMenuCtrl;\n\n  panelDefaults: any = {\n    // datasource name, null = default datasource\n    datasource: null,\n    // sets client side (flot) or native graphite png renderer (png)\n    renderer: 'flot',\n    yaxes: [\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n    ],\n    xaxis: {\n      show: true,\n      mode: 'time',\n      name: null,\n      values: [],\n      buckets: null,\n    },\n    yaxis: {\n      align: false,\n      alignLevel: null,\n    },\n    // show/hide lines\n    lines: true,\n    // fill factor\n    fill: 1,\n    // fill gradient\n    fillGradient: 0,\n    // line width in pixels\n    linewidth: 1,\n    // show/hide dashed line\n    dashes: false,\n    // show/hide line\n    hiddenSeries: false,\n    // length of a dash\n    dashLength: 10,\n    // length of space between two dashes\n    spaceLength: 10,\n    // show hide points\n    points: false,\n    // point radius in pixels\n    pointradius: 2,\n    // show hide bars\n    bars: false,\n    // enable/disable stacking\n    stack: false,\n    // stack percentage mode\n    percentage: false,\n    // legend options\n    legend: {\n      show: true, // disable/enable legend\n      values: false, // disable/enable legend values\n      min: false,\n      max: false,\n      current: false,\n      total: false,\n      avg: false,\n    },\n    // how null points should be handled\n    nullPointMode: 'null',\n    // staircase line mode\n    steppedLine: false,\n    // tooltip options\n    tooltip: {\n      value_type: 'individual',\n      shared: true,\n      sort: 0,\n    },\n    // time overrides\n    timeFrom: null,\n    timeShift: null,\n    // metric queries\n    targets: [{}],\n    // series color overrides\n    aliasColors: {},\n    // other style overrides\n    seriesOverrides: [],\n    thresholds: [],\n    timeRegions: [],\n    options: {\n      // show/hide alert threshold lines and fill\n      alertThreshold: true,\n    },\n  };\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    defaults(this.panel, this.panelDefaults);\n    defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    defaults(this.panel.legend, this.panelDefaults.legend);\n    defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n    defaults(this.panel.options, this.panelDefaults.options);\n\n    this.useDataFrames = true;\n    this.processor = new DataProcessor(this.panel);\n    this.contextMenuCtrl = new GraphContextMenuCtrl($scope);\n\n    this.events.on(PanelEvents.render, this.onRender.bind(this));\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onDataSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n    this.events.on(PanelEvents.initPanelActions, this.onInitPanelActions.bind(this));\n\n    // set axes format from field config\n    const fieldConfigUnit = this.panel.fieldConfig.defaults.unit;\n    if (fieldConfigUnit) {\n      this.panel.yaxes[0].format = fieldConfigUnit;\n    }\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html');\n    this.addEditorTab('Series overrides', 'public/app/plugins/panel/graph/tab_series_overrides.html');\n    this.addEditorTab('Axes', axesEditorComponent);\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html');\n    this.addEditorTab('Thresholds', 'public/app/plugins/panel/graph/tab_thresholds.html');\n    this.addEditorTab('Time regions', 'public/app/plugins/panel/graph/tab_time_regions.html');\n    this.subTabIndex = 0;\n    this.hiddenSeriesTainted = false;\n  }\n\n  onInitPanelActions(actions: any[]) {\n    actions.push({ text: 'Toggle legend', click: 'ctrl.toggleLegend()', shortcut: 'p l' });\n  }\n\n  zoomOut(evt: any) {\n    appEvents.publish(new ZoomOutEvent({ scale: 2 }));\n  }\n\n  onDataSnapshotLoad(snapshotData: any) {\n    const { series, annotations } = loadSnapshotData(this.panel, this.dashboard);\n    this.panelData!.annotations = annotations;\n    this.onDataFramesReceived(series);\n  }\n\n  onDataFramesReceived(data: DataFrame[]) {\n    this.dataList = data;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: this.dataList,\n      range: this.range,\n    });\n\n    this.dataWarning = this.getDataWarning();\n\n    this.alertState = undefined;\n    (this.seriesList as any).alertState = undefined;\n    if (this.panelData!.alertState) {\n      this.alertState = this.panelData!.alertState;\n      (this.seriesList as any).alertState = this.alertState.state;\n    }\n\n    this.annotations = [];\n    if (this.panelData!.annotations?.length) {\n      this.annotations = annotationsFromDataFrames(this.panelData!.annotations);\n    }\n\n    this.loading = false;\n    this.render(this.seriesList);\n  }\n\n  getDataWarning(): DataWarning | undefined {\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      if (this.dataList) {\n        for (const frame of this.dataList) {\n          if (frame.length && frame.fields?.length) {\n            return {\n              title: 'Unable to graph data',\n              tip: 'Data exists, but is not timeseries',\n              actionText: 'Switch to table view',\n              action: () => {\n                dispatch(changePanelPlugin({ panel: this.panel, pluginId: 'table' }));\n              },\n            };\n          }\n        }\n      }\n\n      return {\n        title: 'No data',\n        tip: 'No data returned from query',\n      };\n    }\n\n    // If any data is in range, do not return an error\n    for (const series of this.seriesList) {\n      if (!series.isOutsideRange) {\n        return undefined;\n      }\n    }\n\n    // All data is outside the time range\n    const dataWarning: DataWarning = {\n      title: 'Data outside time range',\n      tip: 'Can be caused by timezone mismatch or missing time filter in query',\n    };\n\n    const range = getDataTimeRange(this.dataList);\n\n    if (range) {\n      dataWarning.actionText = 'Zoom to data';\n      dataWarning.action = () => {\n        locationService.partial({\n          from: range.from,\n          to: range.to,\n        });\n      };\n    }\n\n    return dataWarning;\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      // Always use the configured field unit\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n      if (this.hiddenSeriesTainted === false && series.hiddenSeries === true) {\n        this.hiddenSeries[series.alias] = true;\n      }\n    }\n  }\n\n  onColorChange = (series: any, color: string) => {\n    series.setColor(getColorForTheme(color, config.theme));\n    this.panel.aliasColors[series.alias] = color;\n    this.render();\n  };\n\n  onToggleSeries = (hiddenSeries: any) => {\n    this.hiddenSeriesTainted = true;\n    this.hiddenSeries = hiddenSeries;\n    this.render();\n  };\n\n  onToggleSort = (sortBy: any, sortDesc: any) => {\n    this.panel.legend.sort = sortBy;\n    this.panel.legend.sortDesc = sortDesc;\n    this.render();\n  };\n\n  onToggleAxis = (info: { alias: any; yaxis: any }) => {\n    let override: any = find(this.panel.seriesOverrides, { alias: info.alias });\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    override.yaxis = info.yaxis;\n    this.render();\n  };\n\n  addSeriesOverride(override: any) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override: any) {\n    this.panel.seriesOverrides = without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.render();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  onContextMenuClose = () => {\n    this.contextMenuCtrl.toggleMenu();\n  };\n\n  getTimeZone = () => this.dashboard.getTimezone();\n\n  getDataFrameByRefId = (refId: string) => {\n    return this.dataList.filter((dataFrame) => dataFrame.refId === refId)[0];\n  };\n\n  migrateToReact() {\n    this.onPluginTypeChange(config.panels['timeseries']);\n  }\n}\n\n// Use new react style configuration\nexport const plugin = new PanelPlugin<GraphPanelOptions, GraphFieldConfig>(null)\n  .useFieldConfig({\n    disableStandardOptions: [\n      FieldConfigProperty.NoValue,\n      FieldConfigProperty.Thresholds,\n      FieldConfigProperty.Max,\n      FieldConfigProperty.Min,\n      FieldConfigProperty.Decimals,\n      FieldConfigProperty.Color,\n      FieldConfigProperty.Mappings,\n    ],\n  })\n  .setDataSupport({ annotations: true, alertStates: true })\n  .setMigrationHandler(graphPanelMigrationHandler);\n\n// Use the angular ctrt rather than a react one\nplugin.angularPanelCtrl = GraphCtrl;\n","const template = `\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\n  </div>\n\n  <div class=\"graph-legend\">\n    <div class=\"graph-legend-content\" graph-legend></div>\n  </div>\n  <div ng-if=\"ctrl.contextMenuCtrl.isVisible\">\n    <graph-context-menu\n      itemsGroup=\"ctrl.contextMenuCtrl.menuItemsSupplier()\"\n      on-close=\"ctrl.onContextMenuClose\"\n      getContextMenuSource=\"ctrl.contextMenuCtrl.getSource\"\n      timeZone=\"ctrl.getTimeZone()\"\n      x=\"ctrl.contextMenuCtrl.position.x\"\n      y=\"ctrl.contextMenuCtrl.position.y\"\n    ></graph-context-menu>\n  </div>\n</div>\n`;\n\nexport default template;\n","import { PanelModel, FieldConfigSource, DataLink } from '@grafana/data';\n\n/**\n * Called when upgrading from a previously saved versoin\n */\nexport const graphPanelMigrationHandler = (panel: PanelModel<any>): Partial<any> => {\n  const fieldConfig: FieldConfigSource = panel.fieldConfig ?? {\n    defaults: {},\n    overrides: [],\n  };\n\n  const options = panel.options || {};\n\n  // Move <7.1 dataLinks to the field section\n  if (options.dataLinks) {\n    fieldConfig.defaults.links = options.dataLinks as DataLink[];\n    delete options.dataLinks;\n  }\n\n  // Mutate the original panel state (only necessary because it is angular)\n  panel.options = options;\n  panel.fieldConfig = fieldConfig;\n  return options;\n};\n"],"names":["hiddenReducerTypes","ThresholdMapper","panel","alert","config","i","conditions","length","condition","type","evaluator","thresholds","visible","indexOf","reducer","value","params","push","op","value1","value2","t","fill","options","alertThreshold","line","colorMode","createAnnotationToolip","element","event","plot","injector","getLegacyAngularInjector","content","document","createElement","innerHTML","invoke","$compile","$rootScope","eventManager","getOptions","events","manager","tmpScope","$new","onEdit","editEvent","$digest","$destroy","drop","Drop","target","position","classes","openOn","hoverCloseDelay","tetherOptions","constraints","to","pin","attachment","open","on","setTimeout","destroy","markerElementToAttachTo","createEditPopover","editorOpen","editorOpened","scope","panelCtrl","close","editorClosed","DrawableEvent","constructor","object","drawFunc","clearFunc","moveFunc","left","top","width","height","this","_object","_drawFunc","_clearFunc","_moveFunc","_position","_width","_height","draw","clear","getObject","moveTo","VisualEvent","drawableEvent","_options","_drawableEvent","_hidden","visual","getParent","_parent","isHidden","hide","unhide","EventMarkers","_events","_types","_plot","eventsEnabled","getEvents","setTypes","types","setupEvents","parts","partition","regions","$","index","ve","_buildDiv","vre","_buildRegDiv","sort","a","b","ao","bo","min","drawEvents","insidePlot","_insidePlot","timeEnd","overlapPlot","_overlapPlot","updateEvents","o","getPlotOffset","xaxis","getXAxes","p2c","_clearEvents","val","that","container","getPlaceholder","color","markerSize","markerShow","lineStyle","lineWidth","markerTooltip","eventTypeId","eventType","undefined","toLowerCase","topOffset","eventSectionHeight","css","opacity","appendTo","marker","Math","round","toUpperCase","data","mouseenter","editModel","mouseleave","clearSelection","cursor","hover","obj","show","remove","regionWidth","timeFrom","timeTo","max","right","xmin","xmax","regionStart","each","region","x","xc","point0","point1","coord0","coord1","coordMin","coordMax","init","eventMarkers","hideEvents","showEvents","setEvents","hooks","processOptions","name","version","LEGEND_STATS","LegendItem","PureComponent","props","super","e","onLabelClick","series","yaxis","state","info","alias","setState","onToggleAxis","onColorChange","forceUpdate","renderLegendValues","asTable","legendValueItems","valueName","valueFormatted","formatValue","stats","LegendValue","onValueClick","render","values","hidden","seriesOptionClasses","classNames","valueItems","seriesLabel","LegendSeriesLabel","label","className","LegendSeriesIcon","title","onClick","selectors","SeriesColorPicker","onChange","enableNamedColors","ref","showColorPicker","hideColorPicker","SeriesIcon","onMouseLeave","GraphLegend","onToggleSeries","hiddenSeries","ctrlKey","metaKey","shiftKey","toggleSeriesExclusiveMode","sortLegend","seriesList","sortBy","alignAsTable","_sortBy","Infinity","sortDesc","reverse","every","forEach","optionalClass","rightSide","sideWidth","hideEmpty","hideZero","avg","current","total","seriesValuesProps","seriesHideProps","sortProps","filter","hideFromLegend","legendClass","legendStyle","minWidth","legendProps","onToggleSort","style","LegendTable","LegendSeriesList","map","id","stat","textAlign","statName","LegendTableHeaderItem","Icon","Legend","CustomScrollbar","hideHorizontalTrack","alignYLevel","yAxes","level","isNaN","axis","checkCorrectAxes","yLeft","yRight","moveLevelToZero","wideFactor","expandStuckValues","zero","oneSide","checkOneSide","checkOppositeSides","rate","checkTwoCross","rateLeft","rateRight","absLeftMin","abs","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight","getRate","restoreLevelFromZero","axes","EventManager","updateTime","range","dashboardId","dashboard","panelId","time","from","isRegion","elem","addFlotEvents","annotations","flotOptions","$__alerting","ALERTING_COLOR","$__ok","OK_COLOR","$__no_data","NO_DATA_COLOR","$__pending","PENDING_COLOR","$__editing","DEFAULT_ANNOTATION_COLOR","text","item","newState","getRegions","markings","grid","defaultColor","fillColor","source","colorString","alpha","tinycolor","isValid","setAlpha","toRgbString","addAlphaToRGB","REGION_FILL_ALPHA","addRegionMarking","levels","keys","GraphTooltip","getSeriesFn","self","ctrl","hoverEvent","LegacyGraphHoverEvent","pos","point","$tooltip","findHoverIndexFromDataPoints","posX","last","ps","datapoints","pointsize","initial","len","points","j","lines","steps","findHoverIndexFromData","middle","lower","upper","floor","renderAndShow","absoluteTime","innerHtml","xMode","html","place_tt","pageX","pageY","offset","getMultiSeriesPlotHoverInfo","hoverIndex","hoverDistance","pointTime","minDistance","minTime","results","lastValue","legend","allIsNull","allIsZero","hideTooltip","stack","tooltip","value_type","n","aliasEscaped","distance","concat","shared","detach","unhighlight","publish","LegacyGraphHoverClearEvent","DataHoverClearEvent","bind","panelInEdit","panelRelY","payload","appEvents","CoreEvents","clearCrosshair","plotData","getData","mode","group","hoverInfo","seriesHtml","tooltipFormat","allSeriesMode","pointOffset","Number","scrollTop","window","innerHeight","setCrosshair","sharedCrosshairModeOnly","hasMsResolution","systemDateFormats","seriesHoverInfo","formatDate","highlightClass","seriesIndex","textUtil","highlight","datapoint","convertToHistogramData","bucketSize","dataList","getSeriesValues","histogram","minBound","getBucketBound","maxBound","domain","histGenerator","bin","x0","convertValuesToHistogram","ThresholdManager","getHandleHtml","handleIndex","model","valueStr","stateClass","initDragging","evt","handleElem","currentTarget","parents","posTop","lastY","dragging","clientY","diff","addEventListener","stopped","graphValue","c2p","y","parseInt","toFixed","off","removeEventListener","$scope","$apply","emit","threshold","cleanUp","placeholder","find","needsCleanup","renderHandle","defaultHandleTopPos","handleTopPos","isNumber","valueCanvasPos","append","toggleClass","shouldDrawHandles","hasSecondYAxis","editingThresholds","prepare","thresholdMargin","addFlotOptions","other","gtLimit","ltLimit","limit","lineColor","y2axis","getColorForTheme","colorModes","gray","themeDependent","darkColor","lightColor","red","green","blue","yellow","custom","getColor","timeRegion","theme","Object","isLight","TimeRegionManager","timeRegions","tRange","dateTime","utc","hRange","fromStart","fromEnd","timeRegionColor","timeRegionsCopy","fromDayOfWeek","toDayOfWeek","parseTimeRange","dayOfWeek","h","m","s","set","add","unix","isoWeekday","hour","valueOf","r","str","result","match","exec","LegendWithThemeProvider","provideTheme","GraphElement","timeSrv","flotPosition","linksSupplier","items","canAddAnnotations","ariaLabel","icon","dataLinks","getLinks","replaceVariables","link","url","href","contextMenu","contextMenuCtrl","panelWidth","thresholdManager","timeRegionManager","sortedSeries","PanelEvents","onPanelTeardown","onRender","onGraphHover","onGraphHoverClear","DataHoverEvent","onPlotSelected","onPlotClick","parent","legendElem","renderData","buildFlotPairs","graphHeight","updateLegendValues","hasChildNodes","ReactDOM","renderPanel","legendOptions","valueOptions","legendReactElem","React","sharedTooltipModeEnabled","hasOwnProperty","otherPanelInFullscreenMode","handler","ranges","setTime","toUtc","scrollContextElement","closest","get","contextMenuSourceItem","x1","yAxisConfig","yaxes","dataFrame","dataFrameIndex","field","fields","fieldIndex","dataIndex","getDataIndexWithNullValuesCorrection","links","hasLinksValue","hasLinks","fieldConfig","decimals","fieldDisplay","getDisplayProcessor","FieldType","timeZone","getTimezone","getFieldLinksSupplier","display","view","DataFrameView","rowIndex","colIndex","setScrollContextElement","setSource","setMenuItemsSupplier","getContextMenuItemsSupplier","toggleMenu","Array","isArray","ts","timeField","getTimeField","correctIndex","toArray","findIndex","shouldAbortRender","drawHook","dataWarning","msg","action","actionText","click","processOffsetHook","gridMargin","getYAxes","panelOptions","processRangeHook","align","alignLevel","parseFloat","getMinTimeStepOfSeries","MAX_VALUE","timeStep","bars","dashes","buildFlotOptions","prepareXAxis","configureYAxisOptions","sortSeries","callPlot","getFlotPairs","nullPointMode","transform","getFlotPairsConstant","barWidth","addXSeriesAxis","histMin","_min","histMax","_max","ticks","buckets","tickStep","addXHistogramAxis","addXTableAxis","addTimeAxis","incrementRenderCounter","renderError","error","console","message","renderingCompleted","gridColor","processOffset","processRange","stackpercent","percentage","translateFillOption","getFillGradient","fillGradient","linewidth","steppedLine","dashLength","spaceLength","radius","pointradius","shadowSize","minBorderMargin","backgroundColor","borderWidth","hoverable","clickable","margin","labelMarginX","mouseActiveRadius","selection","crosshair","sortOrder","haveSortBy","haveSortOrder","shouldSortBy","zindex","amount","colors","isUndefined","timezone","timeformat","graphTimeFormat","tickFormatter","graphTickFormatter","defaultTicks","tickValues","d","v","ticksNum","ceil","configureAxisMode","pointIndex","flatten","defaults","logBase","parseNumber","tickDecimals","secondY","clone","applyLogScale","format","toNumber","minSetToZero","MIN_VALUE","logmin","log","inverseTransform","pow","isFinite","generateTicksForLogScaleYAxis","unshift","nextTick","maxNumTicks","numTicks","factor","formatter","getValueFormat","Error","formattedValueToString","graphDirective","popoverSrv","contextSrv","restrict","template","SeriesOverridesCtrl","$element","overrideMenu","currentOverrides","override","colorPickerModel","addOverrideOption","propertyName","option","submenu","String","setOverride","subItem","addSeriesOverride","updateCurrentOverrides","openColorSelector","colorSelected","autoClose","onClose","removeOverride","refresh","getSeriesNames","coreModule","ThresholdFormCtrl","$onInit","disabled","unbindDestroy","$on","addThreshold","removeThreshold","splice","onFillColorChange","newColor","onLineColorChange","onThresholdTypeChange","templateUrl","controller","bindToController","controllerAs","TimeRegionFormCtrl","editingTimeRegions","key","addTimeRegion","removeTimeRegion","annotationTooltipDirective","$sanitize","dashboardSrv","sanitizeString","err","escape","getCurrent","titleStateClass","alertId","stateModel","alertDef","iconClass","isString","header","login","avatarUrl","canEditAnnotations","replace","tags","contents","EventEditorCtrl","tryEpochToMoment","timeFormated","canDelete","meta","annotationsPermissions","organization","form","$valid","saveModel","cloneDeep","crudFunction","saveAnnotation","updateAnnotation","getDashboardQueryRunner","run","deleteAnnotation","timestamp","epoch","GraphContextMenuCtrl","isVisible","el","menuItemsSupplier","AxesEditorCtrl","logScales","linear","xAxisModes","Time","Series","Histogram","xAxisStatOptions","setUnitFormat","unit","xAxisModeChanged","processor","setPanelDefaultsForNewXAxisMode","onDataFramesReceived","xAxisValueChanged","axesEditorComponent","GraphCtrl","MetricsPanelCtrl","$injector","datasource","renderer","timeShift","targets","aliasColors","seriesOverrides","setColor","hiddenSeriesTainted","refId","panelDefaults","useDataFrames","DataProcessor","onDataSnapshotLoad","onInitEditMode","onInitPanelActions","fieldConfigUnit","addEditorTab","subTabIndex","actions","shortcut","zoomOut","ZoomOutEvent","scale","snapshotData","loadSnapshotData","panelData","getSeriesList","getDataWarning","alertState","annotationsFromDataFrames","loading","reduce","prev","frame","tip","dispatch","changePanelPlugin","pluginId","isOutsideRange","frames","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","found","reducers","ReducerID","calcs","reduceField","getDataTimeRange","locationService","applySeriesOverrides","removeSeriesOverride","without","toggleLegend","legendValuesOptionChanged","migrateToReact","onPluginTypeChange","plugin","PanelPlugin","useFieldConfig","disableStandardOptions","FieldConfigProperty","setDataSupport","alertStates","setMigrationHandler","overrides","angularPanelCtrl"],"sourceRoot":""}