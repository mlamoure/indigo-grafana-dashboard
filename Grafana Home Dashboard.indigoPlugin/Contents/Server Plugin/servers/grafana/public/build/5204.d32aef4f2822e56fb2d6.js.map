{"version":3,"file":"5204.d32aef4f2822e56fb2d6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/explore/AddToDashboard/addToDashboard.ts","webpack://grafana/./public/app/features/explore/AddToDashboard/AddToDashboardModal.tsx","webpack://grafana/./public/app/features/explore/AddToDashboard/index.tsx"],"sourcesContent":["import { DataFrame, DataQuery, DataSourceRef } from '@grafana/data';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport {\n  getNewDashboardModelData,\n  setDashboardToFetchFromLocalStorage,\n} from 'app/features/dashboard/state/initDashboard';\nimport { DashboardDTO, ExplorePanelData } from 'app/types';\n\nexport enum AddToDashboardError {\n  FETCH_DASHBOARD = 'fetch-dashboard',\n  SET_DASHBOARD_LS = 'set-dashboard-ls-error',\n}\n\ninterface AddPanelToDashboardOptions {\n  queries: DataQuery[];\n  queryResponse: ExplorePanelData;\n  datasource?: DataSourceRef;\n  dashboardUid?: string;\n}\n\nfunction createDashboard(): DashboardDTO {\n  const dto = getNewDashboardModelData();\n\n  // getNewDashboardModelData adds by default the \"add-panel\" panel. We don't want that.\n  dto.dashboard.panels = [];\n\n  return dto;\n}\n\nexport async function setDashboardInLocalStorage(options: AddPanelToDashboardOptions) {\n  const panelType = getPanelType(options.queries, options.queryResponse);\n  const panel = {\n    targets: options.queries,\n    type: panelType,\n    title: 'New Panel',\n    gridPos: { x: 0, y: 0, w: 12, h: 8 },\n    datasource: options.datasource,\n  };\n\n  let dto: DashboardDTO;\n\n  if (options.dashboardUid) {\n    try {\n      dto = await backendSrv.getDashboardByUid(options.dashboardUid);\n    } catch (e) {\n      throw AddToDashboardError.FETCH_DASHBOARD;\n    }\n  } else {\n    dto = createDashboard();\n  }\n\n  dto.dashboard.panels = [panel, ...(dto.dashboard.panels ?? [])];\n\n  try {\n    setDashboardToFetchFromLocalStorage(dto);\n  } catch {\n    throw AddToDashboardError.SET_DASHBOARD_LS;\n  }\n}\n\nconst isVisible = (query: DataQuery) => !query.hide;\nconst hasRefId = (refId: DataFrame['refId']) => (frame: DataFrame) => frame.refId === refId;\n\nfunction getPanelType(queries: DataQuery[], queryResponse: ExplorePanelData) {\n  for (const { refId } of queries.filter(isVisible)) {\n    // traceview is not supported in dashboards, skipping it for now.\n    const hasQueryRefId = hasRefId(refId);\n    if (queryResponse.graphFrames.some(hasQueryRefId)) {\n      return 'timeseries';\n    }\n    if (queryResponse.logsFrames.some(hasQueryRefId)) {\n      return 'logs';\n    }\n    if (queryResponse.nodeGraphFrames.some(hasQueryRefId)) {\n      return 'nodeGraph';\n    }\n  }\n\n  // falling back to table\n  return 'table';\n}\n","import { partial } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { DeepMap, FieldError, useForm } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\n\nimport { locationUtil, SelectableValue } from '@grafana/data';\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Field, InputControl, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { removeDashboardToFetchFromLocalStorage } from 'app/features/dashboard/state/initDashboard';\nimport { ExploreId } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { setDashboardInLocalStorage, AddToDashboardError } from './addToDashboard';\n\nenum SaveTarget {\n  NewDashboard = 'new-dashboard',\n  ExistingDashboard = 'existing-dashboard',\n}\n\nconst SAVE_TARGETS: Array<SelectableValue<SaveTarget>> = [\n  {\n    label: 'New dashboard',\n    value: SaveTarget.NewDashboard,\n  },\n  {\n    label: 'Existing dashboard',\n    value: SaveTarget.ExistingDashboard,\n  },\n];\n\ninterface SaveTargetDTO {\n  saveTarget: SaveTarget;\n}\ninterface SaveToNewDashboardDTO extends SaveTargetDTO {\n  saveTarget: SaveTarget.NewDashboard;\n}\n\ninterface SaveToExistingDashboard extends SaveTargetDTO {\n  saveTarget: SaveTarget.ExistingDashboard;\n  dashboardUid: string;\n}\n\ntype FormDTO = SaveToNewDashboardDTO | SaveToExistingDashboard;\n\nfunction assertIsSaveToExistingDashboardError(\n  errors: DeepMap<FormDTO, FieldError>\n): asserts errors is DeepMap<SaveToExistingDashboard, FieldError> {\n  // the shape of the errors object is always compatible with the type above, but we need to\n  // explicitly assert its type so that TS can narrow down FormDTO to SaveToExistingDashboard\n  // when we use it in the form.\n}\n\nfunction getDashboardURL(dashboardUid?: string) {\n  return dashboardUid ? `d/${dashboardUid}` : 'dashboard/new';\n}\n\nenum GenericError {\n  UNKNOWN = 'unknown-error',\n  NAVIGATION = 'navigation-error',\n}\n\ninterface SubmissionError {\n  error: AddToDashboardError | GenericError;\n  message: string;\n}\n\ninterface Props {\n  onClose: () => void;\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboardModal = ({ onClose, exploreId }: Props) => {\n  const exploreItem = useSelector(getExploreItemSelector(exploreId))!;\n  const [submissionError, setSubmissionError] = useState<SubmissionError | undefined>();\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    watch,\n  } = useForm<FormDTO>({\n    defaultValues: { saveTarget: SaveTarget.NewDashboard },\n  });\n  const saveTarget = watch('saveTarget');\n\n  const onSubmit = async (openInNewTab: boolean, data: FormDTO) => {\n    setSubmissionError(undefined);\n    const dashboardUid = data.saveTarget === SaveTarget.ExistingDashboard ? data.dashboardUid : undefined;\n\n    reportInteraction('e2d_submit', {\n      newTab: openInNewTab,\n      saveTarget: data.saveTarget,\n      queries: exploreItem.queries.length,\n    });\n\n    try {\n      await setDashboardInLocalStorage({\n        dashboardUid,\n        datasource: exploreItem.datasourceInstance?.getRef(),\n        queries: exploreItem.queries,\n        queryResponse: exploreItem.queryResponse,\n      });\n    } catch (error) {\n      switch (error) {\n        case AddToDashboardError.FETCH_DASHBOARD:\n          setSubmissionError({ error, message: 'Could not fetch dashboard information. Please try again.' });\n          break;\n        case AddToDashboardError.SET_DASHBOARD_LS:\n          setSubmissionError({ error, message: 'Could not add panel to dashboard. Please try again.' });\n          break;\n        default:\n          setSubmissionError({ error: GenericError.UNKNOWN, message: 'Something went wrong. Please try again.' });\n      }\n      return;\n    }\n\n    const dashboardURL = getDashboardURL(dashboardUid);\n    if (!openInNewTab) {\n      onClose();\n      locationService.push(locationUtil.stripBaseFromUrl(dashboardURL));\n      return;\n    }\n\n    const didTabOpen = !!global.open(config.appUrl + dashboardURL, '_blank');\n    if (!didTabOpen) {\n      setSubmissionError({\n        error: GenericError.NAVIGATION,\n        message: 'Could not navigate to the selected dashboard. Please try again.',\n      });\n      removeDashboardToFetchFromLocalStorage();\n      return;\n    }\n    onClose();\n  };\n\n  useEffect(() => {\n    reportInteraction('e2d_open');\n  }, []);\n\n  return (\n    <Modal title=\"Add panel to dashboard\" onDismiss={onClose} isOpen>\n      <form>\n        <InputControl\n          control={control}\n          render={({ field: { ref, ...field } }) => (\n            <Field label=\"Target dashboard\" description=\"Choose where to add the panel.\">\n              <RadioButtonGroup options={SAVE_TARGETS} {...field} id=\"e2d-save-target\" />\n            </Field>\n          )}\n          name=\"saveTarget\"\n        />\n\n        {saveTarget === SaveTarget.ExistingDashboard &&\n          (() => {\n            assertIsSaveToExistingDashboardError(errors);\n            return (\n              <InputControl\n                render={({ field: { ref, value, onChange, ...field } }) => (\n                  <Field\n                    label=\"Dashboard\"\n                    description=\"Select in which dashboard the panel will be created.\"\n                    error={errors.dashboardUid?.message}\n                    invalid={!!errors.dashboardUid}\n                  >\n                    <DashboardPicker\n                      {...field}\n                      inputId=\"e2d-dashboard-picker\"\n                      defaultOptions\n                      onChange={(d) => onChange(d?.uid)}\n                    />\n                  </Field>\n                )}\n                control={control}\n                name=\"dashboardUid\"\n                shouldUnregister\n                rules={{ required: { value: true, message: 'This field is required.' } }}\n              />\n            );\n          })()}\n\n        {submissionError && (\n          <Alert severity=\"error\" title=\"Error adding the panel\">\n            {submissionError.message}\n          </Alert>\n        )}\n\n        <Modal.ButtonRow>\n          <Button type=\"reset\" onClick={onClose} fill=\"outline\" variant=\"secondary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"secondary\"\n            onClick={handleSubmit(partial(onSubmit, true))}\n            icon=\"external-link-alt\"\n          >\n            Open in new tab\n          </Button>\n          <Button type=\"submit\" variant=\"primary\" onClick={handleSubmit(partial(onSubmit, false))} icon=\"apps\">\n            Open dashboard\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { ToolbarButton } from '@grafana/ui';\nimport { ExploreId } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { AddToDashboardModal } from './AddToDashboardModal';\n\ninterface Props {\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboard = ({ exploreId }: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const selectExploreItem = getExploreItemSelector(exploreId);\n  const explorePaneHasQueries = !!useSelector(selectExploreItem)?.queries?.length;\n\n  return (\n    <>\n      <ToolbarButton\n        icon=\"apps\"\n        onClick={() => setIsOpen(true)}\n        aria-label=\"Add to dashboard\"\n        disabled={!explorePaneHasQueries}\n      >\n        Add to dashboard\n      </ToolbarButton>\n\n      {isOpen && <AddToDashboardModal onClose={() => setIsOpen(false)} exploreId={exploreId} />}\n    </>\n  );\n};\n"],"names":["AddToDashboardError","async","setDashboardInLocalStorage","options","panelType","queries","queryResponse","refId","filter","isVisible","hasQueryRefId","hasRefId","graphFrames","some","logsFrames","nodeGraphFrames","getPanelType","panel","targets","type","title","gridPos","x","y","w","h","datasource","dto","dashboardUid","backendSrv","e","FETCH_DASHBOARD","getNewDashboardModelData","dashboard","panels","createDashboard","setDashboardToFetchFromLocalStorage","SET_DASHBOARD_LS","query","hide","frame","SaveTarget","SAVE_TARGETS","label","value","NewDashboard","ExistingDashboard","GenericError","AddToDashboardModal","onClose","exploreId","exploreItem","useSelector","getExploreItemSelector","submissionError","setSubmissionError","useState","handleSubmit","control","formState","errors","watch","useForm","defaultValues","saveTarget","onSubmit","openInNewTab","data","undefined","reportInteraction","newTab","length","datasourceInstance","getRef","error","message","UNKNOWN","dashboardURL","getDashboardURL","locationService","locationUtil","global","open","config","NAVIGATION","removeDashboardToFetchFromLocalStorage","useEffect","Modal","onDismiss","isOpen","InputControl","render","field","Field","description","RadioButtonGroup","id","name","onChange","invalid","DashboardPicker","inputId","defaultOptions","d","uid","shouldUnregister","rules","required","Alert","severity","Button","onClick","fill","variant","partial","icon","AddToDashboard","setIsOpen","selectExploreItem","explorePaneHasQueries","ToolbarButton","disabled"],"sourceRoot":""}