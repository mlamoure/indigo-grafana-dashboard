{"version":3,"sources":["webpack:///./public/app/plugins/datasource/loki/syntax.ts","webpack:///./public/app/plugins/datasource/loki/language_provider.ts","webpack:///./public/app/plugins/datasource/loki/result_transformer.ts","webpack:///./public/app/plugins/datasource/loki/query_utils.ts","webpack:///./node_modules/rxjs/_esm5/internal/observable/dom/WebSocketSubject.js","webpack:///./public/app/plugins/datasource/loki/live_streams.ts","webpack:///./node_modules/rxjs/_esm5/internal/observable/dom/webSocket.js","webpack:///./public/app/plugins/datasource/loki/datasource.ts","webpack:///./public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx","webpack:///./public/app/plugins/datasource/loki/components/LokiQueryField.tsx","webpack:///./public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx","webpack:///./public/app/plugins/datasource/loki/LokiAnnotationsQueryCtrl.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/MaxLinesField.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/DerivedField.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/DebugSection.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/DerivedFields.tsx","webpack:///./public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/loki/module.ts","webpack:///./public/app/plugins/datasource/prometheus/language_utils.ts","webpack:///./public/app/plugins/datasource/prometheus/add_label_to_query.ts"],"names":["syntax","comment","pattern","lookbehind","context-labels","inside","label-key","alias","label-value","greedy","punctuation","operator","RegExp","DEFAULT_KEYS","HISTORY_COUNT_CUTOFF","wrapLabel","label","rangeToParams","range","start","from","end","to","_super","LokiLanguageProvider","datasource","initialValues","_this","call","this","cleanText","s","replace","trim","request","url","params","metadataRequest","startTask","fetchLogLabels","initialRange","then","started","labelKeys","labelValues","Object","assign","tslib_es6","prototype","getSyntax","getLabelKeys","getLabelValues","key","Promise","fetchLabelValues","_a","sent","provideCompletionItems","input","context","wrapperClasses","value","empty","document","text","length","lodash_default","a","includes","getLabelCompletionItems","getEmptyCompletionItems","suggestions","history","historyItems","chain","map","h","query","expr","filter","uniq","take","item","cutoffTs","Date","now","historyForItem","ts","count","recent","hint","src","fromNow","documentation","addHistoryMetadata","push","prefixMatch","skipSort","items","_b","labelKey","absoluteRange","line","anchorBlock","getText","cursorOffset","selection","anchor","offset","selector","parsedSelector","language_utils","_d","existingKeys","match","_c","possibleKeys","difference","importQueries","queries","datasourceType","all","importPrometheusQuery","rest","refId","selectorMatch","labels_1","_","labelsToKeep_1","keys","sort","join","logLabelFetchTs","res","data","json","body","slice","logLabelOptions","isLeaf","console","error","e_1","refreshLogLabels","forceRefresh","values_1","keyOption","children","exisingValues","nextValues","e_2","logStreamToDataFrame","stream","reverse","labels","parsedLabels","times","lines","uids","entries","next","done","entry","timestamp","add","buffer","fields","name","type","time","config","title","values","string","selectorRegexp","caseInsensitive","parseQuery","regexp","search","startsWith","formatQuery","getHighlighterExpressionsFromQuery","parsed","expression","results","filterStart","skip","substr","filterEnd","filterTerm","quotedTerm","unwrappedFilterTerm","DEFAULT_WEBSOCKET_CONFIG","deserializer","e","JSON","parse","serializer","stringify","WebSocketSubject_WebSocketSubject","WebSocketSubject","urlConfigOrSource","destination","Observable","source","_config","_output","Subject","hasOwnProperty","WebSocketCtor","WebSocket","Error","ReplaySubject","lift","sock","_resetState","_socket","multiplex","subMsg","unsubMsg","messageFilter","self","observer","err","subscription","subscribe","x","complete","unsubscribe","_connectSocket","protocol","binaryType","socket","Subscription","readyState","close","onopen","openObserver","queue","Subscriber","create","send","closingObserver","undefined","code","reason","TypeError","onerror","onclose","closeObserver","wasClean","onmessage","_subscribe","subscriber","observers","live_streams_LiveStreams","LiveStreams","streams","getStream","target","data_1","capacity","size","addField","other","pipe","finalize","response","baseLabels","_e","f","streams_1","streams_1_1","unique","_f","e_4","_g","id","appendResponseToBufferedData","DEFAULT_MAX_LINES","DEFAULT_QUERY_PARAMS","direction","limit","serializeParams","k","v","encodeURIComponent","lokiRegularEscape","lokiSpecialRegexEscape","LokiDatasource","instanceSettings","backendSrv","templateSrv","processError","message","statusText","explore","status","series","dataFrame","enhanceDataFrame","meta","searchWords","maxLines","runLiveQuery","options","liveTarget","prepareLiveTarget","state","Streaming","runQuery","prepareQueryTarget","_request","catch","cancelled","processResult","prepareLogRowContextQueryTarget","row","timeEpochNs","timeEpochMs","commontTargetOptons","trys","result","languageProvider","language_provider","settingsData","jsonData","$inject","apiUrl","req","datasourceRequest","interpolateQueryExpr","baseUrl","Math","min","maxDataPoints","Infinity","getTime","targets","hide","liveStreaming","lodash","subQueries","of","Done","merge","apply","interpolateVariablesInQueries","expandedQueries","originMeta","silent","variable","multi","includeAll","modifyQuery","action","add_label_to_query","getHighlighterExpression","date","roundUp","ceil","valueOf","testDatasource","annotation","requestId","dashboardId","dashboard","scopedVars","startTime","timezone","panelId","interval","intervalMs","queryRequestFromAnnotationOptions","e_5","frame","field","tags","forEachRow","data_1_1","_loop_1","derivedFields","fields_1","links","dataFrameField","derivedFields_1","derivedFields_1_1","logMatch","matcherRegex","DEFAULT_EXAMPLES","PREFERRED_LABELS","EXAMPLES_LIMIT","LokiCheatSheet","arguments","userExamples","props","provider","find","l","preferredLabel_1","componentDidMount","scheduleUserLabelChecking","componentWillUnmount","clearTimeout","userLabelTimer","setTimeout","checkUserLabels","renderExpression","onClickExample","react_default","createElement","className","onClick","render","Fragment","example","href","LokiQueryField","otherProps","useLokiSyntax","isSyntaxReady","setActiveOption","refreshLabels","syntaxProps","LokiQueryFieldForm","syntaxLoaded","onLoadOptions","onLabelsRefresh","react","absolute","onChange","onRunQuery","LokiAnnotationsQueryCtrl","onQueryChange","bind","templateUrl","MaxLinesField","grafana_ui_src","labelWidth","inputWidth","inputEl","event","currentTarget","spellCheck","placeholder","tooltip","getStyles","firstRow","index_esm","templateObject_1","nameField","templateObject_2","regexField","templateObject_3","DerivedField","onDelete","styles","handleChange","variant","icon","preventDefault","templateObject_4","newValue","templateObject_5","DebugSection","debugText","setDebugText","debugFields","testMatch","link","linkSuppliers","makeDebugFields","classnames_default","DebugSection_templateObject_1","DebugFields","DerivedFields_getStyles","theme","infoText","DerivedFields_templateObject_1","spacing","md","colors","textWeak","derivedField","DerivedFields_templateObject_2","sm","DerivedFields","showDebug","setShowDebug","index","newField","newDerivedFields","splice","valueRaw","origin","Value","DerivedFields_templateObject_3","DerivedFields_templateObject_4","setMaxLines","makeJsonUpdater","setDerivedFields","__webpack_require__","d","__webpack_exports__","module_plugin","loki_datasource","setQueryEditor","components_LokiQueryEditor","setConfigEditor","onOptionsChange","defaultUrl","dataSourceConfig","showAccessOptions","setExploreQueryField","components_LokiQueryField","setExploreStartPage","components_LokiCheatSheet","processHistogramLabels","test","indexOf","__name__","processLabels","withName","forEach","tslib__WEBPACK_IMPORTED_MODULE_0__","labelRegexp","parseSelector","prefix","prefixOpen","lastIndexOf","prefixClose","suffix","suffixClose","suffixOpenIndex","suffixOpen","metricMatch","cleanSelector","expandRecordingRules","mapping","ruleNames","rulesRegex","pre","post","addLabelToSelector","keepSelectorFilters","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","keywords","builtInWords","split","metricNameRegexp","labelValue","labelOperator","exec","operatorForLabelKey","uniqWith","isEqual","compact","sortBy","previousWord","word","position","openChar","closeChar","nextSelectorStart","nextSelectorEnd","insideSelector","previousWordIsKeyWord","isColonBounded","endsWith","parts","lastIndex","selectorWithLabel"],"mappings":"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","file":"lokiPlugin.5d0a2c90becb1849160c.js","sourcesContent":["import { Grammar } from 'prismjs';\n\n/* tslint:disable max-line-length */\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /(^|[^\\n])#.*/,\n    lookbehind: true,\n  },\n  'context-labels': {\n    pattern: /(^|\\s)\\{[^}]*(?=})/,\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  // number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: new RegExp(`/&&?|\\\\|?\\\\||!=?|<(?:=>?|<|>)?|>[>=]?`, 'i'),\n  punctuation: /[{}`,.]/,\n};\n\nexport default tokenizer;\n","// Libraries\nimport _ from 'lodash';\n\n// Services & Utils\nimport { parseSelector, labelRegexp, selectorRegexp } from 'app/plugins/datasource/prometheus/language_utils';\nimport syntax from './syntax';\n\n// Types\nimport { LokiQuery } from './types';\nimport { dateTime, AbsoluteTimeRange, LanguageProvider, HistoryItem } from '@grafana/data';\nimport { PromQuery } from '../prometheus/types';\n\nimport LokiDatasource from './datasource';\nimport { CompletionItem, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nconst DEFAULT_KEYS = ['job', 'namespace'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 10;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\nconst NS_IN_MS = 1000000;\nexport const LABEL_REFRESH_INTERVAL = 1000 * 30; // 30sec\n\nconst wrapLabel = (label: string) => ({ label });\nexport const rangeToParams = (range: AbsoluteTimeRange) => ({ start: range.from * NS_IN_MS, end: range.to * NS_IN_MS });\n\nexport type LokiHistoryItem = HistoryItem<LokiQuery>;\n\ntype TypeaheadContext = {\n  history?: LokiHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: LokiHistoryItem[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter(h => h.ts > cutoffTs && (h.query.expr as string) === item.label);\n  const count = historyForItem.length;\n  const recent = historyForItem[0];\n  let hint = `Queried ${count} times in the last 24h.`;\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nexport default class LokiLanguageProvider extends LanguageProvider {\n  labelKeys?: { [index: string]: string[] }; // metric -> [labelKey,...]\n  labelValues?: { [index: string]: { [index: string]: string[] } }; // metric -> labelKey -> [labelValue,...]\n  logLabelOptions: any[];\n  logLabelFetchTs?: number;\n  started: boolean;\n  initialRange: AbsoluteTimeRange;\n  datasource: LokiDatasource;\n\n  constructor(datasource: LokiDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    this.labelKeys = {};\n    this.labelValues = {};\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%]/g, '').trim();\n\n  getSyntax() {\n    return syntax;\n  }\n\n  request = (url: string, params?: any) => {\n    return this.datasource.metadataRequest(url, params);\n  };\n\n  /**\n   * Initialise the language provider by fetching set of labels. Without this initialisation the provider would return\n   * just a set of hardcoded default labels on provideCompletionItems or a recent queries from history.\n   */\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = this.fetchLogLabels(this.initialRange).then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n    return this.startTask;\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys[EMPTY_SELECTOR];\n  }\n\n  async getLabelValues(key: string): Promise<string[]> {\n    await this.fetchLabelValues(key, this.initialRange);\n    return this.labelValues[EMPTY_SELECTOR][key];\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { wrapperClasses, value } = input;\n    // Local text properties\n    const empty = value.document.text.length === 0;\n    // Determine candidates by CSS context\n    if (_.includes(wrapperClasses, 'context-labels')) {\n      // Suggestions for {|} and {foo=|}\n      return await this.getLabelCompletionItems(input, context);\n    } else if (empty) {\n      return this.getEmptyCompletionItems(context || {});\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  getEmptyCompletionItems(context: any): TypeaheadOutput {\n    const { history } = context;\n    const suggestions = [];\n\n    if (history && history.length > 0) {\n      const historyItems = _.chain(history)\n        .map((h: any) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item: CompletionItem) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        prefixMatch: true,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  }\n\n  async getLabelCompletionItems(\n    { text, wrapperClasses, labelKey, value }: TypeaheadInput,\n    { absoluteRange }: any\n  ): Promise<TypeaheadOutput> {\n    let context: string;\n    const suggestions = [];\n    const line = value.anchorBlock.getText();\n    const cursorOffset: number = value.selection.anchor.offset;\n\n    // Use EMPTY_SELECTOR until series API is implemented for facetting\n    const selector = EMPTY_SELECTOR;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n    } catch {}\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    if ((text && text.match(/^!?=~?/)) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && this.labelValues[selector]) {\n        let labelValues = this.labelValues[selector][labelKey];\n        if (!labelValues) {\n          await this.fetchLabelValues(labelKey, absoluteRange);\n          labelValues = this.labelValues[selector][labelKey];\n        }\n\n        context = 'context-label-values';\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"`,\n          items: labelValues.map(wrapLabel),\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = this.labelKeys[selector] || DEFAULT_KEYS;\n      if (labelKeys) {\n        const possibleKeys = _.difference(labelKeys, existingKeys);\n        if (possibleKeys.length > 0) {\n          context = 'context-labels';\n          suggestions.push({ label: `Labels`, items: possibleKeys.map(wrapLabel) });\n        }\n      }\n    }\n\n    return { context, suggestions };\n  }\n\n  async importQueries(queries: LokiQuery[], datasourceType: string): Promise<LokiQuery[]> {\n    if (datasourceType === 'prometheus') {\n      return Promise.all(\n        queries.map(async query => {\n          const expr = await this.importPrometheusQuery(query.expr);\n          const { context, ...rest } = query as PromQuery;\n          return {\n            ...rest,\n            expr,\n          };\n        })\n      );\n    }\n    // Return a cleaned LokiQuery\n    return queries.map(query => ({\n      refId: query.refId,\n      expr: '',\n    }));\n  }\n\n  async importPrometheusQuery(query: string): Promise<string> {\n    if (!query) {\n      return '';\n    }\n\n    // Consider only first selector in query\n    const selectorMatch = query.match(selectorRegexp);\n    if (selectorMatch) {\n      const selector = selectorMatch[0];\n      const labels: { [key: string]: { value: any; operator: any } } = {};\n      selector.replace(labelRegexp, (_, key, operator, value) => {\n        labels[key] = { value, operator };\n        return '';\n      });\n\n      // Keep only labels that exist on origin and target datasource\n      await this.start(); // fetches all existing label keys\n      const existingKeys = this.labelKeys[EMPTY_SELECTOR];\n      let labelsToKeep: { [key: string]: { value: any; operator: any } } = {};\n      if (existingKeys && existingKeys.length > 0) {\n        // Check for common labels\n        for (const key in labels) {\n          if (existingKeys && existingKeys.includes(key)) {\n            // Should we check for label value equality here?\n            labelsToKeep[key] = labels[key];\n          }\n        }\n      } else {\n        // Keep all labels by default\n        labelsToKeep = labels;\n      }\n\n      const labelKeys = Object.keys(labelsToKeep).sort();\n      const cleanSelector = labelKeys\n        .map(key => `${key}${labelsToKeep[key].operator}${labelsToKeep[key].value}`)\n        .join(',');\n\n      return ['{', cleanSelector, '}'].join('');\n    }\n\n    return '';\n  }\n\n  async fetchLogLabels(absoluteRange: AbsoluteTimeRange): Promise<any> {\n    const url = '/api/prom/label';\n    try {\n      this.logLabelFetchTs = Date.now();\n\n      const res = await this.request(url, rangeToParams(absoluteRange));\n      const body = await (res.data || res.json());\n      const labelKeys = body.data.slice().sort();\n      this.labelKeys = {\n        ...this.labelKeys,\n        [EMPTY_SELECTOR]: labelKeys,\n      };\n      this.labelValues = {\n        [EMPTY_SELECTOR]: {},\n      };\n      this.logLabelOptions = labelKeys.map((key: string) => ({ label: key, value: key, isLeaf: false }));\n    } catch (e) {\n      console.error(e);\n    }\n    return [];\n  }\n\n  async refreshLogLabels(absoluteRange: AbsoluteTimeRange, forceRefresh?: boolean) {\n    if ((this.labelKeys && Date.now() - this.logLabelFetchTs > LABEL_REFRESH_INTERVAL) || forceRefresh) {\n      await this.fetchLogLabels(absoluteRange);\n    }\n  }\n\n  async fetchLabelValues(key: string, absoluteRange: AbsoluteTimeRange) {\n    const url = `/api/prom/label/${key}/values`;\n    try {\n      const res = await this.request(url, rangeToParams(absoluteRange));\n      const body = await (res.data || res.json());\n      const values = body.data.slice().sort();\n\n      // Add to label options\n      this.logLabelOptions = this.logLabelOptions.map(keyOption => {\n        if (keyOption.value === key) {\n          return {\n            ...keyOption,\n            children: values.map((value: string) => ({ label: value, value })),\n          };\n        }\n        return keyOption;\n      });\n\n      // Add to key map\n      const exisingValues = this.labelValues[EMPTY_SELECTOR];\n      const nextValues = {\n        ...exisingValues,\n        [key]: values,\n      };\n      this.labelValues = {\n        ...this.labelValues,\n        [EMPTY_SELECTOR]: nextValues,\n      };\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n","import { LokiLogsStream, LokiResponse } from './types';\nimport {\n  parseLabels,\n  FieldType,\n  Labels,\n  DataFrame,\n  ArrayVector,\n  MutableDataFrame,\n  findUniqueLabels,\n} from '@grafana/data';\n\n/**\n * Transforms LokiLogStream structure into a dataFrame. Used when doing standard queries.\n */\nexport function logStreamToDataFrame(stream: LokiLogsStream, reverse?: boolean, refId?: string): DataFrame {\n  let labels: Labels = stream.parsedLabels;\n  if (!labels && stream.labels) {\n    labels = parseLabels(stream.labels);\n  }\n  const times = new ArrayVector<string>([]);\n  const lines = new ArrayVector<string>([]);\n  const uids = new ArrayVector<string>([]);\n\n  for (const entry of stream.entries) {\n    const ts = entry.ts || entry.timestamp;\n    times.add(ts);\n    lines.add(entry.line);\n    uids.add(`${ts}_${stream.labels}`);\n  }\n\n  if (reverse) {\n    times.buffer = times.buffer.reverse();\n    lines.buffer = lines.buffer.reverse();\n  }\n\n  return {\n    refId,\n    fields: [\n      { name: 'ts', type: FieldType.time, config: { title: 'Time' }, values: times }, // Time\n      { name: 'line', type: FieldType.string, config: {}, values: lines, labels }, // Line\n      { name: 'id', type: FieldType.string, config: {}, values: uids },\n    ],\n    length: times.length,\n  };\n}\n\n/**\n * Transform LokiResponse data and appends it to MutableDataFrame. Used for streaming where the dataFrame can be\n * a CircularDataFrame creating a fixed size rolling buffer.\n * TODO: Probably could be unified with the logStreamToDataFrame function.\n * @param response\n * @param data Needs to have ts, line, labels, id as fields\n */\nexport function appendResponseToBufferedData(response: LokiResponse, data: MutableDataFrame) {\n  // Should we do anything with: response.dropped_entries?\n\n  const streams: LokiLogsStream[] = response.streams;\n  if (streams && streams.length) {\n    const { values } = data;\n    let baseLabels: Labels = {};\n    for (const f of data.fields) {\n      if (f.type === FieldType.string) {\n        if (f.labels) {\n          baseLabels = f.labels;\n        }\n        break;\n      }\n    }\n\n    for (const stream of streams) {\n      // Find unique labels\n      const labels = parseLabels(stream.labels);\n      const unique = findUniqueLabels(labels, baseLabels);\n\n      // Add each line\n      for (const entry of stream.entries) {\n        const ts = entry.ts || entry.timestamp;\n        values.ts.add(ts);\n        values.line.add(entry.line);\n        values.labels.add(unique);\n        values.id.add(`${ts}_${stream.labels}`);\n      }\n    }\n  }\n}\n","import { LokiExpression } from './types';\n\nconst selectorRegexp = /(?:^|\\s){[^{]*}/g;\nconst caseInsensitive = '(?i)'; // Golang mode modifier for Loki, doesn't work in JavaScript\nexport function parseQuery(input: string): LokiExpression {\n  input = input || '';\n  const match = input.match(selectorRegexp);\n  let query = input;\n  let regexp = '';\n\n  if (match) {\n    regexp = input.replace(selectorRegexp, '').trim();\n    // Keep old-style regexp, otherwise take whole query\n    if (regexp && regexp.search(/\\|=|\\|~|!=|!~/) === -1) {\n      query = match[0].trim();\n      if (!regexp.startsWith(caseInsensitive)) {\n        regexp = `${caseInsensitive}${regexp}`;\n      }\n    } else {\n      regexp = '';\n    }\n  }\n\n  return { regexp, query };\n}\n\nexport function formatQuery(selector: string, search: string): string {\n  return `${selector || ''} ${search || ''}`.trim();\n}\n\n/**\n * Returns search terms from a LogQL query.\n * E.g., `{} |= foo |=bar != baz` returns `['foo', 'bar']`.\n */\nexport function getHighlighterExpressionsFromQuery(input: string): string[] {\n  const parsed = parseQuery(input);\n  // Legacy syntax\n  if (parsed.regexp) {\n    return [parsed.regexp];\n  }\n  let expression = input;\n  const results = [];\n  // Consume filter expression from left to right\n  while (expression) {\n    const filterStart = expression.search(/\\|=|\\|~|!=|!~/);\n    // Nothing more to search\n    if (filterStart === -1) {\n      break;\n    }\n    // Drop terms for negative filters\n    const skip = expression.substr(filterStart).search(/!=|!~/) === 0;\n    expression = expression.substr(filterStart + 2);\n    if (skip) {\n      continue;\n    }\n    // Check if there is more chained\n    const filterEnd = expression.search(/\\|=|\\|~|!=|!~/);\n    let filterTerm;\n    if (filterEnd === -1) {\n      filterTerm = expression.trim();\n    } else {\n      filterTerm = expression.substr(0, filterEnd).trim();\n      expression = expression.substr(filterEnd);\n    }\n\n    // Unwrap the filter term by removing quotes\n    const quotedTerm = filterTerm.match(/^\"((?:[^\\\\\"]|\\\\\")*)\"$/);\n\n    if (quotedTerm) {\n      const unwrappedFilterTerm = quotedTerm[1];\n      results.push(unwrappedFilterTerm);\n    } else {\n      return null;\n    }\n  }\n  return results;\n}\n","/** PURE_IMPORTS_START tslib,_.._Subject,_.._Subscriber,_.._Observable,_.._Subscription,_.._ReplaySubject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: function (e) { return JSON.parse(e.data); },\n    serializer: function (value) { return JSON.stringify(value); },\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nvar WebSocketSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        var _this = _super.call(this) || this;\n        if (urlConfigOrSource instanceof Observable) {\n            _this.destination = destination;\n            _this.source = urlConfigOrSource;\n        }\n        else {\n            var config = _this._config = tslib_1.__assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            _this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (var key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            _this.destination = new ReplaySubject();\n        }\n        return _this;\n    }\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    };\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable(function (observer) {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            var subscription = self.subscribe(function (x) {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var _a = this._config, WebSocketCtor = _a.WebSocketCtor, protocol = _a.protocol, url = _a.url, binaryType = _a.binaryType;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription(function () {\n            _this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var _socket = _this._socket;\n            if (!_socket) {\n                socket.close();\n                _this._resetState();\n                return;\n            }\n            var openObserver = _this._config.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber.create(function (x) {\n                if (socket.readyState === 1) {\n                    try {\n                        var serializer = _this._config.serializer;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        _this.destination.error(e);\n                    }\n                }\n            }, function (e) {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this._config.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this._config.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            try {\n                var deserializer = _this._config.deserializer;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(function () {\n            var _socket = _this._socket;\n            if (_this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscriber;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _socket = this._socket;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        _super.prototype.unsubscribe.call(this);\n    };\n    return WebSocketSubject;\n}(AnonymousSubject));\nexport { WebSocketSubject };\n//# sourceMappingURL=WebSocketSubject.js.map\n","import { DataFrame, FieldType, parseLabels, KeyValue, CircularDataFrame } from '@grafana/data';\nimport { Observable } from 'rxjs';\nimport { webSocket } from 'rxjs/webSocket';\nimport { LokiResponse } from './types';\nimport { finalize, map } from 'rxjs/operators';\nimport { appendResponseToBufferedData } from './result_transformer';\n\n/**\n * Maps directly to a query in the UI (refId is key)\n */\nexport interface LiveTarget {\n  query: string;\n  regexp: string;\n  url: string;\n  refId: string;\n  size: number;\n}\n\n/**\n * Cache of websocket streams that can be returned as observable. In case there already is a stream for particular\n * target it is returned and on subscription returns the latest dataFrame.\n */\nexport class LiveStreams {\n  private streams: KeyValue<Observable<DataFrame[]>> = {};\n\n  getStream(target: LiveTarget): Observable<DataFrame[]> {\n    let stream = this.streams[target.url];\n    if (!stream) {\n      const data = new CircularDataFrame({ capacity: target.size });\n      data.addField({ name: 'ts', type: FieldType.time, config: { title: 'Time' } });\n      data.addField({ name: 'line', type: FieldType.string }).labels = parseLabels(target.query);\n      data.addField({ name: 'labels', type: FieldType.other }); // The labels for each line\n      data.addField({ name: 'id', type: FieldType.string });\n\n      stream = webSocket(target.url).pipe(\n        finalize(() => {\n          delete this.streams[target.url];\n        }),\n        map((response: LokiResponse) => {\n          appendResponseToBufferedData(response, data);\n          return [data];\n        })\n      );\n      this.streams[target.url] = stream;\n    }\n    return stream;\n  }\n}\n","/** PURE_IMPORTS_START _WebSocketSubject PURE_IMPORTS_END */\nimport { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n//# sourceMappingURL=webSocket.js.map\n","// Libraries\nimport { isEmpty, isString, fromPairs, map as lodashMap } from 'lodash';\n// Services & Utils\nimport {\n  dateMath,\n  DataFrame,\n  LogRowModel,\n  DateTime,\n  AnnotationEvent,\n  DataFrameView,\n  LoadingState,\n  ArrayVector,\n  FieldType,\n  FieldConfig,\n} from '@grafana/data';\nimport { addLabelToSelector, keepSelectorFilters } from 'app/plugins/datasource/prometheus/add_label_to_query';\nimport LanguageProvider from './language_provider';\nimport { logStreamToDataFrame } from './result_transformer';\nimport { formatQuery, parseQuery, getHighlighterExpressionsFromQuery } from './query_utils';\n// Types\nimport {\n  PluginMeta,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  AnnotationQueryRequest,\n} from '@grafana/data';\nimport { LokiQuery, LokiOptions, LokiLogsStream, LokiResponse } from './types';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { safeStringifyValue, convertToWebSocketUrl } from 'app/core/utils/explore';\nimport { LiveTarget, LiveStreams } from './live_streams';\nimport { Observable, from, merge, of } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nexport const DEFAULT_MAX_LINES = 1000;\n\nconst DEFAULT_QUERY_PARAMS = {\n  direction: 'BACKWARD',\n  limit: DEFAULT_MAX_LINES,\n  regexp: '',\n  query: '',\n};\n\nfunction serializeParams(data: any) {\n  return Object.keys(data)\n    .map(k => {\n      const v = data[k];\n      return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n    })\n    .join('&');\n}\n\ninterface LokiContextQueryOptions {\n  direction?: 'BACKWARD' | 'FORWARD';\n  limit?: number;\n}\n\nexport class LokiDatasource extends DataSourceApi<LokiQuery, LokiOptions> {\n  private streams = new LiveStreams();\n  languageProvider: LanguageProvider;\n  maxLines: number;\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<LokiOptions>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv\n  ) {\n    super(instanceSettings);\n    this.languageProvider = new LanguageProvider(this);\n    const settingsData = instanceSettings.jsonData || {};\n    this.maxLines = parseInt(settingsData.maxLines, 10) || DEFAULT_MAX_LINES;\n  }\n\n  _request(apiUrl: string, data?: any, options?: any) {\n    const baseUrl = this.instanceSettings.url;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}?${params}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return this.backendSrv.datasourceRequest(req);\n  }\n\n  prepareLiveTarget(target: LokiQuery, options: DataQueryRequest<LokiQuery>): LiveTarget {\n    const interpolated = this.templateSrv.replace(target.expr, {}, this.interpolateQueryExpr);\n    const { query, regexp } = parseQuery(interpolated);\n    const refId = target.refId;\n    const baseUrl = this.instanceSettings.url;\n    const params = serializeParams({ query, regexp });\n    const url = convertToWebSocketUrl(`${baseUrl}/api/prom/tail?${params}`);\n\n    return {\n      query,\n      regexp,\n      url,\n      refId,\n      size: Math.min(options.maxDataPoints || Infinity, this.maxLines),\n    };\n  }\n\n  prepareQueryTarget(target: LokiQuery, options: DataQueryRequest<LokiQuery>) {\n    const interpolated = this.templateSrv.replace(target.expr, {}, this.interpolateQueryExpr);\n    const { query, regexp } = parseQuery(interpolated);\n    const start = this.getTime(options.range.from, false);\n    const end = this.getTime(options.range.to, true);\n    const refId = target.refId;\n    return {\n      ...DEFAULT_QUERY_PARAMS,\n      query,\n      regexp,\n      start,\n      end,\n      limit: Math.min(options.maxDataPoints || Infinity, this.maxLines),\n      refId,\n    };\n  }\n\n  processError = (err: any, target: any): DataQueryError => {\n    const error: DataQueryError = {\n      message: (err && err.statusText) || 'Unknown error during query transaction. Please check JS console logs.',\n      refId: target.refId,\n    };\n    if (err.data) {\n      if (typeof err.data === 'string') {\n        error.message = err.data;\n      } else if (err.data.error) {\n        error.message = safeStringifyValue(err.data.error);\n      }\n    } else if (err.message) {\n      error.message = err.message;\n    } else if (typeof err === 'string') {\n      error.message = err;\n    }\n\n    error.status = err.status;\n    error.statusText = err.statusText;\n\n    return error;\n  };\n\n  processResult = (data: LokiLogsStream | LokiResponse, target: any): DataFrame[] => {\n    const series: DataFrame[] = [];\n\n    if (Object.keys(data).length === 0) {\n      return series;\n    }\n\n    if (!(data as any).streams) {\n      return [logStreamToDataFrame(data as LokiLogsStream, false, target.refId)];\n    }\n\n    data = data as LokiResponse;\n    for (const stream of data.streams || []) {\n      const dataFrame = logStreamToDataFrame(stream);\n      this.enhanceDataFrame(dataFrame);\n      dataFrame.refId = target.refId;\n      dataFrame.meta = {\n        searchWords: getHighlighterExpressionsFromQuery(formatQuery(target.query, target.regexp)),\n        limit: this.maxLines,\n      };\n      series.push(dataFrame);\n    }\n\n    return series;\n  };\n\n  /**\n   * Runs live queries which in this case means creating a websocket and listening on it for new logs.\n   * This returns a bit different dataFrame than runQueries as it returns single dataframe even if there are multiple\n   * Loki streams, sets only common labels on dataframe.labels and has additional dataframe.fields.labels for unique\n   * labels per row.\n   */\n  runLiveQuery = (options: DataQueryRequest<LokiQuery>, target: LokiQuery): Observable<DataQueryResponse> => {\n    const liveTarget = this.prepareLiveTarget(target, options);\n    const stream = this.streams.getStream(liveTarget);\n    return stream.pipe(\n      map(data => {\n        return {\n          data,\n          key: `loki-${liveTarget.refId}`,\n          state: LoadingState.Streaming,\n        };\n      })\n    );\n  };\n\n  runQuery = (options: DataQueryRequest<LokiQuery>, target: LokiQuery): Observable<DataQueryResponse> => {\n    const query = this.prepareQueryTarget(target, options);\n    return from(\n      this._request('/api/prom/query', query).catch((err: any) => {\n        if (err.cancelled) {\n          return err;\n        }\n\n        const error: DataQueryError = this.processError(err, query);\n        throw error;\n      })\n    ).pipe(\n      filter((response: any) => (response.cancelled ? false : true)),\n      map((response: any) => {\n        const data = this.processResult(response.data, query);\n        return { data, key: query.refId };\n      })\n    );\n  };\n\n  query(options: DataQueryRequest<LokiQuery>): Observable<DataQueryResponse> {\n    const subQueries = options.targets\n      .filter(target => target.expr && !target.hide)\n      .map(target => {\n        if (target.liveStreaming) {\n          return this.runLiveQuery(options, target);\n        }\n        return this.runQuery(options, target);\n      });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(subQueries)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...subQueries);\n  }\n\n  interpolateVariablesInQueries(queries: LokiQuery[]): LokiQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          expr: this.templateSrv.replace(query.expr, {}, this.interpolateQueryExpr),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  async importQueries(queries: LokiQuery[], originMeta: PluginMeta): Promise<LokiQuery[]> {\n    return this.languageProvider.importQueries(queries, originMeta.id);\n  }\n\n  metadataRequest(url: string, params?: any) {\n    // HACK to get label values for {job=|}, will be replaced when implementing LokiQueryField\n    const apiUrl = url.replace('v1', 'prom');\n    return this._request(apiUrl, params, { silent: true }).then((res: DataQueryResponse) => {\n      const data: any = { data: { data: res.data.values || [] } };\n      return data;\n    });\n  }\n\n  interpolateQueryExpr(value: any, variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return lokiRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return lokiSpecialRegexEscape(value);\n    }\n\n    const escapedValues = lodashMap(value, lokiSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  modifyQuery(query: LokiQuery, action: any): LokiQuery {\n    const parsed = parseQuery(query.expr || '');\n    let { query: selector } = parsed;\n    let selectorLabels, selectorFilters;\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        selectorLabels = addLabelToSelector(selector, action.key, action.value);\n        selectorFilters = keepSelectorFilters(selector);\n        selector = `${selectorLabels} ${selectorFilters}`;\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        selectorLabels = addLabelToSelector(selector, action.key, action.value, '!=');\n        selectorFilters = keepSelectorFilters(selector);\n        selector = `${selectorLabels} ${selectorFilters}`;\n        break;\n      }\n      default:\n        break;\n    }\n    const expression = formatQuery(selector, parsed.regexp);\n    return { ...query, expr: expression };\n  }\n\n  getHighlighterExpression(query: LokiQuery): string[] {\n    return getHighlighterExpressionsFromQuery(query.expr);\n  }\n\n  getTime(date: string | DateTime, roundUp: boolean) {\n    if (isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() * 1e6);\n  }\n\n  prepareLogRowContextQueryTarget = (row: LogRowModel, limit: number, direction: 'BACKWARD' | 'FORWARD') => {\n    const query = Object.keys(row.labels)\n      .map(label => {\n        return `${label}=\"${row.labels[label]}\"`;\n      })\n      .join(',');\n    const contextTimeBuffer = 2 * 60 * 60 * 1000 * 1e6; // 2h buffer\n    const timeEpochNs = row.timeEpochMs * 1e6;\n\n    const commontTargetOptons = {\n      limit,\n      query: `{${query}}`,\n      direction,\n    };\n\n    if (direction === 'BACKWARD') {\n      return {\n        ...commontTargetOptons,\n        start: timeEpochNs - contextTimeBuffer,\n        end: row.timestamp, // using RFC3339Nano format to avoid precision loss\n        direction,\n      };\n    } else {\n      return {\n        ...commontTargetOptons,\n        start: row.timestamp, // start param in Loki API is inclusive so we'll have to filter out the row that this request is based from\n        end: timeEpochNs + contextTimeBuffer,\n      };\n    }\n  };\n\n  getLogRowContext = async (row: LogRowModel, options?: LokiContextQueryOptions) => {\n    const target = this.prepareLogRowContextQueryTarget(\n      row,\n      (options && options.limit) || 10,\n      (options && options.direction) || 'BACKWARD'\n    );\n    const series: DataFrame[] = [];\n\n    try {\n      const reverse = options && options.direction === 'FORWARD';\n      const result = await this._request('/api/prom/query', target);\n      if (result.data) {\n        for (const stream of result.data.streams || []) {\n          series.push(logStreamToDataFrame(stream, reverse));\n        }\n      }\n\n      return {\n        data: series,\n      };\n    } catch (e) {\n      const error: DataQueryError = {\n        message: 'Error during context query. Please check JS console logs.',\n        status: e.status,\n        statusText: e.statusText,\n      };\n      throw error;\n    }\n  };\n\n  testDatasource() {\n    // Consider only last 10 minutes otherwise request takes too long\n    const startMs = Date.now() - 10 * 60 * 1000;\n    const start = `${startMs}000000`; // API expects nanoseconds\n    return this._request('/api/prom/label', { start })\n      .then((res: DataQueryResponse) => {\n        if (res && res.data && res.data.values && res.data.values.length > 0) {\n          return { status: 'success', message: 'Data source connected and labels found.' };\n        }\n        return {\n          status: 'error',\n          message:\n            'Data source connected, but no labels received. Verify that Loki and Promtail is configured properly.',\n        };\n      })\n      .catch((err: any) => {\n        let message = 'Loki: ';\n        if (err.statusText) {\n          message += err.statusText;\n        } else {\n          message += 'Cannot connect to Loki';\n        }\n\n        if (err.status) {\n          message += `. ${err.status}`;\n        }\n\n        if (err.data && err.data.message) {\n          message += `. ${err.data.message}`;\n        } else if (err.data) {\n          message += `. ${err.data}`;\n        }\n        return { status: 'error', message: message };\n      });\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<LokiQuery>): Promise<AnnotationEvent[]> {\n    if (!options.annotation.expr) {\n      return [];\n    }\n\n    const request = queryRequestFromAnnotationOptions(options);\n    const { data } = await this.runQuery(request, request.targets[0]).toPromise();\n    const annotations: AnnotationEvent[] = [];\n\n    for (const frame of data) {\n      const tags: string[] = [];\n      for (const field of frame.fields) {\n        if (field.labels) {\n          tags.push.apply(tags, Object.values(field.labels));\n        }\n      }\n      const view = new DataFrameView<{ ts: string; line: string }>(frame);\n\n      view.forEachRow(row => {\n        annotations.push({\n          time: new Date(row.ts).valueOf(),\n          text: row.line,\n          tags,\n        });\n      });\n    }\n\n    return annotations;\n  }\n\n  /**\n   * Adds new fields and DataLinks to DataFrame based on DataSource instance config.\n   * @param dataFrame\n   */\n  enhanceDataFrame(dataFrame: DataFrame): void {\n    if (!this.instanceSettings.jsonData) {\n      return;\n    }\n\n    const derivedFields = this.instanceSettings.jsonData.derivedFields || [];\n    if (derivedFields.length) {\n      const fields = fromPairs(\n        derivedFields.map(field => {\n          const config: FieldConfig = {};\n          if (field.url) {\n            config.links = [\n              {\n                url: field.url,\n                title: '',\n              },\n            ];\n          }\n          const dataFrameField = {\n            name: field.name,\n            type: FieldType.string,\n            config,\n            values: new ArrayVector<string>([]),\n          };\n\n          return [field.name, dataFrameField];\n        })\n      );\n\n      const view = new DataFrameView(dataFrame);\n      view.forEachRow((row: { line: string }) => {\n        for (const field of derivedFields) {\n          const logMatch = row.line.match(field.matcherRegex);\n          fields[field.name].values.add(logMatch && logMatch[1]);\n        }\n      });\n\n      dataFrame.fields = [...dataFrame.fields, ...Object.values(fields)];\n    }\n  }\n}\n\nfunction queryRequestFromAnnotationOptions(options: AnnotationQueryRequest<LokiQuery>): DataQueryRequest<LokiQuery> {\n  const refId = `annotation-${options.annotation.name}`;\n  const target: LokiQuery = { refId, expr: options.annotation.expr };\n\n  return {\n    requestId: refId,\n    range: options.range,\n    targets: [target],\n    dashboardId: options.dashboard.id,\n    scopedVars: null,\n    startTime: Date.now(),\n\n    // This should mean the default defined on datasource is used.\n    maxDataPoints: 0,\n\n    // Dummy values, are required in type but not used here.\n    timezone: 'utc',\n    panelId: 0,\n    interval: '',\n    intervalMs: 0,\n  };\n}\n\nexport function lokiRegularEscape(value: any) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function lokiSpecialRegexEscape(value: any) {\n  if (typeof value === 'string') {\n    return lokiRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()|]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\nexport default LokiDatasource;\n","import React, { PureComponent } from 'react';\nimport { shuffle } from 'lodash';\nimport { ExploreStartPageProps, DataQuery } from '@grafana/data';\nimport LokiLanguageProvider from '../language_provider';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nexport default class LokiCheatSheet extends PureComponent<ExploreStartPageProps, { userExamples: string[] }> {\n  userLabelTimer: NodeJS.Timeout;\n  state = {\n    userExamples: DEFAULT_EXAMPLES,\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find(l => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map(value => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={e => onClickExample({ refId: 'A', expr } as DataQuery)}\n      >\n        <code>{expr}</code>\n      </div>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n\n    return (\n      <>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">Start by selecting a log stream from the Log labels selector.</div>\n          <div className=\"cheat-sheet-item__label\">\n            Alternatively, you can write a stream selector into the query field:\n          </div>\n          {this.renderExpression('{job=\"default/prometheus\"}')}\n          {userExamples !== DEFAULT_EXAMPLES && userExamples.length > 0 ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map(example => this.renderExpression(example))}\n            </div>\n          ) : null}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://github.com/grafana/loki/blob/master/docs/logql.md#filter-expression\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport { LokiQueryFieldForm, LokiQueryFieldFormProps } from './LokiQueryFieldForm';\nimport { useLokiSyntax } from './useLokiSyntax';\nimport LokiLanguageProvider from '../language_provider';\n\nexport const LokiQueryField: FunctionComponent<LokiQueryFieldFormProps> = ({ datasource, ...otherProps }) => {\n  const { isSyntaxReady, setActiveOption, refreshLabels, ...syntaxProps } = useLokiSyntax(\n    datasource.languageProvider as LokiLanguageProvider,\n    otherProps.absoluteRange\n  );\n\n  return (\n    <LokiQueryFieldForm\n      datasource={datasource}\n      syntaxLoaded={isSyntaxReady}\n      /**\n       * setActiveOption name is intentional. Because of the way rc-cascader requests additional data\n       * https://github.com/react-component/cascader/blob/master/src/Cascader.jsx#L165\n       * we are notyfing useLokiSyntax hook, what the active option is, and then it's up to the hook logic\n       * to fetch data of options that aren't fetched yet\n       */\n      onLoadOptions={setActiveOption}\n      onLabelsRefresh={refreshLabels}\n      {...syntaxProps}\n      {...otherProps}\n    />\n  );\n};\n\nexport default LokiQueryField;\n","// Libraries\nimport React, { memo } from 'react';\n\n// Types\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport { LokiDatasource } from '../datasource';\nimport { LokiQuery } from '../types';\nimport { LokiQueryField } from './LokiQueryField';\nimport { useLokiSyntax } from './useLokiSyntax';\n\ntype Props = QueryEditorProps<LokiDatasource, LokiQuery>;\n\nexport const LokiQueryEditor = memo(function LokiQueryEditor(props: Props) {\n  const { query, data, datasource, onChange, onRunQuery } = props;\n\n  let absolute: AbsoluteTimeRange;\n  if (data && data.request) {\n    const { range } = data.request;\n    absolute = {\n      from: range.from.valueOf(),\n      to: range.to.valueOf(),\n    };\n  } else {\n    absolute = {\n      from: Date.now() - 10000,\n      to: Date.now(),\n    };\n  }\n\n  const { isSyntaxReady, setActiveOption, refreshLabels, ...syntaxProps } = useLokiSyntax(\n    datasource.languageProvider,\n    absolute\n  );\n\n  return (\n    <div>\n      <LokiQueryField\n        datasource={datasource}\n        query={query}\n        onChange={onChange}\n        onRunQuery={onRunQuery}\n        history={[]}\n        data={data}\n        onLoadOptions={setActiveOption}\n        onLabelsRefresh={refreshLabels}\n        syntaxLoaded={isSyntaxReady}\n        absoluteRange={absolute}\n        {...syntaxProps}\n      />\n    </div>\n  );\n});\n\nexport default LokiQueryEditor;\n","/**\n * Just a simple wrapper for a react component that is actually implementing the query editor.\n */\nexport class LokiAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(expr: string) {\n    this.annotation.expr = expr;\n  }\n}\n","import React from 'react';\nimport { FormField } from '@grafana/ui';\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport const MaxLinesField = (props: Props) => {\n  const { value, onChange } = props;\n  return (\n    <FormField\n      label=\"Maximum lines\"\n      labelWidth={11}\n      inputWidth={20}\n      inputEl={\n        <input\n          type=\"number\"\n          className=\"gf-form-input width-8 gf-form-input--has-help-icon\"\n          value={value}\n          onChange={event => onChange(event.currentTarget.value)}\n          spellCheck={false}\n          placeholder=\"1000\"\n        />\n      }\n      tooltip={\n        <>\n          Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this limit\n          to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish when\n          displaying the log results.\n        </>\n      }\n    />\n  );\n};\n","import React from 'react';\nimport { css } from 'emotion';\nimport { Button, FormField, VariableSuggestion, DataLinkInput, stylesFactory } from '@grafana/ui';\nimport { DerivedFieldConfig } from '../types';\n\nconst getStyles = stylesFactory(() => ({\n  firstRow: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n}));\n\ntype Props = {\n  value: DerivedFieldConfig;\n  onChange: (value: DerivedFieldConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DerivedField = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.firstRow}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={5}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Name\"\n          type=\"text\"\n          value={value.name}\n          onChange={handleChange('name')}\n        />\n        <FormField\n          className={styles.regexField}\n          inputWidth={null}\n          label=\"Regex\"\n          type=\"text\"\n          value={value.matcherRegex}\n          onChange={handleChange('matcherRegex')}\n          tooltip={\n            'Use to parse and capture some part of the log message. You can use the captured groups in the template.'\n          }\n        />\n        <Button\n          variant={'inverse'}\n          title=\"Remove field\"\n          icon={'fa fa-times'}\n          onClick={event => {\n            event.preventDefault();\n            onDelete();\n          }}\n          className={css`\n            margin-left: 8px;\n          `}\n        />\n      </div>\n\n      <FormField\n        label=\"URL\"\n        labelWidth={5}\n        inputEl={\n          <DataLinkInput\n            placeholder={'http://example.com/${__value.raw}'}\n            value={value.url || ''}\n            onChange={newValue =>\n              onChange({\n                ...value,\n                url: newValue,\n              })\n            }\n            suggestions={suggestions}\n          />\n        }\n        className={css`\n          width: 100%;\n        `}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { css } from 'emotion';\nimport cx from 'classnames';\nimport { FormField } from '@grafana/ui';\nimport { DerivedFieldConfig } from '../types';\nimport { getLinksFromLogsField } from '../../../../features/panel/panellinks/linkSuppliers';\nimport { ArrayVector, FieldType } from '@grafana/data';\n\ntype Props = {\n  derivedFields: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <FormField\n        labelWidth={12}\n        label={'Debug log message'}\n        inputEl={\n          <textarea\n            placeholder={'Paste an example log line here to test the regular expressions of your derived fields'}\n            className={cx(\n              'gf-form-input gf-form-textarea',\n              css`\n                width: 100%;\n              `\n            )}\n            value={debugText}\n            onChange={event => setDebugText(event.currentTarget.value)}\n          />\n        }\n      />\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map(field => {\n          let value: any = field.value;\n          if (field.error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: any;\n  value?: string;\n  href?: string;\n};\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter(field => field.name && field.matcherRegex)\n    .map(field => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link;\n\n        if (field.url && value) {\n          link = getLinksFromLogsField(\n            {\n              name: '',\n              type: FieldType.string,\n              values: new ArrayVector([value]),\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            0\n          )[0];\n        }\n\n        return {\n          name: field.name,\n          value: value || '<no match>',\n          href: link && link.href,\n        } as DebugField;\n      } catch (error) {\n        return {\n          name: field.name,\n          error,\n        } as DebugField;\n      }\n    });\n}\n","import React, { useState } from 'react';\nimport { css } from 'emotion';\nimport { Button, DataLinkBuiltInVars, stylesFactory, useTheme, VariableOrigin } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { DerivedFieldConfig } from '../types';\nimport { DerivedField } from './DerivedField';\nimport { DebugSection } from './DebugSection';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textWeak};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing.sm};\n  `,\n}));\n\ntype Props = {\n  value?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\nexport const DerivedFields = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Derived fields</h3>\n\n      <div className={styles.infoText}>\n        Derived fields can be used to extract new fields from the log message and create link from it's value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value &&\n          value.map((field, index) => {\n            return (\n              <DerivedField\n                className={styles.derivedField}\n                key={index}\n                value={field}\n                onChange={newField => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1, newField);\n                  onChange(newDerivedFields);\n                }}\n                onDelete={() => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1);\n                  onChange(newDerivedFields);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Exact string captured by the regular expression',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        <div>\n          <Button\n            variant={'inverse'}\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"fa fa-plus\"\n            onClick={event => {\n              event.preventDefault();\n              const newDerivedFields = [...(value || []), { name: '', matcherRegex: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {value && value.length > 0 && (\n            <Button variant=\"inverse\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showDebug && (\n        <div className=\"gf-form-group\">\n          <DebugSection\n            className={css`\n              margin-bottom: 10px;\n            `}\n            derivedFields={value}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { LokiOptions } from '../types';\nimport { MaxLinesField } from './MaxLinesField';\nimport { DerivedFields } from './DerivedFields';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater = <T extends any>(field: keyof LokiOptions) => (\n  options: DataSourceSettings<LokiOptions>,\n  value: T\n): DataSourceSettings<LokiOptions> => {\n  return {\n    ...options,\n    jsonData: {\n      ...options.jsonData,\n      [field]: value,\n    },\n  };\n};\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:3100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <MaxLinesField\n              value={options.jsonData.maxLines}\n              onChange={value => onOptionsChange(setMaxLines(options, value))}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DerivedFields\n        value={options.jsonData.derivedFields}\n        onChange={value => onOptionsChange(setDerivedFields(options, value))}\n      />\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport Datasource from './datasource';\n\nimport LokiCheatSheet from './components/LokiCheatSheet';\nimport LokiQueryField from './components/LokiQueryField';\nimport LokiQueryEditor from './components/LokiQueryEditor';\nimport { LokiAnnotationsQueryCtrl } from './LokiAnnotationsQueryCtrl';\nimport { ConfigEditor } from './configuration/ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(Datasource)\n  .setQueryEditor(LokiQueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setExploreQueryField(LokiQueryField)\n  .setExploreStartPage(LokiCheatSheet)\n  .setAnnotationQueryCtrl(LokiAnnotationsQueryCtrl);\n","export const RATE_RANGES = ['1m', '5m', '10m', '30m', '1h'];\n\nexport const processHistogramLabels = (labels: string[]) => {\n  const result = [];\n  const regexp = new RegExp('_bucket($|:)');\n  for (let index = 0; index < labels.length; index++) {\n    const label = labels[index];\n    const isHistogramValue = regexp.test(label);\n    if (isHistogramValue) {\n      if (result.indexOf(label) === -1) {\n        result.push(label);\n      }\n    }\n  }\n\n  return { values: { __name__: result } };\n};\n\nexport function processLabels(labels: Array<{ [key: string]: string }>, withName = false) {\n  const values: { [key: string]: string[] } = {};\n  labels.forEach(l => {\n    const { __name__, ...rest } = l;\n    if (withName) {\n      values['__name__'] = values['__name__'] || [];\n      if (!values['__name__'].includes(__name__)) {\n        values['__name__'].push(__name__);\n      }\n    }\n\n    Object.keys(rest).forEach(key => {\n      if (!values[key]) {\n        values[key] = [];\n      }\n      if (!values[key].includes(rest[key])) {\n        values[key].push(rest[key]);\n      }\n    });\n  });\n  return { values, keys: Object.keys(values) };\n}\n\n// const cleanSelectorRegexp = /\\{(\\w+=\"[^\"\\n]*?\")(,\\w+=\"[^\"\\n]*?\")*\\}/;\nexport const selectorRegexp = /\\{[^}]*?\\}/;\nexport const labelRegexp = /\\b(\\w+)(!?=~?)(\"[^\"\\n]*?\")/g;\nexport function parseSelector(query: string, cursorOffset = 1): { labelKeys: any[]; selector: string } {\n  if (!query.match(selectorRegexp)) {\n    // Special matcher for metrics\n    if (query.match(/^[A-Za-z:][\\w:]*$/)) {\n      return {\n        selector: `{__name__=\"${query}\"}`,\n        labelKeys: ['__name__'],\n      };\n    }\n    throw new Error('Query must contain a selector: ' + query);\n  }\n\n  // Check if inside a selector\n  const prefix = query.slice(0, cursorOffset);\n  const prefixOpen = prefix.lastIndexOf('{');\n  const prefixClose = prefix.lastIndexOf('}');\n  if (prefixOpen === -1) {\n    throw new Error('Not inside selector, missing open brace: ' + prefix);\n  }\n  if (prefixClose > -1 && prefixClose > prefixOpen) {\n    throw new Error('Not inside selector, previous selector already closed: ' + prefix);\n  }\n  const suffix = query.slice(cursorOffset);\n  const suffixCloseIndex = suffix.indexOf('}');\n  const suffixClose = suffixCloseIndex + cursorOffset;\n  const suffixOpenIndex = suffix.indexOf('{');\n  const suffixOpen = suffixOpenIndex + cursorOffset;\n  if (suffixClose === -1) {\n    throw new Error('Not inside selector, missing closing brace in suffix: ' + suffix);\n  }\n  if (suffixOpenIndex > -1 && suffixOpen < suffixClose) {\n    throw new Error('Not inside selector, next selector opens before this one closed: ' + suffix);\n  }\n\n  // Extract clean labels to form clean selector, incomplete labels are dropped\n  const selector = query.slice(prefixOpen, suffixClose);\n  const labels: { [key: string]: { value: string; operator: string } } = {};\n  selector.replace(labelRegexp, (_, key, operator, value) => {\n    labels[key] = { value, operator };\n    return '';\n  });\n\n  // Add metric if there is one before the selector\n  const metricPrefix = query.slice(0, prefixOpen);\n  const metricMatch = metricPrefix.match(/[A-Za-z:][\\w:]*$/);\n  if (metricMatch) {\n    labels['__name__'] = { value: `\"${metricMatch[0]}\"`, operator: '=' };\n  }\n\n  // Build sorted selector\n  const labelKeys = Object.keys(labels).sort();\n  const cleanSelector = labelKeys.map(key => `${key}${labels[key].operator}${labels[key].value}`).join(',');\n\n  const selectorString = ['{', cleanSelector, '}'].join('');\n\n  return { labelKeys, selector: selectorString };\n}\n\nexport function expandRecordingRules(query: string, mapping: { [name: string]: string }): string {\n  const ruleNames = Object.keys(mapping);\n  const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\(|\\\\[|\\\\{)`, 'ig');\n  return query.replace(rulesRegex, (match, pre, name, post) => `${pre}${mapping[name]}${post}`);\n}\n","import _ from 'lodash';\n\nconst keywords = 'by|without|on|ignoring|group_left|group_right|bool|or|and|unless';\n\n// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.\nconst builtInWords = [\n  keywords,\n  'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',\n  'true|false|null|__name__|job',\n  'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',\n  'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',\n  'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',\n  'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',\n]\n  .join('|')\n  .split('|');\n\nconst metricNameRegexp = /([A-Za-z:][\\w:]*)\\b(?![\\(\\]{=!\",])/g;\nconst selectorRegexp = /{([^{]*)}/g;\n\n// addLabelToQuery('foo', 'bar', 'baz') => 'foo{bar=\"baz\"}'\nexport function addLabelToQuery(query: string, key: string, value: string, operator?: string): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // Add empty selectors to bare metric names\n  let previousWord: string;\n  query = query.replace(metricNameRegexp, (match, word, offset) => {\n    const insideSelector = isPositionInsideChars(query, offset, '{', '}');\n    // Handle \"sum by (key) (metric)\"\n    const previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;\n\n    // check for colon as as \"word boundary\" symbol\n    const isColonBounded = word.endsWith(':');\n\n    previousWord = word;\n    if (!insideSelector && !isColonBounded && !previousWordIsKeyWord && builtInWords.indexOf(word) === -1) {\n      return `${word}{}`;\n    }\n    return word;\n  });\n\n  // Adding label to existing selectors\n  let match = selectorRegexp.exec(query);\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    const selector = match[1];\n    const selectorWithLabel = addLabelToSelector(selector, key, value, operator);\n    lastIndex = match.index + match[1].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n    parts.push(prefix, selectorWithLabel);\n    match = selectorRegexp.exec(query);\n  }\n\n  parts.push(suffix);\n  return parts.join('');\n}\n\nconst labelRegexp = /(\\w+)\\s*(=|!=|=~|!~)\\s*(\"[^\"]*\")/g;\n\nexport function addLabelToSelector(selector: string, labelKey: string, labelValue: string, labelOperator?: string) {\n  const parsedLabels = [];\n\n  // Split selector into labels\n  if (selector) {\n    let match = labelRegexp.exec(selector);\n    while (match) {\n      parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });\n      match = labelRegexp.exec(selector);\n    }\n  }\n\n  // Add new label\n  const operatorForLabelKey = labelOperator || '=';\n  parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: `\"${labelValue}\"` });\n\n  // Sort labels by key and put them together\n  const formatted = _.chain(parsedLabels)\n    .uniqWith(_.isEqual)\n    .compact()\n    .sortBy('key')\n    .map(({ key, operator, value }) => `${key}${operator}${value}`)\n    .value()\n    .join(',');\n\n  return `{${formatted}}`;\n}\n\nexport function keepSelectorFilters(selector: string) {\n  // Remove all label-key between {} and return filters. If first character is space, remove it.\n  const filters = selector.replace(/\\{(.*?)\\}/g, '').replace(/^ /, '');\n  return filters;\n}\n\nfunction isPositionInsideChars(text: string, position: number, openChar: string, closeChar: string) {\n  const nextSelectorStart = text.slice(position).indexOf(openChar);\n  const nextSelectorEnd = text.slice(position).indexOf(closeChar);\n  return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n}\n\nexport default addLabelToQuery;\n"],"sourceRoot":""}