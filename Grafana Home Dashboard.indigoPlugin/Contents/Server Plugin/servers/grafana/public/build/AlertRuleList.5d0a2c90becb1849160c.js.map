{"version":3,"sources":["webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./public/app/features/alerting/state/selectors.ts"],"names":["AlertRuleList","_super","_this","apply","this","arguments","stateFilters","text","value","onStateFilterChanged","evt","props","updateLocation","query","state","target","onOpenHowTo","app_core_app_events__WEBPACK_IMPORTED_MODULE_6__","emit","app_types__WEBPACK_IMPORTED_MODULE_9__","showModal","src","modalClass","model","onSearchQueryChange","setSearchQuery","onTogglePause","rule","togglePauseAlertRule","id","paused","alertStateFilterOption","_a","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","key","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","fetchRules","componentDidUpdate","prevProps","stateFilter","getAlertRulesAsync","getStateFilter","sent","toString","render","navModel","alertRules","search","isLoading","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","className","app_core_components_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_12__","labelClassName","inputClassName","placeholder","onChange","map","onClick","_AlertRuleItem__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","app_core_actions__WEBPACK_IMPORTED_MODULE_7__","_state_actions__WEBPACK_IMPORTED_MODULE_10__","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_8__","navIndex","_state_selectors__WEBPACK_IMPORTED_MODULE_11__","location","AlertRuleItem","renderText","react_highlight_words__WEBPACK_IMPORTED_MODULE_2___default","highlightClassName","textToHighlight","searchWords","iconClassName","classnames__WEBPACK_IMPORTED_MODULE_3___default","fa","fa-play","fa-pause","ruleUrl","url","panelId","stateClass","stateIcon","href","name","stateText","stateAge","info","title","__webpack_require__","d","getSearchQuery","getAlertRuleItems","searchQuery","regex","RegExp","items","filter","item","test"],"mappings":"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","file":"AlertRuleList.5d0a2c90becb1849160c.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { updateLocation } from 'app/core/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState, AlertRule, CoreEvents } from 'app/types';\nimport { getAlertRulesAsync, setSearchQuery, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  navModel: NavModel;\n  alertRules: AlertRule[];\n  updateLocation: typeof updateLocation;\n  getAlertRulesAsync: typeof getAlertRulesAsync;\n  setSearchQuery: typeof setSearchQuery;\n  togglePauseAlertRule: typeof togglePauseAlertRule;\n  stateFilter: string;\n  search: string;\n  isLoading: boolean;\n}\n\nexport class AlertRuleList extends PureComponent<Props, any> {\n  stateFilters = [\n    { text: 'All', value: 'all' },\n    { text: 'OK', value: 'ok' },\n    { text: 'Not OK', value: 'not_ok' },\n    { text: 'Alerting', value: 'alerting' },\n    { text: 'No Data', value: 'no_data' },\n    { text: 'Paused', value: 'paused' },\n    { text: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.stateFilter !== this.props.stateFilter) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    const { stateFilter } = this.props;\n    if (stateFilter) {\n      return stateFilter.toString();\n    }\n    return 'all';\n  }\n\n  onStateFilterChanged = (evt: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.updateLocation({\n      query: { state: evt.target.value },\n    });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/alerting/partials/alert_howto.html',\n      modalClass: 'confirm-modal',\n      model: {},\n    });\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n                inputClassName=\"gf-form-input\"\n                placeholder=\"Search alerts\"\n                value={search}\n                onChange={this.onSearchQueryChange}\n              />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"gf-form-select-wrapper width-13\">\n                <select className=\"gf-form-input\" onChange={this.onStateFilterChanged} value={this.getStateFilter()}>\n                  {this.stateFilters.map(this.alertStateFilterOption)}\n                </select>\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <a className=\"btn btn-secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </a>\n          </div>\n          <section>\n            <ol className=\"alert-rule-list\">\n              {alertRules.map(rule => (\n                <AlertRuleItem\n                  rule={rule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule)}\n                />\n              ))}\n            </ol>\n          </section>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'alert-list'),\n  alertRules: getAlertRuleItems(state.alertRules),\n  stateFilter: state.location.query.state,\n  search: getSearchQuery(state.alertRules),\n  isLoading: state.alertRules.isLoading,\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(AlertRuleList)\n);\n","import React, { PureComponent } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport classNames from 'classnames';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nclass AlertRuleItem extends PureComponent<Props> {\n  renderText(text: string) {\n    return (\n      <Highlighter\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[this.props.search]}\n      />\n    );\n  }\n\n  render() {\n    const { rule, onTogglePause } = this.props;\n\n    const iconClassName = classNames({\n      fa: true,\n      'fa-play': rule.state === 'paused',\n      'fa-pause': rule.state !== 'paused',\n    });\n\n    const ruleUrl = `${rule.url}?panelId=${rule.panelId}&fullscreen&edit&tab=alert`;\n\n    return (\n      <li className=\"alert-rule-item\">\n        <span className={`alert-rule-item__icon ${rule.stateClass}`}>\n          <i className={rule.stateIcon} />\n        </span>\n        <div className=\"alert-rule-item__body\">\n          <div className=\"alert-rule-item__header\">\n            <div className=\"alert-rule-item__name\">\n              <a href={ruleUrl}>{this.renderText(rule.name)}</a>\n            </div>\n            <div className=\"alert-rule-item__text\">\n              <span className={`${rule.stateClass}`}>{this.renderText(rule.stateText)}</span>\n              <span className=\"alert-rule-item__time\"> for {rule.stateAge}</span>\n            </div>\n          </div>\n          {rule.info && <div className=\"small muted alert-rule-item__info\">{this.renderText(rule.info)}</div>}\n        </div>\n\n        <div className=\"alert-rule-item__actions\">\n          <button\n            className=\"btn btn-small btn-inverse alert-list__btn width-2\"\n            title=\"Pausing an alert rule prevents it from executing\"\n            onClick={onTogglePause}\n          >\n            <i className={iconClassName} />\n          </button>\n          <a className=\"btn btn-small btn-inverse alert-list__btn width-2\" href={ruleUrl} title=\"Edit alert rule\">\n            <i className=\"gicon gicon-cog\" />\n          </a>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default AlertRuleItem;\n","import { AlertRulesState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: AlertRulesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.items.filter(item => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info);\n  });\n};\n"],"sourceRoot":""}