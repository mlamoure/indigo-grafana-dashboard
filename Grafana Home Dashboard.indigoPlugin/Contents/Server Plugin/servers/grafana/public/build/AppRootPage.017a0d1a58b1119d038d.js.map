{"version":3,"sources":["webpack:///./public/app/features/plugins/AppRootPage.tsx"],"names":["getAppPluginPageError","meta","type","PluginType","app","enabled","AppRootPage","props","onNavChanged","nav","setState","state","loading","getLoadingNav","pluginId","this","getPluginSettings","then","info","error","appEvents","emit","AppEvents","alertError","getWarningNav","importAppPlugin","plugin","getNotFoundNav","path","query","root","navModel","Contents","isLoading","Component","hot","module","connect","location","routeParams","slug"],"mappings":"0sCA4BO,SAASA,EAAsBC,GACpC,OAAKA,EAGDA,EAAKC,OAASC,aAAWC,IACpB,wBAEJH,EAAKI,QAGH,KAFE,0BANA,iB,IAWLC,E,YACJ,WAAYC,GAAc,a,4FAAA,UACxB,wBAAMA,KA0BRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAED,SA1BhB,EAAKE,MAAQ,CACXC,SAAS,EACTH,IAAKI,2BAJiB,E,mbAShBC,EAAaC,KAAKR,MAAlBO,S,kBAGYE,YAAkBF,GAAUG,MAAK,SAAAC,GACjD,IAAMC,EAAQnB,EAAsBkB,GACpC,OAAIC,GACFC,IAAUC,KAAKC,YAAUC,WAAY,CAACJ,IACtC,EAAKT,SAAS,CAAED,IAAKe,YAAcL,KAC5B,MAEFM,YAAgBP,M,OAPnBd,E,OASNW,KAAKL,SAAS,CAAEgB,OAAQtB,EAAKQ,SAAS,I,gDAEtCG,KAAKL,SAAS,CAAEgB,OAAQ,KAAMd,SAAS,EAAOH,IAAKkB,gB,oTAQ9C,MACiBZ,KAAKR,MAArBqB,EADD,EACCA,KAAMC,EADP,EACOA,MADP,EAE0Bd,KAAKJ,MAA9BC,EAFD,EAECA,QAASc,EAFV,EAEUA,OAAQjB,EAFlB,EAEkBA,IAEzB,OAAIiB,IAAWA,EAAOI,KAEb,4CAIP,kBAAC,IAAD,CAAMC,SAAUtB,GACd,kBAAC,IAAKuB,SAAN,CAAeC,UAAWrB,IACtBA,GAAWc,GACX,kBAACA,EAAOI,KAAR,CAAa7B,KAAMyB,EAAOzB,KAAM4B,MAAOA,EAAOD,KAAMA,EAAMpB,aAAcO,KAAKP,sB,8BA7C/D0B,aA4DXC,wBAAIC,EAAJD,CAAYE,mBAPH,SAAC1B,GAAD,MAAwB,CAC9CG,SAAUH,EAAM2B,SAASC,YAAYzB,SACrC0B,KAAM7B,EAAM2B,SAASC,YAAYC,KACjCX,MAAOlB,EAAM2B,SAAST,MACtBD,KAAMjB,EAAM2B,SAASV,QAGIS,CAAyB/B,K","file":"AppRootPage.017a0d1a58b1119d038d.js","sourcesContent":["// Libraries\nimport React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n// Types\nimport { StoreState } from 'app/types';\nimport { AppEvents, AppPlugin, AppPluginMeta, NavModel, PluginType, UrlQueryMap } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin } from './plugin_loader';\nimport { getLoadingNav } from './PluginPage';\nimport { getNotFoundNav, getWarningNav } from 'app/core/nav_model_srv';\nimport { appEvents } from 'app/core/core';\n\ninterface Props {\n  pluginId: string; // From the angular router\n  query: UrlQueryMap;\n  path: string;\n  slug?: string;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: AppPlugin;\n  nav: NavModel;\n}\n\nexport function getAppPluginPageError(meta: AppPluginMeta) {\n  if (!meta) {\n    return 'Unknown Plugin';\n  }\n  if (meta.type !== PluginType.app) {\n    return 'Plugin must be an app';\n  }\n  if (!meta.enabled) {\n    return 'Application Not Enabled';\n  }\n  return null;\n}\n\nclass AppRootPage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nav: getLoadingNav(),\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId } = this.props;\n\n    try {\n      const app = await getPluginSettings(pluginId).then(info => {\n        const error = getAppPluginPageError(info);\n        if (error) {\n          appEvents.emit(AppEvents.alertError, [error]);\n          this.setState({ nav: getWarningNav(error) });\n          return null;\n        }\n        return importAppPlugin(info);\n      });\n      this.setState({ plugin: app, loading: false });\n    } catch (err) {\n      this.setState({ plugin: null, loading: false, nav: getNotFoundNav() });\n    }\n  }\n\n  onNavChanged = (nav: NavModel) => {\n    this.setState({ nav });\n  };\n\n  render() {\n    const { path, query } = this.props;\n    const { loading, plugin, nav } = this.state;\n\n    if (plugin && !plugin.root) {\n      // TODO? redirect to plugin page?\n      return <div>No Root App</div>;\n    }\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {!loading && plugin && (\n            <plugin.root meta={plugin.meta} query={query} path={path} onNavChanged={this.onNavChanged} />\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  slug: state.location.routeParams.slug,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(AppRootPage));\n"],"sourceRoot":""}