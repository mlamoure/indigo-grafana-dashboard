{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Stats.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Dimensions.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Forms.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Alias.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/QueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.tsx"],"names":["ConfigEditor_ConfigEditor","_super","ConfigEditor","props","_this","call","this","updateDatasource","config","Object","tslib_es6","j","jsonData","length","k","secureJsonData","onOptionsChange","onAuthProviderChange","authType","state","value","onRegionChange","defaultRegion","onResetAccessKey","secureJsonFields","accessKey","onAccessKeyChange","onResetSecretKey","secretKey","onSecretKeyChange","onCredentialProfileNameChange","database","onArnAssumeRoleChange","assumeRoleArn","onCustomMetricsNamespacesChange","customMetricsNamespaces","options","defaults","authProviderOptions","label","regions","getDerivedStateFromProps","prototype","componentDidMount","loadRegions","datasource_srv","loadDatasource","name","then","ds","getRegions","setState","map","region","text","err","render","_a","react_default","a","createElement","Fragment","className","grafana_ui_src","find","authProvider","defaultValue","onChange","tooltip","placeholder","event","target","disabled","variant","type","onClick","timeField","hasOwnProperty","react","removeOption","Stats","stats","values","variableOptionGroup","index","allowCustomValue","key","filter","_","i","v","Component","includes","Dimensions_removeOption","Dimensions","dimensions","loadValues","loadKeys","_b","data","setData","completeDimensions","entries","reduce","res","_c","isEqual_default","excludeUsedKeys","keys","loadOptions","newKey","newDimensions","newValue","every","QueryField","children","width","QueryInlineField","Alias","alias","setAlias","propagateOnChange","lodash","e","idValidationEvents","QueryEditor_a","onBlur","rule","RegExp","test","errorMessage","QueryEditor_QueryEditor","QueryEditor","apply","arguments","namespaces","metricNames","showMeta","loadMetricNames","query","namespace","datasource","metricFindQuery","appendTemplateVariables","variables","toOption","componentWillMount","metricName","expression","id","statistics","matchExact","Promise","all","onRunQuery","metaDataExist","standardStatistics","getDimensionKeys","getDimensionValues","validationEvents","period","labelClass","checked","series","meta","gmdMeta","ID","Expression","ThrottlingErrorMessage","href","memoizedDebounce","func","wait","mem","args","_i","leading","JSON","stringify","displayAlert","datasourceName","store","dispatch","actions","appNotification","displayCustomError","title","message","CloudWatchDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","proxyUrl","url","debouncedAlert","types","Error","$inject","angular_default","copy","queries","lodash_default","targets","item","hide","isEmpty","replace","getActualRegion","scopedVars","convertDimensionFormat","stat","String","getPeriod","some","s","indexOf","matches","exec","extend","refId","intervalMs","maxDataPoints","datasourceId","d","defer","resolve","promise","request","from","range","valueOf","toString","to","performTimeSeriesQuery","configurable","now","start","convertToCloudWatchTime","Math","round","Date","parseInt","kbn","interval_to_seconds","daySec","buildCloudwatchConsoleUrl","end","conf","view","stacked","isSearchExpression","metrics","acc","encodeURIComponent","awsRequest","results","queryRequest","error","queryResult","link","toISOString","e_1","points","dataFrame","src","datapoints","fields","_d","next","done","links","targetBlank","catch","failedRedIds_1","forEach","transformSuggestDataFromTable","suggestData","tables","rows","doMetricQueryRequest","subtype","parameters","timeRange","r","getNamespaces","trim","dimensionKey","filterDimensions","sent","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filters","getResourceARNs","resourceType","tags","match","metricNameQuery","getMetrics","dimensionKeysQuery","dimensionValuesQuery","filterJson","parse","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","resourceARNsQuery","tagsJSON","annotationQuery","annotation","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","time","targetContainsTemplate","variableExists","testDatasource","status","method","datasourceRequest","result","getDefaultRegion","date","roundUp","isString","_e","_f","Array","isArray","getVariableName","valueVar","multi","split","displayErrorIfIsMultiTemplateVariable","fieldName","variable","debouncedCustomAlert","__webpack_require__","__webpack_exports__","module_plugin","CloudWatchAnnotationsQueryCtrl","templateUrl","cloudwatch_datasource","setConfigEditor","setQueryEditor"],"mappings":"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","file":"cloudwatchPlugin.fabf58cbd84a6ac3523b.js","sourcesContent":["import React, { PureComponent, ChangeEvent } from 'react';\nimport { FormLabel, Select, Input, Button } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { SelectableValue } from '@grafana/data';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport CloudWatchDatasource from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData>;\n\ntype CloudwatchSettings = DataSourceSettings<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport interface State {\n  config: CloudwatchSettings;\n  authProviderOptions: SelectableValue[];\n  regions: SelectableValue[];\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = this.props;\n\n    this.state = {\n      config: ConfigEditor.defaults(options),\n      authProviderOptions: [\n        { label: 'Access & secret key', value: 'keys' },\n        { label: 'Credentials file', value: 'credentials' },\n        { label: 'ARN', value: 'arn' },\n      ],\n      regions: [],\n    };\n\n    this.updateDatasource(this.state.config);\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: ConfigEditor.defaults(props.options),\n    };\n  }\n\n  static defaults = (options: any) => {\n    options.jsonData.authType = options.jsonData.authType || 'credentials';\n    options.jsonData.timeField = options.jsonData.timeField || '@timestamp';\n\n    if (!options.hasOwnProperty('secureJsonData')) {\n      options.secureJsonData = {};\n    }\n\n    if (!options.hasOwnProperty('jsonData')) {\n      options.jsonData = {};\n    }\n\n    if (!options.hasOwnProperty('secureJsonFields')) {\n      options.secureJsonFields = {};\n    }\n\n    return options;\n  };\n\n  async componentDidMount() {\n    this.loadRegions();\n  }\n\n  loadRegions() {\n    getDatasourceSrv()\n      .loadDatasource(this.state.config.name)\n      .then((ds: CloudWatchDatasource) => {\n        return ds.getRegions();\n      })\n      .then(\n        (regions: any) => {\n          this.setState({\n            regions: regions.map((region: any) => {\n              return {\n                value: region.value,\n                label: region.text,\n              };\n            }),\n          });\n        },\n        (err: any) => {\n          const regions = [\n            'ap-east-1',\n            'ap-northeast-1',\n            'ap-northeast-2',\n            'ap-northeast-3',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'ca-central-1',\n            'cn-north-1',\n            'cn-northwest-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'me-south-1',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-gov-east-1',\n            'us-gov-west-1',\n            'us-iso-east-1',\n            'us-isob-east-1',\n            'us-west-1',\n            'us-west-2',\n          ];\n\n          this.setState({\n            regions: regions.map((region: string) => {\n              return {\n                value: region,\n                label: region,\n              };\n            }),\n          });\n\n          // expected to fail when creating new datasource\n          // console.error('failed to get latest regions', err);\n        }\n      );\n  }\n\n  updateDatasource = async (config: any) => {\n    for (const j in config.jsonData) {\n      if (config.jsonData[j].length === 0) {\n        delete config.jsonData[j];\n      }\n    }\n\n    for (const k in config.secureJsonData) {\n      if (config.secureJsonData[k].length === 0) {\n        delete config.secureJsonData[k];\n      }\n    }\n\n    this.props.onOptionsChange({\n      ...config,\n    });\n  };\n\n  onAuthProviderChange = (authType: SelectableValue<string>) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        authType: authType.value,\n      },\n    });\n  };\n\n  onRegionChange = (defaultRegion: SelectableValue<string>) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        defaultRegion: defaultRegion.value,\n      },\n    });\n  };\n\n  onResetAccessKey = () => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        accessKey: false,\n      },\n    });\n  };\n\n  onAccessKeyChange = (accessKey: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        accessKey,\n      },\n    });\n  };\n\n  onResetSecretKey = () => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        secretKey: false,\n      },\n    });\n  };\n\n  onSecretKeyChange = (secretKey: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        secretKey,\n      },\n    });\n  };\n\n  onCredentialProfileNameChange = (database: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      database,\n    });\n  };\n\n  onArnAssumeRoleChange = (assumeRoleArn: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        assumeRoleArn,\n      },\n    });\n  };\n\n  onCustomMetricsNamespacesChange = (customMetricsNamespaces: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        customMetricsNamespaces,\n      },\n    });\n  };\n\n  render() {\n    const { config, authProviderOptions, regions } = this.state;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">CloudWatch Details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\">Auth Provider</FormLabel>\n              <Select\n                className=\"width-30\"\n                value={authProviderOptions.find(authProvider => authProvider.value === config.jsonData.authType)}\n                options={authProviderOptions}\n                defaultValue={config.jsonData.authType}\n                onChange={this.onAuthProviderChange}\n              />\n            </div>\n          </div>\n          {config.jsonData.authType === 'credentials' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel\n                  className=\"width-14\"\n                  tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n                >\n                  Credentials Profile Name\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"default\"\n                    value={config.jsonData.database}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                      this.onCredentialProfileNameChange(event.target.value)\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {config.jsonData.authType === 'keys' && (\n            <div>\n              {config.secureJsonFields.accessKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button variant=\"secondary\" type=\"button\" onClick={this.onResetAccessKey}>\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={config.secureJsonData.accessKey || ''}\n                        onChange={(event: ChangeEvent<HTMLInputElement>) => this.onAccessKeyChange(event.target.value)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n              {config.secureJsonFields.secretKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button variant=\"secondary\" type=\"button\" onClick={this.onResetSecretKey}>\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={config.secureJsonData.secretKey || ''}\n                        onChange={(event: ChangeEvent<HTMLInputElement>) => this.onSecretKeyChange(event.target.value)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          {config.jsonData.authType === 'arn' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-14\" tooltip=\"ARN of Assume Role\">\n                  Assume Role ARN\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"arn:aws:iam:*\"\n                    value={config.jsonData.assumeRoleArn || ''}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => this.onArnAssumeRoleChange(event.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel\n                className=\"width-14\"\n                tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n              >\n                Default Region\n              </FormLabel>\n              <Select\n                className=\"width-30\"\n                value={regions.find(region => region.value === config.jsonData.defaultRegion)}\n                options={regions}\n                defaultValue={config.jsonData.defaultRegion}\n                onChange={this.onRegionChange}\n              />\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\" tooltip=\"Namespaces of Custom Metrics.\">\n                Custom Metrics\n              </FormLabel>\n              <Input\n                className=\"width-30\"\n                placeholder=\"Namespace1,Namespace2\"\n                value={config.jsonData.customMetricsNamespaces || ''}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  this.onCustomMetricsNamespacesChange(event.target.value)\n                }\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { FunctionComponent } from 'react';\nimport { SelectableStrings } from '../types';\nimport { SelectableValue } from '@grafana/data';\nimport { Segment } from '@grafana/ui';\n\nexport interface Props {\n  values: string[];\n  onChange: (values: string[]) => void;\n  variableOptionGroup: SelectableValue<string>;\n  stats: SelectableStrings;\n}\n\nconst removeText = '-- remove stat --';\nconst removeOption: SelectableValue<string> = { label: removeText, value: removeText };\n\nexport const Stats: FunctionComponent<Props> = ({ stats, values, onChange, variableOptionGroup }) => (\n  <>\n    {values &&\n      values.map((value, index) => (\n        <Segment\n          allowCustomValue\n          key={value + index}\n          value={value}\n          options={[removeOption, ...stats, variableOptionGroup]}\n          onChange={value =>\n            onChange(\n              value === removeText\n                ? values.filter((_, i) => i !== index)\n                : values.map((v, i) => (i === index ? value : v))\n            )\n          }\n        />\n      ))}\n    {values.length !== stats.length && (\n      <Segment\n        Component={\n          <a className=\"gf-form-label query-part\">\n            <i className=\"fa fa-plus\" />\n          </a>\n        }\n        allowCustomValue\n        onChange={(value: string) => onChange([...values, value])}\n        options={[...stats.filter(({ value }) => !values.includes(value)), variableOptionGroup]}\n      />\n    )}\n  </>\n);\n","import React, { FunctionComponent, Fragment, useState, useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { SelectableValue } from '@grafana/data';\nimport { SegmentAsync } from '@grafana/ui';\nimport { SelectableStrings } from '../types';\n\nexport interface Props {\n  dimensions: { [key: string]: string | string[] };\n  onChange: (dimensions: { [key: string]: string }) => void;\n  loadValues: (key: string) => Promise<SelectableStrings>;\n  loadKeys: () => Promise<SelectableStrings>;\n}\n\nconst removeText = '-- remove dimension --';\nconst removeOption: SelectableValue<string> = { label: removeText, value: removeText };\n\n// The idea of this component is that is should only trigger the onChange event in the case\n// there is a complete dimension object. E.g, when a new key is added is doesn't have a value.\n// That should not trigger onChange.\nexport const Dimensions: FunctionComponent<Props> = ({ dimensions, loadValues, loadKeys, onChange }) => {\n  const [data, setData] = useState(dimensions);\n\n  useEffect(() => {\n    const completeDimensions = Object.entries(data).reduce(\n      (res, [key, value]) => (value ? { ...res, [key]: value } : res),\n      {}\n    );\n    if (!isEqual(completeDimensions, dimensions)) {\n      onChange(completeDimensions);\n    }\n  }, [data]);\n\n  const excludeUsedKeys = (options: SelectableStrings) => {\n    return options.filter(({ value }) => !Object.keys(data).includes(value));\n  };\n\n  return (\n    <>\n      {Object.entries(data).map(([key, value], index) => (\n        <Fragment key={index}>\n          <SegmentAsync\n            allowCustomValue\n            value={key}\n            loadOptions={() => loadKeys().then(keys => [removeOption, ...excludeUsedKeys(keys)])}\n            onChange={newKey => {\n              const { [key]: value, ...newDimensions } = data;\n              if (newKey === removeText) {\n                setData({ ...newDimensions });\n              } else {\n                setData({ ...newDimensions, [newKey]: '' });\n              }\n            }}\n          />\n          <label className=\"gf-form-label query-segment-operator\">=</label>\n          <SegmentAsync\n            allowCustomValue\n            value={value || 'select dimension value'}\n            loadOptions={() => loadValues(key)}\n            onChange={newValue => setData({ ...data, [key]: newValue })}\n          />\n          {Object.values(data).length > 1 && index + 1 !== Object.values(data).length && (\n            <label className=\"gf-form-label query-keyword\">AND</label>\n          )}\n        </Fragment>\n      ))}\n      {Object.values(data).every(v => v) && (\n        <SegmentAsync\n          allowCustomValue\n          Component={\n            <a className=\"gf-form-label query-part\">\n              <i className=\"fa fa-plus\" />\n            </a>\n          }\n          loadOptions={() => loadKeys().then(excludeUsedKeys)}\n          onChange={(newKey: string) => setData({ ...data, [newKey]: '' })}\n        />\n      )}\n    </>\n  );\n};\n","import React, { InputHTMLAttributes, FunctionComponent } from 'react';\nimport { FormLabel } from '@grafana/ui';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: string;\n  children?: React.ReactNode;\n}\n\nexport const QueryField: FunctionComponent<Partial<Props>> = ({ label, tooltip, children }) => (\n  <>\n    <FormLabel width={8} className=\"query-keyword\" tooltip={tooltip}>\n      {label}\n    </FormLabel>\n    {children}\n  </>\n);\n\nexport const QueryInlineField: FunctionComponent<Props> = ({ ...props }) => {\n  return (\n    <div className={'gf-form-inline'}>\n      <QueryField {...props} />\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\" />\n      </div>\n    </div>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { debounce } from 'lodash';\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (alias: any) => void;\n  value: string;\n}\n\nexport const Alias: FunctionComponent<Props> = ({ value = '', onChange }) => {\n  const [alias, setAlias] = useState(value);\n\n  const propagateOnChange = debounce(onChange, 1500);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return <Input type=\"text\" className=\"gf-form-input width-16\" value={alias} onChange={onChange} />;\n};\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { SelectableValue, QueryEditorProps } from '@grafana/data';\nimport { Input, Segment, SegmentAsync, ValidationEvents, EventsWithValidation, Switch } from '@grafana/ui';\nimport { CloudWatchQuery } from '../types';\nimport CloudWatchDatasource from '../datasource';\nimport { SelectableStrings } from '../types';\nimport { Stats, Dimensions, QueryInlineField, QueryField, Alias } from './';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery>;\n\ninterface State {\n  regions: SelectableStrings;\n  namespaces: SelectableStrings;\n  metricNames: SelectableStrings;\n  variableOptionGroup: SelectableValue<string>;\n  showMeta: boolean;\n}\n\nconst idValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: value => new RegExp(/^$|^[a-z][a-zA-Z0-9_]*$/).test(value),\n      errorMessage: 'Invalid format. Only alphanumeric characters and underscores are allowed',\n    },\n  ],\n};\n\nexport class QueryEditor extends PureComponent<Props, State> {\n  state: State = { regions: [], namespaces: [], metricNames: [], variableOptionGroup: {}, showMeta: false };\n\n  componentWillMount() {\n    const { query } = this.props;\n\n    if (!query.namespace) {\n      query.namespace = '';\n    }\n\n    if (!query.metricName) {\n      query.metricName = '';\n    }\n\n    if (!query.expression) {\n      query.expression = '';\n    }\n\n    if (!query.dimensions) {\n      query.dimensions = {};\n    }\n\n    if (!query.region) {\n      query.region = 'default';\n    }\n\n    if (!query.id) {\n      query.id = '';\n    }\n\n    if (!query.alias) {\n      query.alias = '';\n    }\n\n    if (!query.statistics || !query.statistics.length) {\n      query.statistics = ['Average'];\n    }\n\n    if (!query.hasOwnProperty('matchExact')) {\n      query.matchExact = true;\n    }\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: this.props.datasource.variables.map(this.toOption),\n    };\n    Promise.all([datasource.metricFindQuery('regions()'), datasource.metricFindQuery('namespaces()')]).then(\n      ([regions, namespaces]) => {\n        this.setState({\n          ...this.state,\n          regions: [...regions, variableOptionGroup],\n          namespaces: [...namespaces, variableOptionGroup],\n          variableOptionGroup,\n        });\n      }\n    );\n  }\n\n  loadMetricNames = async () => {\n    const { namespace, region } = this.props.query;\n    return this.props.datasource.metricFindQuery(`metrics(${namespace},${region})`).then(this.appendTemplateVariables);\n  };\n\n  appendTemplateVariables = (values: SelectableValue[]) => [\n    ...values,\n    { label: 'Template Variables', options: this.props.datasource.variables.map(this.toOption) },\n  ];\n\n  toOption = (value: any) => ({ label: value, value });\n\n  onChange(query: CloudWatchQuery) {\n    const { onChange, onRunQuery } = this.props;\n    onChange(query);\n    onRunQuery();\n  }\n\n  render() {\n    const { query, datasource, onChange, onRunQuery, data } = this.props;\n    const { regions, namespaces, variableOptionGroup: variableOptionGroup, showMeta } = this.state;\n    const metaDataExist = data && Object.values(data).length && data.state === 'Done';\n    return (\n      <>\n        <QueryInlineField label=\"Region\">\n          <Segment\n            value={query.region || 'Select region'}\n            options={regions}\n            allowCustomValue\n            onChange={region => this.onChange({ ...query, region })}\n          />\n        </QueryInlineField>\n\n        {query.expression.length === 0 && (\n          <>\n            <QueryInlineField label=\"Namespace\">\n              <Segment\n                value={query.namespace || 'Select namespace'}\n                allowCustomValue\n                options={namespaces}\n                onChange={namespace => this.onChange({ ...query, namespace })}\n              />\n            </QueryInlineField>\n\n            <QueryInlineField label=\"Metric Name\">\n              <SegmentAsync\n                value={query.metricName || 'Select metric name'}\n                allowCustomValue\n                loadOptions={this.loadMetricNames}\n                onChange={metricName => this.onChange({ ...query, metricName })}\n              />\n            </QueryInlineField>\n\n            <QueryInlineField label=\"Stats\">\n              <Stats\n                stats={datasource.standardStatistics.map(this.toOption)}\n                values={query.statistics}\n                onChange={statistics => this.onChange({ ...query, statistics })}\n                variableOptionGroup={variableOptionGroup}\n              />\n            </QueryInlineField>\n\n            <QueryInlineField label=\"Dimensions\">\n              <Dimensions\n                dimensions={query.dimensions}\n                onChange={dimensions => this.onChange({ ...query, dimensions })}\n                loadKeys={() =>\n                  datasource.getDimensionKeys(query.namespace, query.region).then(this.appendTemplateVariables)\n                }\n                loadValues={newKey => {\n                  const { [newKey]: value, ...newDimensions } = query.dimensions;\n                  return datasource\n                    .getDimensionValues(query.region, query.namespace, query.metricName, newKey, newDimensions)\n                    .then(this.appendTemplateVariables);\n                }}\n              />\n            </QueryInlineField>\n          </>\n        )}\n        {query.statistics.length <= 1 && (\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <QueryField\n                className=\"query-keyword\"\n                label=\"Id\"\n                tooltip=\"Id can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n              >\n                <Input\n                  className=\"gf-form-input width-8\"\n                  onBlur={onRunQuery}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, id: event.target.value })}\n                  validationEvents={idValidationEvents}\n                  value={query.id || ''}\n                />\n              </QueryField>\n            </div>\n            <div className=\"gf-form gf-form--grow\">\n              <QueryField\n                className=\"gf-form--grow\"\n                label=\"Expression\"\n                tooltip=\"Optionally you can add an expression here. Please note that if a math expression that is referencing other queries is being used, it will not be possible to create an alert rule based on this query\"\n              >\n                <Input\n                  className=\"gf-form-input\"\n                  onBlur={onRunQuery}\n                  value={query.expression || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                    onChange({ ...query, expression: event.target.value })\n                  }\n                />\n              </QueryField>\n            </div>\n          </div>\n        )}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <QueryField className=\"query-keyword\" label=\"Period\" tooltip=\"Minimum interval between points in seconds\">\n              <Input\n                className=\"gf-form-input width-8\"\n                value={query.period || ''}\n                placeholder=\"auto\"\n                onBlur={onRunQuery}\n                onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, period: event.target.value })}\n              />\n            </QueryField>\n          </div>\n          <div className=\"gf-form\">\n            <QueryField\n              className=\"query-keyword\"\n              label=\"Alias\"\n              tooltip=\"Alias replacement variables: {{metric}}, {{stat}}, {{namespace}}, {{region}}, {{period}}, {{label}}, {{YOUR_DIMENSION_NAME}}\"\n            >\n              <Alias value={query.alias} onChange={(value: string) => this.onChange({ ...query, alias: value })} />\n            </QueryField>\n            <Switch\n              label=\"Match Exact\"\n              labelClass=\"query-keyword\"\n              tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n              checked={query.matchExact}\n              onChange={() => this.onChange({ ...query, matchExact: !query.matchExact })}\n            />\n            <label className=\"gf-form-label\">\n              <a\n                onClick={() =>\n                  metaDataExist &&\n                  this.setState({\n                    ...this.state,\n                    showMeta: !showMeta,\n                  })\n                }\n              >\n                <i className={`fa fa-caret-${showMeta ? 'down' : 'right'}`} /> {showMeta ? 'Hide' : 'Show'} Query\n                Preview\n              </a>\n            </label>\n          </div>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n          {showMeta && metaDataExist && (\n            <table className=\"filter-table form-inline\">\n              <thead>\n                <tr>\n                  <th>Metric Data Query ID</th>\n                  <th>Metric Data Query Expression</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {data.series[0].meta.gmdMeta.map(({ ID, Expression }: any) => (\n                  <tr key={ID}>\n                    <td>{ID}</td>\n                    <td>{Expression}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://grafana.com/docs/features/datasources/cloudwatch/#service-quotas`}\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import React from 'react';\nimport angular, { IQService } from 'angular';\nimport _ from 'lodash';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { AppNotificationTimeout } from 'app/types';\nimport { store } from 'app/store/store';\nimport kbn from 'app/core/utils/kbn';\nimport {\n  dateMath,\n  ScopedVars,\n  toDataFrame,\n  TimeRange,\n  DataSourceApi,\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport memoizedDebounce from './memoizedDebounce';\nimport { CloudWatchQuery, CloudWatchJsonData } from './types';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport default class CloudWatchDatasource extends DataSourceApi<CloudWatchQuery, CloudWatchJsonData> {\n  type: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  standardStatistics: any;\n  datasourceName: string;\n  debouncedAlert: (datasourceName: string, region: string) => void;\n  debouncedCustomAlert: (title: string, message: string) => void;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private $q: IQService,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.type = 'cloudwatch';\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n    this.debouncedAlert = memoizedDebounce(displayAlert, AppNotificationTimeout.Error);\n    this.debouncedCustomAlert = memoizedDebounce(displayCustomError, AppNotificationTimeout.Error);\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>) {\n    options = angular.copy(options);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.replace(this.getActualRegion(item.region), options.scopedVars, true, 'region');\n      item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\n      item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.statistics = item.statistics.map(stat => this.replace(stat, options.scopedVars, true, 'statistics'));\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.replace(item.id, options.scopedVars, true, 'id');\n      item.expression = this.replace(item.expression, options.scopedVars, true, 'expression');\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        if (s.indexOf('p') === 0) {\n          const matches = /^p\\d{2}(?:\\.\\d{1,2})?$/.exec(s);\n          return !matches || matches[0] !== s;\n        }\n\n        return false;\n      });\n\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  }\n\n  get variables() {\n    return this.templateSrv.variables.map(v => `$${v.name}`);\n  }\n\n  getPeriod(target: any, options: any, now?: number) {\n    const start = this.convertToCloudWatchTime(options.range.from, false);\n    now = Math.round((now || Date.now()) / 1000);\n\n    let period;\n    const hourSec = 60 * 60;\n    const daySec = hourSec * 24;\n    if (!target.period) {\n      if (now - start <= daySec * 15) {\n        // until 15 days ago\n        if (target.namespace === 'AWS/EC2') {\n          period = 300;\n        } else {\n          period = 60;\n        }\n      } else if (now - start <= daySec * 63) {\n        // until 63 days ago\n        period = 60 * 5;\n      } else if (now - start <= daySec * 455) {\n        // until 455 days ago\n        period = 60 * 60;\n      } else {\n        // over 455 days, should return error, but try to long period\n        period = 60 * 60;\n      }\n    } else {\n      period = this.templateSrv.replace(target.period, options.scopedVars);\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = kbn.interval_to_seconds(period);\n      }\n    }\n    if (period < 1) {\n      period = 1;\n    }\n\n    return period;\n  }\n\n  buildCloudwatchConsoleUrl(\n    { region, namespace, metricName, dimensions, statistics, period, expression }: CloudWatchQuery,\n    start: string,\n    end: string,\n    title: string,\n    gmdMeta: Array<{ Expression: string }>\n  ) {\n    region = this.getActualRegion(region);\n    let conf = {\n      view: 'timeSeries',\n      stacked: false,\n      title,\n      start,\n      end,\n      region,\n    } as any;\n\n    const isSearchExpression =\n      gmdMeta && gmdMeta.length && gmdMeta.every(({ Expression: expression }) => /SEARCH().*/.test(expression));\n    const isMathExpression = !isSearchExpression && expression;\n\n    if (isMathExpression) {\n      return '';\n    }\n\n    if (isSearchExpression) {\n      const metrics: any =\n        gmdMeta && gmdMeta.length ? gmdMeta.map(({ Expression: expression }) => ({ expression })) : [{ expression }];\n      conf = { ...conf, metrics };\n    } else {\n      conf = {\n        ...conf,\n        metrics: [\n          ...statistics.map(stat => [\n            namespace,\n            metricName,\n            ...Object.entries(dimensions).reduce((acc, [key, value]) => [...acc, key, value[0]], []),\n            {\n              stat,\n              period,\n            },\n          ]),\n        ],\n      };\n    }\n\n    return `https://${region}.console.aws.amazon.com/cloudwatch/deeplink.js?region=${region}#metricsV2:graph=${encodeURIComponent(\n      JSON.stringify(conf)\n    )}`;\n  }\n\n  performTimeSeriesQuery(request: any, { from, to }: TimeRange) {\n    return this.awsRequest('/api/tsdb/query', request)\n      .then((res: any) => {\n        if (!res.results) {\n          return { data: [] };\n        }\n        return Object.values(request.queries).reduce(\n          ({ data, error }: any, queryRequest: any) => {\n            const queryResult = res.results[queryRequest.refId];\n            if (!queryResult) {\n              return { data, error };\n            }\n\n            const link = this.buildCloudwatchConsoleUrl(\n              queryRequest,\n              from.toISOString(),\n              to.toISOString(),\n              queryRequest.refId,\n              queryResult.meta.gmdMeta\n            );\n\n            return {\n              error: error || queryResult.error ? { message: queryResult.error } : null,\n              data: [\n                ...data,\n                ...queryResult.series.map(({ name, points }: any) => {\n                  const dataFrame = toDataFrame({\n                    target: name,\n                    datapoints: points,\n                    refId: queryRequest.refId,\n                    meta: queryResult.meta,\n                  });\n                  if (link) {\n                    for (const field of dataFrame.fields) {\n                      field.config.links = [\n                        {\n                          url: link,\n                          title: 'View in CloudWatch console',\n                          targetBlank: true,\n                        },\n                      ];\n                    }\n                  }\n                  return dataFrame;\n                }),\n              ],\n            };\n          },\n          { data: [], error: null }\n        );\n      })\n      .catch((err: any = { data: { error: '' } }) => {\n        if (/^Throttling:.*/.test(err.data.message)) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }: CloudWatchQuery) =>\n              !failedRedIds.includes(refId) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n\n          regionsAffected.forEach(region => this.debouncedAlert(this.datasourceName, this.getActualRegion(region)));\n        }\n\n        if (err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.data.message = err.data.error;\n        }\n\n        throw err;\n      });\n  }\n\n  transformSuggestDataFromTable(suggestData: any) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n        label: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype: any, parameters: any) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null).then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  async getMetrics(namespace: string, region: string) {\n    if (!namespace || !region) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionKeys(namespace: string, region: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string,\n    metricName: string,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n\n    return values.length ? [{ value: '*', text: '*', label: '*' }, ...values] : values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricQueryRequest('resource_arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: tags,\n    });\n  }\n\n  async metricFindQuery(query: string) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (resourceARNsQuery) {\n      region = resourceARNsQuery[1];\n      const resourceType = resourceARNsQuery[2];\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\n      return this.getResourceARNs(region, resourceType, tagsJSON);\n    }\n\n    const statsQuery = query.match(/^statistics\\(\\)/);\n    if (statsQuery) {\n      return this.standardStatistics.map((s: string) => ({ value: s, label: s, text: s }));\n    }\n\n    return this.$q.when([]);\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    // use billing metrics for test\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  awsRequest(url: string, data: any) {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n    };\n\n    return this.backendSrv.datasourceRequest(options).then((result: any) => {\n      return result.data;\n    });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region: string) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: { [key: string]: string | string[] }, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      const valueVar = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(value));\n      if (valueVar) {\n        if (valueVar.multi) {\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n          return { ...result, [key]: values };\n        }\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\n      }\n\n      return { ...result, [key]: [value] };\n    }, {});\n  }\n\n  replace(target: string, scopedVars: ScopedVars, displayErrorIfIsMultiTemplateVariable?: boolean, fieldName?: string) {\n    if (displayErrorIfIsMultiTemplateVariable) {\n      const variable = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && variable.multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nclass CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\n"],"sourceRoot":""}