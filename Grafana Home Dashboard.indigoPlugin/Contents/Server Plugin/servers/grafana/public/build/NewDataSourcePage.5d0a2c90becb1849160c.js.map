{"version":3,"sources":["webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/features/datasources/state/selectors.ts"],"names":["NewDataSourcePage","_super","_this","apply","this","arguments","categoryInfoList","id","title","sortingRules","prometheus","graphite","loki","mysql","postgres","gcloud","onDataSourceTypeClicked","plugin","props","addDataSource","onSearchQueryChange","value","setDataSourceTypeSearchQuery","onLearnMoreClick","evt","stopPropagation","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","loadDataSourceTypes","searchInput","focus","renderTypes","types","sort","a","b","aSort","bSort","name","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","_grafana_ui__WEBPACK_IMPORTED_MODULE_8__","items","getItemKey","item","toString","renderItem","DataSourceTypeCard","onClick","renderGroupedList","dataSourceTypes","length","categories","reduce","accumulator","category","list","push","type","_grafana_data__WEBPACK_IMPORTED_MODULE_9__","datasource","module","baseUrl","info","description","logos","small","large","author","links","url","screenshots","updated","version","Fragment","map","className","key","href","target","rel","render","_a","navModel","isLoading","searchQuery","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","app_core_components_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_7__","ref","elem","labelClassName","inputClassName","onChange","placeholder","react__WEBPACK_IMPORTED_MODULE_1__","canSelect","learnMoreLink","aria-label","src","getNavModel","main","icon","text","subTitle","node","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_5__","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_2__","state","_state_selectors__WEBPACK_IMPORTED_MODULE_6__","dataSources","dataSourceTypeSearchQuery","isLoadingDataSources","__webpack_require__","d","getDataSources","getDataSourceTypes","getDataSource","getDataSourceMeta","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","regex","RegExp","filter","dataSource","test","database","dataSourceId","parseInt","dataSourceMeta","layoutMode","dataSourcesCount"],"mappings":"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","file":"NewDataSourcePage.5d0a2c90becb1849160c.js","sourcesContent":["import React, { PureComponent, FC } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { addDataSource, loadDataSourceTypes, setDataSourceTypeSearchQuery } from './state/actions';\nimport { getDataSourceTypes } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { List } from '@grafana/ui';\nimport { DataSourcePluginMeta, NavModel, PluginType } from '@grafana/data';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSourceTypes: DataSourcePluginMeta[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourceTypes: typeof loadDataSourceTypes;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\ninterface DataSourceCategories {\n  [key: string]: DataSourcePluginMeta[];\n}\n\ninterface DataSourceCategoryInfo {\n  id: string;\n  title: string;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  searchInput: HTMLElement;\n  categoryInfoList: DataSourceCategoryInfo[] = [\n    { id: 'tsdb', title: 'Time series databases' },\n    { id: 'logging', title: 'Logging & document databases' },\n    { id: 'sql', title: 'SQL' },\n    { id: 'cloud', title: 'Cloud' },\n    { id: 'other', title: 'Others' },\n  ];\n\n  sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  componentDidMount() {\n    this.props.loadDataSourceTypes();\n    this.searchInput.focus();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderTypes(types: DataSourcePluginMeta[]) {\n    if (!types) {\n      return null;\n    }\n\n    // apply custom sort ranking\n    types.sort((a, b) => {\n      const aSort = this.sortingRules[a.id] || 0;\n      const bSort = this.sortingRules[b.id] || 0;\n      if (aSort > bSort) {\n        return -1;\n      }\n      if (aSort < bSort) {\n        return 1;\n      }\n\n      return a.name > b.name ? -1 : 1;\n    });\n\n    return (\n      <List\n        items={types}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderGroupedList() {\n    const { dataSourceTypes } = this.props;\n\n    if (dataSourceTypes.length === 0) {\n      return null;\n    }\n\n    const categories = dataSourceTypes.reduce(\n      (accumulator, item) => {\n        const category = item.category || 'other';\n        const list = accumulator[category] || [];\n        list.push(item);\n        accumulator[category] = list;\n        return accumulator;\n      },\n      {} as DataSourceCategories\n    );\n\n    categories['cloud'].push(getGrafanaCloudPhantomPlugin());\n\n    return (\n      <>\n        {this.categoryInfoList.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderTypes(categories[category.id])}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <a\n            className=\"btn btn-inverse\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=new-data-source\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </a>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, dataSourceTypes } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                ref={elem => (this.searchInput = elem)}\n                labelClassName=\"gf-form--has-input-icon\"\n                inputClassName=\"gf-form-input width-30\"\n                value={searchQuery}\n                onChange={this.onSearchQueryChange}\n                placeholder=\"Filter by name or type\"\n              />\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <a className=\"btn btn-secondary\" href=\"datasources\">\n              Cancel\n            </a>\n          </div>\n          <div>\n            {searchQuery && this.renderTypes(dataSourceTypes)}\n            {!searchQuery && this.renderGroupedList()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const canSelect = plugin.id !== 'gcloud';\n  const onClick = canSelect ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0].url : null;\n\n  return (\n    <div className=\"add-data-source-item\" onClick={onClick} aria-label={`${plugin.name} datasource plugin`}>\n      <img className=\"add-data-source-item-logo\" src={plugin.info.logos.small} />\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{plugin.name}</span>\n        {plugin.info.description && <span className=\"add-data-source-item-desc\">{plugin.info.description}</span>}\n      </div>\n      <div className=\"add-data-source-item-actions\">\n        {learnMoreLink && (\n          <a\n            className=\"btn btn-inverse\"\n            href={`${learnMoreLink}?utm_source=grafana_add_ds`}\n            target=\"_blank\"\n            rel=\"noopener\"\n            onClick={onLearnMoreClick}\n          >\n            Learn more <i className=\"fa fa-external-link add-datasource-item-actions__btn-icon\" />\n          </a>\n        )}\n        {canSelect && <button className=\"btn btn-primary\">Select</button>}\n      </div>\n    </div>\n  );\n};\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: '',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'gicon gicon-add-datasources',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    dataSourceTypes: getDataSourceTypes(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourceTypes,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(NewDataSourcePage)\n);\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourceTypes = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.dataSourceTypes.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"sourceRoot":""}