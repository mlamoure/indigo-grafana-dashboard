{"version":3,"sources":["webpack:///./public/app/features/profile/state/selectors.ts","webpack:///./public/app/core/components/Animations/FadeIn.tsx","webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/core/components/Select/DataSourcePicker.tsx"],"names":["__webpack_require__","d","__webpack_exports__","getTimeZone","state","timeZone","FadeIn","props","defaultStyle","transition","duration","opacity","transitionStyles","exited","display","entering","entered","exiting","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_transition_group_Transition__WEBPACK_IMPORTED_MODULE_2___default","in","timeout","unmountOnExit","onExited","style","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","children","updateExploreUIState","exploreId","uiStateFragment","dispatch","_actionTypes__WEBPACK_IMPORTED_MODULE_10__","stateSave","addQueryRow","index","getState","queries","explore","query","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_6__","changeDatasource","datasource","_this","this","newDataSourceInstance","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_5__","get","_a","sent","currentDataSourceInstance","datasourceInstance","orgId","user","importQueries","isLive","changeRefreshInterval","_grafana_ui__WEBPACK_IMPORTED_MODULE_7__","offOption","value","loadDatasource","runQueries","changeMode","mode","changeQuery","override","refId","key","changeSize","height","width","updateTimeRange","options","syncedTimes","updateTime","app_types_explore__WEBPACK_IMPORTED_MODULE_9__","left","right","refreshInterval","clearQueries","clearOrigin","initializeExplore","datasourceName","rawRange","containerWidth","eventBridge","ui","originPanelId","app_features_profile_state_selectors__WEBPACK_IMPORTED_MODULE_11__","range","exploreDatasources","getExternal","map","ds","name","meta","length","loadExploreDatasourcesAndSetDatasource","loadDatasourceReady","instance","historyKey","id","history","app_core_store__WEBPACK_IMPORTED_MODULE_4__","getObject","set","sourceDataSource","targetDataSource","importedQueries","nextQueries","requestedDatasourceName","init","err","console","log","modifyQueries","modification","modifier","preventSubmit","exploreItemState","live","scanning","queryResponse","querySubscription","showingGraph","showingTable","minInterval","interval","queryOptions","maxDataPoints","Logs","undefined","liveStreaming","datasourceId","transaction","firstResponse","newQuerySub","_dashboard_state_runRequest__WEBPACK_IMPORTED_MODULE_15__","request","pipe","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","data","subscribe","error","nextHistory","response","_grafana_data__WEBPACK_IMPORTED_MODULE_8__","Done","series","range_1","app_core_utils_timePicker__WEBPACK_IMPORTED_MODULE_12__","absoluteRange","toRawTimeRange","from","raw","valueOf","toString","to","split","replace","urlReplaced","urlStates","leftUrlState","showingLogs","dedupStrategy","rightUrlState","_core_actions__WEBPACK_IMPORTED_MODULE_13__","config","absRange","actionRange","itemState","_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_14__","time","refresh","getTimezone","timeRangeUpdated","scanStart","setQueries","rawQueries","splitClose","itemId","splitOpen","leftState","queryState","location","urlState","slice","syncTimes","rightState","isTimeSynced","togglePanelActionCreator","actionCreator","isPanelVisible","uiFragmentStateUpdate","shouldRunQueries","type","toggleGraph","toggleTable","changeDedupStrategy","refreshExplore","initialized","update","urlRange","refreshQueries","push","initialQueries","navigateToExplore","panel","dependencies","getDataSourceSrv","getTimeSrv","getExploreUrl","openInNewWindow","datasourceSrv","panelTargets","targets","panelDatasource","timeSrv","path","DataSourcePicker","_super","call","onChange","item","datasources","find","prototype","render","current","autoFocus","hideTextValue","onBlur","openMenuOnFocus","showLoading","label","imgUrl","info","logos","small","substr","loading","hideText","className","_grafana_ui__WEBPACK_IMPORTED_MODULE_2__","isMulti","isClearable","backspaceRemovesValue","maxMenuHeight","placeholder","noOptionsMessage","defaultProps","react__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"default~DashboardPage~SoloPanelPage~explore.fabf58cbd84a6ac3523b.js","sourcesContent":["import { UserState } from 'app/types';\n\nexport const getTimeZone = (state: UserState) => state.timeZone;\n","import React, { FC, CSSProperties } from 'react';\nimport Transition, { ExitHandler } from 'react-transition-group/Transition';\n\ninterface Props {\n  duration: number;\n  children: JSX.Element;\n  in: boolean;\n  unmountOnExit?: boolean;\n  onExited?: ExitHandler;\n}\n\nexport const FadeIn: FC<Props> = props => {\n  const defaultStyle: CSSProperties = {\n    transition: `opacity ${props.duration}ms linear`,\n    opacity: 0,\n  };\n\n  const transitionStyles: { [str: string]: CSSProperties } = {\n    exited: { opacity: 0, display: 'none' },\n    entering: { opacity: 0 },\n    entered: { opacity: 1 },\n    exiting: { opacity: 0 },\n  };\n\n  return (\n    <Transition\n      in={props.in}\n      timeout={props.duration}\n      unmountOnExit={props.unmountOnExit || false}\n      onExited={props.onExited}\n    >\n      {state => (\n        <div\n          style={{\n            ...defaultStyle,\n            ...transitionStyles[state],\n          }}\n        >\n          {props.children}\n        </div>\n      )}\n    </Transition>\n  );\n};\n","// Libraries\nimport { map, throttleTime } from 'rxjs/operators';\nimport { identity } from 'rxjs';\n// Services & Utils\nimport store from 'app/core/store';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { Emitter } from 'app/core/core';\nimport {\n  buildQueryTransaction,\n  clearQueryKeys,\n  ensureQueries,\n  generateEmptyQuery,\n  generateNewKeyAndAddRefIdIfMissing,\n  GetExploreUrlArguments,\n  getTimeRange,\n  getTimeRangeFromUrl,\n  hasNonEmptyQuery,\n  lastUsedDatasourceKeyForOrgId,\n  parseUrlState,\n  serializeStateToUrlParam,\n  stopQueryState,\n  updateHistory,\n} from 'app/core/utils/explore';\n// Types\nimport { ExploreItemState, ExploreUrlState, ThunkResult } from 'app/types';\nimport { RefreshPicker } from '@grafana/ui';\n\nimport {\n  AbsoluteTimeRange,\n  DataQuery,\n  DataSourceApi,\n  DataSourceSelectItem,\n  dateTimeForTimeZone,\n  isDateTime,\n  LoadingState,\n  LogsDedupStrategy,\n  PanelData,\n  QueryFixAction,\n  RawTimeRange,\n  TimeRange,\n} from '@grafana/data';\nimport { ExploreId, ExploreMode, ExploreUIState, QueryOptions } from 'app/types/explore';\nimport {\n  addQueryRowAction,\n  changeModeAction,\n  changeQueryAction,\n  changeRangeAction,\n  changeRefreshIntervalAction,\n  ChangeRefreshIntervalPayload,\n  changeSizeAction,\n  ChangeSizePayload,\n  clearOriginAction,\n  clearQueriesAction,\n  historyUpdatedAction,\n  initializeExploreAction,\n  loadDatasourceMissingAction,\n  loadDatasourcePendingAction,\n  loadDatasourceReadyAction,\n  LoadDatasourceReadyPayload,\n  loadExploreDatasources,\n  modifyQueriesAction,\n  queriesImportedAction,\n  queryStoreSubscriptionAction,\n  queryStreamUpdatedAction,\n  scanStartAction,\n  scanStopAction,\n  setQueriesAction,\n  setUrlReplacedAction,\n  splitCloseAction,\n  splitOpenAction,\n  syncTimesAction,\n  toggleGraphAction,\n  ToggleGraphPayload,\n  toggleTableAction,\n  ToggleTablePayload,\n  updateDatasourceInstanceAction,\n  updateUIStateAction,\n} from './actionTypes';\nimport { ActionCreator, ActionOf } from 'app/core/redux/actionCreatorFactory';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { getShiftedTimeRange } from 'app/core/utils/timePicker';\nimport { updateLocation } from '../../../core/actions';\nimport { getTimeSrv, TimeSrv } from '../../dashboard/services/TimeSrv';\nimport { preProcessPanelData, runRequest } from '../../dashboard/state/runRequest';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { DataSourceSrv } from '@grafana/runtime';\n\n/**\n * Updates UI state and save it to the URL\n */\nconst updateExploreUIState = (exploreId: ExploreId, uiStateFragment: Partial<ExploreUIState>): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\n    dispatch(stateSave());\n  };\n};\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const queries = getState().explore[exploreId].queries;\n    const query = generateEmptyQuery(queries, index);\n\n    dispatch(addQueryRowAction({ exploreId, index, query }));\n  };\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    let newDataSourceInstance: DataSourceApi = null;\n\n    if (!datasource) {\n      newDataSourceInstance = await getDatasourceSrv().get();\n    } else {\n      newDataSourceInstance = await getDatasourceSrv().get(datasource);\n    }\n\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    const queries = getState().explore[exploreId].queries;\n    const orgId = getState().user.orgId;\n\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\n\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\n\n    if (getState().explore[exploreId].isLive) {\n      dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\n    }\n\n    await dispatch(loadDatasource(exploreId, newDataSourceInstance, orgId));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Change the display mode in Explore.\n */\nexport function changeMode(exploreId: ExploreId, mode: ExploreMode): ThunkResult<void> {\n  return dispatch => {\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(changeModeAction({ exploreId, mode }));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override: boolean\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Null query means reset\n    if (query === null) {\n      const queries = getState().explore[exploreId].queries;\n      const { refId, key } = queries[index];\n      query = generateNewKeyAndAddRefIdIfMissing({ refId, key }, queries, index);\n    }\n\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): ActionOf<ChangeSizePayload> {\n  return changeSizeAction({ exploreId, height, width });\n}\n\nexport const updateTimeRange = (options: {\n  exploreId: ExploreId;\n  rawRange?: RawTimeRange;\n  absoluteRange?: AbsoluteTimeRange;\n}): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { syncedTimes } = getState().explore;\n    if (syncedTimes) {\n      dispatch(updateTime({ ...options, exploreId: ExploreId.left }));\n      dispatch(runQueries(ExploreId.left));\n      dispatch(updateTime({ ...options, exploreId: ExploreId.right }));\n      dispatch(runQueries(ExploreId.right));\n    } else {\n      dispatch(updateTime({ ...options }));\n      dispatch(runQueries(options.exploreId));\n    }\n  };\n};\n/**\n * Change the refresh interval of Explore. Called from the Refresh picker.\n */\nexport function changeRefreshInterval(\n  exploreId: ExploreId,\n  refreshInterval: string\n): ActionOf<ChangeRefreshIntervalPayload> {\n  return changeRefreshIntervalAction({ exploreId, refreshInterval });\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStopAction({ exploreId }));\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(stateSave());\n  };\n}\n\nexport function clearOrigin(): ThunkResult<void> {\n  return dispatch => {\n    dispatch(clearOriginAction({ exploreId: ExploreId.left }));\n  };\n}\n\n/**\n * Loads all explore data sources and sets the chosen datasource.\n * If there are no datasources a missing datasource action is dispatched.\n */\nexport function loadExploreDatasourcesAndSetDatasource(\n  exploreId: ExploreId,\n  datasourceName: string\n): ThunkResult<void> {\n  return dispatch => {\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\n      .getExternal()\n      .map(\n        (ds: any) =>\n          ({\n            value: ds.name,\n            name: ds.name,\n            meta: ds.meta,\n          } as DataSourceSelectItem)\n      );\n\n    dispatch(loadExploreDatasources({ exploreId, exploreDatasources }));\n\n    if (exploreDatasources.length >= 1) {\n      dispatch(changeDatasource(exploreId, datasourceName));\n    } else {\n      dispatch(loadDatasourceMissingAction({ exploreId }));\n    }\n  };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasourceName: string,\n  queries: DataQuery[],\n  rawRange: RawTimeRange,\n  mode: ExploreMode,\n  containerWidth: number,\n  eventBridge: Emitter,\n  ui: ExploreUIState,\n  originPanelId: number\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRange(timeZone, rawRange);\n    dispatch(loadExploreDatasourcesAndSetDatasource(exploreId, datasourceName));\n    dispatch(\n      initializeExploreAction({\n        exploreId,\n        containerWidth,\n        eventBridge,\n        queries,\n        range,\n        mode,\n        ui,\n        originPanelId,\n      })\n    );\n    dispatch(updateTime({ exploreId }));\n  };\n}\n\n/**\n * Datasource loading was successfully completed.\n */\nexport const loadDatasourceReady = (\n  exploreId: ExploreId,\n  instance: DataSourceApi,\n  orgId: number\n): ActionOf<LoadDatasourceReadyPayload> => {\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n\n  store.set(lastUsedDatasourceKeyForOrgId(orgId), instance.name);\n\n  return loadDatasourceReadyAction({\n    exploreId,\n    history,\n  });\n};\n\nexport function importQueries(\n  exploreId: ExploreId,\n  queries: DataQuery[],\n  sourceDataSource: DataSourceApi,\n  targetDataSource: DataSourceApi\n): ThunkResult<void> {\n  return async dispatch => {\n    if (!sourceDataSource) {\n      // explore not initialized\n      dispatch(queriesImportedAction({ exploreId, queries }));\n      return;\n    }\n\n    let importedQueries = queries;\n    // Check if queries can be imported from previously selected datasource\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\n      // Keep same queries if same type of datasource\n      importedQueries = [...queries];\n    } else if (targetDataSource.importQueries) {\n      // Datasource-specific importers\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\n    } else {\n      // Default is blank queries\n      importedQueries = ensureQueries();\n    }\n\n    const nextQueries = ensureQueries(importedQueries);\n\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\n  };\n}\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi, orgId: number): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\n\n    if (instance.init) {\n      try {\n        instance.init();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource, discard results\n      return;\n    }\n\n    dispatch(loadDatasourceReady(exploreId, instance, orgId));\n  };\n}\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: QueryFixAction,\n  index: number,\n  modifier: any\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport function runQueries(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    dispatch(updateTime({ exploreId }));\n\n    const exploreItemState = getState().explore[exploreId];\n    const {\n      datasourceInstance,\n      queries,\n      containerWidth,\n      isLive: live,\n      range,\n      scanning,\n      queryResponse,\n      querySubscription,\n      history,\n      mode,\n      showingGraph,\n      showingTable,\n    } = exploreItemState;\n\n    if (!hasNonEmptyQuery(queries)) {\n      dispatch(clearQueriesAction({ exploreId }));\n      dispatch(stateSave()); // Remember to save to state and update location\n      return;\n    }\n\n    // Some datasource's query builders allow per-query interval limits,\n    // but we're using the datasource interval limit for now\n    const minInterval = datasourceInstance.interval;\n\n    stopQueryState(querySubscription);\n\n    const queryOptions: QueryOptions = {\n      minInterval,\n      // This is used for logs streaming for buffer size, with undefined it falls back to datasource config if it\n      // supports that.\n      maxDataPoints: mode === ExploreMode.Logs ? undefined : containerWidth,\n      liveStreaming: live,\n      showingGraph,\n      showingTable,\n    };\n\n    const datasourceId = datasourceInstance.meta.id;\n    const transaction = buildQueryTransaction(queries, queryOptions, range, scanning);\n\n    let firstResponse = true;\n\n    const newQuerySub = runRequest(datasourceInstance, transaction.request)\n      .pipe(\n        // Simple throttle for live tailing, in case of > 1000 rows per interval we spend about 200ms on processing and\n        // rendering. In case this is optimized this can be tweaked, but also it should be only as fast as user\n        // actually can see what is happening.\n        live ? throttleTime(500) : identity,\n        map((data: PanelData) => preProcessPanelData(data, queryResponse))\n      )\n      .subscribe((data: PanelData) => {\n        if (!data.error && firstResponse) {\n          // Side-effect: Saving history in localstorage\n          const nextHistory = updateHistory(history, datasourceId, queries);\n          dispatch(historyUpdatedAction({ exploreId, history: nextHistory }));\n          dispatch(stateSave());\n        }\n\n        firstResponse = false;\n\n        dispatch(queryStreamUpdatedAction({ exploreId, response: data }));\n\n        // Keep scanning for results if this was the last scanning transaction\n        if (getState().explore[exploreId].scanning) {\n          if (data.state === LoadingState.Done && data.series.length === 0) {\n            const range = getShiftedTimeRange(-1, getState().explore[exploreId].range);\n            dispatch(updateTime({ exploreId, absoluteRange: range }));\n            dispatch(runQueries(exploreId));\n          } else {\n            // We can stop scanning if we have a result\n            dispatch(scanStopAction({ exploreId }));\n          }\n        }\n      });\n\n    dispatch(queryStoreSubscriptionAction({ exploreId, querySubscription: newQuerySub }));\n  };\n}\n\nconst toRawTimeRange = (range: TimeRange): RawTimeRange => {\n  let from = range.raw.from;\n  if (isDateTime(from)) {\n    from = from.valueOf().toString(10);\n  }\n\n  let to = range.raw.to;\n  if (isDateTime(to)) {\n    to = to.valueOf().toString(10);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nexport const stateSave = (): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { left, right, split } = getState().explore;\n    const orgId = getState().user.orgId.toString();\n    const replace = left && left.urlReplaced === false;\n    const urlStates: { [index: string]: string } = { orgId };\n    const leftUrlState: ExploreUrlState = {\n      datasource: left.datasourceInstance.name,\n      queries: left.queries.map(clearQueryKeys),\n      range: toRawTimeRange(left.range),\n      mode: left.mode,\n      ui: {\n        showingGraph: left.showingGraph,\n        showingLogs: true,\n        showingTable: left.showingTable,\n        dedupStrategy: left.dedupStrategy,\n      },\n    };\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\n    if (split) {\n      const rightUrlState: ExploreUrlState = {\n        datasource: right.datasourceInstance.name,\n        queries: right.queries.map(clearQueryKeys),\n        range: toRawTimeRange(right.range),\n        mode: right.mode,\n        ui: {\n          showingGraph: right.showingGraph,\n          showingLogs: true,\n          showingTable: right.showingTable,\n          dedupStrategy: right.dedupStrategy,\n        },\n      };\n\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\n    }\n\n    dispatch(updateLocation({ query: urlStates, replace }));\n    if (replace) {\n      dispatch(setUrlReplacedAction({ exploreId: ExploreId.left }));\n    }\n  };\n};\n\nexport const updateTime = (config: {\n  exploreId: ExploreId;\n  rawRange?: RawTimeRange;\n  absoluteRange?: AbsoluteTimeRange;\n}): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { exploreId, absoluteRange: absRange, rawRange: actionRange } = config;\n    const itemState = getState().explore[exploreId];\n    const timeZone = getTimeZone(getState().user);\n    const { range: rangeInState } = itemState;\n    let rawRange: RawTimeRange = rangeInState.raw;\n\n    if (absRange) {\n      rawRange = {\n        from: dateTimeForTimeZone(timeZone, absRange.from),\n        to: dateTimeForTimeZone(timeZone, absRange.to),\n      };\n    }\n\n    if (actionRange) {\n      rawRange = actionRange;\n    }\n\n    const range = getTimeRange(timeZone, rawRange);\n    const absoluteRange: AbsoluteTimeRange = { from: range.from.valueOf(), to: range.to.valueOf() };\n\n    getTimeSrv().init({\n      time: range.raw,\n      refresh: false,\n      getTimezone: () => timeZone,\n      timeRangeUpdated: (): any => undefined,\n    });\n\n    dispatch(changeRangeAction({ exploreId, range, absoluteRange }));\n  };\n};\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Register the scanner\n    dispatch(scanStartAction({ exploreId }));\n    // Scanning must trigger query run, and return the new range\n    const range = getShiftedTimeRange(-1, getState().explore[exploreId].range);\n    // Set the new range to be displayed\n    dispatch(updateTime({ exploreId, absoluteRange: range }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Inject react keys into query objects\n    const queries = getState().explore[exploreId].queries;\n    const nextQueries = rawQueries.map((query, index) => generateNewKeyAndAddRefIdIfMissing(query, queries, index));\n    dispatch(setQueriesAction({ exploreId, queries: nextQueries }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(itemId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(splitCloseAction({ itemId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore[ExploreId.left];\n    const queryState = getState().location.query[ExploreId.left] as string;\n    const urlState = parseUrlState(queryState);\n    const itemState: ExploreItemState = {\n      ...leftState,\n      queries: leftState.queries.slice(),\n      urlState,\n    };\n    dispatch(splitOpenAction({ itemState }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Syncs time interval, if they are not synced on both panels in a split mode.\n * Unsyncs time interval, if they are synced on both panels in a split mode.\n */\nexport function syncTimes(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    if (exploreId === ExploreId.left) {\n      const leftState = getState().explore.left;\n      dispatch(updateTimeRange({ exploreId: ExploreId.right, rawRange: leftState.range.raw }));\n    } else {\n      const rightState = getState().explore.right;\n      dispatch(updateTimeRange({ exploreId: ExploreId.left, rawRange: rightState.range.raw }));\n    }\n    const isTimeSynced = getState().explore.syncedTimes;\n    dispatch(syncTimesAction({ syncedTimes: !isTimeSynced }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\n * queries won't be run\n */\nconst togglePanelActionCreator = (\n  actionCreator: ActionCreator<ToggleGraphPayload> | ActionCreator<ToggleTablePayload>\n) => (exploreId: ExploreId, isPanelVisible: boolean): ThunkResult<void> => {\n  return dispatch => {\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\n    const shouldRunQueries = !isPanelVisible;\n\n    switch (actionCreator.type) {\n      case toggleGraphAction.type:\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\n        break;\n      case toggleTableAction.type:\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\n        break;\n    }\n\n    dispatch(actionCreator({ exploreId }));\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\n\n    if (shouldRunQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n};\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\n\n/**\n * Change logs deduplication strategy and update URL.\n */\nexport const changeDedupStrategy = (exploreId: ExploreId, dedupStrategy: LogsDedupStrategy): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\n  };\n};\n\nexport function refreshExplore(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const itemState = getState().explore[exploreId];\n    if (!itemState.initialized) {\n      return;\n    }\n\n    const { urlState, update, containerWidth, eventBridge } = itemState;\n    const { datasource, queries, range: urlRange, mode, ui, originPanelId } = urlState;\n    const refreshQueries: DataQuery[] = [];\n    for (let index = 0; index < queries.length; index++) {\n      const query = queries[index];\n      refreshQueries.push(generateNewKeyAndAddRefIdIfMissing(query, refreshQueries, index));\n    }\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRangeFromUrl(urlRange, timeZone);\n\n    // need to refresh datasource\n    if (update.datasource) {\n      const initialQueries = ensureQueries(queries);\n      dispatch(\n        initializeExplore(\n          exploreId,\n          datasource,\n          initialQueries,\n          range,\n          mode,\n          containerWidth,\n          eventBridge,\n          ui,\n          originPanelId\n        )\n      );\n      return;\n    }\n\n    if (update.range) {\n      dispatch(updateTime({ exploreId, rawRange: range.raw }));\n    }\n\n    // need to refresh ui state\n    if (update.ui) {\n      dispatch(updateUIStateAction({ ...ui, exploreId }));\n    }\n\n    // need to refresh queries\n    if (update.queries) {\n      dispatch(setQueriesAction({ exploreId, queries: refreshQueries }));\n    }\n\n    // need to refresh mode\n    if (update.mode) {\n      dispatch(changeModeAction({ exploreId, mode }));\n    }\n\n    // always run queries when refresh is needed\n    if (update.queries || update.ui || update.range) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\nexport interface NavigateToExploreDependencies {\n  getDataSourceSrv: () => DataSourceSrv;\n  getTimeSrv: () => TimeSrv;\n  getExploreUrl: (args: GetExploreUrlArguments) => Promise<string>;\n  openInNewWindow?: (url: string) => void;\n}\n\nexport const navigateToExplore = (\n  panel: PanelModel,\n  dependencies: NavigateToExploreDependencies\n): ThunkResult<void> => {\n  return async dispatch => {\n    const { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow } = dependencies;\n    const datasourceSrv = getDataSourceSrv();\n    const datasource = await datasourceSrv.get(panel.datasource);\n    const path = await getExploreUrl({\n      panel,\n      panelTargets: panel.targets,\n      panelDatasource: datasource,\n      datasourceSrv,\n      timeSrv: getTimeSrv(),\n    });\n\n    if (openInNewWindow) {\n      openInNewWindow(path);\n      return;\n    }\n\n    const query = {}; // strips any angular query param\n    dispatch(updateLocation({ path, query }));\n  };\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { Select } from '@grafana/ui';\nimport { SelectableValue, DataSourceSelectItem } from '@grafana/data';\n\nexport interface Props {\n  onChange: (ds: DataSourceSelectItem) => void;\n  datasources: DataSourceSelectItem[];\n  current: DataSourceSelectItem;\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  showLoading?: boolean;\n}\n\nexport class DataSourcePicker extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n  };\n\n  searchInput: HTMLElement;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChange = (item: SelectableValue<string>) => {\n    const ds = this.props.datasources.find(ds => ds.name === item.value);\n    this.props.onChange(ds);\n  };\n\n  render() {\n    const { datasources, current, autoFocus, hideTextValue, onBlur, openMenuOnFocus, showLoading } = this.props;\n\n    const options = datasources.map(ds => ({\n      value: ds.name,\n      label: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n    }));\n\n    const value = current && {\n      label: current.name.substr(0, 37),\n      value: current.name,\n      imgUrl: current.meta.info.logos.small,\n      loading: showLoading,\n      hideText: hideTextValue,\n    };\n\n    return (\n      <div className=\"gf-form-inline\">\n        <Select\n          className=\"ds-picker\"\n          isMulti={false}\n          isClearable={false}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          placeholder=\"Select datasource\"\n          noOptionsMessage={() => 'No datasources found'}\n          value={value}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataSourcePicker;\n"],"sourceRoot":""}