{"version":3,"sources":["webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/typeahead.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/query_field.tsx","webpack:///./public/app/features/explore/slate-plugins/prism/index.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/kusto/kusto.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/KustoQueryField.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/editor_component.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/types.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/insights_analytics/insights_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AnalyticsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/InsightsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.tsx","webpack:///./public/app/core/utils/CancelablePromise.ts"],"names":["TimeGrainConverter","timeGrain","timeGrainUnit","_","includes","toUpperCase","interval","slice","length","unit","indexOf","createISO8601Duration","toMinutes","allowedTimeGrains","timeGrains","filter","o","closest","intervalMs","kbn","interval_to_ms","i","duration","offset","substring","value","timeUnitToText","text","timeUnitToKbn","TypeaheadItem","getRef","el","prevProps","this","props","isSelected","offsetParent","container","offsetTop","scrollTop","offsetHeight","scrollIntoView","hint","label","onClickItem","className","ref","onClick","React","PureComponent","TypeaheadGroup","items","selected","map","item","display","key","Typeahead","groupedItems","menuRef","selectedItems","g","flattenSuggestions","s","reduce","acc","concat","Portal","index","prefix","node","document","createElement","classList","add","body","appendChild","removeChild","ReactDOM","createPortal","children","Component","QueryField","context","keybindingSrv","getKeybindingSrv","onChange","changed","state","setState","requestAnimationFrame","onTypeahead","onChangeQuery","request","url","fetch","onQueryChange","Plain","serialize","onKeyDown","event","editor","next","typeaheadIndex","suggestions","keyboardEvent","menuEl","preventDefault","stopPropagation","resetTypeahead","ctrlKey","shiftKey","flattenedSuggestions","suggestion","Math","abs","applyTypeahead","max","change","Value","callback","typeaheadPrefix","typeaheadContext","handleBlur","onBlur","resetTimer","setTimeout","restoreEscapeKeyBinding","handleFocus","onFocus","removeEscapeKeyBinding","updateMenu","menu","window","getSelection","anchorNode","parentElement","rect","getBoundingClientRect","scrollX","scrollY","screenHeight","innerHeight","menuLeft","left","menuTop","top","height","menuHeight","style","opacity","maxHeight","removeAttribute","renderMenu","portalPrefix","selectedIndex","selectedKeys","definition","language","query","lines","prismDefinition","prismLanguage","plugins","BracesPlugin","ClearPlugin","RunnerPlugin","handler","onPressEnter","NewlinePlugin","Prism","languages","renderDecoration","decoration","type","data","get","decorateNode","texts","getTexts","toArray","tstring","t","join","grammar","tokens","tokenize","decorations","startText","shift","endText","startOffset","endOffset","start","processToken","token","types","alias","content","newlines","split","end","available","remaining","range","createDecoration","anchor","focus","push","labelKeys","labelValues","initialQuery","create","line","Block","nodes","Text","Document","clearTimeout","unbind","setupGlobal","autoCorrect","placeholder","spellCheck","operatorTokens","functionTokens","KEYWORDS","grafanaMacros","tokenizer","comment","pattern","lookbehind","greedy","inside","RegExp","builtin","f","string","keyword","boolean","number","operator","punctuation","variable","argument","cleanText","replace","trim","wrapText","KustoQueryField","force","selection","wrapperNode","editorNode","isBlurred","getRangeAt","textContent","substr","modelOffset","anchorOffset","modelPrefix","anchorText","suggestionGroups","wrapperClasses","contains","getColumnSuggestions","match","getFunctionSuggestions","getTableSuggestions","db","getDBFromDatabaseFunction","console","log","normalizeQuery","schema","fetchSchema","getInitialSuggestions","getKeywordSuggestions","getLastWord","results","toLowerCase","filteredSuggestions","group","skipFilter","c","prefixMatch","typeaheadText","suggestionText","nextChar","DOMUtil","getNextCharacter","backward","deleteBackwards","suffixLength","forward","deleteBackward","deleteForward","insertText","moveForward","Databases","Default","debounce","Tables","Name","table","getTableFromContext","tableSchema","OrderedColumns","Type","normalizedQuery","exec","getSchema","castSchema","defaultSchemaTemplate","str","Editor","edited","execute","variables","Kusto","templateVariables","defaultProps","coreModule","directive","reactDirective","watchDepth","AzureMonitorQueryCtrl","$scope","$injector","templateSrv","defaultDropdownValue","dummyDiminsionString","defaults","queryType","azureMonitor","resourceGroup","metricDefinition","resourceName","metricNamespace","metricName","dimensionFilter","aggOptions","azureLogAnalytics","resultFormat","workspace","datasource","azureLogAnalyticsDatasource","defaultOrFirstWorkspace","appInsights","insightsAnalytics","getWorkspaces","target","subscription","then","list","workspaces","catch","handleQueryCtrlError","bind","getAzureLogAnalyticsSchema","onLogAnalyticsQueryChange","nextQuery","onLogAnalyticsQueryExecute","panelCtrl","refresh","onInsightsAnalyticsQueryChange","onQueryExecute","getAppInsightsQuerySchema","appInsightsDatasource","getQuerySchema","removeGroupBy","dimension","splice","defaultsDeep","migrateTimeGrains","migrateToFromTimes","migrateToDefaultNamespace","migrateApplicationInsightsKeys","migrateApplicationInsightsDimensions","migrateMetricsDimensionFilters","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","resultFormats","getSubscriptions","dataList","lastQueryError","undefined","lastQuery","anySeriesFromQuery","find","refId","meta","err","error","innererror","message","TimegrainConverter","onMetricNameChange","timeGrainCount","oldAzureTimeGrains","allowedTimeGrainsMs","convertTimeGrainsToMs","mappings","xaxis","yaxis","spliton","groupBy","groupByOptions","old","isString","panel","scopedVars","azureMonitorDatasource","isConfigured","subs","subscriptions","logAnalyticsSubscriptionId","subscriptionId","aggregation","dimensionFilters","getResourceGroups","getMetricDefinitions","getResourceNames","getMetricNamespaces","getMetricNames","getMetricMetadata","metadata","primaryAggType","supportedTimeGrains","hackState","supportedAggTypes","dimensions","Promise","resolve","forEach","tg","createKbnUnitFromISO8601Duration","findClosestTimeGrain","getBuiltInIntervalValue","generateAutoUnits","getAppInsightsMetricNames","getAppInsightsColumns","getAppInsightsMetricMetadata","aggData","supportedGroupBy","option","timeGrainType","getVariables","name","QueryCtrl","oldDimension","templateUrl","UrlBuilder","baseUrl","apiVersion","rn","service","lastIndexOf","md","encodeURIComponent","ResponseParser","result","textFieldName","valueFieldName","defaultAggTypes","metricData","primaryAggregationType","supportedAggregationTypes","parseTimeGrains","metricAvailabilities","parseDimensions","avail","createTimeGrainFromISO8601Duration","localizedValue","properties","AzureQueryType","SupportedNamespaces","cloudName","supportedMetricNamespaces","azuremonitor","govazuremonitor","germanyazuremonitor","chinaazuremonitor","AzureMonitorDatasource","instanceSettings","apiPreviewVersion","jsonData","hide","getTemplateSrv","toString","dimensionsFilters","AzureMonitor","format","resourceGroupsQueryWithSub","toVariable","metricDefinitionsQuery","metricDefinitionsQueryWithSub","resourceNamesQuery","resourceNamesQueryWithSub","metricNamespaceQuery","metricNamespaceQueryWithSub","metricNamesQuery","metricNamesQueryWithSub","metric","route","doRequest","parseSubscriptions","parseResponseValues","shouldHardcodeBlobStorage","startsWith","parseResourceNames","buildAzureMonitorGetMetricNamespacesUrl","buildAzureMonitorGetMetricNamesUrl","parseMetadata","isValidConfigField","tenantId","status","clientId","response","title","statusText","code","field","maxRetries","getBackendSrv","datasourceRequest","method","DataSourceWithBackend","hasSegmentsField","dataTarget","datapoints","obj","keys","segment","without","isObject","dataObj","intersection","dateTimeValue","dateTime","valueOf","metrics","toTextValueList","values","columns","raw","yaxises","Columns","rows","Rows","parseRawQueryResultRow","parseQueryResultRow","columnsForDropdown","column","ColumnName","xaxisColumn","findIndex","yaxisesSplit","yaxisColumns","splitonColumn","convertTimestamp","row","yaxisColumn","yaxisName","bucket","findOrCreateBucket","epoch","dateTimeToEpoch","isSingleValue","getMetricFieldKey","aggField","getKeyForAggregationField","segments","j","getTargetName","segmentName","segmentValue","prop","g1","g2","Error","defaultAggregation","supportedAggregations","all","columnTable","columnName","columnType","AppInsightsDatasource","version","logAnalyticsColumns","applicationId","appInsightsAppId","options","timeColumn","valueColumn","segmentColumn","rawQuery","rawQueryString","ApplicationInsights","d","appInsightsGroupByQuery","getGroupBys","parseMetricNames","parseGroupBys","parseQuerySchema","LogAnalyticsQuerystringBuilder","defaultTimeField","queryString","macroRegexp","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","uriString","from","startOf","toISOString","rangeRaw","to","now","Date","until","timeFieldArg","timeField","inputs","firstCommaIndex","templateVar","v","tables","parseTimeSeriesResult","parseTableResult","timeIndex","metricIndex","valueIndex","executedQueryString","col","queryResult","parseQueryResult","flattenDeep","textIndex","tagsIndex","annotation","time","floor","tags","Plugins","createSchemaDatabaseWithTables","createSchemaTables","Functions","createSchemaFunctions","convertToKustoColumn","functions","func","Body","DocString","displayName","Folder","category","FunctionKind","InputParameters","OutputColumns","AzureLogAnalyticsDatasource","cache","Map","logAnalyticsDefaultWorkspace","setWorkspaceUrl","azureLogAnalyticsSameAs","azureCloud","azureMonitorUrl","getWorkspaceList","val","customerId","workspaceListUrl","parseSchemaResult","interpolateVariable","LogAnalytics","res","df","encodedQuery","custom","buildDeepLink","fields","config","links","targetBlank","base64Enc","workspaceId","getWorkspaceDetails","details","id","workspacesQueryWithSub","getDefaultOrFirstWorkspace","queries","buildQuery","promises","doQueries","parseToVariables","querystring","generate","datasourceId","multi","includeAll","reject","transformToAnnotations","useCache","has","set","validationError","isValidConfig","ws","getErrorMessage","logAnalyticsTenantId","logAnalyticsClientId","InsightsAnalyticsDatasource","InsightsAnalytics","Datasource","insightsAnalyticsDatasource","pseudoDatasource","optionsKey","byType","targets","opts","q","cloneDeep","obs","Object","req","toPromise","flatten","of","LoadingState","Done","annotationQuery","aiResult","metricFindQuery","amResult","alaResult","testDatasource","upperFirst","DataSourceApi","Select","LegacyForms","Input","AzureCredentialsForm","selectedAzureCloud","selectedSubscription","clientSecret","clientSecretConfigured","azureCloudOptions","subscriptionOptions","onAzureCloudChange","onSubscriptionSelectChange","onTenantIdChange","onClientIdChange","onClientSecretChange","onResetClientSecret","onLoadSubscriptions","hasRequiredFields","hasSubscriptions","tooltip","defaultValue","disabled","variant","size","azureClouds","MonitorConfig","onAzureCloudSelect","onUpdateJsonDataOption","makeSameAs","onUpdateSecureJsonDataOption","onResetOptionKey","onSubscriptionSelect","secureJsonData","secureJsonFields","Switch","AnalyticsConfig","onLogAnalyticsTenantIdChange","onLogAnalyticsClientIdChange","onLogAnalyticsClientSecretChange","onLogAnalyticsSubscriptionSelect","logAnalyticsSubscription","onWorkspaceSelectChange","onAzureLogAnalyticsSameAsChange","onUpdateDatasourceOptions","sameAsSwitched","onLogAnalyticsResetClientSecret","hasWorkspaceRequiredFields","logAnalyticsClientSecret","hasOwnProperty","addtlAttrs","showSameAsHelpMsg","checked","onLoadWorkspaces","InsightsConfig","onAppInsightsResetApiKey","appInsightsApiKey","ConfigEditor","initPromise","init","getLogAnalyticsSubscriptions","updateJsonDataOption","updateDatasourcePluginJsonDataOption","updateSecureJsonDataOption","updateDatasourcePluginSecureJsonDataOption","resetSecureKey","updateDatasourcePluginResetOption","currentTarget","updatedClientSecret","onOptionsChange","hasNecessaryCredentials","logAnalyticsHasNecessaryCredentials","put","updateDatasourcePluginOption","loadSubscriptions","parseSubscriptionsForSelect","loadWorkspaces","parseWorkspacesForSelect","logAnalyticsSubscriptions","sameAs","logAnalyticsWorkspaces","TemplateSrv","makePromiseCancelable","promise","isCanceled","warn","cancel","AzureMonitorAnnotationsQueryCtrl","defaultQuery","onSubscriptionChange","initDropdowns","bustCache","getAzureLogAnalyticsWorkspaces","plugin","DataSourcePlugin","setConfigEditor","setQueryCtrl","setAnnotationQueryCtrl","hasCanceled_"],"mappings":"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gBAAiB,CACf,qCACA,kCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,6BACA,yCACA,sCACA,gCACA,8BACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,oBAAqB,CACnB,qCACA,gCACA,wBACA,2CACA,mDACA,oCACA,4CACA,+BACA,oCACA,4BACA,yCACA,gCACA,8BACA,uCACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,iDAEFC,kBAAmB,CACjB,qCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,gCACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACA,kD,qDAOF,OAAOtc,KAAKkc,0BAA0Blc,KAAKic,gB,4CD5OnCF,K,6BAAAA,E,2CAAAA,E,uCAAAA,E,oCAAAA,Q,s0BEWZ,IAEqBQ,G,YAWnB,WAAoBC,GAAuE,a,4FAAA,UACzF,0BAAMA,KADYA,mBAAuE,EAV3F9B,WAAa,aAU8E,EAT3F+B,kBAAoB,qBASuE,EAF3FP,0BAAsC,GAKpC,EAAK7D,eAAiBmE,EAAiBE,SAASrE,eAChD,EAAK4D,UAAYO,EAAiBE,SAAS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","file":"azureMonitorPlugin.7bf174750e07ac7111d5.js","sourcesContent":["import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport default class TimeGrainConverter {\n  static createISO8601Duration(timeGrain: string | number, timeGrainUnit: any) {\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\n    if (_.includes(timeIntervals, timeGrainUnit)) {\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n    }\n\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n  }\n\n  static createISO8601DurationFromInterval(interval: string) {\n    const timeGrain = +interval.slice(0, interval.length - 1);\n    const unit = interval[interval.length - 1];\n\n    if (interval.indexOf('ms') > -1) {\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\n    }\n\n    if (interval[interval.length - 1] === 's') {\n      let toMinutes = (timeGrain * 60) % 60;\n\n      if (toMinutes < 1) {\n        toMinutes = 1;\n      }\n\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\n    }\n\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\n  }\n\n  static findClosestTimeGrain(interval: any, allowedTimeGrains: string[]) {\n    const timeGrains = _.filter(allowedTimeGrains, o => o !== 'auto');\n\n    let closest = timeGrains[0];\n    const intervalMs = kbn.interval_to_ms(interval);\n\n    for (let i = 0; i < timeGrains.length; i++) {\n      // abs (num - val) < abs (num - curr):\n      if (intervalMs > kbn.interval_to_ms(timeGrains[i])) {\n        if (i + 1 < timeGrains.length) {\n          closest = timeGrains[i + 1];\n        } else {\n          closest = timeGrains[i];\n        }\n      }\n    }\n\n    return closest;\n  }\n\n  static createTimeGrainFromISO8601Duration(duration: string) {\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\n  }\n\n  static timeUnitToText(value: number, unit: string) {\n    let text = '';\n\n    if (unit === 'S') {\n      text = 'second';\n    }\n    if (unit === 'M') {\n      text = 'minute';\n    }\n    if (unit === 'H') {\n      text = 'hour';\n    }\n    if (unit === 'D') {\n      text = 'day';\n    }\n\n    if (value > 1) {\n      return text + 's';\n    }\n\n    return text;\n  }\n\n  static createKbnUnitFromISO8601Duration(duration: string) {\n    if (duration === 'auto') {\n      return 'auto';\n    }\n\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\n  }\n\n  static timeUnitToKbn(value: number, unit: string) {\n    if (unit === 'S') {\n      return 's';\n    }\n    if (unit === 'M') {\n      return 'm';\n    }\n    if (unit === 'H') {\n      return 'h';\n    }\n    if (unit === 'D') {\n      return 'd';\n    }\n\n    return '';\n  }\n}\n","import React from 'react';\n\nfunction scrollIntoView(el: any) {\n  if (!el || !el.offsetParent) {\n    return;\n  }\n  const container = el.offsetParent;\n  if (el.offsetTop > container.scrollTop + container.offsetHeight || el.offsetTop < container.scrollTop) {\n    container.scrollTop = el.offsetTop - container.offsetTop;\n  }\n}\n\nclass TypeaheadItem extends React.PureComponent<any, any> {\n  el: any;\n  componentDidUpdate(prevProps: any) {\n    if (this.props.isSelected && !prevProps.isSelected) {\n      scrollIntoView(this.el);\n    }\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  render() {\n    const { hint, isSelected, label, onClickItem } = this.props;\n    const className = isSelected ? 'typeahead-item typeahead-item__selected' : 'typeahead-item';\n    const onClick = () => onClickItem(label);\n    return (\n      <li ref={this.getRef} className={className} onClick={onClick}>\n        {label}\n        {hint && isSelected ? <div className=\"typeahead-item-hint\">{hint}</div> : null}\n      </li>\n    );\n  }\n}\n\nclass TypeaheadGroup extends React.PureComponent<any, any> {\n  render() {\n    const { items, label, selected, onClickItem } = this.props;\n    return (\n      <li className=\"typeahead-group\">\n        <div className=\"typeahead-group__title\">{label}</div>\n        <ul className=\"typeahead-group__list\">\n          {items.map((item: any) => {\n            const text = typeof item === 'object' ? item.text : item;\n            const label = typeof item === 'object' ? item.display || item.text : item;\n            return (\n              <TypeaheadItem\n                key={text}\n                onClickItem={onClickItem}\n                isSelected={selected.indexOf(text) > -1}\n                hint={item.hint}\n                label={label}\n              />\n            );\n          })}\n        </ul>\n      </li>\n    );\n  }\n}\n\nclass Typeahead extends React.PureComponent<any, any> {\n  render() {\n    const { groupedItems, menuRef, selectedItems, onClickItem } = this.props;\n    return (\n      <ul className=\"typeahead\" ref={menuRef}>\n        {groupedItems.map((g: any) => (\n          <TypeaheadGroup key={g.label} onClickItem={onClickItem} selected={selectedItems} {...g} />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Typeahead;\n","import PluginPrism from 'app/features/explore/slate-plugins/prism';\nimport { BracesPlugin, ClearPlugin, RunnerPlugin, NewlinePlugin } from '@grafana/ui';\nimport Typeahead from './typeahead';\nimport { getKeybindingSrv, KeybindingSrv } from 'app/core/services/keybindingSrv';\n\nimport { Block, Document, Text, Value, Editor as CoreEditor } from 'slate';\nimport { Editor } from '@grafana/slate-react';\nimport Plain from 'slate-plain-serializer';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport _ from 'lodash';\n\nfunction flattenSuggestions(s: any) {\n  return s ? s.reduce((acc: any, g: any) => acc.concat(g.items), []) : [];\n}\n\nexport const makeFragment = (text: string) => {\n  const lines = text.split('\\n').map((line: any) =>\n    Block.create({\n      type: 'paragraph',\n      nodes: [Text.create(line)],\n    } as any)\n  );\n\n  const fragment = Document.create({\n    nodes: lines,\n  });\n  return fragment;\n};\n\nexport const getInitialValue = (query: string) => Value.create({ document: makeFragment(query) });\n\nclass Portal extends React.Component<any, any> {\n  node: any;\n\n  constructor(props: any) {\n    super(props);\n    const { index = 0, prefix = 'query' } = props;\n    this.node = document.createElement('div');\n    this.node.classList.add(`slate-typeahead`, `slate-typeahead-${prefix}-${index}`);\n    document.body.appendChild(this.node);\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.node);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.node);\n  }\n}\n\nclass QueryField extends React.Component<any, any> {\n  menuEl: any;\n  plugins: any;\n  resetTimer: any;\n  keybindingSrv: KeybindingSrv = getKeybindingSrv();\n\n  constructor(props: any, context: any) {\n    super(props, context);\n\n    const { prismDefinition = {}, prismLanguage = 'kusto' } = props;\n\n    this.plugins = [\n      BracesPlugin(),\n      ClearPlugin(),\n      RunnerPlugin({ handler: props.onPressEnter }),\n      NewlinePlugin(),\n      PluginPrism({ definition: prismDefinition, language: prismLanguage }),\n    ];\n\n    this.state = {\n      labelKeys: {},\n      labelValues: {},\n      suggestions: [],\n      typeaheadIndex: null,\n      typeaheadPrefix: '',\n      value: getInitialValue(props.initialQuery || ''),\n    };\n  }\n\n  componentDidMount() {\n    this.updateMenu();\n  }\n\n  componentWillUnmount() {\n    this.restoreEscapeKeyBinding();\n    clearTimeout(this.resetTimer);\n  }\n\n  componentDidUpdate() {\n    this.updateMenu();\n  }\n\n  onChange = ({ value }: { value: Value }) => {\n    const changed = value.document !== this.state.value.document;\n    this.setState({ value }, () => {\n      if (changed) {\n        // call typeahead only if query changed\n        requestAnimationFrame(() => this.onTypeahead());\n        this.onChangeQuery();\n      }\n    });\n  };\n\n  request = (url?: string) => {\n    if (this.props.request) {\n      return this.props.request(url);\n    }\n    return fetch(url);\n  };\n\n  onChangeQuery = () => {\n    // Send text change to parent\n    const { onQueryChange } = this.props;\n    if (onQueryChange) {\n      onQueryChange(Plain.serialize(this.state.value));\n    }\n  };\n\n  onKeyDown = (event: Event, editor: CoreEditor, next: Function) => {\n    const { typeaheadIndex, suggestions } = this.state;\n    const keyboardEvent = event as KeyboardEvent;\n\n    switch (keyboardEvent.key) {\n      case 'Escape': {\n        if (this.menuEl) {\n          keyboardEvent.preventDefault();\n          keyboardEvent.stopPropagation();\n          this.resetTypeahead();\n          return true;\n        }\n        break;\n      }\n\n      case ' ': {\n        if (keyboardEvent.ctrlKey) {\n          keyboardEvent.preventDefault();\n          this.onTypeahead(true);\n          return true;\n        }\n        break;\n      }\n\n      case 'Tab':\n      case 'Enter': {\n        if (this.menuEl && typeaheadIndex !== null) {\n          // Dont blur input\n          keyboardEvent.preventDefault();\n          if (!suggestions || !suggestions.length || keyboardEvent.shiftKey || keyboardEvent.ctrlKey) {\n            return next();\n          }\n\n          // Get the currently selected suggestion\n          const flattenedSuggestions = flattenSuggestions(suggestions);\n          const selected = Math.abs(typeaheadIndex);\n          const selectedIndex = selected % flattenedSuggestions.length || 0;\n          const suggestion = flattenedSuggestions[selectedIndex];\n\n          return this.applyTypeahead(editor, suggestion);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        if (this.menuEl) {\n          // Select next suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: (typeaheadIndex || 0) + 1 });\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        if (this.menuEl) {\n          // Select previous suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: Math.max(0, (typeaheadIndex || 0) - 1) });\n        }\n        break;\n      }\n\n      default: {\n        // console.log('default key', event.key, event.which, event.charCode, event.locale, data.key);\n        break;\n      }\n    }\n    return next();\n  };\n\n  onTypeahead = (change = false, item?: any): boolean | void => {\n    return change;\n  };\n\n  applyTypeahead = (\n    editor?: CoreEditor,\n    suggestion?: { text: any; type: string; deleteBackwards: any }\n  ): { value: Value } => {\n    return { value: new Value() };\n  };\n\n  resetTypeahead = (callback?: () => void) => {\n    this.setState(\n      {\n        suggestions: [],\n        typeaheadIndex: null,\n        typeaheadPrefix: '',\n        typeaheadContext: null,\n      },\n      callback\n    );\n  };\n\n  handleBlur = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onBlur } = this.props;\n    // If we dont wait here, menu clicks wont work because the menu\n    // will be gone.\n    this.resetTimer = setTimeout(this.resetTypeahead, 100);\n    if (onBlur) {\n      onBlur();\n    }\n    this.restoreEscapeKeyBinding();\n    return next();\n  };\n\n  handleFocus = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus();\n    }\n    // Don't go back to dashboard if Escape pressed inside the editor.\n    this.removeEscapeKeyBinding();\n    return next();\n  };\n\n  removeEscapeKeyBinding() {\n    this.keybindingSrv.unbind('esc', 'keydown');\n  }\n\n  restoreEscapeKeyBinding() {\n    this.keybindingSrv.setupGlobal();\n  }\n\n  onClickItem = (item: any) => {\n    const { suggestions } = this.state;\n    if (!suggestions || suggestions.length === 0) {\n      return;\n    }\n\n    // Manually triggering change\n    const change = this.applyTypeahead();\n    this.onChange(change);\n  };\n\n  updateMenu = () => {\n    const { suggestions } = this.state;\n    const menu = this.menuEl;\n    const selection = window.getSelection();\n    const node = selection.anchorNode;\n\n    // No menu, nothing to do\n    if (!menu) {\n      return;\n    }\n\n    // No suggestions or blur, remove menu\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      menu.removeAttribute('style');\n      return;\n    }\n\n    // Align menu overlay to editor node\n    if (node && node.parentElement) {\n      // Read from DOM\n      const rect = node.parentElement.getBoundingClientRect();\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      const screenHeight = window.innerHeight;\n\n      const menuLeft = rect.left + scrollX - 2;\n      const menuTop = rect.top + scrollY + rect.height + 4;\n      const menuHeight = screenHeight - menuTop - 10;\n\n      // Write DOM\n      requestAnimationFrame(() => {\n        menu.style.opacity = 1;\n        menu.style.top = `${menuTop}px`;\n        menu.style.left = `${menuLeft}px`;\n        menu.style.maxHeight = `${menuHeight}px`;\n      });\n    }\n  };\n\n  menuRef = (el: any) => {\n    this.menuEl = el;\n  };\n\n  renderMenu = () => {\n    const { portalPrefix } = this.props;\n    const { suggestions, typeaheadIndex } = this.state;\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      return null;\n    }\n\n    // Guard selectedIndex to be within the length of the suggestions\n    let selectedIndex = Math.max(typeaheadIndex, 0);\n    const flattenedSuggestions = flattenSuggestions(suggestions);\n    selectedIndex = selectedIndex % flattenedSuggestions.length || 0;\n    const selectedKeys = (typeaheadIndex !== null && flattenedSuggestions.length > 0\n      ? [flattenedSuggestions[selectedIndex]]\n      : []\n    ).map(i => (typeof i === 'object' ? i.text : i));\n\n    // Create typeahead in DOM root so we can later position it absolutely\n    return (\n      <Portal prefix={portalPrefix}>\n        <Typeahead\n          menuRef={this.menuRef}\n          selectedItems={selectedKeys}\n          onClickItem={this.onClickItem}\n          groupedItems={suggestions}\n        />\n      </Portal>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slate-query-field\">\n        {this.renderMenu()}\n        <Editor\n          autoCorrect={false}\n          onBlur={this.handleBlur}\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          onFocus={this.handleFocus}\n          placeholder={this.props.placeholder}\n          plugins={this.plugins}\n          spellCheck={false}\n          value={this.state.value}\n        />\n      </div>\n    );\n  }\n}\n\nexport default QueryField;\n","import React from 'react';\nimport Prism from 'prismjs';\nimport { Decoration } from 'slate';\nimport { Editor } from '@grafana/slate-react';\n\nconst TOKEN_MARK = 'prism-token';\n\nexport function setPrismTokens(language: string, field: string | number, values: any, alias = 'variable') {\n  Prism.languages[language][field] = {\n    alias,\n    pattern: new RegExp(`(?:^|\\\\s)(${values.join('|')})(?:$|\\\\s)`),\n  };\n}\n\n/**\n * Code-highlighting plugin based on Prism and\n * https://github.com/ianstormtaylor/slate/blob/master/examples/code-highlighting/index.js\n *\n * (Adapted to handle nested grammar definitions.)\n */\n\nexport default function PrismPlugin({ definition, language }: { definition: any; language: string }) {\n  if (definition) {\n    // Don't override exising modified definitions\n    Prism.languages[language] = Prism.languages[language] || definition;\n  }\n\n  return {\n    /**\n     * Render a Slate mark with appropiate CSS class names\n     *\n     * @param {Object} props\n     * @return {Element}\n     */\n\n    renderDecoration(props: any, editor: Editor, next: () => any): JSX.Element {\n      const { children, decoration } = props;\n      // Only apply spans to marks identified by this plugin\n      if (decoration.type !== TOKEN_MARK) {\n        return next();\n      }\n      const className = `token ${decoration.data.get('types')}`;\n      return <span className={className}>{children}</span>;\n    },\n\n    /**\n     * Decorate code blocks with Prism.js highlighting.\n     *\n     * @param {Node} node\n     * @return {Array}\n     */\n\n    decorateNode(node: any, editor: Editor, next: () => any): any[] {\n      if (node.type !== 'paragraph') {\n        return [];\n      }\n\n      const texts = node.getTexts().toArray();\n      const tstring = texts.map((t: { text: any }) => t.text).join('\\n');\n      const grammar = Prism.languages[language];\n      const tokens = Prism.tokenize(tstring, grammar);\n      const decorations: Decoration[] = [];\n      let startText = texts.shift();\n      let endText = startText;\n      let startOffset = 0;\n      let endOffset = 0;\n      let start = 0;\n\n      function processToken(token: any, acc?: string) {\n        // Accumulate token types down the tree\n        const types = `${acc || ''} ${token.type || ''} ${token.alias || ''}`;\n\n        // Add mark for token node\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          startText = endText;\n          startOffset = endOffset;\n\n          const content = typeof token === 'string' ? token : token.content;\n          const newlines = content.split('\\n').length - 1;\n          const length = content.length - newlines;\n          const end = start + length;\n\n          let available = startText.text.length - startOffset;\n          let remaining = length;\n\n          endOffset = startOffset + remaining;\n\n          while (available < remaining) {\n            endText = texts.shift();\n            remaining = length - available;\n            available = endText.text.length;\n            endOffset = remaining;\n          }\n\n          // Inject marks from up the tree (acc) as well\n          if (typeof token !== 'string' || acc) {\n            const range = node.createDecoration({\n              anchor: {\n                key: startText.key,\n                offset: startOffset,\n              },\n              focus: {\n                key: endText.key,\n                offset: endOffset,\n              },\n              type: TOKEN_MARK,\n              data: { types },\n            });\n\n            decorations.push(range);\n          }\n\n          start = end;\n        } else if (token.content && token.content.length) {\n          // Tokens can be nested\n          for (const subToken of token.content) {\n            processToken(subToken, types);\n          }\n        }\n      }\n\n      // Process top-level tokens\n      for (const token of tokens) {\n        processToken(token);\n      }\n\n      return decorations;\n    },\n  };\n}\n","/* eslint-disable max-len */\nexport const operatorTokens = [\n  { text: '!between', hint: 'Matches the input that is outside the inclusive range.' },\n  { text: 'as', hint: \"Binds a name to the operator's input tabular expression.\" },\n  { text: 'between', hint: 'Matches the input that is inside the inclusive range.' },\n  {\n    text: 'consume',\n    hint:\n      'The `consume` operator consumes the tabular data stream handed to it. It is\\r\\nmostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.',\n  },\n  { text: 'count', hint: 'Returns the number of records in the input record set.' },\n  { text: 'datatable', hint: 'Returns a table whose schema and values are defined in the query itself.' },\n  {\n    text: 'distinct',\n    hint: 'Produces a table with the distinct combination of the provided columns of the input table.',\n  },\n  { text: 'evaluate', hint: 'Invokes a service-side query extension (plugin).' },\n  { text: 'extend', hint: 'Create calculated columns and append them to the result set.' },\n  {\n    text: 'externaldata',\n    hint:\n      'Returns a table whose schema is defined in the query itself, and whose data is read from an external raw file.',\n  },\n  {\n    text: 'facet',\n    hint:\n      'Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.',\n  },\n  { text: 'find', hint: 'Finds rows that match a predicate across a set of tables.' },\n  { text: 'fork', hint: 'Runs multiple consumer operators in parallel.' },\n  { text: 'getschema', hint: 'Produce a table that represents a tabular schema of the input.' },\n  { text: 'in', hint: 'Filters a recordset based on the provided set of values.' },\n  { text: 'invoke', hint: 'Invokes lambda that receives the source of `invoke` as tabular parameter argument.' },\n  {\n    text: 'join',\n    hint:\n      'Merge the rows of two tables to form a new table by matching values of the specified column(s) from each table.',\n  },\n  { text: 'limit', hint: 'Return up to the specified number of rows.' },\n  { text: 'make-series', hint: 'Create series of specified aggregated values along specified axis.' },\n  { text: 'mvexpand', hint: 'Expands multi-value array or property bag.' },\n  { text: 'order', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'parse', hint: 'Evaluates a string expression and parses its value into one or more calculated columns.' },\n  {\n    text: 'print',\n    hint:\n      'Evaluates one or more scalar expressions and inserts the results (as a single-row table with as many columns as there are expressions) into the output.',\n  },\n  { text: 'project', hint: 'Select the columns to include, rename or drop, and insert new computed columns.' },\n  { text: 'project-away', hint: 'Select what  columns to exclude from the input.' },\n  { text: 'project-rename', hint: 'Renames columns in the result output.' },\n  { text: 'range', hint: 'Generates a single-column table of values.' },\n  { text: 'reduce', hint: 'Groups a set of strings together based on values similarity.' },\n  { text: 'render', hint: 'Instructs the user agent to render the results of the query in a particular way.' },\n  { text: 'sample', hint: 'Returns up to the specified number of random rows from the input table.' },\n  {\n    text: 'sample-distinct',\n    hint:\n      'Returns a single column that contains up to the specified number of distinct values of the requested column.',\n  },\n  { text: 'search', hint: 'The search operator provides a multi-table/multi-column search experience.' },\n  { text: 'serialize', hint: 'Marks that order of the input row set is safe for window functions usage.' },\n  { text: 'sort', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'summarize', hint: 'Produces a table that aggregates the content of the input table.' },\n  { text: 'take', hint: 'Return up to the specified number of rows.' },\n  { text: 'top', hint: 'Returns the first *N* records sorted by the specified columns.' },\n  {\n    text: 'top-hitters',\n    hint: 'Returns an approximation of the first *N* results (assuming skewed distribution of the input).',\n  },\n  {\n    text: 'top-nested',\n    hint: 'Produces hierarchical top results, where each level is a drill-down based on previous level values.',\n  },\n  { text: 'union', hint: 'Takes two or more tables and returns the rows of all of them.' },\n  { text: 'where', hint: 'Filters a table to the subset of rows that satisfy a predicate.' },\n];\n\nexport const functionTokens = [\n  { text: 'abs', hint: 'Calculates the absolute value of the input.' },\n  {\n    text: 'acos',\n    hint:\n      'Returns the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)) .',\n  },\n  { text: 'ago', hint: 'Subtracts the given timespan from the current UTC clock time.' },\n  { text: 'any', hint: 'Returns random non-empty value from the specified expression values.' },\n  {\n    text: 'arg_max',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'arg_min',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmax',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmin',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  { text: 'array_concat', hint: 'Concatenates a number of dynamic arrays to a single array.' },\n  { text: 'array_length', hint: 'Calculates the number of elements in a dynamic array.' },\n  { text: 'array_slice', hint: 'Extracts a slice of a dynamic array.' },\n  {\n    text: 'array_split',\n    hint:\n      'Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.',\n  },\n  {\n    text: 'asin',\n    hint: 'Returns the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)) .',\n  },\n  {\n    text: 'assert',\n    hint: 'Checks for a condition; if the condition is false, outputs error messages and fails the query.',\n  },\n  {\n    text: 'atan',\n    hint:\n      'Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)) .',\n  },\n  {\n    text: 'atan2',\n    hint:\n      'Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).',\n  },\n  { text: 'avg', hint: 'Calculates the average of *Expr* across the group.' },\n  {\n    text: 'avgif',\n    hint:\n      'Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  { text: 'bag_keys', hint: 'Enumerates all the root keys in a dynamic property-bag object.' },\n  { text: 'base64_decodestring', hint: 'Decodes a base64 string to a UTF-8 string' },\n  { text: 'base64_encodestring', hint: 'Encodes a string as base64 string' },\n  { text: 'beta_cdf', hint: 'Returns the standard cumulative beta distribution function.' },\n  { text: 'beta_inv', hint: 'Returns the inverse of the beta cumulative probability beta density function.' },\n  { text: 'beta_pdf', hint: 'Returns the probability density beta function.' },\n  { text: 'bin', hint: 'Rounds values down to an integer multiple of a given bin size.' },\n  {\n    text: 'bin_at',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin's starting point.\\r\\n(See also [`bin function`](./binfunction.md).)\",\n  },\n  {\n    text: 'bin_auto',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin size and starting point provided by a query property.\",\n  },\n  { text: 'binary_and', hint: 'Returns a result of the bitwise `and` operation between two values.' },\n  { text: 'binary_not', hint: 'Returns a bitwise negation of the input value.' },\n  { text: 'binary_or', hint: 'Returns a result of the bitwise `or` operation of the two values.' },\n  { text: 'binary_shift_left', hint: 'Returns binary shift left operation on a pair of numbers.' },\n  { text: 'binary_shift_right', hint: 'Returns binary shift right operation on a pair of numbers.' },\n  { text: 'binary_xor', hint: 'Returns a result of the bitwise `xor` operation of the two values.' },\n  { text: 'buildschema', hint: 'Returns the minimal schema that admits all values of *DynamicExpr*.' },\n  {\n    text: 'case',\n    hint: 'Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.',\n  },\n  {\n    text: 'ceiling',\n    hint: 'Calculates the smallest integer greater than, or equal to, the specified numeric expression.',\n  },\n  { text: 'cluster', hint: 'Changes the reference of the query to a remote cluster.' },\n  {\n    text: 'coalesce',\n    hint: 'Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.',\n  },\n  { text: 'cos', hint: 'Returns the cosine function.' },\n  { text: 'cot', hint: 'Calculates the trigonometric cotangent of the specified angle, in radians.' },\n  {\n    text: 'count',\n    hint:\n      'Returns a count of the records per summarization group (or in total if summarization is done without grouping).',\n  },\n  { text: 'countif', hint: 'Returns a count of rows for which *Predicate* evaluates to `true`.' },\n  {\n    text: 'countof',\n    hint: 'Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches do not.',\n  },\n  { text: 'current_principal', hint: 'Returns the current principal running this query.' },\n  {\n    text: 'cursor_after',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  {\n    text: 'cursor_before_or_at',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  { text: 'database', hint: 'Changes the reference of the query to a specific database within the cluster scope.' },\n  {\n    text: 'datetime_add',\n    hint:\n      'Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).',\n  },\n  {\n    text: 'datetime_diff',\n    hint: 'Calculates calendarian difference between two [datetime](./scalar-data-types/datetime.md) values.',\n  },\n  { text: 'datetime_part', hint: 'Extracts the requested date part as an integer value.' },\n  { text: 'dayofmonth', hint: 'Returns the integer number representing the day number of the given month' },\n  { text: 'dayofweek', hint: 'Returns the integer number of days since the preceding Sunday, as a `timespan`.' },\n  { text: 'dayofyear', hint: 'Returns the integer number represents the day number of the given year.' },\n  { text: 'dcount', hint: 'Returns an estimate of the number of distinct values of *Expr* in the group.' },\n  {\n    text: 'dcount_hll',\n    hint:\n      'Calculates the dcount from hll results (which was generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).',\n  },\n  {\n    text: 'dcountif',\n    hint:\n      'Returns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'degrees',\n    hint:\n      'Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`',\n  },\n  { text: 'distance', hint: 'Returns the distance between two points in meters.' },\n  { text: 'endofday', hint: 'Returns the end of the day containing the date, shifted by an offset, if provided.' },\n  { text: 'endofmonth', hint: 'Returns the end of the month containing the date, shifted by an offset, if provided.' },\n  { text: 'endofweek', hint: 'Returns the end of the week containing the date, shifted by an offset, if provided.' },\n  { text: 'endofyear', hint: 'Returns the end of the year containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'estimate_data_size',\n    hint: 'Returns an estimated data size of the selected columns of the tabular expression.',\n  },\n  { text: 'exp', hint: 'The base-e exponential function of x, which is e raised to the power x: e^x.' },\n  {\n    text: 'exp10',\n    hint: 'The base-10 exponential function of x, which is 10 raised to the power x: 10^x.  \\r\\n**Syntax**',\n  },\n  { text: 'exp2', hint: 'The base-2 exponential function of x, which is 2 raised to the power x: 2^x.' },\n  {\n    text: 'extent_id',\n    hint: 'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\n  },\n  {\n    text: 'extent_tags',\n    hint:\n      'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record resides in.',\n  },\n  { text: 'extract', hint: 'Get a match for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extract_all', hint: 'Get all matches for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extractjson', hint: 'Get a specified element out of a JSON text using a path expression.' },\n  { text: 'floor', hint: 'An alias for [`bin()`](binfunction.md).' },\n  { text: 'format_datetime', hint: 'Formats a datetime parameter based on the format pattern parameter.' },\n  { text: 'format_timespan', hint: 'Formats a timespan parameter based on the format pattern parameter.' },\n  { text: 'gamma', hint: 'Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)' },\n  { text: 'getmonth', hint: 'Get the month number (1-12) from a datetime.' },\n  { text: 'gettype', hint: 'Returns the runtime type of its single argument.' },\n  { text: 'getyear', hint: 'Returns the year part of the `datetime` argument.' },\n  { text: 'hash', hint: 'Returns a hash value for the input value.' },\n  { text: 'hash_sha256', hint: 'Returns a sha256 hash value for the input value.' },\n  { text: 'hll', hint: 'Calculates the Intermediate results of [dcount](dcount-aggfunction.md) across the group.' },\n  {\n    text: 'hll_merge',\n    hint: 'Merges hll results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).',\n  },\n  { text: 'hourofday', hint: 'Returns the integer number representing the hour number of the given date' },\n  {\n    text: 'iff',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'iif',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'indexof',\n    hint: 'Function reports the zero-based index of the first occurrence of a specified string within input string.',\n  },\n  { text: 'ingestion_time', hint: \"Retrieves the record's `$IngestionTime` hidden `datetime` column, or null.\" },\n  {\n    text: 'iscolumnexists',\n    hint:\n      'Returns a boolean value indicating if the given string argument exists in the schema produced by the preceding tabular operator.',\n  },\n  { text: 'isempty', hint: 'Returns `true` if the argument is an empty string or is null.' },\n  { text: 'isfinite', hint: 'Returns whether input is a finite value (is neither infinite nor NaN).' },\n  { text: 'isinf', hint: 'Returns whether input is an infinite (positive or negative) value.' },\n  { text: 'isnan', hint: 'Returns whether input is Not-a-Number (NaN) value.' },\n  { text: 'isnotempty', hint: 'Returns `true` if the argument is not an empty string nor it is a null.' },\n  { text: 'isnotnull', hint: 'Returns `true` if the argument is not null.' },\n  {\n    text: 'isnull',\n    hint:\n      'Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.',\n  },\n  { text: 'log', hint: 'Returns the natural logarithm function.' },\n  { text: 'log10', hint: 'Returns the common (base-10) logarithm function.' },\n  { text: 'log2', hint: 'Returns the base-2 logarithm function.' },\n  {\n    text: 'loggamma',\n    hint: 'Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)',\n  },\n  {\n    text: 'make_datetime',\n    hint: 'Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.',\n  },\n  {\n    text: 'make_dictionary',\n    hint: 'Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *Expr* in the group.',\n  },\n  { text: 'make_string', hint: 'Returns the string generated by the Unicode characters.' },\n  {\n    text: 'make_timespan',\n    hint: 'Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.',\n  },\n  { text: 'makelist', hint: 'Returns a `dynamic` (JSON) array of all the values of *Expr* in the group.' },\n  {\n    text: 'makeset',\n    hint: 'Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.',\n  },\n  {\n    text: 'materialize',\n    hint:\n      'Allows caching a sub-query result during the time of query execution in a way that other subqueries can reference the partial result.',\n  },\n  { text: 'max', hint: 'Returns the maximum value across the group.' },\n  { text: 'max_of', hint: 'Returns the maximum value of several evaluated numeric expressions.' },\n  {\n    text: 'merge_tdigests',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`merge_tdigests()`](merge-tdigests-aggfunction.md)).',\n  },\n  { text: 'min', hint: 'Returns the minimum value agross the group.' },\n  { text: 'min_of', hint: 'Returns the minimum value of several evaluated numeric expressions.' },\n  { text: 'monthofyear', hint: 'Returns the integer number represents the month number of the given year.' },\n  {\n    text: 'next',\n    hint:\n      'Returns the value of a column in a row that it at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  { text: 'not', hint: 'Reverses the value of its `bool` argument.' },\n  {\n    text: 'now',\n    hint:\n      'Returns the current UTC clock time, optionally offset by a given timespan.\\r\\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.',\n  },\n  { text: 'pack', hint: 'Creates a `dynamic` object (property bag) from a list of names and values.' },\n  {\n    text: 'pack_all',\n    hint: 'Creates a `dynamic` object (property bag) from all the columns of the tabular expression.',\n  },\n  { text: 'pack_array', hint: 'Packs all input values into a dynamic array.' },\n  { text: 'parse_ipv4', hint: 'Converts input to integer (signed 64-bit) number representation.' },\n  {\n    text: 'parse_json',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/)) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md). \\r\\nIt is superior to using [extractjson() function](./extractjsonfunction.md)\\r\\nwhen you need to extract more than one element of a JSON compound object.',\n  },\n  {\n    text: 'parse_path',\n    hint:\n      'Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path: \\r\\nScheme, RootPath, DirectoryPath, DirectoryName, FileName, Extension, AlternateDataStreamName.\\r\\nIn addition to the simple paths with both types of slashes, supports paths with schemas (e.g. \"file://...\"), shared paths (e.g. \"\\\\\\\\shareddrive\\\\users...\"), long paths (e.g \"\\\\\\\\?\\\\C:...\"\"), alternate data streams (e.g. \"file1.exe:file2.exe\")',\n  },\n  {\n    text: 'parse_url',\n    hint:\n      'Parses an absolute URL `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains all parts of the URL (Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment).',\n  },\n  {\n    text: 'parse_urlquery',\n    hint:\n      'Parses a url query `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains the Query parameters.',\n  },\n  {\n    text: 'parse_user_agent',\n    hint:\n      \"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",\n  },\n  { text: 'parse_version', hint: 'Converts input string representation of version to a comparable decimal number.' },\n  {\n    text: 'parse_xml',\n    hint:\n      'Interprets a `string` as a XML value, converts the value to a [JSON value](https://json.org/) and returns the value as  [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  {\n    text: 'percentile',\n    hint:\n      'Returns an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by *Expr*. \\r\\nThe accuracy depends on the density of population in the region of the percentile.',\n  },\n  {\n    text: 'percentile_tdigest',\n    hint:\n      'Calculates the percentile result from tdigest results (which was generated by [tdigest](tdigest-aggfunction.md) or [merge-tdigests](merge-tdigests-aggfunction.md))',\n  },\n  {\n    text: 'percentrank_tdigest',\n    hint:\n      \"Calculates the approximate rank of the value in a set where rank is expressed as percentage of set's size. \\r\\nThis function can be viewed as the inverse of the percentile.\",\n  },\n  { text: 'pi', hint: 'Returns the constant value of Pi (π).' },\n  { text: 'point', hint: 'Returns a dynamic array representation of a point.' },\n  { text: 'pow', hint: 'Returns a result of raising to power' },\n  {\n    text: 'prev',\n    hint:\n      'Returns the value of a column in a row that it at some offset prior to the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'radians',\n    hint:\n      'Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`',\n  },\n  { text: 'rand', hint: 'Returns a random number.' },\n  { text: 'range', hint: 'Generates a dynamic array holding a series of equally-spaced values.' },\n  { text: 'repeat', hint: 'Generates a dynamic array holding a series of equal values.' },\n  { text: 'replace', hint: 'Replace all regex matches with another string.' },\n  { text: 'reverse', hint: 'Function makes reverse of input string.' },\n  { text: 'round', hint: 'Returns the rounded source to the specified precision.' },\n  {\n    text: 'row_cumsum',\n    hint:\n      'Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'row_number',\n    hint:\n      \"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\",\n  },\n  { text: 'series_add', hint: 'Calculates the element-wise addition of two numeric series inputs.' },\n  { text: 'series_decompose', hint: 'Applies a decomposition transformation on a series.' },\n  {\n    text: 'series_decompose_anomalies',\n    hint:\n      'Anomaly Detection based on series decomposition (refer to [series_decompose()](series-decomposefunction.md))',\n  },\n  { text: 'series_decompose_forecast', hint: 'Forecast based on series decomposition.' },\n  { text: 'series_divide', hint: 'Calculates the element-wise division of two numeric series inputs.' },\n  {\n    text: 'series_equals',\n    hint: 'Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_fill_backward', hint: 'Performs backward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_const', hint: 'Replaces missing values in a series with a specified constant value.' },\n  { text: 'series_fill_forward', hint: 'Performs forward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_linear', hint: 'Performs linear interpolation of missing values in a series.' },\n  { text: 'series_fir', hint: 'Applies a Finite Impulse Response filter on a series.' },\n  {\n    text: 'series_fit_2lines',\n    hint: 'Applies two segments linear regression on a series, returning multiple columns.',\n  },\n  {\n    text: 'series_fit_2lines_dynamic',\n    hint: 'Applies two segments linear regression on a series, returning dynamic object.',\n  },\n  { text: 'series_fit_line', hint: 'Applies linear regression on a series, returning multiple columns.' },\n  { text: 'series_fit_line_dynamic', hint: 'Applies linear regression on a series, returning dynamic object.' },\n  {\n    text: 'series_greater',\n    hint: 'Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.',\n  },\n  {\n    text: 'series_greater_equals',\n    hint: 'Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_iir', hint: 'Applies a Infinite Impulse Response filter on a series.' },\n  { text: 'series_less', hint: 'Calculates the element-wise less (`<`) logic operation of two numeric series inputs.' },\n  {\n    text: 'series_less_equals',\n    hint: 'Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_multiply', hint: 'Calculates the element-wise multiplication of two numeric series inputs.' },\n  {\n    text: 'series_not_equals',\n    hint: 'Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_outliers', hint: 'Scores anomaly points in a series.' },\n  { text: 'series_periods_detect', hint: 'Finds the most significant periods that exist in a time series.' },\n  {\n    text: 'series_periods_validate',\n    hint: 'Checks whether a time series contains periodic patterns of given lengths.',\n  },\n  {\n    text: 'series_seasonal',\n    hint: 'Calculates the seasonal component of a series according to the detected or given seasonal period.',\n  },\n  { text: 'series_stats', hint: 'Returns statistics for a series in multiple columns.' },\n  { text: 'series_stats_dynamic', hint: 'Returns statistics for a series in dynamic object.' },\n  { text: 'series_subtract', hint: 'Calculates the element-wise subtraction of two numeric series inputs.' },\n  { text: 'sign', hint: 'Sign of a numeric expression' },\n  { text: 'sin', hint: 'Returns the sine function.' },\n  {\n    text: 'split',\n    hint:\n      'Splits a given string according to a given delimiter and returns a string array with the contained substrings.',\n  },\n  { text: 'sqrt', hint: 'Returns the square root function.' },\n  { text: 'startofday', hint: 'Returns the start of the day containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'startofmonth',\n    hint: 'Returns the start of the month containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofweek',\n    hint: 'Returns the start of the week containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofyear',\n    hint: 'Returns the start of the year containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'stdev',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'stdevif',\n    hint:\n      'Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'stdevp',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'strcat', hint: 'Concatenates between 1 and 64 arguments.' },\n  { text: 'strcat_array', hint: 'Creates a concatenated string of array values using specified delimiter.' },\n  {\n    text: 'strcat_delim',\n    hint: 'Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.',\n  },\n  { text: 'strcmp', hint: 'Compares two strings.' },\n  { text: 'string_size', hint: 'Returns the size, in bytes, of the input string.' },\n  { text: 'strlen', hint: 'Returns the length, in characters, of the input string.' },\n  { text: 'strrep', hint: 'Repeats given [string](./scalar-data-types/string.md) provided amount of times.' },\n  {\n    text: 'substring',\n    hint: 'Extracts a substring from a source string starting from some index to the end of the string.',\n  },\n  { text: 'sum', hint: 'Calculates the sum of *Expr* across the group.' },\n  { text: 'sumif', hint: 'Returns a sum of *Expr* for which *Predicate* evaluates to `true`.' },\n  { text: 'table', hint: 'References specific table using an query-time evaluated string-expression.' },\n  { text: 'tan', hint: 'Returns the tangent function.' },\n  {\n    text: 'tdigest',\n    hint: 'Calculates the Intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.',\n  },\n  {\n    text: 'tdigest_merge',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).',\n  },\n  { text: 'tobool', hint: 'Converts input to boolean (signed 8-bit) representation.' },\n  { text: 'todatetime', hint: 'Converts input to [datetime](./scalar-data-types/datetime.md) scalar.' },\n  { text: 'todecimal', hint: 'Converts input to decimal number representation.' },\n  {\n    text: 'todouble',\n    hint: 'Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)',\n  },\n  {\n    text: 'todynamic',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  { text: 'toguid', hint: 'Converts input to [`guid`](./scalar-data-types/guid.md) representation.' },\n  { text: 'tohex', hint: 'Converts input to a hexadecimal string.' },\n  { text: 'toint', hint: 'Converts input to integer (signed 32-bit) number representation.' },\n  { text: 'tolong', hint: 'Converts input to long (signed 64-bit) number representation.' },\n  { text: 'tolower', hint: 'Converts input string to lower case.' },\n  { text: 'toscalar', hint: 'Returns a scalar constant value of the evaluated expression.' },\n  { text: 'tostring', hint: 'Converts input to a string representation.' },\n  { text: 'totimespan', hint: 'Converts input  to [timespan](./scalar-data-types/timespan.md) scalar.' },\n  { text: 'toupper', hint: 'Converts a string to upper case.' },\n  {\n    text: 'translate',\n    hint:\n      \"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\n  },\n  { text: 'treepath', hint: 'Enumerates all the path expressions that identify leaves in a dynamic object.' },\n  { text: 'trim', hint: 'Removes all leading and trailing matches of the specified regular expression.' },\n  { text: 'trim_end', hint: 'Removes trailing match of the specified regular expression.' },\n  { text: 'trim_start', hint: 'Removes leading match of the specified regular expression.' },\n  { text: 'url_decode', hint: 'The function converts encoded URL into a to regular URL representation.' },\n  {\n    text: 'url_encode',\n    hint: 'The function converts characters of the input URL into a format that can be transmitted over the Internet.',\n  },\n  {\n    text: 'variance',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'varianceif',\n    hint:\n      'Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'variancep',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'weekofyear', hint: 'Returns the integer number represents the week number.' },\n  {\n    text: 'welch_test',\n    hint: 'Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)',\n  },\n  {\n    text: 'zip',\n    hint:\n      'The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.',\n  },\n];\n\nexport const KEYWORDS = [\n  'by',\n  'on',\n  'contains',\n  'notcontains',\n  'containscs',\n  'notcontainscs',\n  'startswith',\n  'has',\n  'matches',\n  'regex',\n  'true',\n  'false',\n  'and',\n  'or',\n  'typeof',\n  'int',\n  'string',\n  'date',\n  'datetime',\n  'time',\n  'long',\n  'real',\n  '​boolean',\n  'bool',\n];\n\nexport const grafanaMacros = [\n  {\n    text: '$__timeFilter',\n    display: '$__timeFilter()',\n    hint: 'Macro that uses the selected timerange in Grafana to filter the query.',\n  },\n  {\n    text: '$__timeTo',\n    display: '$__timeTo()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T20:09:58.907Z).',\n  },\n  {\n    text: '$__timeFrom',\n    display: '$__timeFrom()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T18:09:58.907Z).',\n  },\n  {\n    text: '$__escapeMulti',\n    display: '$__escapeMulti()',\n    hint: 'Macro to escape multi-value template variables that contain illegal characters.',\n  },\n  { text: '$__contains', display: '$__contains()', hint: 'Macro for multi-value template variables.' },\n];\n\n// Kusto operators\n// export const OPERATORS = ['+', '-', '*', '/', '>', '<', '==', '<>', '<=', '>=', '~', '!~'];\n\nexport const DURATION = ['SECONDS', 'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS', 'YEARS'];\n\nconst tokenizer = {\n  comment: {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true,\n  },\n  'function-context': {\n    pattern: /[a-z0-9_]+\\([^)]*\\)?/i,\n    inside: {},\n  },\n  duration: {\n    pattern: new RegExp(`${DURATION.join('?|')}?`, 'i'),\n    alias: 'number',\n  },\n  builtin: new RegExp(`\\\\b(?:${functionTokens.map(f => f.text).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n  },\n  keyword: new RegExp(`\\\\b(?:${KEYWORDS.join('|')}|${operatorTokens.map(f => f.text).join('|')}|\\\\*)\\\\b`, 'i'),\n  boolean: /\\b(?:true|false)\\b/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  operator: /-|\\+|\\*|\\/|>|<|==|<=?|>=?|<>|!~|~|=|\\|/,\n  punctuation: /[{};(),.:]/,\n  variable: /(\\[\\[(.+?)\\]\\])|(\\$(.+?))\\b/,\n};\n\ntokenizer['function-context'].inside = {\n  argument: {\n    pattern: /[a-z0-9_]+(?=:)/i,\n    alias: 'symbol',\n  },\n  duration: tokenizer.duration,\n  number: tokenizer.number,\n  builtin: tokenizer.builtin,\n  string: tokenizer.string,\n  variable: tokenizer.variable,\n};\n\n// console.log(tokenizer.builtin);\n\nexport default tokenizer;\n\n// function escapeRegExp(str: string): string {\n//   return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n// }\n","import _ from 'lodash';\nimport Plain from 'slate-plain-serializer';\n\nimport QueryField from './query_field';\nimport debounce from 'lodash/debounce';\nimport { DOMUtil } from '@grafana/ui';\nimport { Editor as CoreEditor } from 'slate';\n\nimport { KEYWORDS, functionTokens, operatorTokens, grafanaMacros } from './kusto/kusto';\n// import '../sass/editor.base.scss';\n\nconst TYPEAHEAD_DELAY = 100;\n\ninterface Suggestion {\n  text: string;\n  deleteBackwards?: number;\n  type?: string;\n}\n\ninterface SuggestionGroup {\n  label: string;\n  items: Suggestion[];\n  prefixMatch?: boolean;\n  skipFilter?: boolean;\n}\n\ninterface KustoSchema {\n  Databases: {\n    Default?: KustoDBSchema;\n  };\n  Plugins?: any[];\n}\n\ninterface KustoDBSchema {\n  Name?: string;\n  Functions?: any;\n  Tables?: any;\n}\n\nconst defaultSchema: any = () => ({\n  Databases: {\n    Default: {},\n  },\n});\n\nconst cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%]/g, '').trim();\nconst wrapText = (text: string) => ({ text });\n\nexport default class KustoQueryField extends QueryField {\n  fields: any;\n  events: any;\n  schema: KustoSchema;\n\n  constructor(props: any, context: any) {\n    super(props, context);\n    this.schema = defaultSchema();\n\n    this.onTypeahead = debounce(this.onTypeahead, TYPEAHEAD_DELAY);\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.fetchSchema();\n  }\n\n  onTypeahead = (force = false) => {\n    const selection = window.getSelection();\n    if (selection.anchorNode) {\n      const wrapperNode = selection.anchorNode.parentElement;\n      if (wrapperNode === null) {\n        return;\n      }\n      const editorNode = wrapperNode.closest('.slate-query-field');\n      if (!editorNode || this.state.value.isBlurred) {\n        // Not inside this editor\n        return;\n      }\n\n      // DOM ranges\n      const range = selection.getRangeAt(0);\n      const text = selection.anchorNode.textContent;\n      if (text === null) {\n        return;\n      }\n      const offset = range.startOffset;\n      let prefix = cleanText(text.substr(0, offset));\n\n      // Model ranges\n      const modelOffset = this.state.value.anchorOffset;\n      const modelPrefix = this.state.value.anchorText.text.slice(0, modelOffset);\n\n      // Determine candidates by context\n      let suggestionGroups: SuggestionGroup[] = [];\n      const wrapperClasses = wrapperNode.classList;\n      let typeaheadContext: string | null = null;\n\n      // Built-in functions\n      if (wrapperClasses.contains('function-context')) {\n        typeaheadContext = 'context-function';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // where\n      } else if (modelPrefix.match(/(where\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-where';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // summarize by\n      } else if (modelPrefix.match(/(summarize\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize';\n        suggestionGroups = this.getFunctionSuggestions();\n      } else if (modelPrefix.match(/(summarize\\s(.+\\s)?by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // order by, top X by, ... by ...\n      } else if (modelPrefix.match(/(by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // join\n      } else if (modelPrefix.match(/(on\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-join-on';\n        suggestionGroups = this.getColumnSuggestions();\n      } else if (modelPrefix.match(/(join\\s+(\\(\\s+)?(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-join';\n        suggestionGroups = this.getTableSuggestions();\n\n        // distinct\n      } else if (modelPrefix.match(/(distinct\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-distinct';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // database()\n      } else if (modelPrefix.match(/(database\\(\\\"(\\w+)\\\"\\)\\.(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-database-table';\n        const db = this.getDBFromDatabaseFunction(modelPrefix);\n        console.log(db);\n        suggestionGroups = this.getTableSuggestions(db);\n        prefix = prefix.replace('.', '');\n\n        // new\n      } else if (normalizeQuery(Plain.serialize(this.state.value)).match(/^\\s*\\w*$/i)) {\n        typeaheadContext = 'context-new';\n        if (this.schema) {\n          suggestionGroups = this.getInitialSuggestions();\n        } else {\n          this.fetchSchema();\n          setTimeout(this.onTypeahead, 0);\n          return;\n        }\n\n        // built-in\n      } else if (prefix && !wrapperClasses.contains('argument') && !force) {\n        // Use only last typed word as a prefix for searching\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n          return;\n        }\n        prefix = getLastWord(prefix);\n        typeaheadContext = 'context-builtin';\n        suggestionGroups = this.getKeywordSuggestions();\n      } else if (force === true) {\n        typeaheadContext = 'context-builtin-forced';\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n        }\n        suggestionGroups = this.getKeywordSuggestions();\n      }\n\n      let results = 0;\n      prefix = prefix.toLowerCase();\n      const filteredSuggestions = suggestionGroups\n        .map(group => {\n          if (group.items && prefix && !group.skipFilter) {\n            group.items = group.items.filter(c => c.text.length >= prefix.length);\n            if (group.prefixMatch) {\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) === 0);\n            } else {\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) > -1);\n            }\n          }\n          results += group.items.length;\n          return group;\n        })\n        .filter(group => group.items.length > 0);\n\n      // console.log('onTypeahead', selection.anchorNode, wrapperClasses, text, offset, prefix, typeaheadContext);\n      // console.log('onTypeahead', prefix, typeaheadContext, force);\n\n      this.setState({\n        typeaheadPrefix: prefix,\n        typeaheadContext,\n        typeaheadText: text,\n        suggestions: results > 0 ? filteredSuggestions : [],\n      });\n    }\n  };\n\n  applyTypeahead = (editor: CoreEditor, suggestion: { text: any; type: string; deleteBackwards: any }): CoreEditor => {\n    const { typeaheadPrefix, typeaheadContext, typeaheadText } = this.state;\n    let suggestionText = suggestion.text || suggestion;\n    const move = 0;\n\n    // Modify suggestion based on context\n\n    const nextChar = DOMUtil.getNextCharacter();\n    if (suggestion.type === 'function') {\n      if (!nextChar || nextChar !== '(') {\n        suggestionText += '(';\n      }\n    } else if (typeaheadContext === 'context-function') {\n      if (!nextChar || nextChar !== ')') {\n        suggestionText += ')';\n      }\n    } else {\n      if (!nextChar || nextChar !== ' ') {\n        suggestionText += ' ';\n      }\n    }\n\n    // Remove the current, incomplete text and replace it with the selected suggestion\n    const backward = suggestion.deleteBackwards || typeaheadPrefix.length;\n    const text = cleanText(typeaheadText);\n    const suffixLength = text.length - typeaheadPrefix.length;\n    const offset = typeaheadText.indexOf(typeaheadPrefix);\n    const midWord = typeaheadPrefix && ((suffixLength > 0 && offset > -1) || suggestionText === typeaheadText);\n    const forward = midWord ? suffixLength + offset : 0;\n\n    this.resetTypeahead(() =>\n      editor\n        .deleteBackward(backward)\n        .deleteForward(forward)\n        .insertText(suggestionText)\n        .moveForward(move)\n        .focus()\n    );\n\n    return editor;\n  };\n\n  // private _getFieldsSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterFromSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       skipFilter: true,\n  //       label: 'Events',\n  //       items: this.events.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables\n  //         .map(wrapText)\n  //         .map(suggestion => {\n  //           suggestion.deleteBackwards = 0;\n  //           return suggestion;\n  //         })\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterSelectSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Functions',\n  //       items: FUNCTIONS.map((s: any) => { s.type = 'function'; return s; })\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  private getInitialSuggestions(): SuggestionGroup[] {\n    return this.getTableSuggestions();\n  }\n\n  private getKeywordSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Keywords',\n        items: KEYWORDS.map(wrapText),\n      },\n      {\n        prefixMatch: true,\n        label: 'Operators',\n        items: operatorTokens,\n      },\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Tables',\n        items: _.map(this.schema.Databases.Default.Tables, (t: any) => ({ text: t.Name })),\n      },\n    ];\n  }\n\n  private getFunctionSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n    ];\n  }\n\n  getTableSuggestions(db = 'Default'): SuggestionGroup[] {\n    // @ts-ignore\n    if (this.schema.Databases[db]) {\n      return [\n        {\n          prefixMatch: true,\n          label: 'Tables',\n          // @ts-ignore\n          items: _.map(this.schema.Databases[db].Tables, (t: any) => ({ text: t.Name })),\n        },\n      ];\n    } else {\n      return [];\n    }\n  }\n\n  private getColumnSuggestions(): SuggestionGroup[] {\n    const table = this.getTableFromContext();\n    if (table) {\n      const tableSchema = this.schema.Databases.Default.Tables[table];\n      if (tableSchema) {\n        return [\n          {\n            prefixMatch: true,\n            label: 'Fields',\n            items: _.map(tableSchema.OrderedColumns, (f: any) => ({\n              text: f.Name,\n              hint: f.Type,\n            })),\n          },\n        ];\n      }\n    }\n    return [];\n  }\n\n  private getTableFromContext() {\n    const query = Plain.serialize(this.state.value);\n    const tablePattern = /^\\s*(\\w+)\\s*|/g;\n    const normalizedQuery = normalizeQuery(query);\n    const match = tablePattern.exec(normalizedQuery);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private getDBFromDatabaseFunction(prefix: string) {\n    const databasePattern = /database\\(\\\"(\\w+)\\\"\\)/gi;\n    const match = databasePattern.exec(prefix);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private async fetchSchema() {\n    let schema = await this.props.getSchema();\n    if (schema) {\n      if (schema.Type === 'AppInsights') {\n        schema = castSchema(schema);\n      }\n      this.schema = schema;\n    } else {\n      this.schema = defaultSchema();\n    }\n  }\n}\n\n/**\n * Cast schema from App Insights to default Kusto schema\n */\nfunction castSchema(schema: any) {\n  const defaultSchemaTemplate = defaultSchema();\n  defaultSchemaTemplate.Databases.Default = schema;\n  return defaultSchemaTemplate;\n}\n\nfunction normalizeQuery(query: string): string {\n  const commentPattern = /\\/\\/.*$/gm;\n  let normalizedQuery = query.replace(commentPattern, '');\n  normalizedQuery = normalizedQuery.replace('\\n', ' ');\n  return normalizedQuery;\n}\n\nfunction getLastWord(str: string): string {\n  const lastWordPattern = /(?:.*\\s)?([^\\s]+\\s*)$/gi;\n  const match = lastWordPattern.exec(str);\n  if (match && match.length > 1) {\n    return match[1];\n  }\n  return '';\n}\n","import KustoQueryField from './KustoQueryField';\nimport Kusto from './kusto/kusto';\n\nimport React, { Component } from 'react';\nimport coreModule from 'app/core/core_module';\n\ninterface EditorProps {\n  index: number;\n  placeholder?: string;\n  change: (value: string, index: number) => void;\n  variables: () => string[] | string[];\n  getSchema?: () => Promise<any>;\n  execute?: () => void;\n  query?: string;\n}\n\nclass Editor extends Component<EditorProps, any> {\n  static defaultProps = {\n    placeholder: 'Enter a query',\n  };\n\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      edited: false,\n      query: props.query || '',\n    };\n  }\n\n  onChangeQuery = (value: any) => {\n    const { index, change } = this.props;\n    const { query } = this.state;\n    const edited = query !== value;\n    this.setState({ edited, query: value });\n    if (change) {\n      change(value, index);\n    }\n  };\n\n  onPressEnter = () => {\n    const { execute } = this.props;\n    if (execute) {\n      execute();\n    }\n  };\n\n  render() {\n    const { variables, getSchema, placeholder } = this.props;\n    const { edited, query } = this.state;\n\n    return (\n      <div className=\"gf-form-input\" style={{ height: 'auto' }}>\n        <KustoQueryField\n          initialQuery={edited ? null : query}\n          onPressEnter={this.onPressEnter}\n          onQueryChange={this.onChangeQuery}\n          prismLanguage=\"kusto\"\n          prismDefinition={Kusto}\n          placeholder={placeholder}\n          templateVariables={variables}\n          getSchema={getSchema}\n        />\n      </div>\n    );\n  }\n}\n\ncoreModule.directive('kustoEditor', [\n  'reactDirective',\n  reactDirective => {\n    return reactDirective(Editor, [\n      'change',\n      'database',\n      'execute',\n      'query',\n      'variables',\n      'placeholder',\n      ['getSchema', { watchDepth: 'reference' }],\n    ]);\n  },\n]);\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n// import './css/query_editor.css';\nimport TimegrainConverter from './time_grain_converter';\nimport './editor/editor_component';\nimport kbn from 'app/core/utils/kbn';\n\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { auto, IPromise } from 'angular';\nimport { DataFrame, PanelEvents } from '@grafana/data';\nimport { AzureQueryType, AzureMetricQuery } from './types';\n\nexport interface ResultFormat {\n  text: string;\n  value: string;\n}\n\nexport class AzureMonitorQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  defaultDropdownValue = 'select';\n\n  dummyDiminsionString = '+';\n\n  target: {\n    // should be: AzureMonitorQuery\n    refId: string;\n    queryType: AzureQueryType;\n    subscription: string;\n    azureMonitor: AzureMetricQuery;\n    azureLogAnalytics: {\n      query: string;\n      resultFormat: string;\n      workspace: string;\n    };\n    appInsights: {\n      // metric style query when rawQuery == false\n      metricName: string;\n      dimension: any;\n      dimensionFilter: string;\n      dimensions: string[];\n\n      aggOptions: string[];\n      aggregation: string;\n\n      timeGrainType: string;\n      timeGrainCount: string;\n      timeGrainUnit: string;\n      timeGrain: string;\n      timeGrains: Array<{ text: string; value: string }>;\n      allowedTimeGrainsMs: number[];\n    };\n    insightsAnalytics: {\n      query: any;\n      resultFormat: string;\n    };\n  };\n\n  defaults = {\n    queryType: 'Azure Monitor',\n    azureMonitor: {\n      resourceGroup: this.defaultDropdownValue,\n      metricDefinition: this.defaultDropdownValue,\n      resourceName: this.defaultDropdownValue,\n      metricNamespace: this.defaultDropdownValue,\n      metricName: this.defaultDropdownValue,\n      dimensionFilter: '*',\n      timeGrain: 'auto',\n      top: '10',\n      aggOptions: [] as string[],\n      timeGrains: [] as string[],\n    },\n    azureLogAnalytics: {\n      query: [\n        '//change this example to create your own time series query',\n        '<table name>                                                              ' +\n          '//the table to query (e.g. Usage, Heartbeat, Perf)',\n        '| where $__timeFilter(TimeGenerated)                                      ' +\n          '//this is a macro used to show the full chart’s time range, choose the datetime column here',\n        '| summarize count() by <group by column>, bin(TimeGenerated, $__interval) ' +\n          '//change “group by column” to a column in your table, such as “Computer”. ' +\n          'The $__interval macro is used to auto-select the time grain. Can also use 1h, 5m etc.',\n        '| order by TimeGenerated asc',\n      ].join('\\n'),\n      resultFormat: 'time_series',\n      workspace:\n        this.datasource && this.datasource.azureLogAnalyticsDatasource\n          ? this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace\n          : '',\n    },\n    appInsights: {\n      metricName: this.defaultDropdownValue,\n      // dimension: [],\n      timeGrain: 'auto',\n    },\n    insightsAnalytics: {\n      query: '',\n      resultFormat: 'time_series',\n    },\n  };\n\n  resultFormats: ResultFormat[];\n  workspaces: any[];\n  showHelp: boolean;\n  showLastQuery: boolean;\n  lastQuery: string;\n  lastQueryError?: string;\n  subscriptions: Array<{ text: string; value: string }>;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, private templateSrv: TemplateSrv) {\n    super($scope, $injector);\n\n    _.defaultsDeep(this.target, this.defaults);\n\n    this.migrateTimeGrains();\n\n    this.migrateToFromTimes();\n\n    this.migrateToDefaultNamespace();\n\n    this.migrateApplicationInsightsKeys();\n\n    this.migrateApplicationInsightsDimensions();\n\n    migrateMetricsDimensionFilters(this.target.azureMonitor);\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n    this.resultFormats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n    this.getSubscriptions();\n    if (this.target.queryType === 'Azure Log Analytics') {\n      this.getWorkspaces();\n    }\n  }\n\n  onDataReceived(dataList: DataFrame[]) {\n    this.lastQueryError = undefined;\n    this.lastQuery = '';\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery && anySeriesFromQuery.meta) {\n      this.lastQuery = anySeriesFromQuery.meta.query;\n    }\n  }\n\n  onDataError(err: any) {\n    this.handleQueryCtrlError(err);\n  }\n\n  handleQueryCtrlError(err: any) {\n    if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n      return;\n    }\n\n    if (err.error && err.error.data && err.error.data.error && err.error.data.error.innererror) {\n      if (err.error.data.error.innererror.innererror) {\n        this.lastQueryError = err.error.data.error.innererror.innererror.message;\n      } else {\n        this.lastQueryError = err.error.data.error.innererror.message;\n      }\n    } else if (err.error && err.error.data && err.error.data.error) {\n      this.lastQueryError = err.error.data.error.message;\n    } else if (err.error && err.error.data) {\n      this.lastQueryError = err.error.data.message;\n    } else if (err.data && err.data.error) {\n      this.lastQueryError = err.data.error.message;\n    } else if (err.data && err.data.message) {\n      this.lastQueryError = err.data.message;\n    } else {\n      this.lastQueryError = err;\n    }\n  }\n\n  migrateTimeGrains() {\n    if (this.target.azureMonitor.timeGrainUnit) {\n      if (this.target.azureMonitor.timeGrain !== 'auto') {\n        this.target.azureMonitor.timeGrain = TimegrainConverter.createISO8601Duration(\n          this.target.azureMonitor.timeGrain,\n          this.target.azureMonitor.timeGrainUnit\n        );\n      }\n\n      delete this.target.azureMonitor.timeGrainUnit;\n      this.onMetricNameChange();\n    }\n\n    if (this.target.appInsights.timeGrainUnit) {\n      if (this.target.appInsights.timeGrain !== 'auto') {\n        if (this.target.appInsights.timeGrainCount) {\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrainCount,\n            this.target.appInsights.timeGrainUnit\n          );\n        } else {\n          this.target.appInsights.timeGrainCount = this.target.appInsights.timeGrain;\n          this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n            this.target.appInsights.timeGrain,\n            this.target.appInsights.timeGrainUnit\n          );\n        }\n      }\n    }\n\n    const oldAzureTimeGrains = (this.target.azureMonitor as any).timeGrains;\n    if (\n      oldAzureTimeGrains &&\n      oldAzureTimeGrains.length > 0 &&\n      (!this.target.azureMonitor.allowedTimeGrainsMs || this.target.azureMonitor.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(oldAzureTimeGrains);\n    }\n\n    if (\n      this.target.appInsights.timeGrains &&\n      this.target.appInsights.timeGrains.length > 0 &&\n      (!this.target.appInsights.allowedTimeGrainsMs || this.target.appInsights.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.appInsights.allowedTimeGrainsMs = this.convertTimeGrainsToMs(this.target.appInsights.timeGrains);\n    }\n  }\n\n  migrateToFromTimes() {\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ');\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ');\n  }\n\n  async migrateToDefaultNamespace() {\n    if (\n      this.target.azureMonitor.metricNamespace &&\n      this.target.azureMonitor.metricNamespace !== this.defaultDropdownValue &&\n      this.target.azureMonitor.metricDefinition\n    ) {\n      return;\n    }\n\n    this.target.azureMonitor.metricNamespace = this.target.azureMonitor.metricDefinition;\n  }\n\n  migrateApplicationInsightsKeys(): void {\n    const appInsights = this.target.appInsights as any;\n\n    // Migrate old app insights data keys to match other datasources\n    const mappings = {\n      xaxis: 'timeColumn',\n      yaxis: 'valueColumn',\n      spliton: 'segmentColumn',\n      groupBy: 'dimension',\n      groupByOptions: 'dimensions',\n      filter: 'dimensionFilter',\n    } as { [old: string]: string };\n\n    for (const old in mappings) {\n      if (appInsights[old]) {\n        appInsights[mappings[old]] = appInsights[old];\n        delete appInsights[old];\n      }\n    }\n  }\n\n  migrateApplicationInsightsDimensions() {\n    const { appInsights } = this.target;\n\n    if (!appInsights.dimension) {\n      appInsights.dimension = [];\n    }\n\n    if (_.isString(appInsights.dimension)) {\n      appInsights.dimension = [appInsights.dimension as string];\n    }\n  }\n\n  replace(variable: string) {\n    return this.templateSrv.replace(variable, this.panelCtrl.panel.scopedVars);\n  }\n\n  onQueryTypeChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n  }\n\n  getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any) => {\n      this.subscriptions = subs;\n      if (!this.target.subscription && this.target.queryType === 'Azure Monitor') {\n        this.target.subscription = this.datasource.azureMonitorDatasource.subscriptionId;\n      } else if (!this.target.subscription && this.target.queryType === 'Azure Log Analytics') {\n        this.target.subscription = this.datasource.azureLogAnalyticsDatasource.logAnalyticsSubscriptionId;\n      }\n\n      if (!this.target.subscription && this.subscriptions.length > 0) {\n        this.target.subscription = this.subscriptions[0].value;\n      }\n\n      return this.subscriptions;\n    });\n  }\n\n  onSubscriptionChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n\n    if (this.target.queryType === 'Azure Monitor') {\n      this.target.azureMonitor.resourceGroup = this.defaultDropdownValue;\n      this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\n      this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n      this.target.azureMonitor.metricName = this.defaultDropdownValue;\n      this.target.azureMonitor.aggregation = '';\n      this.target.azureMonitor.timeGrain = '';\n      this.target.azureMonitor.dimensionFilters = [];\n    }\n  }\n\n  /* Azure Monitor Section */\n  getResourceGroups(query: any) {\n    if (this.target.queryType !== 'Azure Monitor' || !this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource\n      .getResourceGroups(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricDefinitions(query: any) {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue\n    ) {\n      return;\n    }\n    return this.datasource\n      .getMetricDefinitions(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getResourceNames(query: any) {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getResourceNames(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricNamespaces() {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\n      !this.target.azureMonitor.resourceName ||\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getMetricNamespaces(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricNames() {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\n      !this.target.azureMonitor.resourceName ||\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricNamespace ||\n      this.target.azureMonitor.metricNamespace === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getMetricNames(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName),\n        this.replace(this.target.azureMonitor.metricNamespace)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onResourceGroupChange() {\n    this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensionFilters = [];\n    this.refresh();\n  }\n\n  onMetricDefinitionChange() {\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensionFilters = [];\n  }\n\n  onResourceNameChange() {\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensionFilters = [];\n    this.refresh();\n  }\n\n  onMetricNamespacesChange() {\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.dimensionFilters = [];\n  }\n\n  onMetricNameChange(): IPromise<void> {\n    if (!this.target.azureMonitor.metricName || this.target.azureMonitor.metricName === this.defaultDropdownValue) {\n      return Promise.resolve();\n    }\n\n    return this.datasource\n      .getMetricMetadata(\n        this.replace(this.target.subscription),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName),\n        this.replace(this.target.azureMonitor.metricNamespace),\n        this.replace(this.target.azureMonitor.metricName)\n      )\n      .then((metadata: any) => {\n        console.log('Update metadata', metadata);\n\n        this.target.azureMonitor.aggregation = metadata.primaryAggType;\n        this.target.azureMonitor.timeGrain = 'auto';\n        this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(metadata.supportedTimeGrains || []);\n\n        // HACK: this saves the last metadata values in the panel json ¯\\_(ツ)_/¯\n        const hackState = this.target.azureMonitor as any;\n        hackState.aggOptions = metadata.supportedAggTypes || [metadata.primaryAggType];\n        hackState.timeGrains = [{ text: 'auto', value: 'auto' }].concat(metadata.supportedTimeGrains);\n        hackState.dimensions = metadata.dimensions;\n\n        if (metadata.dimensions.length > 0) {\n          //  this.target.azureMonitor.dimension = metadata.dimensions[0].value;\n        }\n\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  convertTimeGrainsToMs(timeGrains: Array<{ text: string; value: string }>) {\n    const allowedTimeGrainsMs: number[] = [];\n    timeGrains.forEach((tg: any) => {\n      if (tg.value !== 'auto') {\n        allowedTimeGrainsMs.push(kbn.interval_to_ms(TimegrainConverter.createKbnUnitFromISO8601Duration(tg.value)));\n      }\n    });\n    return allowedTimeGrainsMs;\n  }\n\n  generateAutoUnits(timeGrain: string, timeGrains: Array<{ value: string }>) {\n    if (timeGrain === 'auto') {\n      return TimegrainConverter.findClosestTimeGrain(\n        this.templateSrv.getBuiltInIntervalValue(),\n        _.map(timeGrains, o => TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)) || [\n          '1m',\n          '5m',\n          '15m',\n          '30m',\n          '1h',\n          '6h',\n          '12h',\n          '1d',\n        ]\n      );\n    }\n\n    return '';\n  }\n\n  getAzureMonitorAutoInterval() {\n    return this.generateAutoUnits(this.target.azureMonitor.timeGrain, (this.target.azureMonitor as any).timeGrains);\n  }\n\n  getApplicationInsightAutoInterval() {\n    return this.generateAutoUnits(this.target.appInsights.timeGrain, this.target.appInsights.timeGrains);\n  }\n\n  azureMonitorAddDimensionFilter() {\n    console.log('Add dimension', this.target.azureMonitor);\n    this.target.azureMonitor.dimensionFilters.push({\n      dimension: '',\n      operator: 'eq',\n      filter: '',\n    });\n  }\n\n  azureMonitorRemoveDimensionFilter(index: number) {\n    this.target.azureMonitor.dimensionFilters.splice(index, 1);\n    this.refresh();\n    console.log('Remove dimension', index, this.target.azureMonitor);\n  }\n\n  /* Azure Log Analytics */\n\n  getWorkspaces = () => {\n    return this.datasource.azureLogAnalyticsDatasource\n      .getWorkspaces(this.target.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n\n        if (list.length > 0 && !this.target.azureLogAnalytics.workspace) {\n          if (this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace) {\n            this.target.azureLogAnalytics.workspace = this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace;\n          }\n\n          if (!this.target.azureLogAnalytics.workspace) {\n            this.target.azureLogAnalytics.workspace = list[0].value;\n          }\n        }\n\n        return this.workspaces;\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.target.azureLogAnalytics.workspace);\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.azureLogAnalytics.query = nextQuery;\n  };\n\n  onLogAnalyticsQueryExecute = () => {\n    this.panelCtrl.refresh();\n  };\n\n  get templateVariables() {\n    return this.templateSrv.getVariables().map(t => '$' + t.name);\n  }\n\n  /* Application Insights Section */\n\n  getAppInsightsAutoInterval() {\n    const interval = this.templateSrv.getBuiltInIntervalValue();\n    if (interval[interval.length - 1] === 's') {\n      return '1m';\n    }\n    return interval;\n  }\n\n  getAppInsightsMetricNames() {\n    if (!this.datasource.appInsightsDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.getAppInsightsMetricNames().catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getAppInsightsColumns() {\n    return this.datasource.getAppInsightsColumns(this.target.refId);\n  }\n\n  onAppInsightsColumnChange() {\n    return this.refresh();\n  }\n\n  onAppInsightsMetricNameChange() {\n    if (!this.target.appInsights.metricName || this.target.appInsights.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource\n      .getAppInsightsMetricMetadata(this.replace(this.target.appInsights.metricName))\n      .then((aggData: { supportedAggTypes: string[]; supportedGroupBy: string[]; primaryAggType: string }) => {\n        this.target.appInsights.aggOptions = aggData.supportedAggTypes;\n        this.target.appInsights.dimensions = aggData.supportedGroupBy;\n        this.target.appInsights.aggregation = aggData.primaryAggType;\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onInsightsAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.insightsAnalytics.query = nextQuery;\n  };\n\n  onQueryExecute = () => {\n    return this.refresh();\n  };\n\n  getAppInsightsQuerySchema = () => {\n    return this.datasource.appInsightsDatasource.getQuerySchema().catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  removeGroupBy = (index: number) => {\n    const { appInsights } = this.target;\n    appInsights.dimension.splice(index, 1);\n    this.refresh();\n  };\n\n  getAppInsightsGroupBySegments(query: any) {\n    const { appInsights } = this.target;\n\n    // HACK alert... there must be a better way!\n    if (this.dummyDiminsionString && this.dummyDiminsionString.length && '+' !== this.dummyDiminsionString) {\n      if (!appInsights.dimension) {\n        appInsights.dimension = [];\n      }\n      appInsights.dimension.push(this.dummyDiminsionString);\n      this.dummyDiminsionString = '+';\n      this.refresh();\n    }\n\n    // Return the list of dimensions stored on the query object from the last request :(\n    return _.map(appInsights.dimensions, (option: string) => {\n      return { text: option, value: option };\n    });\n  }\n\n  resetAppInsightsGroupBy() {\n    this.target.appInsights.dimension = 'none';\n    this.refresh();\n  }\n\n  updateTimeGrainType() {\n    if (this.target.appInsights.timeGrainType === 'specific') {\n      this.target.appInsights.timeGrainCount = '1';\n      this.target.appInsights.timeGrainUnit = 'minute';\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    } else {\n      this.target.appInsights.timeGrainCount = '';\n      this.target.appInsights.timeGrainUnit = '';\n    }\n  }\n\n  updateAppInsightsTimeGrain() {\n    if (this.target.appInsights.timeGrainUnit && this.target.appInsights.timeGrainCount) {\n      this.target.appInsights.timeGrain = TimegrainConverter.createISO8601Duration(\n        this.target.appInsights.timeGrainCount,\n        this.target.appInsights.timeGrainUnit\n      );\n    }\n    this.refresh();\n  }\n}\n\n// Modifies the actual query object\nexport function migrateMetricsDimensionFilters(item: AzureMetricQuery) {\n  if (!item.dimensionFilters) {\n    item.dimensionFilters = [];\n  }\n  const oldDimension = (item as any).dimension;\n  if (oldDimension && oldDimension !== 'None') {\n    item.dimensionFilters.push({\n      dimension: oldDimension,\n      operator: 'eq',\n      filter: (item as any).dimensionFilter,\n    });\n    delete (item as any).dimension;\n    delete (item as any).dimensionFilter;\n  }\n}\n","export default class UrlBuilder {\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n    );\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n          metricNamespace\n        )}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n        metricNamespace\n      )}`\n    );\n  }\n}\n","import _ from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        const value = _.get(result.data.value[i], valueFieldName);\n        const text = _.get(result.data.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (result.data.value[i].type === metricDefinition) {\n        list.push({\n          text: result.data.value[i].name,\n          value: result.data.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: any, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n\n    if (!result) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    const metricData: any = _.find(result.data.value, o => {\n      return _.get(o, 'name.value') === metricName;\n    });\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n      supportedTimeGrains: ResponseParser.parseTimeGrains(metricData.metricAvailabilities || []),\n      dimensions: ResponseParser.parseDimensions(metricData),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: any[]): Array<{ text: string; value: string }> {\n    const timeGrains: any[] = [];\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach(avail => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          text: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n    return timeGrains;\n  }\n\n  static parseDimensions(metricData: any): Array<{ text: string; value: string }> {\n    const dimensions: Array<{ text: string; value: string }> = [];\n    if (!metricData.dimensions || metricData.dimensions.length === 0) {\n      return dimensions;\n    }\n\n    for (let i = 0; i < metricData.dimensions.length; i++) {\n      const text = metricData.dimensions[i].localizedValue;\n      const value = metricData.dimensions[i].value;\n\n      dimensions.push({\n        text: !text ? value : text,\n        value: value,\n      });\n    }\n    return dimensions;\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          text: `${_.get(result.data.value[i], textFieldName)} - ${_.get(result.data.value[i], valueFieldName)}`,\n          value: _.get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseSubscriptionsForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          label: `${_.get(result.data.value[i], textFieldName)} - ${_.get(result.data.value[i], valueFieldName)}`,\n          value: _.get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseWorkspacesForSelect(result: any): Array<{ label: string; value: string }> {\n    const list: Array<{ label: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'customerId';\n    const textFieldName = 'name';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i].properties, valueFieldName)])) {\n        list.push({\n          label: _.get(result.data.value[i], textFieldName),\n          value: _.get(result.data.value[i].properties, valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n","import { DataQuery, DataSourceJsonData, DataSourceSettings, TableData } from '@grafana/data';\n\nexport type AzureDataSourceSettings = DataSourceSettings<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\nexport enum AzureQueryType {\n  AzureMonitor = 'Azure Monitor',\n  ApplicationInsights = 'Application Insights',\n  InsightsAnalytics = 'Insights Analytics',\n  LogAnalytics = 'Azure Log Analytics',\n}\n\nexport interface AzureMonitorQuery extends DataQuery {\n  queryType: AzureQueryType;\n  format: string;\n  subscription: string;\n\n  azureMonitor: AzureMetricQuery;\n  azureLogAnalytics: AzureLogsQuery;\n  appInsights: ApplicationInsightsQuery;\n  insightsAnalytics: InsightsAnalyticsQuery;\n}\n\nexport interface AzureDataSourceJsonData extends DataSourceJsonData {\n  subscriptionId: string;\n  cloudName: string;\n\n  // monitor\n  tenantId?: string;\n  clientId?: string;\n\n  // logs\n  logAnalyticsSubscriptionId?: string;\n  logAnalyticsTenantId?: string;\n  logAnalyticsClientId?: string;\n  azureLogAnalyticsSameAs?: boolean;\n  logAnalyticsDefaultWorkspace?: string;\n\n  // App Insights\n  appInsightsAppId?: string;\n}\n\nexport interface AzureDataSourceSecureJsonData {\n  clientSecret?: string;\n  logAnalyticsClientSecret?: string;\n  appInsightsApiKey?: string;\n}\n\nexport interface AzureMetricDimension {\n  dimension: string;\n  operator: 'eq'; // future proof\n  filter?: string; // *\n}\n\nexport interface AzureMetricQuery {\n  resourceGroup: string;\n  resourceName: string;\n  metricDefinition: string;\n  metricNamespace: string;\n  metricName: string;\n  timeGrainUnit: string;\n  timeGrain: string;\n  allowedTimeGrainsMs: number[];\n  aggregation: string;\n  dimensionFilters: AzureMetricDimension[];\n  alias: string;\n  top: string;\n}\n\nexport interface AzureLogsQuery {\n  query: string;\n  resultFormat: string;\n  workspace: string;\n}\n\nexport interface ApplicationInsightsQuery {\n  metricName: string;\n  timeGrainUnit: string;\n  timeGrain: string;\n  allowedTimeGrainsMs: number[];\n  aggregation: string;\n  dimension: string[]; // Was string before 7.1\n  // dimensions: string[]; why is this metadata stored on the object!\n  dimensionFilter: string;\n  alias: string;\n}\n\nexport interface InsightsAnalyticsQuery {\n  query: string;\n  resultFormat: string;\n}\n\n// Azure Monitor API Types\n\nexport interface AzureMonitorMetricDefinitionsResponse {\n  data: {\n    value: Array<{ name: string; type: string; location?: string }>;\n  };\n  status: number;\n  statusText: string;\n}\n\nexport interface AzureMonitorResourceGroupsResponse {\n  data: {\n    value: Array<{ name: string }>;\n  };\n  status: number;\n  statusText: string;\n}\n\n// Azure Log Analytics types\nexport interface KustoSchema {\n  Databases: { [key: string]: KustoDatabase };\n  Plugins: any[];\n}\nexport interface KustoDatabase {\n  Name: string;\n  Tables: { [key: string]: KustoTable };\n  Functions: { [key: string]: KustoFunction };\n}\n\nexport interface KustoTable {\n  Name: string;\n  OrderedColumns: KustoColumn[];\n}\n\nexport interface KustoColumn {\n  Name: string;\n  Type: string;\n}\n\nexport interface KustoFunction {\n  Name: string;\n  DocString: string;\n  Body: string;\n  Folder: string;\n  FunctionKind: string;\n  InputParameters: any[];\n  OutputColumns: any[];\n}\n\nexport interface AzureLogsVariable {\n  text: string;\n  value: string;\n}\n\nexport interface AzureLogsTableData extends TableData {\n  columns: AzureLogsTableColumn[];\n  rows: any[];\n  type: string;\n}\n\nexport interface AzureLogsTableColumn {\n  text: string;\n  type: string;\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces: any = {\n    azuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerInstance/containerGroups',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.ContainerService/managedClusters',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMariaDB/servers',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.DocumentDB/databaseAccounts',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.HDInsight/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Kusto/clusters',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Logic/integrationServiceEnvironments',\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\n      'Microsoft.NetApp/netAppAccounts/capacityPools/Volumes',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.Search/searchServices',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StorageSync/storageSyncServices',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    govazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    germanyazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    chinaazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n  };\n\n  constructor(private cloudName: string) {}\n\n  get(): string[] {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","import { filter, startsWith } from 'lodash';\nimport UrlBuilder from './url_builder';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorResourceGroupsResponse,\n  AzureQueryType,\n} from '../types';\nimport { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { getBackendSrv, DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\n\nconst defaultDropdownValue = 'select';\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  subscriptionId: string;\n  baseUrl: string;\n  resourceGroup: string;\n  resourceName: string;\n  url: string;\n  cloudName: string;\n  supportedMetricNamespaces: string[] = [];\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n\n    this.subscriptionId = instanceSettings.jsonData.subscriptionId;\n    this.cloudName = instanceSettings.jsonData.cloudName || 'azuremonitor';\n    this.baseUrl = `/${this.cloudName}/subscriptions`;\n    this.url = instanceSettings.url;\n\n    this.supportedMetricNamespaces = new SupportedNamespaces(this.cloudName).get();\n  }\n\n  isConfigured(): boolean {\n    return !!this.subscriptionId && this.subscriptionId.length > 0;\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return (\n      item.hide !== true &&\n      item.azureMonitor.resourceGroup &&\n      item.azureMonitor.resourceGroup !== defaultDropdownValue &&\n      item.azureMonitor.resourceName &&\n      item.azureMonitor.resourceName !== defaultDropdownValue &&\n      item.azureMonitor.metricDefinition &&\n      item.azureMonitor.metricDefinition !== defaultDropdownValue &&\n      item.azureMonitor.metricName &&\n      item.azureMonitor.metricName !== defaultDropdownValue\n    );\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.azureMonitor;\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.subscriptionId, scopedVars);\n    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);\n    const resourceName = templateSrv.replace(item.resourceName, scopedVars);\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n\n    const dimensionsFilters = item.dimensionFilters\n      .filter(f => f.dimension && f.dimension !== 'None')\n      .map(f => {\n        const filter = templateSrv.replace(f.filter, scopedVars);\n        return {\n          dimension: templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filter: filter || '*', // send * when empty\n        };\n      });\n\n    return {\n      refId: target.refId,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: {\n        resourceGroup,\n        resourceName,\n        metricDefinition,\n        timeGrain,\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        metricNamespace:\n          metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,\n        aggregation: aggregation,\n        dimensionsFilters,\n        top: top || '10',\n        alias: item.alias,\n        format: target.format,\n      },\n    };\n  }\n\n  metricFindQuery(query: string) {\n    const subscriptionsQuery = query.match(/^Subscriptions\\(\\)/i);\n    if (subscriptionsQuery) {\n      return this.getSubscriptions();\n    }\n\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\n    if (resourceGroupsQuery) {\n      return this.getResourceGroups(this.subscriptionId);\n    }\n\n    const resourceGroupsQueryWithSub = query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (resourceGroupsQueryWithSub) {\n      return this.getResourceGroups(this.toVariable(resourceGroupsQueryWithSub[1]));\n    }\n\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (metricDefinitionsQuery) {\n      if (!metricDefinitionsQuery[3]) {\n        return this.getMetricDefinitions(this.subscriptionId, this.toVariable(metricDefinitionsQuery[1]));\n      }\n    }\n\n    const metricDefinitionsQueryWithSub = query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricDefinitionsQueryWithSub) {\n      return this.getMetricDefinitions(\n        this.toVariable(metricDefinitionsQueryWithSub[1]),\n        this.toVariable(metricDefinitionsQueryWithSub[2])\n      );\n    }\n\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (resourceNamesQuery) {\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\n      return this.getResourceNames(this.subscriptionId, resourceGroup, metricDefinition);\n    }\n\n    const resourceNamesQueryWithSub = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\n    if (resourceNamesQueryWithSub) {\n      const subscription = this.toVariable(resourceNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(resourceNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(resourceNamesQueryWithSub[3]);\n      return this.getResourceNames(subscription, resourceGroup, metricDefinition);\n    }\n\n    const metricNamespaceQuery = query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamespaceQuery) {\n      const resourceGroup = this.toVariable(metricNamespaceQuery[1]);\n      const metricDefinition = this.toVariable(metricNamespaceQuery[2]);\n      const resourceName = this.toVariable(metricNamespaceQuery[3]);\n      return this.getMetricNamespaces(this.subscriptionId, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamespaceQueryWithSub = query.match(\n      /^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i\n    );\n    if (metricNamespaceQueryWithSub) {\n      const subscription = this.toVariable(metricNamespaceQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamespaceQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamespaceQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamespaceQueryWithSub[4]);\n      return this.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamesQuery) {\n      if (metricNamesQuery[3].indexOf(',') === -1) {\n        const resourceGroup = this.toVariable(metricNamesQuery[1]);\n        const metricDefinition = this.toVariable(metricNamesQuery[2]);\n        const resourceName = this.toVariable(metricNamesQuery[3]);\n        const metricNamespace = this.toVariable(metricNamesQuery[4]);\n        return this.getMetricNames(this.subscriptionId, resourceGroup, metricDefinition, resourceName, metricNamespace);\n      }\n    }\n\n    const metricNamesQueryWithSub = query.match(\n      /^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i\n    );\n\n    if (metricNamesQueryWithSub) {\n      const subscription = this.toVariable(metricNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamesQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamesQueryWithSub[4]);\n      const metricNamespace = this.toVariable(metricNamesQueryWithSub[5]);\n      return this.getMetricNames(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace);\n    }\n\n    return undefined;\n  }\n\n  toVariable(metric: string) {\n    return getTemplateSrv().replace((metric || '').trim());\n  }\n\n  getSubscriptions(route?: string) {\n    const url = `/${route || this.cloudName}/subscriptions?api-version=2019-03-01`;\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups?api-version=${this.apiVersion}`;\n    return this.doRequest(url).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`;\n    return this.doRequest(url)\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result: any) => {\n        return filter(result, t => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then((result: any) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result;\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.apiVersion}`;\n\n    return this.doRequest(url).then((result: any) => {\n      if (!startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        return ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n      for (let i = 0; i < list.length; i++) {\n        list[i].text += '/default';\n        list[i].value += '/default';\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiPreviewVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    });\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  testDatasource(): Promise<any> {\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n      return Promise.resolve({\n        status: 'error',\n        message: 'The Tenant Id field is required.',\n      });\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n      return Promise.resolve({\n        status: 'error',\n        message: 'The Client Id field is required.',\n      });\n    }\n\n    const url = `/${this.cloudName}/subscriptions?api-version=2019-03-01`;\n    return this.doRequest(url)\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Monitor service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Azure Monitor: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else if (error.data && error.data.error) {\n          message += error.data.error;\n        } else if (error.data) {\n          message += error.data;\n        } else {\n          message += 'Cannot connect to Azure Monitor REST API.';\n        }\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  isValidConfigField(field: string) {\n    return field && field.length > 0;\n  }\n\n  doRequest(url: string, maxRetries = 1): Promise<any> {\n    return getBackendSrv()\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import _ from 'lodash';\nimport { dateTime } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor(private results: any) {}\n\n  parseQueryResult() {\n    let data: any = [];\n    let columns: any = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].query.raw) {\n        const xaxis = this.results[i].query.xaxis;\n        const yaxises = this.results[i].query.yaxis;\n        const spliton = this.results[i].query.spliton;\n        columns = this.results[i].result.data.Tables[0].Columns;\n        const rows = this.results[i].result.data.Tables[0].Rows;\n        data = _.concat(\n          data,\n          this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton)\n        );\n      } else {\n        const value = this.results[i].result.data.value;\n        const alias = this.results[i].query.alias;\n        data = _.concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\n      }\n    }\n    return data;\n  }\n\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\n    const data: any[] = [];\n    const columnsForDropdown = _.map(columns, column => ({ text: column.ColumnName, value: column.ColumnName }));\n\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\n    const yaxisesSplit = yaxises.split(',');\n    const yaxisColumns: any = {};\n    _.forEach(yaxisesSplit, yaxis => {\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\n    });\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\n    const convertTimestamp = xaxis === 'timestamp';\n\n    _.forEach(rows, row => {\n      _.forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\n        const bucket =\n          splitonColumn === -1\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\n        bucket.refId = query.refId;\n        bucket.query = query.query;\n        bucket.columnsForDropdown = columnsForDropdown;\n      });\n    });\n\n    return data;\n  }\n\n  parseQueryResultRow(query: any, value: any, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({\n        target: metricName,\n        datapoints: [[value[metricName][aggField], epoch]],\n        refId: query.refId,\n        query: query.query,\n      });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n      dataTarget.refId = query.refId;\n      dataTarget.query = query.query;\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n          bucket.refId = query.refId;\n          bucket.meta = {\n            query: query.query,\n          };\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment: { [x: string]: string }, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (const prop in segment) {\n      if (_.isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value: any) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data: any[], target: string) {\n    let dataTarget: any = _.find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj: any) {\n    const keys = _.keys(obj);\n    return _.indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment: { [x: string]: any }) {\n    const keys = _.keys(segment);\n\n    return _.filter(_.without(keys, 'start', 'end'), key => {\n      return _.isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj: any): string {\n    const keys = _.keys(dataObj);\n    return _.intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseMetricNames(result: { data: { metrics: any } }) {\n    const keys = _.keys(result.data.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.data.metrics[metricName];\n\n    if (!metric) {\n      throw Error('No data found for metric: ' + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  parseQuerySchema() {\n    const result: any = {\n      Type: 'AppInsights',\n      Tables: {},\n    };\n    if (this.results && this.results.data && this.results.data.Tables) {\n      for (let i = 0; i < this.results.data.Tables[0].Rows.length; i++) {\n        const column = this.results.data.Tables[0].Rows[i];\n        const columnTable = column[0];\n        const columnName = column[1];\n        const columnType = column[2];\n        if (result.Tables[columnTable]) {\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\n        } else {\n          result.Tables[columnTable] = {\n            Name: columnTable,\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\n          };\n        }\n      }\n    }\n    return result;\n  }\n\n  static toTextValueList(values: any) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import { ScopedVars } from '@grafana/data';\nimport { DataQueryRequest, DataSourceInstanceSettings } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\nimport _, { isString } from 'lodash';\n\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from '../types';\nimport ResponseParser from './response_parser';\n\nexport interface LogAnalyticsColumn {\n  text: string;\n  value: string;\n}\nexport default class AppInsightsDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  url: string;\n  baseUrl: string;\n  version = 'beta';\n  applicationId: string;\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\n\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId || '';\n\n    switch (instanceSettings.jsonData?.cloudName) {\n      // Azure US Government\n      case 'govazuremonitor':\n        break;\n      // Azure Germany\n      case 'germanyazuremonitor':\n        break;\n      // Azue China\n      case 'chinaazuremonitor':\n        this.baseUrl = `/chinaappinsights/${this.version}/apps/${this.applicationId}`;\n        break;\n      // Azure Global\n      default:\n        this.baseUrl = `/appinsights/${this.version}/apps/${this.applicationId}`;\n    }\n\n    this.url = instanceSettings.url || '';\n  }\n\n  isConfigured(): boolean {\n    return !!this.applicationId && this.applicationId.length > 0;\n  }\n\n  createRawQueryRequest(item: any, options: DataQueryRequest<AzureMonitorQuery>, target: AzureMonitorQuery) {\n    if (item.xaxis && !item.timeColumn) {\n      item.timeColumn = item.xaxis;\n    }\n\n    if (item.yaxis && !item.valueColumn) {\n      item.valueColumn = item.yaxis;\n    }\n\n    if (item.spliton && !item.segmentColumn) {\n      item.segmentColumn = item.spliton;\n    }\n\n    return {\n      type: 'timeSeriesQuery',\n      raw: false,\n      appInsights: {\n        rawQuery: true,\n        rawQueryString: getTemplateSrv().replace(item.rawQueryString, options.scopedVars),\n        timeColumn: item.timeColumn,\n        valueColumn: item.valueColumn,\n        segmentColumn: item.segmentColumn,\n      },\n    };\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.appInsights;\n\n    const old: any = item;\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (old.timeGrainCount) {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(old.timeGrainCount, item.timeGrainUnit);\n    } else if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    // migration for non-standard names\n    if (old.groupBy && !item.dimension) {\n      item.dimension = [old.groupBy];\n    }\n    if (old.filter && !item.dimensionFilter) {\n      item.dimensionFilter = old.filter;\n    }\n\n    // Migrate single dimension string to array\n    if (isString(item.dimension)) {\n      if (item.dimension === 'None') {\n        item.dimension = [];\n      } else {\n        item.dimension = [item.dimension as string];\n      }\n    }\n    if (!item.dimension) {\n      item.dimension = [];\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    return {\n      type: 'timeSeriesQuery',\n      refId: target.refId,\n      format: target.format,\n      queryType: AzureQueryType.ApplicationInsights,\n      appInsights: {\n        timeGrain: templateSrv.replace((item.timeGrain || '').toString(), scopedVars),\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        aggregation: templateSrv.replace(item.aggregation, scopedVars),\n        dimension: item.dimension.map(d => templateSrv.replace(d, scopedVars)),\n        dimensionFilter: templateSrv.replace(item.dimensionFilter, scopedVars),\n        alias: item.alias,\n        format: target.format,\n      },\n    };\n  }\n\n  metricFindQuery(query: string) {\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\n    if (appInsightsMetricNameQuery) {\n      return this.getMetricNames();\n    }\n\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (appInsightsGroupByQuery) {\n      const metricName = appInsightsGroupByQuery[1];\n      return this.getGroupBys(getTemplateSrv().replace(metricName));\n    }\n\n    return undefined;\n  }\n\n  testDatasource() {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url)\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Application Insights service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Application Insights: Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  doRequest(url: any, maxRetries = 1): Promise<any> {\n    return getBackendSrv()\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n\n  getMetricNames() {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then((result: any) => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then((result: any) => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n\n  getQuerySchema() {\n    const url = `${this.baseUrl}/query/schema`;\n    return this.doRequest(url).then((result: any) => {\n      const schema = new ResponseParser(result).parseQuerySchema();\n      // console.log(schema);\n      return schema;\n    });\n  }\n}\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^\\)]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from)\n      .startOf('minute')\n      .toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now)\n        .startOf('minute')\n        .toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until)\n        .startOf('minute')\n        .toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map(v => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import _ from 'lodash';\nimport { AnnotationEvent, dateTime, TimeSeries } from '@grafana/data';\nimport {\n  AzureLogsTableData,\n  AzureLogsVariable,\n  KustoColumn,\n  KustoDatabase,\n  KustoFunction,\n  KustoSchema,\n  KustoTable,\n} from '../types';\n\nexport default class ResponseParser {\n  columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.data.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.data.tables[0].columns;\n      const rows = this.results[i].result.data.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = _.concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = _.concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    _.forEach(rows, row => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        executedQueryString: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: _.map(columns, col => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        executedQueryString: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    _.forEach(queryResult, result => {\n      _.forEach(_.flattenDeep(result.rows), row => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    _.forEach(queryResult, result => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      _.forEach(result.rows, row => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  parseSchemaResult(): KustoSchema {\n    return {\n      Plugins: [\n        {\n          Name: 'pivot',\n        },\n      ],\n      Databases: this.createSchemaDatabaseWithTables(),\n    };\n  }\n\n  createSchemaDatabaseWithTables(): { [key: string]: KustoDatabase } {\n    const databases = {\n      Default: {\n        Name: 'Default',\n        Tables: this.createSchemaTables(),\n        Functions: this.createSchemaFunctions(),\n      },\n    };\n\n    return databases;\n  }\n\n  createSchemaTables(): { [key: string]: KustoTable } {\n    const tables: { [key: string]: KustoTable } = {};\n\n    for (const table of this.results.tables) {\n      tables[table.name] = {\n        Name: table.name,\n        OrderedColumns: [],\n      };\n      for (const col of table.columns) {\n        tables[table.name].OrderedColumns.push(this.convertToKustoColumn(col));\n      }\n    }\n\n    return tables;\n  }\n\n  convertToKustoColumn(col: any): KustoColumn {\n    return {\n      Name: col.name,\n      Type: col.type,\n    };\n  }\n\n  createSchemaFunctions(): { [key: string]: KustoFunction } {\n    const functions: { [key: string]: KustoFunction } = {};\n    if (!this.results.functions) {\n      return functions;\n    }\n\n    for (const func of this.results.functions) {\n      functions[func.name] = {\n        Name: func.name,\n        Body: func.body,\n        DocString: func.displayName,\n        Folder: func.category,\n        FunctionKind: 'Unknown',\n        InputParameters: [],\n        OutputColumns: [],\n      };\n    }\n\n    return functions;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = _.find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n}\n","import _ from 'lodash';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport ResponseParser from './response_parser';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureLogsVariable, AzureQueryType } from '../types';\nimport {\n  DataQueryResponse,\n  ScopedVars,\n  DataSourceInstanceSettings,\n  QueryResultMeta,\n  MetricFindValue,\n} from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  url: string;\n  baseUrl: string;\n  applicationId: string;\n  azureMonitorUrl: string;\n  defaultOrFirstWorkspace: string;\n  subscriptionId: string;\n  cache: Map<string, any>;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.cache = new Map();\n\n    switch (this.instanceSettings.jsonData.cloudName) {\n      case 'govazuremonitor': // Azure US Government\n        this.baseUrl = '/govloganalyticsazure';\n        break;\n      case 'germanyazuremonitor': // Azure Germany\n        break;\n      case 'chinaazuremonitor': // Azure China\n        this.baseUrl = '/chinaloganalyticsazure';\n        break;\n      default:\n        // Azure Global\n        this.baseUrl = '/loganalyticsazure';\n    }\n\n    this.url = instanceSettings.url || '';\n    this.defaultOrFirstWorkspace = this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace || '';\n\n    this.setWorkspaceUrl();\n  }\n\n  isConfigured(): boolean {\n    return (\n      (!!this.instanceSettings.jsonData.logAnalyticsSubscriptionId &&\n        this.instanceSettings.jsonData.logAnalyticsSubscriptionId.length > 0) ||\n      !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs\n    );\n  }\n\n  setWorkspaceUrl() {\n    if (!!this.instanceSettings.jsonData.subscriptionId || !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\n      this.subscriptionId = this.instanceSettings.jsonData.subscriptionId;\n      const azureCloud = this.instanceSettings.jsonData.cloudName || 'azuremonitor';\n      this.azureMonitorUrl = `/${azureCloud}/subscriptions`;\n    } else {\n      this.subscriptionId = this.instanceSettings.jsonData.logAnalyticsSubscriptionId || '';\n\n      switch (this.instanceSettings.jsonData.cloudName) {\n        case 'govazuremonitor': // Azure US Government\n          this.azureMonitorUrl = `/govworkspacesloganalytics/subscriptions`;\n          break;\n        case 'germanyazuremonitor': // Azure Germany\n          break;\n        case 'chinaazuremonitor': // Azure China\n          this.azureMonitorUrl = `/chinaworkspacesloganalytics/subscriptions`;\n          break;\n        default:\n          // Azure Global\n          this.azureMonitorUrl = `/workspacesloganalytics/subscriptions`;\n      }\n    }\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      _.map(response.data.value, (val: any) => {\n        return { text: val.name, value: val.properties.customerId };\n      }) || []\n    );\n  }\n\n  getWorkspaceList(subscription: string): Promise<any> {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.subscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorUrl +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.doRequest(workspaceListUrl, true);\n  }\n\n  getSchema(workspace: string) {\n    if (!workspace) {\n      return Promise.resolve();\n    }\n    const url = `${this.baseUrl}/${getTemplateSrv().replace(workspace, {})}/metadata`;\n\n    return this.doRequest(url).then((response: any) => {\n      return new ResponseParser(response.data).parseSchemaResult();\n    });\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.azureLogAnalytics;\n\n    const templateSrv = getTemplateSrv();\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && this.defaultOrFirstWorkspace) {\n      workspace = this.defaultOrFirstWorkspace;\n    }\n\n    const subscriptionId = templateSrv.replace(target.subscription || this.subscriptionId, scopedVars);\n    const query = templateSrv.replace(item.query, scopedVars, this.interpolateVariable);\n\n    return {\n      refId: target.refId,\n      format: target.format,\n      queryType: AzureQueryType.LogAnalytics,\n      subscriptionId: subscriptionId,\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query: query,\n        workspace: workspace,\n      },\n    };\n  }\n\n  async processResponse(res: DataQueryResponse): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const encodedQuery = df.meta?.custom?.encodedQuery;\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta);\n          if (url?.length) {\n            for (const field of df.fields) {\n              field.config.links = [\n                {\n                  url: url,\n                  title: 'View in Azure Portal',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  private async buildDeepLink(meta: QueryResultMeta) {\n    const base64Enc = encodeURIComponent(meta.custom.encodedQuery);\n    const workspaceId = meta.custom.workspace;\n    const subscription = meta.custom.subscription;\n\n    const details = await this.getWorkspaceDetails(workspaceId);\n    if (!details.workspace || !details.resourceGroup) {\n      return '';\n    }\n\n    const url =\n      `https://portal.azure.com/#blade/Microsoft_OperationsManagementSuite_Workspace/` +\n      `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` +\n      `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` +\n      `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` +\n      `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId: string) {\n    const response = await this.getWorkspaceList(this.subscriptionId);\n\n    const details = response.data.value.find((o: any) => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1],\n    };\n  }\n\n  metricFindQuery(query: string): Promise<MetricFindValue[]> {\n    const workspacesQuery = query.match(/^workspaces\\(\\)/i);\n    if (workspacesQuery) {\n      return this.getWorkspaces(this.subscriptionId);\n    }\n\n    const workspacesQueryWithSub = query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i);\n    if (workspacesQueryWithSub) {\n      return this.getWorkspaces((workspacesQueryWithSub[1] || '').trim());\n    }\n\n    return this.getDefaultOrFirstWorkspace().then((workspace: any) => {\n      const queries: any[] = this.buildQuery(query, null, workspace);\n\n      const promises = this.doQueries(queries);\n\n      return Promise.all(promises)\n        .then(results => {\n          return new ResponseParser(results).parseToVariables();\n        })\n        .catch(err => {\n          if (\n            err.error &&\n            err.error.data &&\n            err.error.data.error &&\n            err.error.data.error.innererror &&\n            err.error.data.error.innererror.innererror\n          ) {\n            throw { message: err.error.data.error.innererror.innererror.message };\n          } else if (err.error && err.error.data && err.error.data.error) {\n            throw { message: err.error.data.error.message };\n          }\n        });\n    }) as Promise<MetricFindValue[]>; // ??\n  }\n\n  private buildQuery(query: string, options: any, workspace: any) {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      getTemplateSrv().replace(query, {}, this.interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n    const querystring = querystringBuilder.generate().uriString;\n    const url = `${this.baseUrl}/${workspace}/query?${querystring}`;\n    const queries: any[] = [];\n    queries.push({\n      datasourceId: this.id,\n      url: url,\n      resultFormat: 'table',\n    });\n    return queries;\n  }\n\n  interpolateVariable(value: string, variable: { multi: any; includeAll: any }) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  getDefaultOrFirstWorkspace() {\n    if (this.defaultOrFirstWorkspace) {\n      return Promise.resolve(this.defaultOrFirstWorkspace);\n    }\n\n    return this.getWorkspaces(this.subscriptionId).then((workspaces: any[]) => {\n      this.defaultOrFirstWorkspace = workspaces[0].value;\n      return this.defaultOrFirstWorkspace;\n    });\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries: any[] = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then(results => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: any[]) {\n    return _.map(queries, query => {\n      return this.doRequest(query.url)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  async doRequest(url: string, useCache = false, maxRetries = 1): Promise<any> {\n    try {\n      if (useCache && this.cache.has(url)) {\n        return this.cache.get(url);\n      }\n\n      const res = await getBackendSrv().datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      });\n\n      if (useCache) {\n        this.cache.set(url, res);\n      }\n\n      return res;\n    } catch (error) {\n      if (maxRetries > 0) {\n        return this.doRequest(url, useCache, maxRetries - 1);\n      }\n\n      throw error;\n    }\n  }\n\n  testDatasource(): Promise<any> {\n    const validationError = this.isValidConfig();\n    if (validationError) {\n      return Promise.resolve(validationError);\n    }\n\n    return this.getDefaultOrFirstWorkspace()\n      .then((ws: any) => {\n        const url = `${this.baseUrl}/${ws}/metadata`;\n\n        return this.doRequest(url);\n      })\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Log Analytics service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Azure Log Analytics: ';\n        if (error.config && error.config.url && error.config.url.indexOf('workspacesloganalytics') > -1) {\n          message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\n        }\n\n        message = this.getErrorMessage(message, error);\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  private getErrorMessage(message: string, error: any) {\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error && error.data.error.code) {\n      message += error.data.error.code + '. ' + error.data.error.message;\n    } else if (error.data && error.data.error) {\n      message += error.data.error;\n    } else if (error.data) {\n      message += error.data;\n    } else {\n      message += 'Cannot connect to Azure Log Analytics REST API.';\n    }\n    return message;\n  }\n\n  isValidConfig() {\n    if (this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\n      return undefined;\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsSubscriptionId)) {\n      return {\n        status: 'error',\n        message: 'The Subscription Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsTenantId)) {\n      return {\n        status: 'error',\n        message: 'The Tenant Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsClientId)) {\n      return {\n        status: 'error',\n        message: 'The Client Id field is required.',\n      };\n    }\n\n    return undefined;\n  }\n\n  isValidConfigField(field: string | undefined) {\n    return field && field.length > 0;\n  }\n}\n","import { ScopedVars } from '@grafana/data';\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from '../types';\nimport AppInsightsDatasource from '../app_insights/app_insights_datasource';\n\nexport default class InsightsAnalyticsDatasource extends AppInsightsDatasource {\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): Record<string, any> {\n    const item = target.insightsAnalytics;\n\n    // Old name migrations\n    const old: any = item;\n    if (old.rawQueryString && !item.query) {\n      item.query = old.rawQueryString;\n    }\n\n    return {\n      refId: target.refId,\n      queryType: AzureQueryType.InsightsAnalytics,\n      insightsAnalytics: {\n        query: getTemplateSrv().replace(item.query, scopedVars),\n        resultFormat: item.resultFormat,\n      },\n    };\n  }\n}\n","import _ from 'lodash';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport { AzureMonitorQuery, AzureDataSourceJsonData, AzureQueryType, InsightsAnalyticsQuery } from './types';\nimport {\n  DataSourceApi,\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n  DataQueryResponseData,\n  LoadingState,\n} from '@grafana/data';\nimport { Observable, of, from } from 'rxjs';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport InsightsAnalyticsDatasource from './insights_analytics/insights_analytics_datasource';\nimport { migrateMetricsDimensionFilters } from './query_ctrl';\n\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\n  azureMonitorDatasource: AzureMonitorDatasource;\n  appInsightsDatasource: AppInsightsDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  insightsAnalyticsDatasource: InsightsAnalyticsDatasource;\n\n  pseudoDatasource: Record<AzureQueryType, DataSourceWithBackend>;\n  optionsKey: Record<AzureQueryType, string>;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.appInsightsDatasource = new AppInsightsDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.insightsAnalyticsDatasource = new InsightsAnalyticsDatasource(instanceSettings);\n\n    const pseudoDatasource: any = {};\n    pseudoDatasource[AzureQueryType.ApplicationInsights] = this.appInsightsDatasource;\n    pseudoDatasource[AzureQueryType.AzureMonitor] = this.azureMonitorDatasource;\n    pseudoDatasource[AzureQueryType.InsightsAnalytics] = this.insightsAnalyticsDatasource;\n    pseudoDatasource[AzureQueryType.LogAnalytics] = this.azureLogAnalyticsDatasource;\n    this.pseudoDatasource = pseudoDatasource;\n\n    const optionsKey: any = {};\n    optionsKey[AzureQueryType.ApplicationInsights] = 'appInsights';\n    optionsKey[AzureQueryType.AzureMonitor] = 'azureMonitor';\n    optionsKey[AzureQueryType.InsightsAnalytics] = 'insightsAnalytics';\n    optionsKey[AzureQueryType.LogAnalytics] = 'azureLogAnalytics';\n    this.optionsKey = optionsKey;\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponseData> {\n    const byType: Record<AzureQueryType, DataQueryRequest<AzureMonitorQuery>> = ({} as unknown) as Record<\n      AzureQueryType,\n      DataQueryRequest<AzureMonitorQuery>\n    >;\n\n    for (const target of options.targets) {\n      // Migrate old query structure\n      if (target.queryType === AzureQueryType.ApplicationInsights) {\n        if ((target.appInsights as any).rawQuery) {\n          target.queryType = AzureQueryType.InsightsAnalytics;\n          target.insightsAnalytics = (target.appInsights as unknown) as InsightsAnalyticsQuery;\n          delete target.appInsights;\n        }\n      }\n      if (!target.queryType) {\n        target.queryType = AzureQueryType.AzureMonitor;\n      }\n\n      if (target.queryType === AzureQueryType.AzureMonitor) {\n        migrateMetricsDimensionFilters(target.azureMonitor);\n      }\n\n      // Check that we have options\n      const opts = (target as any)[this.optionsKey[target.queryType]];\n\n      // Skip hidden queries or ones without properties\n      if (target.hide || !opts) {\n        continue;\n      }\n\n      // Initalize the list of queries\n      let q = byType[target.queryType];\n      if (!q) {\n        q = _.cloneDeep(options);\n        q.targets = [];\n        byType[target.queryType] = q;\n      }\n      q.targets.push(target);\n    }\n\n    // Distinct types are managed by distinct requests\n    const obs = Object.keys(byType).map((type: AzureQueryType) => {\n      const req = byType[type];\n      return this.pseudoDatasource[type].query(req);\n    });\n    // Single query can skip merge\n    if (obs.length === 1) {\n      return obs[0];\n    }\n    if (obs.length > 1) {\n      // Not accurate, but simple and works\n      // should likely be more like the mixed data source\n      const promises = obs.map(o => o.toPromise());\n      return from(\n        Promise.all(promises).then(results => {\n          return { data: _.flatten(results) };\n        })\n      );\n    }\n    return of({ state: LoadingState.Done });\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  async metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const aiResult = this.appInsightsDatasource.metricFindQuery(query);\n    if (aiResult) {\n      return aiResult;\n    }\n\n    const amResult = this.azureMonitorDatasource.metricFindQuery(query);\n    if (amResult) {\n      return amResult;\n    }\n\n    const alaResult = this.azureLogAnalyticsDatasource.metricFindQuery(query);\n    if (alaResult) {\n      return alaResult;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async testDatasource() {\n    const promises: any[] = [];\n\n    if (this.azureMonitorDatasource.isConfigured()) {\n      promises.push(this.azureMonitorDatasource.testDatasource());\n    }\n\n    if (this.appInsightsDatasource.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    if (this.azureLogAnalyticsDatasource.isConfigured()) {\n      promises.push(this.azureLogAnalyticsDatasource.testDatasource());\n    }\n\n    if (promises.length === 0) {\n      return {\n        status: 'error',\n        message: `Nothing configured. At least one of the API's must be configured.`,\n        title: 'Error',\n      };\n    }\n\n    return Promise.all(promises).then(results => {\n      let status = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: _.upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(subscriptionId);\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(subscriptionId, resourceGroup);\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(subscriptionId, resourceGroup, metricDefinition);\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    return this.azureMonitorDatasource.getMetricNames(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace\n    );\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNamespaces(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName\n    );\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    return this.azureMonitorDatasource.getMetricMetadata(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      metricName\n    );\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName: string) {\n    return this.appInsightsDatasource.getMetricMetadata(metricName);\n  }\n\n  getAppInsightsColumns(refId: string | number) {\n    return this.appInsightsDatasource.logAnalyticsColumns[refId];\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms, Button } from '@grafana/ui';\nconst { Select, Input } = LegacyForms;\n\nexport interface Props {\n  selectedAzureCloud?: string;\n  selectedSubscription?: string;\n  azureCloudOptions?: SelectableValue[];\n  tenantId: string;\n  clientId: string;\n  clientSecret: string;\n  clientSecretConfigured: boolean;\n  subscriptionOptions?: SelectableValue[];\n  onAzureCloudChange?: (value: SelectableValue<string>) => void;\n  onSubscriptionSelectChange?: (value: SelectableValue<string>) => void;\n  onTenantIdChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onClientIdChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onClientSecretChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onResetClientSecret: () => void;\n  onLoadSubscriptions?: () => void;\n}\n\nexport class AzureCredentialsForm extends PureComponent<Props> {\n  render() {\n    const {\n      selectedAzureCloud,\n      selectedSubscription,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n      azureCloudOptions,\n      subscriptionOptions,\n      onAzureCloudChange,\n      onSubscriptionSelectChange,\n      onTenantIdChange,\n      onClientIdChange,\n      onClientSecretChange,\n      onResetClientSecret,\n      onLoadSubscriptions,\n    } = this.props;\n    const hasRequiredFields = tenantId && clientId && (clientSecret || clientSecretConfigured);\n    const hasSubscriptions = onLoadSubscriptions && subscriptionOptions;\n\n    return (\n      <>\n        <div className=\"gf-form-group\">\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud.\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find(azureCloud => azureCloud.value === selectedAzureCloud)}\n                  options={azureCloudOptions}\n                  defaultValue={selectedAzureCloud}\n                  onChange={onAzureCloudChange}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={tenantId || ''}\n                  onChange={onTenantIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={clientId || ''}\n                  onChange={onClientIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          {clientSecretConfigured ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={onResetClientSecret}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={clientSecret || ''}\n                    onChange={onClientSecretChange}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {hasSubscriptions && (\n            <>\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n                  <div className=\"width-25\">\n                    <Select\n                      value={subscriptionOptions.find(subscription => subscription.value === selectedSubscription)}\n                      options={subscriptionOptions}\n                      defaultValue={selectedSubscription}\n                      onChange={onSubscriptionSelectChange}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      type=\"button\"\n                      onClick={onLoadSubscriptions}\n                      disabled={!hasRequiredFields}\n                    >\n                      Load Subscriptions\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AzureCredentialsForm;\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { AzureDataSourceSettings } from '../types';\n\nconst azureClouds = [\n  { value: 'azuremonitor', label: 'Azure' },\n  { value: 'govazuremonitor', label: 'Azure US Government' },\n  { value: 'germanyazuremonitor', label: 'Azure Germany' },\n  { value: 'chinaazuremonitor', label: 'Azure China' },\n] as SelectableValue[];\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  subscriptions: SelectableValue[];\n  makeSameAs: (updatedClientSecret?: string) => void;\n  onUpdateJsonDataOption: (key: string, val: any) => void;\n  onUpdateSecureJsonDataOption: (key: string, val: any) => void;\n  onResetOptionKey: (key: string) => void;\n  onLoadSubscriptions: () => void;\n}\n\nexport class MonitorConfig extends PureComponent<Props> {\n  onAzureCloudSelect = (cloudName: SelectableValue<string>) => {\n    this.props.onUpdateJsonDataOption('cloudName', cloudName.value);\n  };\n\n  onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateJsonDataOption('tenantId', event.target.value);\n  };\n\n  onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateJsonDataOption('clientId', event.target.value);\n  };\n\n  onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, makeSameAs } = this.props;\n\n    if (options.jsonData.azureLogAnalyticsSameAs && event.target.value) {\n      makeSameAs(event.target.value);\n    } else {\n      this.props.onUpdateSecureJsonDataOption('clientSecret', event.target.value);\n    }\n  };\n\n  onResetClientSecret = () => {\n    this.props.onResetOptionKey('clientSecret');\n  };\n\n  onSubscriptionSelect = (subscription: SelectableValue<string>) => {\n    this.props.onUpdateJsonDataOption('subscriptionId', subscription.value);\n  };\n\n  render() {\n    const { options, subscriptions } = this.props;\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Monitor Details</h3>\n        <AzureCredentialsForm\n          selectedAzureCloud={options.jsonData.cloudName || 'azuremonitor'}\n          azureCloudOptions={azureClouds}\n          subscriptionOptions={subscriptions}\n          selectedSubscription={options.jsonData.subscriptionId}\n          tenantId={options.jsonData.tenantId}\n          clientId={options.jsonData.clientId}\n          clientSecret={options.secureJsonData.clientSecret}\n          clientSecretConfigured={options.secureJsonFields.clientSecret}\n          onAzureCloudChange={this.onAzureCloudSelect}\n          onSubscriptionSelectChange={this.onSubscriptionSelect}\n          onTenantIdChange={this.onTenantIdChange}\n          onClientIdChange={this.onClientIdChange}\n          onClientSecretChange={this.onClientSecretChange}\n          onResetClientSecret={this.onResetClientSecret}\n          onLoadSubscriptions={this.props.onLoadSubscriptions}\n        />\n      </>\n    );\n  }\n}\n\nexport default MonitorConfig;\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { InlineFormLabel, LegacyForms, Button } from '@grafana/ui';\nconst { Select, Switch } = LegacyForms;\nimport { AzureDataSourceSettings } from '../types';\n\nexport interface State {\n  sameAsSwitched: boolean;\n}\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  subscriptions: SelectableValue[];\n  workspaces: SelectableValue[];\n  makeSameAs: () => void;\n  onUpdateDatasourceOptions: (options: AzureDataSourceSettings) => void;\n  onUpdateJsonDataOption: (key: string, val: any) => void;\n  onUpdateSecureJsonDataOption: (key: string, val: any) => void;\n  onResetOptionKey: (key: string) => void;\n  onLoadSubscriptions: (type?: string) => void;\n  onLoadWorkspaces: (type?: string) => void;\n}\nexport class AnalyticsConfig extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      sameAsSwitched: false,\n    };\n  }\n\n  onLogAnalyticsTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateJsonDataOption('logAnalyticsTenantId', event.target.value);\n  };\n\n  onLogAnalyticsClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateJsonDataOption('logAnalyticsClientId', event.target.value);\n  };\n\n  onLogAnalyticsClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.props.onUpdateSecureJsonDataOption('logAnalyticsClientSecret', event.target.value);\n  };\n\n  onLogAnalyticsSubscriptionSelect = (logAnalyticsSubscription: SelectableValue<string>) => {\n    this.props.onUpdateJsonDataOption('logAnalyticsSubscriptionId', logAnalyticsSubscription.value);\n  };\n\n  onWorkspaceSelectChange = (logAnalyticsDefaultWorkspace: SelectableValue<string>) => {\n    this.props.onUpdateJsonDataOption('logAnalyticsDefaultWorkspace', logAnalyticsDefaultWorkspace.value);\n  };\n\n  onAzureLogAnalyticsSameAsChange = () => {\n    const { options, onUpdateDatasourceOptions, makeSameAs } = this.props;\n\n    if (!options.jsonData.azureLogAnalyticsSameAs && options.secureJsonData.clientSecret) {\n      makeSameAs();\n    } else if (!options.jsonData.azureLogAnalyticsSameAs) {\n      // if currently off, clear monitor secret\n      onUpdateDatasourceOptions({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureLogAnalyticsSameAs: !options.jsonData.azureLogAnalyticsSameAs,\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          clientSecret: '',\n        },\n        secureJsonFields: {\n          clientSecret: false,\n        },\n      });\n\n      this.setState({\n        sameAsSwitched: true,\n      });\n    } else {\n      this.props.onUpdateJsonDataOption('azureLogAnalyticsSameAs', !options.jsonData.azureLogAnalyticsSameAs);\n    }\n  };\n\n  onLogAnalyticsResetClientSecret = () => {\n    this.props.onResetOptionKey('logAnalyticsClientSecret');\n  };\n\n  hasWorkspaceRequiredFields = () => {\n    const {\n      options: { jsonData, secureJsonData, secureJsonFields },\n    } = this.props;\n\n    if (jsonData.azureLogAnalyticsSameAs) {\n      return (\n        jsonData.tenantId &&\n        jsonData.clientId &&\n        jsonData.subscriptionId &&\n        (secureJsonData.clientSecret || secureJsonFields.clientSecret)\n      );\n    }\n\n    return (\n      jsonData.logAnalyticsTenantId &&\n      jsonData.logAnalyticsTenantId.length &&\n      jsonData.logAnalyticsClientId &&\n      jsonData.logAnalyticsClientId.length &&\n      jsonData.logAnalyticsSubscriptionId &&\n      (secureJsonFields.logAnalyticsClientSecret || secureJsonData.logAnalyticsClientSecret)\n    );\n  };\n\n  render() {\n    const {\n      options: { jsonData, secureJsonData, secureJsonFields },\n      subscriptions,\n      workspaces,\n    } = this.props;\n\n    const { sameAsSwitched } = this.state;\n\n    if (!jsonData.hasOwnProperty('azureLogAnalyticsSameAs')) {\n      jsonData.azureLogAnalyticsSameAs = true;\n    }\n\n    const addtlAttrs = {\n      ...(jsonData.azureLogAnalyticsSameAs && {\n        tooltip: 'Workspaces are pulled from default subscription selected above.',\n      }),\n    };\n\n    const showSameAsHelpMsg =\n      sameAsSwitched &&\n      jsonData.azureLogAnalyticsSameAs &&\n      secureJsonFields &&\n      !secureJsonFields.clientSecret &&\n      !secureJsonData.clientSecret;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Log Analytics API Details</h3>\n        <Switch\n          label=\"Same details as Azure Monitor API\"\n          checked={jsonData.azureLogAnalyticsSameAs}\n          onChange={this.onAzureLogAnalyticsSameAsChange}\n          {...addtlAttrs}\n        />\n        {showSameAsHelpMsg && (\n          <div className=\"grafana-info-box m-t-2\">\n            <div className=\"alert-body\">\n              <p>Re-enter your Azure Monitor Client Secret to use this setting.</p>\n            </div>\n          </div>\n        )}\n        {!jsonData.azureLogAnalyticsSameAs && (\n          <AzureCredentialsForm\n            subscriptionOptions={subscriptions}\n            selectedSubscription={jsonData.logAnalyticsSubscriptionId}\n            tenantId={jsonData.logAnalyticsTenantId}\n            clientId={jsonData.logAnalyticsClientId}\n            clientSecret={secureJsonData.logAnalyticsClientSecret}\n            clientSecretConfigured={secureJsonFields.logAnalyticsClientSecret}\n            onSubscriptionSelectChange={this.onLogAnalyticsSubscriptionSelect}\n            onTenantIdChange={this.onLogAnalyticsTenantIdChange}\n            onClientIdChange={this.onLogAnalyticsClientIdChange}\n            onClientSecretChange={this.onLogAnalyticsClientSecretChange}\n            onResetClientSecret={this.onLogAnalyticsResetClientSecret}\n            onLoadSubscriptions={() => this.props.onLoadSubscriptions('workspacesloganalytics')}\n          />\n        )}\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel\n                className=\"width-12\"\n                tooltip=\"Choose the default/preferred Workspace for Azure Log Analytics queries.\"\n              >\n                Default Workspace\n              </InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={workspaces.find(workspace => workspace.value === jsonData.logAnalyticsDefaultWorkspace)}\n                  options={workspaces}\n                  defaultValue={jsonData.logAnalyticsDefaultWorkspace}\n                  onChange={this.onWorkspaceSelectChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={() => this.props.onLoadWorkspaces()}\n                  disabled={!this.hasWorkspaceRequiredFields()}\n                >\n                  Load Workspaces\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AnalyticsConfig;\n","import React, { PureComponent } from 'react';\nimport { InlineFormLabel, Button, LegacyForms } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport { AzureDataSourceSettings, AzureDataSourceJsonData, AzureDataSourceSecureJsonData } from '../types';\n\nexport interface Props {\n  options: AzureDataSourceSettings;\n  onUpdateJsonDataOption: (\n    key: keyof AzureDataSourceJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onUpdateSecureJsonDataOption: (\n    key: keyof AzureDataSourceSecureJsonData\n  ) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onResetOptionKey: (key: string) => void;\n}\nexport class InsightsConfig extends PureComponent<Props> {\n  onAppInsightsResetApiKey = () => {\n    this.props.onResetOptionKey('appInsightsApiKey');\n  };\n\n  render() {\n    const { options, onUpdateJsonDataOption, onUpdateSecureJsonDataOption } = this.props;\n    return (\n      <>\n        <h3 className=\"page-heading\">Application Insights Details</h3>\n        <div className=\"gf-form-group\">\n          {options.secureJsonFields.appInsightsApiKey ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={this.onAppInsightsResetApiKey}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">API Key</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={options.secureJsonData.appInsightsApiKey || ''}\n                    onChange={onUpdateSecureJsonDataOption('appInsightsApiKey')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  value={options.jsonData.appInsightsAppId || ''}\n                  onChange={onUpdateJsonDataOption('appInsightsAppId')}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default InsightsConfig;\n","import React, { PureComponent } from 'react';\nimport {\n  SelectableValue,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginOption,\n  updateDatasourcePluginResetOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginSecureJsonDataOption,\n} from '@grafana/data';\nimport { MonitorConfig } from './MonitorConfig';\nimport { AnalyticsConfig } from './AnalyticsConfig';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { InsightsConfig } from './InsightsConfig';\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\nimport { makePromiseCancelable, CancelablePromise } from 'app/core/utils/CancelablePromise';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\nexport interface State {\n  subscriptions: SelectableValue[];\n  logAnalyticsSubscriptions: SelectableValue[];\n  logAnalyticsWorkspaces: SelectableValue[];\n  subscriptionId: string;\n  logAnalyticsSubscriptionId: string;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      subscriptions: [],\n      logAnalyticsSubscriptions: [],\n      logAnalyticsWorkspaces: [],\n      subscriptionId: '',\n      logAnalyticsSubscriptionId: '',\n    };\n\n    this.templateSrv = new TemplateSrv();\n    if (this.props.options.id) {\n      updateDatasourcePluginOption(this.props, 'url', '/api/datasources/proxy/' + this.props.options.id);\n    }\n  }\n\n  initPromise: CancelablePromise<any> = null;\n  templateSrv: TemplateSrv = null;\n\n  componentDidMount() {\n    this.initPromise = makePromiseCancelable(this.init());\n    this.initPromise.promise.catch(({ isCanceled }) => {\n      if (isCanceled) {\n        console.warn('Azure Monitor ConfigEditor has unmounted, intialization was canceled');\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.initPromise.cancel();\n  }\n\n  init = async () => {\n    await this.getSubscriptions();\n\n    if (!this.props.options.jsonData.azureLogAnalyticsSameAs) {\n      await this.getLogAnalyticsSubscriptions();\n    }\n  };\n\n  updateJsonDataOption = (key: keyof AzureDataSourceJsonData, val: any) => {\n    updateDatasourcePluginJsonDataOption(this.props, key, val);\n  };\n\n  updateSecureJsonDataOption = (key: keyof AzureDataSourceSecureJsonData, val: any) => {\n    updateDatasourcePluginSecureJsonDataOption(this.props, key, val);\n  };\n\n  resetSecureKey = (key: keyof AzureDataSourceSecureJsonData) => {\n    updateDatasourcePluginResetOption(this.props, key);\n  };\n\n  onUpdateJsonDataOption = (key: keyof AzureDataSourceJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    this.updateJsonDataOption(key, event.currentTarget.value);\n  };\n\n  onUpdateSecureJsonDataOption = (key: keyof AzureDataSourceSecureJsonData) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    this.updateSecureJsonDataOption(key, event.currentTarget.value);\n  };\n\n  makeSameAs = (updatedClientSecret?: string) => {\n    const { options } = this.props;\n    const clientSecret = updatedClientSecret || options.secureJsonData.clientSecret;\n\n    this.props.onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        azureLogAnalyticsSameAs: true,\n        logAnalyticsSubscriptionId: options.jsonData.subscriptionId,\n        logAnalyticsTenantId: options.jsonData.tenantId,\n        logAnalyticsClientId: options.jsonData.clientId,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        clientSecret,\n        logAnalyticsClientSecret: clientSecret,\n      },\n    });\n  };\n\n  hasNecessaryCredentials = () => {\n    if (!this.props.options.secureJsonFields.clientSecret && !this.props.options.secureJsonData.clientSecret) {\n      return false;\n    }\n\n    if (!this.props.options.jsonData.clientId || !this.props.options.jsonData.tenantId) {\n      return false;\n    }\n\n    return true;\n  };\n\n  logAnalyticsHasNecessaryCredentials = () => {\n    if (\n      !this.props.options.secureJsonFields.logAnalyticsClientSecret &&\n      !this.props.options.secureJsonData.logAnalyticsClientSecret\n    ) {\n      return false;\n    }\n\n    if (!this.props.options.jsonData.logAnalyticsClientId || !this.props.options.jsonData.logAnalyticsTenantId) {\n      return false;\n    }\n\n    return true;\n  };\n\n  onLoadSubscriptions = async (type?: string) => {\n    await getBackendSrv()\n      .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n      .then((result: AzureDataSourceSettings) => {\n        updateDatasourcePluginOption(this.props, 'version', result.version);\n      });\n\n    if (type && type === 'workspacesloganalytics') {\n      this.getLogAnalyticsSubscriptions();\n    } else {\n      this.getSubscriptions();\n    }\n  };\n\n  loadSubscriptions = async (route?: string) => {\n    const url = `/${route || this.props.options.jsonData.cloudName}/subscriptions?api-version=2019-03-01`;\n\n    const result = await getBackendSrv().datasourceRequest({\n      url: this.props.options.url + url,\n      method: 'GET',\n    });\n\n    return ResponseParser.parseSubscriptionsForSelect(result);\n  };\n\n  loadWorkspaces = async (subscription: string) => {\n    const { azureLogAnalyticsSameAs, cloudName, logAnalyticsSubscriptionId } = this.props.options.jsonData;\n    let azureMonitorUrl = '',\n      subscriptionId = this.templateSrv.replace(subscription || this.props.options.jsonData.subscriptionId);\n\n    if (azureLogAnalyticsSameAs) {\n      const azureCloud = cloudName || 'azuremonitor';\n      azureMonitorUrl = `/${azureCloud}/subscriptions`;\n    } else {\n      subscriptionId = logAnalyticsSubscriptionId;\n      azureMonitorUrl = `/workspacesloganalytics/subscriptions`;\n    }\n\n    const workspaceListUrl =\n      azureMonitorUrl +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n\n    const result = await getBackendSrv().datasourceRequest({\n      url: this.props.options.url + workspaceListUrl,\n      method: 'GET',\n    });\n\n    return ResponseParser.parseWorkspacesForSelect(result);\n  };\n\n  getSubscriptions = async () => {\n    if (!this.hasNecessaryCredentials()) {\n      return;\n    }\n\n    const subscriptions = ((await this.loadSubscriptions()) || []) as SelectableValue[];\n\n    if (subscriptions && subscriptions.length > 0) {\n      this.setState({ subscriptions });\n\n      this.updateJsonDataOption('subscriptionId', this.props.options.jsonData.subscriptionId || subscriptions[0].value);\n    }\n\n    if (this.props.options.jsonData.subscriptionId && this.props.options.jsonData.azureLogAnalyticsSameAs) {\n      await this.getWorkspaces();\n    }\n  };\n\n  getLogAnalyticsSubscriptions = async () => {\n    if (!this.logAnalyticsHasNecessaryCredentials()) {\n      return;\n    }\n\n    const logAnalyticsSubscriptions = ((await this.loadSubscriptions('workspacesloganalytics')) ||\n      []) as SelectableValue[];\n\n    if (logAnalyticsSubscriptions && logAnalyticsSubscriptions.length > 0) {\n      this.setState({ logAnalyticsSubscriptions });\n\n      this.updateJsonDataOption(\n        'logAnalyticsSubscriptionId',\n        this.props.options.jsonData.logAnalyticsSubscriptionId || logAnalyticsSubscriptions[0].value\n      );\n    }\n\n    if (this.props.options.jsonData.logAnalyticsSubscriptionId) {\n      await this.getWorkspaces();\n    }\n  };\n\n  getWorkspaces = async () => {\n    const sameAs = this.props.options.jsonData.azureLogAnalyticsSameAs && this.props.options.jsonData.subscriptionId;\n    if (!sameAs && !this.props.options.jsonData.logAnalyticsSubscriptionId) {\n      return;\n    }\n\n    const logAnalyticsWorkspaces = await this.loadWorkspaces(\n      sameAs ? this.props.options.jsonData.subscriptionId : this.props.options.jsonData.logAnalyticsSubscriptionId\n    );\n\n    if (logAnalyticsWorkspaces.length > 0) {\n      this.setState({ logAnalyticsWorkspaces });\n\n      this.updateJsonDataOption(\n        'logAnalyticsDefaultWorkspace',\n        this.props.options.jsonData.logAnalyticsDefaultWorkspace || logAnalyticsWorkspaces[0].value\n      );\n    }\n  };\n\n  render() {\n    const { subscriptions, logAnalyticsSubscriptions, logAnalyticsWorkspaces } = this.state;\n    const { options } = this.props;\n\n    options.jsonData.cloudName = options.jsonData.cloudName || 'azuremonitor';\n    options.secureJsonData = (options.secureJsonData || {}) as AzureDataSourceSecureJsonData;\n\n    return (\n      <>\n        <MonitorConfig\n          options={options}\n          subscriptions={subscriptions}\n          makeSameAs={this.makeSameAs}\n          onLoadSubscriptions={this.onLoadSubscriptions}\n          onUpdateJsonDataOption={this.updateJsonDataOption}\n          onUpdateSecureJsonDataOption={this.updateSecureJsonDataOption}\n          onResetOptionKey={this.resetSecureKey}\n        />\n\n        <AnalyticsConfig\n          options={options}\n          workspaces={logAnalyticsWorkspaces}\n          subscriptions={logAnalyticsSubscriptions}\n          makeSameAs={this.makeSameAs}\n          onUpdateDatasourceOptions={this.props.onOptionsChange}\n          onUpdateJsonDataOption={this.updateJsonDataOption}\n          onUpdateSecureJsonDataOption={this.updateSecureJsonDataOption}\n          onResetOptionKey={this.resetSecureKey}\n          onLoadSubscriptions={this.onLoadSubscriptions}\n          onLoadWorkspaces={this.getWorkspaces}\n        />\n\n        <InsightsConfig\n          options={options}\n          onUpdateJsonDataOption={this.onUpdateJsonDataOption}\n          onUpdateSecureJsonDataOption={this.onUpdateSecureJsonDataOption}\n          onResetOptionKey={this.resetSecureKey}\n        />\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport class AzureMonitorAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  datasource: any;\n  annotation: any;\n  workspaces: any[];\n  subscriptions: Array<{ text: string; value: string }>;\n\n  defaultQuery =\n    '<your table>\\n| where $__timeFilter() \\n| project TimeGenerated, Text=YourTitleColumn, Tags=\"tag1,tag2\"';\n\n  /** @ngInject */\n  constructor(private templateSrv: TemplateSrv) {\n    this.annotation.queryType = this.annotation.queryType || 'Azure Log Analytics';\n    this.annotation.rawQuery = this.annotation.rawQuery || this.defaultQuery;\n    this.initDropdowns();\n  }\n\n  async initDropdowns() {\n    await this.getSubscriptions();\n    await this.getWorkspaces();\n  }\n\n  async getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any[]) => {\n      this.subscriptions = subs;\n\n      if (!this.annotation.subscription && this.annotation.queryType === 'Azure Log Analytics') {\n        this.annotation.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\n      }\n\n      if (!this.annotation.subscription && this.subscriptions.length > 0) {\n        this.annotation.subscription = this.subscriptions[0].value;\n      }\n    });\n  }\n\n  async getWorkspaces(bustCache?: boolean) {\n    if (!bustCache && this.workspaces && this.workspaces.length > 0) {\n      return this.workspaces;\n    }\n\n    return this.datasource\n      .getAzureLogAnalyticsWorkspaces(this.annotation.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n        if (list.length > 0 && !this.annotation.workspace) {\n          this.annotation.workspace = list[0].value;\n        }\n        return this.workspaces;\n      })\n      .catch(() => {});\n  }\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.annotation.workspace);\n      })\n      .catch(() => {});\n  };\n\n  onSubscriptionChange = () => {\n    this.getWorkspaces(true);\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.annotation.rawQuery = nextQuery;\n  };\n\n  get templateVariables() {\n    return this.templateSrv.getVariables().map((t: any) => '$' + t.name);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { AzureMonitorQueryCtrl } from './query_ctrl';\nimport Datasource from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { AzureMonitorAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<Datasource, AzureMonitorQuery, AzureDataSourceJsonData>(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(AzureMonitorQueryCtrl)\n  .setAnnotationQueryCtrl(AzureMonitorAnnotationsQueryCtrl);\n","// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    promise.then(val => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)));\n    promise.catch(error => (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n"],"sourceRoot":""}