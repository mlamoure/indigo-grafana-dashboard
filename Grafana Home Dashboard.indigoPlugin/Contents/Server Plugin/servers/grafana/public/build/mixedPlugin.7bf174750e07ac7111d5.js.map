{"version":3,"sources":["webpack:///./public/app/plugins/datasource/mixed/MixedDataSource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts"],"names":["MixedDatasource","instanceSettings","request","queries","targets","filter","t","datasource","length","of","data","sets","groupBy","mixed","key","dsName","push","getDataSourceSrv","get","this","batchQueries","runningQueries","isQueryable","map","query","i","from","pipe","mergeMap","api","dsRequest","cloneDeep","requestId","response","state","LoadingState","Loading","forkJoin","markAsDone","mergeAll","Promise","resolve","Array","isArray","responses","Done","DataSourceApi"],"mappings":"82CAeO,IAOMA,EAAb,YACE,WAAYC,GAA8C,O,4FAAA,+BAClDA,I,UAFV,O,kOAAA,M,EAAA,G,EAAA,6BAKQC,GAEJ,IAAMC,EAAUD,EAAQE,QAAQC,QAAO,SAAAC,GACrC,MAf+B,gBAexBA,EAAEC,cAGX,IAAKJ,EAAQK,OACX,OAAOC,YAAG,CAAEC,KAAM,KAIpB,IAAMC,EAAuCC,IAAQT,EAAS,cACxDU,EAA0B,GAChC,IAAK,IAAMC,KAAOH,EAAM,CACtB,IAAMP,EAAUO,EAAKG,GACfC,EAASX,EAAQ,GAAGG,WAC1BM,EAAMG,KAAK,CACTT,WAAYU,6BAAmBC,IAAIH,GACnCX,YAGJ,OAAOe,KAAKC,aAAaP,EAAOX,KA1BpC,mCA6BeW,EAAyBX,GACpC,IAAMmB,EAAiBR,EAAMR,OAAOc,KAAKG,aAAaC,KAAI,SAACC,EAAOC,GAAR,OACxDC,YAAKF,EAAMjB,YAAYoB,KACrBC,aAAS,SAACC,GACR,IAAMC,EAAYC,IAAU7B,GAI5B,OAHA4B,EAAUE,UAAV,gBAA+BP,EAA/B,YAAoCK,EAAUE,WAAa,IAC3DF,EAAU1B,QAAUoB,EAAMpB,QAEnBsB,YAAKG,EAAIL,MAAMM,IAAYH,KAChCJ,aAAI,SAAAU,GACF,O,+VAAA,IACKA,EADL,CAEEvB,KAAMuB,EAASvB,MAAQ,GACvBwB,MAAOC,eAAaC,QACpBtB,IAAK,SAAF,OAAWW,EAAX,YAAgBQ,EAASnB,KAAO,iBAQ/C,OAAOuB,YAAShB,GAAgBM,KAAKJ,YAAIJ,KAAKmB,YAAaC,iBAnD/D,uCAuDI,OAAOC,QAAQC,QAAQ,MAvD3B,kCA0DsBjB,GAClB,OAAOA,GAASkB,MAAMC,QAAQnB,EAAMpB,UAAYoB,EAAMpB,QAAQI,OAAS,IA3D3E,iCA8DqBoC,GAAqD,IAC9DpC,EAAWoC,EAAXpC,OAER,OAAe,IAAXA,EACKoC,GAGTA,EAAUpC,EAAS,GAAG0B,MAAQC,eAAaU,KACpCD,Q,2BAtEX,GAAqCE,iBCtBrC","file":"mixedPlugin.7bf174750e07ac7111d5.js","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport groupBy from 'lodash/groupBy';\nimport { from, of, Observable, forkJoin } from 'rxjs';\nimport { map, mergeMap, mergeAll } from 'rxjs/operators';\n\nimport {\n  LoadingState,\n  DataSourceApi,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport const MIXED_DATASOURCE_NAME = '-- Mixed --';\n\nexport interface BatchedQueries {\n  datasource: Promise<DataSourceApi>;\n  targets: DataQuery[];\n}\n\nexport class MixedDatasource extends DataSourceApi<DataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    // Remove any invalid queries\n    const queries = request.targets.filter(t => {\n      return t.datasource !== MIXED_DATASOURCE_NAME;\n    });\n\n    if (!queries.length) {\n      return of({ data: [] } as DataQueryResponse); // nothing\n    }\n\n    // Build groups of queries to run in parallel\n    const sets: { [key: string]: DataQuery[] } = groupBy(queries, 'datasource');\n    const mixed: BatchedQueries[] = [];\n    for (const key in sets) {\n      const targets = sets[key];\n      const dsName = targets[0].datasource;\n      mixed.push({\n        datasource: getDataSourceSrv().get(dsName),\n        targets,\n      });\n    }\n    return this.batchQueries(mixed, request);\n  }\n\n  batchQueries(mixed: BatchedQueries[], request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    const runningQueries = mixed.filter(this.isQueryable).map((query, i) =>\n      from(query.datasource).pipe(\n        mergeMap((api: DataSourceApi) => {\n          const dsRequest = cloneDeep(request);\n          dsRequest.requestId = `mixed-${i}-${dsRequest.requestId || ''}`;\n          dsRequest.targets = query.targets;\n\n          return from(api.query(dsRequest)).pipe(\n            map(response => {\n              return {\n                ...response,\n                data: response.data || [],\n                state: LoadingState.Loading,\n                key: `mixed-${i}-${response.key || ''}`,\n              } as DataQueryResponse;\n            })\n          );\n        })\n      )\n    );\n\n    return forkJoin(runningQueries).pipe(map(this.markAsDone), mergeAll());\n  }\n\n  testDatasource() {\n    return Promise.resolve({});\n  }\n\n  private isQueryable(query: BatchedQueries): boolean {\n    return query && Array.isArray(query.targets) && query.targets.length > 0;\n  }\n\n  private markAsDone(responses: DataQueryResponse[]): DataQueryResponse[] {\n    const { length } = responses;\n\n    if (length === 0) {\n      return responses;\n    }\n\n    responses[length - 1].state = LoadingState.Done;\n    return responses;\n  }\n}\n","import { MixedDatasource } from './MixedDataSource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n"],"sourceRoot":""}