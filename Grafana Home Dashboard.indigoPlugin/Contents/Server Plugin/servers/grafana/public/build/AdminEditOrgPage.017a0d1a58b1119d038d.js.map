{"version":3,"sources":["webpack:///./public/app/features/users/UsersTable.tsx","webpack:///./node_modules/react-use/esm/useAsyncFn.js","webpack:///./node_modules/react-use/esm/useMountedState.js","webpack:///./public/app/features/admin/AdminEditOrgPage.tsx"],"names":["UsersTable","props","users","onRoleChange","onRemoveUser","useState","showRemoveModal","setShowRemoveModal","className","style","width","map","user","index","key","userId","src","avatarUrl","title","login","email","name","lastSeenAtAge","value","role","onChange","newRole","size","variant","onClick","icon","body","confirmText","onDismiss","isOpen","onConfirm","useAsyncFn","fn","deps","initialState","loading","lastCallId","_a","state","set","isMounted","args","_i","arguments","length","callId","current","apply","then","error","useMountedState","mountedRef","get","getOrg","orgId","getBackendSrv","getOrgUsers","updateOrgUserRole","orgUser","patch","removeOrgUser","delete","AdminEditOrgPage","navIndex","useSelector","navModel","getNavModel","location","routeParams","id","setUsers","orgState","fetchOrg","fetchOrgUsers","useEffect","res","updateOrgName","put","Contents","defaultValues","orgName","onSubmit","values","register","errors","label","invalid","ref","required","css","filter"],"mappings":"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","file":"AdminEditOrgPage.017a0d1a58b1119d038d.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { OrgUser } from 'app/types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { OrgRole } from '@grafana/data';\n\nexport interface Props {\n  users: OrgUser[];\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = props => {\n  const { users, onRoleChange, onRemoveUser } = props;\n\n  const [showRemoveModal, setShowRemoveModal] = useState<string | boolean>(false);\n  return (\n    <table className=\"filter-table form-inline\">\n      <thead>\n        <tr>\n          <th />\n          <th>Login</th>\n          <th>Email</th>\n          <th>Name</th>\n          <th>Seen</th>\n          <th>Role</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user, index) => {\n          return (\n            <tr key={`${user.userId}-${index}`}>\n              <td className=\"width-2 text-center\">\n                <img className=\"filter-table__avatar\" src={user.avatarUrl} />\n              </td>\n              <td className=\"max-width-6\">\n                <span className=\"ellipsis\" title={user.login}>\n                  {user.login}\n                </span>\n              </td>\n\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.name}>\n                  {user.name}\n                </span>\n              </td>\n              <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n              <td className=\"width-8\">\n                <OrgRolePicker value={user.role} onChange={newRole => onRoleChange(newRole, user)} />\n              </td>\n\n              <td>\n                <Button size=\"sm\" variant=\"destructive\" onClick={() => setShowRemoveModal(user.login)} icon=\"times\" />\n                <ConfirmModal\n                  body={`Are you sure you want to delete user ${user.login}?`}\n                  confirmText=\"Delete\"\n                  title=\"Delete\"\n                  onDismiss={() => setShowRemoveModal(false)}\n                  isOpen={user.login === showRemoveModal}\n                  onConfirm={() => {\n                    onRemoveUser(user);\n                  }}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default UsersTable;\n","/* eslint-disable */\nimport { useCallback, useState, useRef } from 'react';\nimport useMountedState from './useMountedState';\nexport default function useAsyncFn(fn, deps, initialState) {\n    if (deps === void 0) { deps = []; }\n    if (initialState === void 0) { initialState = { loading: false }; }\n    var lastCallId = useRef(0);\n    var _a = useState(initialState), state = _a[0], set = _a[1];\n    var isMounted = useMountedState();\n    var callback = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var callId = ++lastCallId.current;\n        set({ loading: true });\n        return fn.apply(void 0, args).then(function (value) {\n            isMounted() && callId === lastCallId.current && set({ value: value, loading: false });\n            return value;\n        }, function (error) {\n            isMounted() && callId === lastCallId.current && set({ error: error, loading: false });\n            return error;\n        });\n    }, deps);\n    return [state, callback];\n}\n","import { useCallback, useEffect, useRef } from 'react';\nexport default function useMountedState() {\n    var mountedRef = useRef(false);\n    var get = useCallback(function () { return mountedRef.current; }, []);\n    useEffect(function () {\n        mountedRef.current = true;\n        return function () {\n            mountedRef.current = false;\n        };\n    });\n    return get;\n}\n","import React, { FC, useState, useEffect } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { useSelector } from 'react-redux';\nimport { StoreState, OrgUser } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport UsersTable from '../users/UsersTable';\nimport { useAsyncFn } from 'react-use';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { UrlQueryValue } from '@grafana/data';\nimport { Form, Field, Input, Button, Legend } from '@grafana/ui';\nimport { css } from 'emotion';\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\nconst getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId);\n};\n\nconst getOrgUsers = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId + '/users');\n};\n\nconst updateOrgUserRole = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  await getBackendSrv().patch('/api/orgs/' + orgId + '/users/' + orgUser.userId, orgUser);\n};\n\nconst removeOrgUser = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId + '/users/' + orgUser.userId);\n};\n\nexport const AdminEditOrgPage: FC = () => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n\n  const orgId = useSelector((state: StoreState) => state.location.routeParams.id);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(() => getOrgUsers(orgId), []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers().then(res => setUsers(res));\n  }, []);\n\n  const updateOrgName = async (name: string) => {\n    return await getBackendSrv().put('/api/orgs/' + orgId, { ...orgState.value, name });\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <Legend>Edit Organization</Legend>\n\n          {orgState.value && (\n            <Form\n              defaultValues={{ orgName: orgState.value.name }}\n              onSubmit={async (values: OrgNameDTO) => await updateOrgName(values.orgName)}\n            >\n              {({ register, errors }) => (\n                <>\n                  <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\">\n                    <Input name=\"orgName\" ref={register({ required: true })} />\n                  </Field>\n                  <Button>Update</Button>\n                </>\n              )}\n            </Form>\n          )}\n\n          <div\n            className={css`\n              margin-top: 20px;\n            `}\n          >\n            <Legend>Organization Users</Legend>\n            {!!users.length && (\n              <UsersTable\n                users={users}\n                onRoleChange={(role, orgUser) => {\n                  updateOrgUserRole({ ...orgUser, role }, orgId);\n                  setUsers(\n                    users.map(user => {\n                      if (orgUser.userId === user.userId) {\n                        return { ...orgUser, role };\n                      }\n                      return user;\n                    })\n                  );\n                  fetchOrgUsers();\n                }}\n                onRemoveUser={orgUser => {\n                  removeOrgUser(orgUser, orgId);\n                  setUsers(users.filter(user => orgUser.userId !== user.userId));\n                  fetchOrgUsers();\n                }}\n              />\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminEditOrgPage;\n"],"sourceRoot":""}