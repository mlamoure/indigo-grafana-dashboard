{"version":3,"sources":["webpack:///./public/app/features/admin/UserCreatePage.tsx"],"names":["createUser","user","getBackendSrv","post","mapDispatchToProps","updateLocation","hot","module","connect","state","navModel","getNavModel","navIndex","onSubmit","useCallback","data","path","Contents","validateOn","register","errors","label","required","invalid","name","error","ref","password","type","validate","value","trim","length"],"mappings":"0hBAsBA,IAAMA,EAAU,4CAAG,WAAOC,GAAP,yGAAyBC,0BAAgBC,KAAK,mBAAoBF,IAAlE,2CAAH,sDAuDVG,EAAqB,CACzBC,oBAEaC,wBAAIC,EAAJD,CAAYE,mBAPH,SAACC,GAAD,MAAwB,CAC9CC,SAAUC,YAAYF,EAAMG,SAAU,mBAMYR,EAAzBI,EAxD2B,SAAC,GAAiC,IAA/BE,EAA+B,EAA/BA,SAAUL,EAAqB,EAArBA,eAC3DQ,EAAWC,sBAAW,4CAAC,WAAOC,GAAP,gGACrBf,EAAWe,GADU,OAE3BV,EAAe,CAAEW,KAAM,iBAFI,2CAAD,sDAGzB,IAEH,OACE,kBAAC,IAAD,CAAMN,SAAUA,GACd,kBAAC,IAAKO,SAAN,KACE,4CACA,kBAAC,OAAD,CAAMJ,SAAUA,EAAUK,WAAW,WAClC,YAA0B,IAAvBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OACZ,OACE,oCACE,kBAAC,QAAD,CAAOC,MAAM,OAAOC,UAAQ,EAACC,UAAWH,EAAOI,KAAMC,QAASL,EAAOI,MAAQ,oBAC3E,kBAAC,QAAD,CAAOA,KAAK,OAAOE,IAAKP,EAAS,CAAEG,UAAU,OAG/C,kBAAC,QAAD,CAAOD,MAAM,UACX,kBAAC,QAAD,CAAOG,KAAK,QAAQE,IAAKP,KAG3B,kBAAC,QAAD,CAAOE,MAAM,YACX,kBAAC,QAAD,CAAOG,KAAK,QAAQE,IAAKP,KAE3B,kBAAC,QAAD,CACEE,MAAM,WACNC,UAAQ,EACRC,UAAWH,EAAOO,SAClBF,QAASL,EAAOO,UAAY,+DAE5B,kBAAC,QAAD,CACEC,KAAK,WACLJ,KAAK,WACLE,IAAKP,EAAS,CACZU,SAAU,SAAAC,GAAK,MAAqB,KAAjBA,EAAMC,QAAiBD,EAAME,QAAU,QAIhE,kBAAC,SAAD,CAAQJ,KAAK,UAAb,0B","file":"UserCreatePage.017a0d1a58b1119d038d.js","sourcesContent":["import React, { useCallback } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { StoreState } from '../../types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { updateLocation } from 'app/core/actions';\n\ninterface UserCreatePageProps {\n  navModel: NavModel;\n  updateLocation: typeof updateLocation;\n}\ninterface UserDTO {\n  name: string;\n  password: string;\n  email?: string;\n  login?: string;\n}\n\nconst createUser = async (user: UserDTO) => getBackendSrv().post('/api/admin/users', user);\n\nconst UserCreatePage: React.FC<UserCreatePageProps> = ({ navModel, updateLocation }) => {\n  const onSubmit = useCallback(async (data: UserDTO) => {\n    await createUser(data);\n    updateLocation({ path: '/admin/users' });\n  }, []);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h1>Add new user</h1>\n        <Form onSubmit={onSubmit} validateOn=\"onBlur\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field label=\"Name\" required invalid={!!errors.name} error={!!errors.name && 'Name is required'}>\n                  <Input name=\"name\" ref={register({ required: true })} />\n                </Field>\n\n                <Field label=\"E-mail\">\n                  <Input name=\"email\" ref={register} />\n                </Field>\n\n                <Field label=\"Username\">\n                  <Input name=\"login\" ref={register} />\n                </Field>\n                <Field\n                  label=\"Password\"\n                  required\n                  invalid={!!errors.password}\n                  error={!!errors.password && 'Password is required and must contain at least 4 characters'}\n                >\n                  <Input\n                    type=\"password\"\n                    name=\"password\"\n                    ref={register({\n                      validate: value => value.trim() !== '' && value.length >= 4,\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create user</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n};\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(UserCreatePage));\n"],"sourceRoot":""}