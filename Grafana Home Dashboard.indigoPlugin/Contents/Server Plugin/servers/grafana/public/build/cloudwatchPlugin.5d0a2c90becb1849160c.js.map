{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Stats.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Dimensions.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Forms.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/Alias.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/QueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.tsx"],"names":["query_parameter_ctrl_CloudWatchQueryParameterCtrl","CloudWatchQueryParameterCtrl","$scope","templateSrv","uiSegmentSrv","datasourceSrv","$q","init","target","namespace","metricName","statistics","dimensions","period","region","id","expression","regionSegment","getSegmentForValue","namespaceSegment","metricSegment","dimSegments","lodash_default","a","reduce","memo","value","key","push","newKey","newOperator","newKeyValue","statSegments","map","stat","ensurePlusButton","removeDimSegment","newSegment","fake","removeStatSegment","isEmpty","onChange","getStatSegments","when","flatten","angular_default","copy","datasource","standardStatistics","s","statSegmentChanged","segment","index","splice","type","seg","segments","count","length","lastSegment","Math","max","newPlusButton","getDimSegments","$index","query","getDimensionKeys","dimensionKey","getDimensionValues","then","transformToSegments","results","dimSegmentChanged","newFake","cssClass","syncDimSegmentsWithModel","dims","i","keySegment","valueSegment","getRegions","metricFindQuery","unshift","text","getNamespaces","getMetrics","regionChanged","namespaceChanged","metricChanged","addTemplateVars","expandable","each","variables","variable","name","$inject","templateUrl","controller","restrict","ConfigEditor_ConfigEditor","_super","ConfigEditor","props","_this","call","this","Object","tslib_es6","_a","j","config","jsonData","k","secureJsonData","onAuthProviderChange","authType","updateDatasource","state","onRegionChange","defaultRegion","onResetAccessKey","secureJsonFields","accessKey","onAccessKeyChange","onResetSecretKey","secretKey","onSecretKeyChange","onCredentialProfileNameChange","database","onArnAssumeRoleChange","assumeRoleArn","onCustomMetricsNamespacesChange","customMetricsNamespaces","options","defaults","label","regions","getDerivedStateFromProps","prototype","loadRegions","datasource_srv","loadDatasource","ds","setState","err","render","authProviderOptions","react_default","createElement","Fragment","className","grafana_ui_src","find","authProvider","defaultValue","tooltip","placeholder","event","disabled","variant","onClick","timeField","hasOwnProperty","react","removeOption","stats","values","variableOptionGroup","allowCustomValue","filter","_","v","Component","includes","Dimensions_removeOption","loadValues","loadKeys","_b","data","setData","_c","res","isEqual_default","completeDimensions","excludeUsedKeys","keys","newDimensions","newValue","every","children","width","QueryField","alias","setAlias","propagateOnChange","lodash","e","idValidationEvents","QueryEditor_a","onBlur","rule","RegExp","test","errorMessage","QueryEditor_QueryEditor","QueryEditor","apply","arguments","namespaces","metricNames","showMeta","appendTemplateVariables","toOption","componentWillMount","matchExact","componentDidMount","all","onRunQuery","metaDataExist","QueryInlineField","loadOptions","loadMetricNames","Stats","Dimensions","validationEvents","Alias","labelClass","checked","series","meta","gmdMeta","ID","Expression","href","memoizedDebounce","func","wait","mem","_i","leading","JSON","stringify","args","displayAlert","datasourceName","store","dispatch","actions","appNotification","ThrottlingErrorMessage","displayCustomError","title","message","CloudWatchDatasource","instanceSettings","backendSrv","timeSrv","proxyUrl","url","debouncedCustomAlert","types","Error","targets","item","hide","replace","getActualRegion","scopedVars","convertDimensionFormat","String","getPeriod","some","indexOf","matches","exec","extend","refId","intervalMs","maxDataPoints","datasourceId","queries","d","defer","resolve","promise","request","from","range","valueOf","toString","to","performTimeSeriesQuery","get","enumerable","configurable","now","start","convertToCloudWatchTime","round","Date","parseInt","kbn","interval_to_seconds","daySec","buildCloudwatchConsoleUrl","end","conf","view","stacked","isSearchExpression","metrics","entries","acc","encodeURIComponent","awsRequest","queryRequest","error","queryResult","link","toISOString","e_1","points","dataFrame","src","datapoints","fields","_d","next","done","links","targetBlank","catch","failedRedIds_1","forEach","debouncedAlert","transformSuggestDataFromTable","suggestData","tables","rows","doMetricQueryRequest","subtype","parameters","timeRange","r","trim","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filters","getResourceARNs","resourceType","tags","filterJson","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","resourceARNsQuery","tagsJSON","match","parse","annotationQuery","annotation","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","time","targetContainsTemplate","variableExists","testDatasource","status","method","datasourceRequest","result","getDefaultRegion","date","roundUp","isString","_e","_f","Array","isArray","valueVar","getVariableName","multi","split","displayErrorIfIsMultiTemplateVariable","fieldName","__webpack_require__","__webpack_exports__","module_plugin","CloudWatchAnnotationsQueryCtrl","cloudwatch_datasource","setConfigEditor","setQueryEditor"],"mappings":"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","file":"cloudwatchPlugin.5d0a2c90becb1849160c.js","sourcesContent":["import angular, { IQService } from 'angular';\nimport coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope: any, templateSrv: TemplateSrv, uiSegmentSrv: any, datasourceSrv: DatasourceSrv, $q: IQService) {\n    $scope.init = () => {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        (memo, value, key) => {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        []\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = () => {};\n      }\n    };\n\n    $scope.getStatSegments = () => {\n      return $q.when(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, s => {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = (segment: any, index: number) => {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        (memo, seg) => {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        []\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = (segments: any) => {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = (segment: any, $index: number) => {\n      if (segment.type === 'operator') {\n        return $q.when([]);\n      }\n\n      const target = $scope.target;\n      let query = $q.when([]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        delete target.dimensions[dimensionKey];\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = (segment: any, index: number) => {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = () => {\n      const dims: any = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = () => {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then((results: any) => {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = () => {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = () => {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = () => {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = () => {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = () => {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = (addTemplateVars: any) => {\n      return (results: any) => {\n        const segments = _.map(results, segment => {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.variables, variable => {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nexport function cloudWatchQueryParameter() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n    controller: CloudWatchQueryParameterCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      datasource: '=',\n      onChange: '&',\n    },\n  };\n}\n\ncoreModule.directive('cloudwatchQueryParameter', cloudWatchQueryParameter);\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { FormLabel, Select, Input, Button } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { SelectableValue } from '@grafana/data';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport CloudWatchDatasource from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData>;\n\ntype CloudwatchSettings = DataSourceSettings<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport interface State {\n  config: CloudwatchSettings;\n  authProviderOptions: SelectableValue[];\n  regions: SelectableValue[];\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = this.props;\n\n    this.state = {\n      config: ConfigEditor.defaults(options),\n      authProviderOptions: [\n        { label: 'Access & secret key', value: 'keys' },\n        { label: 'Credentials file', value: 'credentials' },\n        { label: 'ARN', value: 'arn' },\n      ],\n      regions: [],\n    };\n\n    this.updateDatasource(this.state.config);\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: ConfigEditor.defaults(props.options),\n    };\n  }\n\n  static defaults = (options: any) => {\n    options.jsonData.authType = options.jsonData.authType || 'credentials';\n    options.jsonData.timeField = options.jsonData.timeField || '@timestamp';\n\n    if (!options.hasOwnProperty('secureJsonData')) {\n      options.secureJsonData = {};\n    }\n\n    if (!options.hasOwnProperty('jsonData')) {\n      options.jsonData = {};\n    }\n\n    if (!options.hasOwnProperty('secureJsonFields')) {\n      options.secureJsonFields = {};\n    }\n\n    return options;\n  };\n\n  async componentDidMount() {\n    this.loadRegions();\n  }\n\n  loadRegions() {\n    getDatasourceSrv()\n      .loadDatasource(this.state.config.name)\n      .then((ds: CloudWatchDatasource) => {\n        return ds.getRegions();\n      })\n      .then(\n        (regions: any) => {\n          this.setState({\n            regions: regions.map((region: any) => {\n              return {\n                value: region.value,\n                label: region.text,\n              };\n            }),\n          });\n        },\n        (err: any) => {\n          const regions = [\n            'ap-east-1',\n            'ap-northeast-1',\n            'ap-northeast-2',\n            'ap-northeast-3',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'ca-central-1',\n            'cn-north-1',\n            'cn-northwest-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'me-south-1',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-gov-east-1',\n            'us-gov-west-1',\n            'us-iso-east-1',\n            'us-isob-east-1',\n            'us-west-1',\n            'us-west-2',\n          ];\n\n          this.setState({\n            regions: regions.map((region: string) => {\n              return {\n                value: region,\n                label: region,\n              };\n            }),\n          });\n\n          // expected to fail when creating new datasource\n          // console.error('failed to get latest regions', err);\n        }\n      );\n  }\n\n  updateDatasource = async (config: any) => {\n    for (const j in config.jsonData) {\n      if (config.jsonData[j].length === 0) {\n        delete config.jsonData[j];\n      }\n    }\n\n    for (const k in config.secureJsonData) {\n      if (config.secureJsonData[k].length === 0) {\n        delete config.secureJsonData[k];\n      }\n    }\n\n    this.props.onOptionsChange({\n      ...config,\n    });\n  };\n\n  onAuthProviderChange = (authType: SelectableValue<string>) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        authType: authType.value,\n      },\n    });\n  };\n\n  onRegionChange = (defaultRegion: SelectableValue<string>) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        defaultRegion: defaultRegion.value,\n      },\n    });\n  };\n\n  onResetAccessKey = () => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        accessKey: false,\n      },\n    });\n  };\n\n  onAccessKeyChange = (accessKey: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        accessKey,\n      },\n    });\n  };\n\n  onResetSecretKey = () => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        secretKey: false,\n      },\n    });\n  };\n\n  onSecretKeyChange = (secretKey: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      secureJsonData: {\n        ...this.state.config.secureJsonData,\n        secretKey,\n      },\n    });\n  };\n\n  onCredentialProfileNameChange = (database: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      database,\n    });\n  };\n\n  onArnAssumeRoleChange = (assumeRoleArn: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        assumeRoleArn,\n      },\n    });\n  };\n\n  onCustomMetricsNamespacesChange = (customMetricsNamespaces: string) => {\n    this.updateDatasource({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        customMetricsNamespaces,\n      },\n    });\n  };\n\n  render() {\n    const { config, authProviderOptions, regions } = this.state;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">CloudWatch Details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\">Auth Provider</FormLabel>\n              <Select\n                className=\"width-30\"\n                value={authProviderOptions.find(authProvider => authProvider.value === config.jsonData.authType)}\n                options={authProviderOptions}\n                defaultValue={config.jsonData.authType}\n                onChange={this.onAuthProviderChange}\n              />\n            </div>\n          </div>\n          {config.jsonData.authType === 'credentials' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel\n                  className=\"width-14\"\n                  tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n                >\n                  Credentials Profile Name\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"default\"\n                    value={config.jsonData.database}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                      this.onCredentialProfileNameChange(event.target.value)\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {config.jsonData.authType === 'keys' && (\n            <div>\n              {config.secureJsonFields.accessKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button variant=\"secondary\" type=\"button\" onClick={this.onResetAccessKey}>\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={config.secureJsonData.accessKey || ''}\n                        onChange={(event: ChangeEvent<HTMLInputElement>) => this.onAccessKeyChange(event.target.value)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n              {config.secureJsonFields.secretKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button variant=\"secondary\" type=\"button\" onClick={this.onResetSecretKey}>\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={config.secureJsonData.secretKey || ''}\n                        onChange={(event: ChangeEvent<HTMLInputElement>) => this.onSecretKeyChange(event.target.value)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          {config.jsonData.authType === 'arn' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-14\" tooltip=\"ARN of Assume Role\">\n                  Assume Role ARN\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"arn:aws:iam:*\"\n                    value={config.jsonData.assumeRoleArn || ''}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => this.onArnAssumeRoleChange(event.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel\n                className=\"width-14\"\n                tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n              >\n                Default Region\n              </FormLabel>\n              <Select\n                className=\"width-30\"\n                value={regions.find(region => region.value === config.jsonData.defaultRegion)}\n                options={regions}\n                defaultValue={config.jsonData.defaultRegion}\n                onChange={this.onRegionChange}\n              />\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\" tooltip=\"Namespaces of Custom Metrics.\">\n                Custom Metrics\n              </FormLabel>\n              <Input\n                className=\"width-30\"\n                placeholder=\"Namespace1,Namespace2\"\n                value={config.jsonData.customMetricsNamespaces || ''}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  this.onCustomMetricsNamespacesChange(event.target.value)\n                }\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { FunctionComponent } from 'react';\nimport { SelectableStrings } from '../types';\nimport { SelectableValue } from '@grafana/data';\nimport { Segment } from '@grafana/ui';\n\nexport interface Props {\n  values: string[];\n  onChange: (values: string[]) => void;\n  variableOptionGroup: SelectableValue<string>;\n  stats: SelectableStrings;\n}\n\nconst removeText = '-- remove stat --';\nconst removeOption: SelectableValue<string> = { label: removeText, value: removeText };\n\nexport const Stats: FunctionComponent<Props> = ({ stats, values, onChange, variableOptionGroup }) => (\n  <>\n    {values &&\n      values.map((value, index) => (\n        <Segment\n          allowCustomValue\n          key={value + index}\n          value={value}\n          options={[removeOption, ...stats, variableOptionGroup]}\n          onChange={value =>\n            onChange(\n              value === removeText\n                ? values.filter((_, i) => i !== index)\n                : values.map((v, i) => (i === index ? value : v))\n            )\n          }\n        />\n      ))}\n    {values.length !== stats.length && (\n      <Segment\n        Component={\n          <a className=\"gf-form-label query-part\">\n            <i className=\"fa fa-plus\" />\n          </a>\n        }\n        allowCustomValue\n        onChange={(value: string) => onChange([...values, value])}\n        options={[...stats.filter(({ value }) => !values.includes(value)), variableOptionGroup]}\n      />\n    )}\n  </>\n);\n","import React, { FunctionComponent, Fragment, useState, useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { SelectableValue } from '@grafana/data';\nimport { SegmentAsync } from '@grafana/ui';\nimport { SelectableStrings } from '../types';\n\nexport interface Props {\n  dimensions: { [key: string]: string | string[] };\n  onChange: (dimensions: { [key: string]: string }) => void;\n  loadValues: (key: string) => Promise<SelectableStrings>;\n  loadKeys: () => Promise<SelectableStrings>;\n}\n\nconst removeText = '-- remove dimension --';\nconst removeOption: SelectableValue<string> = { label: removeText, value: removeText };\n\n// The idea of this component is that is should only trigger the onChange event in the case\n// there is a complete dimension object. E.g, when a new key is added is doesn't have a value.\n// That should not trigger onChange.\nexport const Dimensions: FunctionComponent<Props> = ({ dimensions, loadValues, loadKeys, onChange }) => {\n  const [data, setData] = useState(dimensions);\n\n  useEffect(() => {\n    const completeDimensions = Object.entries(data).reduce(\n      (res, [key, value]) => (value ? { ...res, [key]: value } : res),\n      {}\n    );\n    if (!isEqual(completeDimensions, dimensions)) {\n      onChange(completeDimensions);\n    }\n  }, [data]);\n\n  const excludeUsedKeys = (options: SelectableStrings) => {\n    return options.filter(({ value }) => !Object.keys(data).includes(value));\n  };\n\n  return (\n    <>\n      {Object.entries(data).map(([key, value], index) => (\n        <Fragment key={index}>\n          <SegmentAsync\n            allowCustomValue\n            value={key}\n            loadOptions={() => loadKeys().then(keys => [removeOption, ...excludeUsedKeys(keys)])}\n            onChange={newKey => {\n              const { [key]: value, ...newDimensions } = data;\n              if (newKey === removeText) {\n                setData({ ...newDimensions });\n              } else {\n                setData({ ...newDimensions, [newKey]: '' });\n              }\n            }}\n          />\n          <label className=\"gf-form-label query-segment-operator\">=</label>\n          <SegmentAsync\n            allowCustomValue\n            value={value || 'select dimension value'}\n            loadOptions={() => loadValues(key)}\n            onChange={newValue => setData({ ...data, [key]: newValue })}\n          />\n          {Object.values(data).length > 1 && index + 1 !== Object.values(data).length && (\n            <label className=\"gf-form-label query-keyword\">AND</label>\n          )}\n        </Fragment>\n      ))}\n      {Object.values(data).every(v => v) && (\n        <SegmentAsync\n          allowCustomValue\n          Component={\n            <a className=\"gf-form-label query-part\">\n              <i className=\"fa fa-plus\" />\n            </a>\n          }\n          loadOptions={() => loadKeys().then(excludeUsedKeys)}\n          onChange={(newKey: string) => setData({ ...data, [newKey]: '' })}\n        />\n      )}\n    </>\n  );\n};\n","import React, { InputHTMLAttributes, FunctionComponent } from 'react';\nimport { FormLabel } from '@grafana/ui';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: string;\n  children?: React.ReactNode;\n}\n\nexport const QueryField: FunctionComponent<Partial<Props>> = ({ label, tooltip, children }) => (\n  <>\n    <FormLabel width={8} className=\"query-keyword\" tooltip={tooltip}>\n      {label}\n    </FormLabel>\n    {children}\n  </>\n);\n\nexport const QueryInlineField: FunctionComponent<Props> = ({ ...props }) => {\n  return (\n    <div className={'gf-form-inline'}>\n      <QueryField {...props} />\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\" />\n      </div>\n    </div>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport { debounce } from 'lodash';\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (alias: any) => void;\n  value: string;\n}\n\nexport const Alias: FunctionComponent<Props> = ({ value = '', onChange }) => {\n  const [alias, setAlias] = useState(value);\n\n  const propagateOnChange = debounce(onChange, 1500);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return <Input type=\"text\" className=\"gf-form-input width-16\" value={alias} onChange={onChange} />;\n};\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { SelectableValue, ExploreQueryFieldProps } from '@grafana/data';\nimport { Input, Segment, SegmentAsync, ValidationEvents, EventsWithValidation, Switch } from '@grafana/ui';\nimport { CloudWatchQuery } from '../types';\nimport CloudWatchDatasource from '../datasource';\nimport { SelectableStrings } from '../types';\nimport { Stats, Dimensions, QueryInlineField, QueryField, Alias } from './';\n\nexport type Props = ExploreQueryFieldProps<CloudWatchDatasource, CloudWatchQuery>;\n\ninterface State {\n  regions: SelectableStrings;\n  namespaces: SelectableStrings;\n  metricNames: SelectableStrings;\n  variableOptionGroup: SelectableValue<string>;\n  showMeta: boolean;\n}\n\nconst idValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: value => new RegExp(/^$|^[a-z][a-zA-Z0-9_]*$/).test(value),\n      errorMessage: 'Invalid format. Only alphanumeric characters and underscores are allowed',\n    },\n  ],\n};\n\nexport class QueryEditor extends PureComponent<Props, State> {\n  state: State = { regions: [], namespaces: [], metricNames: [], variableOptionGroup: {}, showMeta: false };\n\n  componentWillMount() {\n    const { query } = this.props;\n\n    if (!query.namespace) {\n      query.namespace = '';\n    }\n\n    if (!query.metricName) {\n      query.metricName = '';\n    }\n\n    if (!query.expression) {\n      query.expression = '';\n    }\n\n    if (!query.dimensions) {\n      query.dimensions = {};\n    }\n\n    if (!query.region) {\n      query.region = 'default';\n    }\n\n    if (!query.id) {\n      query.id = '';\n    }\n\n    if (!query.alias) {\n      query.alias = '';\n    }\n\n    if (!query.statistics || !query.statistics.length) {\n      query.statistics = ['Average'];\n    }\n\n    if (!query.hasOwnProperty('matchExact')) {\n      query.matchExact = true;\n    }\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: this.props.datasource.variables.map(this.toOption),\n    };\n    Promise.all([datasource.metricFindQuery('regions()'), datasource.metricFindQuery('namespaces()')]).then(\n      ([regions, namespaces]) => {\n        this.setState({\n          ...this.state,\n          regions: [...regions, variableOptionGroup],\n          namespaces: [...namespaces, variableOptionGroup],\n          variableOptionGroup,\n        });\n      }\n    );\n  }\n\n  loadMetricNames = async () => {\n    const { namespace, region } = this.props.query;\n    return this.props.datasource.metricFindQuery(`metrics(${namespace},${region})`).then(this.appendTemplateVariables);\n  };\n\n  appendTemplateVariables = (values: SelectableValue[]) => [\n    ...values,\n    { label: 'Template Variables', options: this.props.datasource.variables.map(this.toOption) },\n  ];\n\n  toOption = (value: any) => ({ label: value, value });\n\n  onChange(query: CloudWatchQuery) {\n    const { onChange, onRunQuery } = this.props;\n    onChange(query);\n    onRunQuery();\n  }\n\n  render() {\n    const { query, datasource, onChange, onRunQuery, data } = this.props;\n    const { regions, namespaces, variableOptionGroup: variableOptionGroup, showMeta } = this.state;\n    const metaDataExist = data && Object.values(data).length && data.state === 'Done';\n    return (\n      <>\n        <QueryInlineField label=\"Region\">\n          <Segment\n            value={query.region || 'Select region'}\n            options={regions}\n            allowCustomValue\n            onChange={region => this.onChange({ ...query, region })}\n          />\n        </QueryInlineField>\n\n        {query.expression.length === 0 && (\n          <>\n            <QueryInlineField label=\"Namespace\">\n              <Segment\n                value={query.namespace || 'Select namespace'}\n                allowCustomValue\n                options={namespaces}\n                onChange={namespace => this.onChange({ ...query, namespace })}\n              />\n            </QueryInlineField>\n\n            <QueryInlineField label=\"Metric Name\">\n              <SegmentAsync\n                value={query.metricName || 'Select metric name'}\n                allowCustomValue\n                loadOptions={this.loadMetricNames}\n                onChange={metricName => this.onChange({ ...query, metricName })}\n              />\n            </QueryInlineField>\n\n            <QueryInlineField label=\"Stats\">\n              <Stats\n                stats={datasource.standardStatistics.map(this.toOption)}\n                values={query.statistics}\n                onChange={statistics => this.onChange({ ...query, statistics })}\n                variableOptionGroup={variableOptionGroup}\n              />\n            </QueryInlineField>\n\n            <QueryInlineField label=\"Dimensions\">\n              <Dimensions\n                dimensions={query.dimensions}\n                onChange={dimensions => this.onChange({ ...query, dimensions })}\n                loadKeys={() =>\n                  datasource.getDimensionKeys(query.namespace, query.region).then(this.appendTemplateVariables)\n                }\n                loadValues={newKey => {\n                  const { [newKey]: value, ...newDimensions } = query.dimensions;\n                  return datasource\n                    .getDimensionValues(query.region, query.namespace, query.metricName, newKey, newDimensions)\n                    .then(values => (values.length ? [{ value: '*', text: '*', label: '*' }, ...values] : values))\n                    .then(this.appendTemplateVariables);\n                }}\n              />\n            </QueryInlineField>\n          </>\n        )}\n        {query.statistics.length <= 1 && (\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <QueryField\n                className=\"query-keyword\"\n                label=\"Id\"\n                tooltip=\"Id can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n              >\n                <Input\n                  className=\"gf-form-input width-8\"\n                  onBlur={onRunQuery}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, id: event.target.value })}\n                  validationEvents={idValidationEvents}\n                  value={query.id || ''}\n                />\n              </QueryField>\n            </div>\n            <div className=\"gf-form gf-form--grow\">\n              <QueryField\n                className=\"gf-form--grow\"\n                label=\"Expression\"\n                tooltip=\"Optionally you can add an expression here. Please note that if a math expression that is referencing other queries is being used, it will not be possible to create an alert rule based on this query\"\n              >\n                <Input\n                  className=\"gf-form-input\"\n                  onBlur={onRunQuery}\n                  value={query.expression || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                    onChange({ ...query, expression: event.target.value })\n                  }\n                />\n              </QueryField>\n            </div>\n          </div>\n        )}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <QueryField className=\"query-keyword\" label=\"Period\" tooltip=\"Minimum interval between points in seconds\">\n              <Input\n                className=\"gf-form-input width-8\"\n                value={query.period || ''}\n                placeholder=\"auto\"\n                onBlur={onRunQuery}\n                onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, period: event.target.value })}\n              />\n            </QueryField>\n          </div>\n          <div className=\"gf-form\">\n            <QueryField\n              className=\"query-keyword\"\n              label=\"Alias\"\n              tooltip=\"Alias replacement variables: {{metric}}, {{stat}}, {{namespace}}, {{region}}, {{period}}, {{label}}, {{YOUR_DIMENSION_NAME}}\"\n            >\n              <Alias value={query.alias} onChange={(value: string) => this.onChange({ ...query, alias: value })} />\n            </QueryField>\n            <Switch\n              label=\"Match Exact\"\n              labelClass=\"query-keyword\"\n              tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n              checked={query.matchExact}\n              onChange={() => this.onChange({ ...query, matchExact: !query.matchExact })}\n            />\n            <label className=\"gf-form-label\">\n              <a\n                onClick={() =>\n                  metaDataExist &&\n                  this.setState({\n                    ...this.state,\n                    showMeta: !showMeta,\n                  })\n                }\n              >\n                <i className={`fa fa-caret-${showMeta ? 'down' : 'right'}`} /> {showMeta ? 'Hide' : 'Show'} Query\n                Preview\n              </a>\n            </label>\n          </div>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n          {showMeta && metaDataExist && (\n            <table className=\"filter-table form-inline\">\n              <thead>\n                <tr>\n                  <th>Metric Data Query ID</th>\n                  <th>Metric Data Query Expression</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {data.series[0].meta.gmdMeta.map(({ ID, Expression }: any) => (\n                  <tr key={ID}>\n                    <td>{ID}</td>\n                    <td>{Expression}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://grafana.com/docs/features/datasources/cloudwatch/#service-quotas`}\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import React from 'react';\nimport angular, { IQService } from 'angular';\nimport _ from 'lodash';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { AppNotificationTimeout } from 'app/types';\nimport { store } from 'app/store/store';\nimport kbn from 'app/core/utils/kbn';\nimport {\n  dateMath,\n  ScopedVars,\n  toDataFrame,\n  TimeRange,\n  DataSourceApi,\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport memoizedDebounce from './memoizedDebounce';\nimport { CloudWatchQuery, CloudWatchJsonData } from './types';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport default class CloudWatchDatasource extends DataSourceApi<CloudWatchQuery, CloudWatchJsonData> {\n  type: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  standardStatistics: any;\n  datasourceName: string;\n  debouncedAlert: (datasourceName: string, region: string) => void;\n  debouncedCustomAlert: (title: string, message: string) => void;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private $q: IQService,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.type = 'cloudwatch';\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n    this.debouncedAlert = memoizedDebounce(displayAlert, AppNotificationTimeout.Error);\n    this.debouncedCustomAlert = memoizedDebounce(displayCustomError, AppNotificationTimeout.Error);\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>) {\n    options = angular.copy(options);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.replace(this.getActualRegion(item.region), options.scopedVars, true, 'region');\n      item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\n      item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.statistics = item.statistics.map(stat => this.replace(stat, options.scopedVars, true, 'statistics'));\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        if (s.indexOf('p') === 0) {\n          const matches = /^p\\d{2}(?:\\.\\d{1,2})?$/.exec(s);\n          return !matches || matches[0] !== s;\n        }\n\n        return false;\n      });\n\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  }\n\n  get variables() {\n    return this.templateSrv.variables.map(v => `$${v.name}`);\n  }\n\n  getPeriod(target: any, options: any, now?: number) {\n    const start = this.convertToCloudWatchTime(options.range.from, false);\n    now = Math.round((now || Date.now()) / 1000);\n\n    let period;\n    const hourSec = 60 * 60;\n    const daySec = hourSec * 24;\n    if (!target.period) {\n      if (now - start <= daySec * 15) {\n        // until 15 days ago\n        if (target.namespace === 'AWS/EC2') {\n          period = 300;\n        } else {\n          period = 60;\n        }\n      } else if (now - start <= daySec * 63) {\n        // until 63 days ago\n        period = 60 * 5;\n      } else if (now - start <= daySec * 455) {\n        // until 455 days ago\n        period = 60 * 60;\n      } else {\n        // over 455 days, should return error, but try to long period\n        period = 60 * 60;\n      }\n    } else {\n      period = this.templateSrv.replace(target.period, options.scopedVars);\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = kbn.interval_to_seconds(period);\n      }\n    }\n    if (period < 1) {\n      period = 1;\n    }\n\n    return period;\n  }\n\n  buildCloudwatchConsoleUrl(\n    { region, namespace, metricName, dimensions, statistics, period, expression }: CloudWatchQuery,\n    start: string,\n    end: string,\n    title: string,\n    gmdMeta: Array<{ Expression: string }>\n  ) {\n    region = this.getActualRegion(region);\n    let conf = {\n      view: 'timeSeries',\n      stacked: false,\n      title,\n      start,\n      end,\n      region,\n    } as any;\n\n    const isSearchExpression =\n      gmdMeta && gmdMeta.length && gmdMeta.every(({ Expression: expression }) => /SEARCH().*/.test(expression));\n    const isMathExpression = !isSearchExpression && expression;\n\n    if (isMathExpression) {\n      return '';\n    }\n\n    if (isSearchExpression) {\n      const metrics: any =\n        gmdMeta && gmdMeta.length ? gmdMeta.map(({ Expression: expression }) => ({ expression })) : [{ expression }];\n      conf = { ...conf, metrics };\n    } else {\n      conf = {\n        ...conf,\n        metrics: [\n          ...statistics.map(stat => [\n            namespace,\n            metricName,\n            ...Object.entries(dimensions).reduce((acc, [key, value]) => [...acc, key, value[0]], []),\n            {\n              stat,\n              period,\n            },\n          ]),\n        ],\n      };\n    }\n\n    return `https://${region}.console.aws.amazon.com/cloudwatch/deeplink.js?region=${region}#metricsV2:graph=${encodeURIComponent(\n      JSON.stringify(conf)\n    )}`;\n  }\n\n  performTimeSeriesQuery(request: any, { from, to }: TimeRange) {\n    return this.awsRequest('/api/tsdb/query', request)\n      .then((res: any) => {\n        if (!res.results) {\n          return { data: [] };\n        }\n        return Object.values(request.queries).reduce(\n          ({ data, error }: any, queryRequest: any) => {\n            const queryResult = res.results[queryRequest.refId];\n            if (!queryResult) {\n              return { data, error };\n            }\n\n            const link = this.buildCloudwatchConsoleUrl(\n              queryRequest,\n              from.toISOString(),\n              to.toISOString(),\n              queryRequest.refId,\n              queryResult.meta.gmdMeta\n            );\n\n            return {\n              error: error || queryResult.error ? { message: queryResult.error } : null,\n              data: [\n                ...data,\n                ...queryResult.series.map(({ name, points }: any) => {\n                  const dataFrame = toDataFrame({\n                    target: name,\n                    datapoints: points,\n                    refId: queryRequest.refId,\n                    meta: queryResult.meta,\n                  });\n                  if (link) {\n                    for (const field of dataFrame.fields) {\n                      field.config.links = [\n                        {\n                          url: link,\n                          title: 'View in CloudWatch console',\n                          targetBlank: true,\n                        },\n                      ];\n                    }\n                  }\n                  return dataFrame;\n                }),\n              ],\n            };\n          },\n          { data: [], error: null }\n        );\n      })\n      .catch((err: any = { data: { error: '' } }) => {\n        if (/^Throttling:.*/.test(err.data.message)) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }: CloudWatchQuery) =>\n              !failedRedIds.includes(refId) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n\n          regionsAffected.forEach(region => this.debouncedAlert(this.datasourceName, this.getActualRegion(region)));\n        }\n\n        if (err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.data.message = err.data.error;\n        }\n\n        throw err;\n      });\n  }\n\n  transformSuggestDataFromTable(suggestData: any) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n        label: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype: any, parameters: any) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null).then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  async getMetrics(namespace: string, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionKeys(namespace: string, region: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string,\n    metricName: string,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricQueryRequest('resource_arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: tags,\n    });\n  }\n\n  async metricFindQuery(query: string) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (resourceARNsQuery) {\n      region = resourceARNsQuery[1];\n      const resourceType = resourceARNsQuery[2];\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\n      return this.getResourceARNs(region, resourceType, tagsJSON);\n    }\n\n    const statsQuery = query.match(/^statistics\\(\\)/);\n    if (statsQuery) {\n      return this.standardStatistics.map((s: string) => ({ value: s, label: s, text: s }));\n    }\n\n    return this.$q.when([]);\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    // use billing metrics for test\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  awsRequest(url: string, data: any) {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n    };\n\n    return this.backendSrv.datasourceRequest(options).then((result: any) => {\n      return result.data;\n    });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region: string) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: { [key: string]: string | string[] }, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      const valueVar = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(value));\n      if (valueVar) {\n        if (valueVar.multi) {\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n          return { ...result, [key]: values };\n        }\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\n      }\n\n      return { ...result, [key]: [value] };\n    }, {});\n  }\n\n  replace(target: string, scopedVars: ScopedVars, displayErrorIfIsMultiTemplateVariable?: boolean, fieldName?: string) {\n    if (displayErrorIfIsMultiTemplateVariable) {\n      const variable = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && variable.multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n}\n","import './query_parameter_ctrl';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nclass CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setExploreQueryField(QueryEditor)\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\n"],"sourceRoot":""}