{"version":3,"sources":["webpack:///./node_modules/apache-arrow/visitor/vectorloader.js","webpack:///./node_modules/apache-arrow/vector/map.js","webpack:///./node_modules/apache-arrow/io/interfaces.js","webpack:///./node_modules/apache-arrow/schema.js","webpack:///./node_modules/apache-arrow/vector/date.js","webpack:///./node_modules/apache-arrow/builder.js","webpack:///./node_modules/apache-arrow/Arrow.dom.js","webpack:///./node_modules/apache-arrow/builder/bool.js","webpack:///./node_modules/apache-arrow/builder/dictionary.js","webpack:///./node_modules/apache-arrow/util/int.js","webpack:///./node_modules/apache-arrow/builder/index.js","webpack:///./node_modules/apache-arrow/fb/Schema.js","webpack:///./node_modules/apache-arrow/vector/fixedsizebinary.js","webpack:///./node_modules/apache-arrow/Arrow.js","webpack:///./node_modules/apache-arrow/vector/struct.js","webpack:///./node_modules/apache-arrow/visitor/jsonvectorassembler.js","webpack:///./node_modules/apache-arrow/util/compat.js","webpack:///./node_modules/apache-arrow/visitor/builderctor.js","webpack:///./node_modules/apache-arrow/visitor/typeassembler.js","webpack:///./node_modules/apache-arrow/builder/fixedsizelist.js","webpack:///./node_modules/apache-arrow/builder/union.js","webpack:///./node_modules/apache-arrow/ipc/metadata/file.js","webpack:///./node_modules/apache-arrow/visitor/iterator.js","webpack:///./node_modules/apache-arrow/visitor/get.js","webpack:///./node_modules/apache-arrow/visitor/vectorctor.js","webpack:///./public/app/features/expressions/util.ts","webpack:///./node_modules/apache-arrow/vector/bool.js","webpack:///./node_modules/apache-arrow/builder/int.js","webpack:///./node_modules/apache-arrow/vector/interval.js","webpack:///./node_modules/apache-arrow/builder/time.js","webpack:///./node_modules/apache-arrow/builder/utf8.js","webpack:///./node_modules/apache-arrow/builder/struct.js","webpack:///./node_modules/apache-arrow/visitor/set.js","webpack:///./node_modules/apache-arrow/builder/buffer.js","webpack:///./node_modules/apache-arrow/vector/union.js","webpack:///./node_modules/apache-arrow/visitor.js","webpack:///./node_modules/apache-arrow/vector/row.js","webpack:///./node_modules/apache-arrow/builder/interval.js","webpack:///./node_modules/apache-arrow/data.js","webpack:///./node_modules/apache-arrow/vector/null.js","webpack:///./node_modules/apache-arrow/vector/utf8.js","webpack:///./node_modules/apache-arrow/vector/list.js","webpack:///./node_modules/apache-arrow/compute/dataframe.js","webpack:///./node_modules/apache-arrow/io/whatwg/builder.js","webpack:///./node_modules/apache-arrow/builder/date.js","webpack:///./node_modules/apache-arrow/type.js","webpack:///./node_modules/apache-arrow/util/vector.js","webpack:///./node_modules/apache-arrow/ipc/metadata/json.js","webpack:///./node_modules/apache-arrow/ipc/metadata/message.js","webpack:///./node_modules/apache-arrow/vector/time.js","webpack:///./node_modules/apache-arrow/util/math.js","webpack:///./node_modules/apache-arrow/vector/chunked.js","webpack:///./node_modules/apache-arrow/fb/Message.js","webpack:///./node_modules/apache-arrow/column.js","webpack:///./node_modules/apache-arrow/builder/binary.js","webpack:///./node_modules/apache-arrow/io/stream.js","webpack:///./node_modules/apache-arrow/vector/fixedsizelist.js","webpack:///./node_modules/apache-arrow/builder/timestamp.js","webpack:///./node_modules/apache-arrow/builder/fixedsizebinary.js","webpack:///./node_modules/apache-arrow/io/whatwg/writer.js","webpack:///./node_modules/apache-arrow/builder/decimal.js","webpack:///./node_modules/apache-arrow/util/bn.js","webpack:///./node_modules/apache-arrow/vector/int.js","webpack:///./node_modules/apache-arrow/util/recordbatch.js","webpack:///./node_modules/apache-arrow/builder/map.js","webpack:///./node_modules/apache-arrow/util/utf8.js","webpack:///./node_modules/apache-arrow/ipc/reader.js","webpack:///./node_modules/apache-arrow/builder/float.js","webpack:///./node_modules/apache-arrow/util/fn.js","webpack:///./node_modules/apache-arrow/visitor/jsontypeassembler.js","webpack:///./node_modules/apache-arrow/visitor/bytewidth.js","webpack:///./node_modules/apache-arrow/util/bit.js","webpack:///./node_modules/apache-arrow/util/buffer.js","webpack:///./node_modules/apache-arrow/vector/index.js","webpack:///./node_modules/apache-arrow/io/adapters.js","webpack:///./node_modules/apache-arrow/builder/run.js","webpack:///./node_modules/apache-arrow/fb/File.js","webpack:///./node_modules/apache-arrow/builder/null.js","webpack:///./node_modules/apache-arrow/util/pretty.js","webpack:///./node_modules/apache-arrow/visitor/indexof.js","webpack:///./node_modules/apache-arrow/visitor/typecomparator.js","webpack:///./node_modules/flatbuffers/js/flatbuffers.mjs","webpack:///./node_modules/apache-arrow/vector/base.js","webpack:///./node_modules/apache-arrow/io/whatwg/reader.js","webpack:///./node_modules/apache-arrow/io/whatwg/iterable.js","webpack:///./node_modules/apache-arrow/vector/timestamp.js","webpack:///./node_modules/apache-arrow/table.js","webpack:///./node_modules/apache-arrow/util/args.js","webpack:///./node_modules/apache-arrow/builder/valid.js","webpack:///./node_modules/text-encoding-utf-8/lib/encoding.lib.js","webpack:///./node_modules/apache-arrow/vector/float.js","webpack:///./node_modules/apache-arrow/io/file.js","webpack:///./node_modules/apache-arrow/vector.js","webpack:///./node_modules/apache-arrow/vector/binary.js","webpack:///./node_modules/apache-arrow/recordbatch.js","webpack:///./node_modules/apache-arrow/ipc/writer.js","webpack:///./node_modules/apache-arrow/enum.js","webpack:///./node_modules/apache-arrow/vector/dictionary.js","webpack:///./node_modules/apache-arrow/vector/decimal.js","webpack:///./node_modules/apache-arrow/builder/list.js","webpack:///./node_modules/apache-arrow/visitor/vectorassembler.js","webpack:///./node_modules/apache-arrow/ipc/message.js","webpack:///./node_modules/apache-arrow/visitor/toarray.js","webpack:///./node_modules/apache-arrow/compute/predicate.js"],"names":["Object","defineProperty","exports","value","data_1","__webpack_require__","schema_1","type_1","visitor_1","bit_1","utf8_1","int_1","enum_1","buffer_1","VectorLoader","Visitor","[object Object]","bytes","nodes","buffers","dictionaries","super","this","nodesIndex","buffersIndex","node","visit","Field","type","length","nextFieldNode","Data","Null","nullCount","Bool","readNullBitmap","readData","Int","Float","Utf8","readOffsets","Binary","FixedSizeBinary","Date","Timestamp","Time","Decimal","List","children","Struct","visitMany","mode","UnionMode","Sparse","visitSparseUnion","visitDenseUnion","Union","readTypeIds","Dictionary","indices","readDictionary","Interval","FixedSizeList","Map","buffer","nextBufferRange","Uint8Array","_type","offset","subarray","get","id","JSONVectorLoader","sources","packBools","toArrayBufferView","Int32Array","ArrayType","DataType","isTimestamp","Int64","convertArray","isInt","isTime","bitWidth","isDate","unit","DateUnit","MILLISECOND","isDecimal","Int128","isBinary","isFixedSizeBinary","values","joined","join","data","i","parseInt","substr","binaryDataFromJSON","isBool","isUtf8","encodeUtf8","map","x","row_1","vector_1","base_1","MapVector","BaseVector","child","Vector","new","clone","index","getChildAt","begin","end","valueOffsets","MapRow","slice","adapters_1","ITERATOR_DONE","freeze","done","ArrowJSON","_json","schema","batches","ReadableInterop","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","AsyncQueue","_values","resolvers","_closedPromise","Promise","r","_closedPromiseResolve","closed","reason","return","_ensureOpen","push","shift","resolve","_error","error","reject","undefined","Symbol","asyncIterator","default","_","abort","close","size","next","_args","Error","args_1","args_2","typecomparator_1","Schema","fields","metadata","generateDictionaryMap","args","selectFieldArgs","toStringTag","f","other","instance","compareSchemas","columnNames","names","reduce","xs","create","filter","name","columnIndices","Boolean","selectArgs","curFields","mergeMaps","newFields","f2","findIndex","newDictionaries","nullable","typeId","compareField","m1","m2","n","isDictionary","has","dictionary","set","prototype","index_1","DateVector","vectorFromValuesWithType","DAY","DateDay","DateMillisecond","DateDayVector","DateMillisecondVector","valid_1","Builder","nullValues","nulls","finished","stride","strideForType","_nulls","BitmapBufferBuilder","_isValid","createIsValidFunction","queueingStrategy","highWaterMark","sizeProperty","source","numChunks","builder","append","toVector","finish","throughIterable","async","throughAsyncIterable","flush","numInvalid","numChildren","byteLength","_offsets","_typeIds","reservedLength","reservedByteLength","nullBitmap","typeIds","setValid","isValid","setValue","_setValue","valid","offsets","BufferType","TYPE","OFFSET","DATA","last","VALIDITY","clear","forEach","FixedWidthBuilder","opts","DataBufferBuilder","reserve","VariableWidthBuilder","_pendingLength","OffsetsBufferBuilder","pending","_pending","current","_flush","pendingLength","_flushPending","reader_1","writer_1","iterable_1","builder_1","reader_2","writer_2","builderThroughDOMStream","RecordBatchReader","recordBatchReaderThroughDOMStream","RecordBatchWriter","recordBatchWriterThroughDOMStream","Arrow_1","ArrowType","IntervalUnit","MessageHeader","MetadataVersion","Precision","TimeUnit","Type","Int8","Int16","Int32","Uint8","Uint16","Uint32","Uint64","Float16","Float32","Float64","Date_","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","TimeSecond","TimeMillisecond","TimeMicrosecond","TimeNanosecond","DenseUnion","SparseUnion","IntervalDayTime","IntervalYearMonth","Map_","Table","Column","BinaryVector","BoolVector","Chunked","DecimalVector","DictionaryVector","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","Float16Vector","Float32Vector","Float64Vector","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","NullVector","StructVector","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","ByteStream","AsyncByteStream","AsyncByteQueue","RecordBatchFileReader","RecordBatchStreamReader","AsyncRecordBatchFileReader","AsyncRecordBatchStreamReader","RecordBatchFileWriter","RecordBatchStreamWriter","RecordBatchJSONWriter","MessageReader","AsyncMessageReader","JSONMessageReader","Message","RecordBatch","DataFrame","FilteredDataFrame","CountByResult","predicate","util","BinaryBuilder","BoolBuilder","DateBuilder","DateDayBuilder","DateMillisecondBuilder","DecimalBuilder","DictionaryBuilder","FixedSizeBinaryBuilder","FixedSizeListBuilder","FloatBuilder","Float16Builder","Float32Builder","Float64Builder","IntervalBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","IntBuilder","Int8Builder","Int16Builder","Int32Builder","Int64Builder","Uint8Builder","Uint16Builder","Uint32Builder","Uint64Builder","ListBuilder","MapBuilder","NullBuilder","StructBuilder","TimestampBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","TimeBuilder","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","UnionBuilder","DenseUnionBuilder","SparseUnionBuilder","Utf8Builder","dictionaryHashFunction","hashFn","isOrdered","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","key","idx","prev","_dictionary","curr","concat","val","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","Uint32Array","R","product","sum","lessThan","_times","_plus","out_buffer","fromString","num","str","out","posn","group","chunk","multiple","times","plus","from","byteOffset","left","right","this_high","other_high","negate","startsWith","L0","L1","L2","L3","R0","R1","R2","R3","multiply","low","high","sums","bool_1","null_1","date_1","decimal_1","dictionary_1","fixedsizebinary_1","float_1","time_1","timestamp_1","interval_1","binary_1","list_1","fixedsizelist_1","map_1","struct_1","union_1","utf8_2","builder_2","set_1","builderctor_1","newBuilder","getVisitFn","defaultOptions","getChildOptions","Array","isArray","field","keys","T","NONE","visitBinary","org","apache","arrow","flatbuf","Endianness","bb","bb_pos","obj","__init","readInt32","position","startObject","endObject","startNull","endNull","Struct_","startStruct_","endStruct_","startList","endList","LargeList","startLargeList","endLargeList","__offset","listSize","addFieldInt32","startFixedSizeList","addListSize","endFixedSizeList","readInt8","keysSorted","addFieldInt8","startMap","addKeysSorted","endMap","readInt16","__vector","__vector_len","addFieldInt16","typeIdsOffset","addFieldOffset","startVector","addInt32","endVector","numElems","startUnion","addMode","addTypeIds","endUnion","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","startUtf8","endUtf8","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startBool","endBool","scale","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","SECOND","optionalEncoding","__string","timezoneOffset","startTimestamp","addTimezone","endTimestamp","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","readInt64","createLong","__indirect","addFieldInt64","indexTypeOffset","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","readUint8","__union","nameOffset","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Buffer","prep","writeInt64","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","table_1","column_1","index_2","stream_1","message_1","message_2","recordbatch_1","dataframe_1","util_bn_","util_int_","util_bit_","util_math_","util_buffer_","util_vector_","kRowIndex","for","proto","_row","StructRow","bound","bn_1","enum_2","JSONVectorAssembler","selectColumnChildrenArgs","column","assign","count","isNull","iterateBits","getBit","getBool","vector","bigNumsToStrings","binaryToString","MICROSECOND","Dense","octets","byte","toUpperCase","BN","interfaces_1","BigIntCtor","BigIntAvailable","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayCtor","BigInt64ArrayAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BYTES_PER_ELEMENT","BigUint64ArrayCtor","BigUint64ArrayAvailable","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","isBoolean","isFunction","isObject","isPromise","then","isObservable","subscribe","isIterable","iterator","isAsyncIterable","isArrowJSON","isArrayLike","isIteratorResult","isUnderlyingSink","isFileHandle","isFSReadStream","isReadableNodeStream","isFetchResponse","isReadableDOMStream","isWritableDOMStream","isWritableNodeStream","GetBuilderCtor","Long","flatbuffers","Schema_","TypeAssembler","_node","b","timezone","createString","startTypeIdsVector","createTypeIdsVector","indexType","run_1","arguments","_run","Run","bind","childIndex","Int8Array","_valueToChildTypeId","typeIdToChildIndex","childTypeId","File_","flatbuffers_1","ByteBuffer","_Block","Block","_Footer","Footer","Footer_","version","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","buf","toUint8Array","footer","getRootAsFooter","decode","OffHeapFooter","schemaOffset","encode","startRecordBatchesVector","numRecordBatches","reverse","rb","FileBlock","recordBatchesOffset","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","asUint8Array","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","metaDataLength","bodyLength","createBlock","get_1","IteratorVisitor","vectorIterator","getFn","vec","nullByte","nullBit","nullableIterator","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","math_1","GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","epochMs","getVariableWidthBytes","y","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","uint16ToFloat64","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","signed","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","_index","decodeUtf8","NANOSECOND","decimal","getValue","getKey","DAY_TIME","GetVectorConstructor","base64StringToArrowTable","text","b64","atob","arr","c","charCodeAt","apache_arrow__WEBPACK_IMPORTED_MODULE_2__","arrowTableToDataFrame","table","numCols","col","getColumnAt","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","number","boolean","time","console","log","config","gelResponseToDataFrames","rsp","frames","_c","tslib__WEBPACK_IMPORTED_MODULE_0__","results","_d","res","_e","e_2","dataframes","_f","t","input","compat_1","toBigInt","WideBufferBuilder","values64","buffer64","memo","ArrayBuffer","isView","bignumToBigInt","BigIntArray","BufferBuilder","SetVisitor","setEpochMsToMillisecondsLong","setVariableWidthBytes","setDateDay","setEpochMsToDays","valueOf","setDateMillisecond","setNumeric","setFloat16","float64ToUint16","setNumericX2","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","o","v","_setStructMapValue","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","entries","roundLengthUpToNearest64Bytes","len","BPE","sliceOrExtendArray","memcpy","constructor","_resize","extra","reserved","array","newLength","numValid","bit","cur","fill","ArrayType64","_ArrayType64","apply","throwIfNotFound","visitor","fn","dtype","inferDType","SINGLE","DOUBLE","pretty_1","kParent","kKeyToIdx","kIdxToVal","kCustomInspect","Row","parent","numKeys","ktoi","itov","getIndex","ki","vi","k","kr","vr","callbackfn","thisArg","callback","m","call","valueToString","defineProperties","enumerable","configurable","createRowProxy","indexOf","defineRowProxyProperties","setPrototypeOf","desc","row","getter","setter","hasOwnProperty","Proxy","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","receiver","Reflect","bit_2","kUnknownNullCount","childData","Math","floor","max","_nullCount","popcnt_bit_range","childStride","_sliceBuffers","_sliceChildren","bitmap","truncateBitmap","toInt32Array","valueOffsetsOrChildren","predicate_1","countBy","chunks","scan","scanReverse","numBatches","batchIndex","batch","numRows","count_by","Col","countByteLength","ceil","counts","Uint16Array","result","_predicate","_chunks","and","BuilderTransform","_numChunks","_finished","_bufferedSize","readableStrategy","writableStrategy","builderOptions","_controller","_builder","_getSize","chunkLength","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","cancel","pull","_maybeFlush","start","WritableStream","write","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Int_","Int16Array","Float32Array","Float64Array","Time_","Timestamp_","Interval_","valueType","valueField","Union_","keyType","getId","atomicDictionaryId","tmp","clampIndex","adjust","clampRange","lhs","rhs","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","compareArrayLike","comparitors","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","recordBatchFromJSON","fieldNodesFromJSON","fieldNodes","FieldNode","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","_field","fromJSON","validity","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","schemaFromJSON","_schema","schemaFieldsFromJSON","dictionaryBatchFromJSON","DictionaryBatch","fieldFromJSON","dictMeta","dictType","Message_","typeassembler_1","json_1","_Field","_Schema","_Buffer","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","headerType","header","_version","_headerType","body","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","headerOffset","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_length","_buffers","_id","_data","isDelta","_isDelta","decodeFieldChildren","j","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","fieldsLength","decodeSchemaFields","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","nodesLength","decodeFieldNodes","bufferRegions","buffersLength","decodeBuffers","dictionaryBatch","dataOffset","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","createBuffer","DataView","setInt16","f64","u32","h","expo","sigf","sign","NaN","d","vector_2","AbstractVector","vectors","calculateOffsets","_chunkOffsets","_numChildren","selectChunkArgs","flatten","VectorName","_indices","others","_sliceInternal","columns","_children","pos","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","src","dst","arraySet","typedSet","chunkIndex","fromIndex","found","slices","chunkOffsets","chunkOffset","to","min","NS7624605610262437867","null_count","nodesOffset","buffersOffset","V1","chunked_1","SingleChunkColumn","rest","some","_chunk","buffer_2","sync","joinUint8Arrays","ByteStreamSource","fromIterable","throw","peek","read","AsyncByteStreamSource","fromAsyncIterable","fromNodeStream","fromDOMStream","cmd","writer","reader","readable","BigNum","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","hi","lo","words","decimalToString","a","digits","base64","base32","checks","isArrowBigNumSymbol","toJSON","bignumToString","toPrimitive","hint","TypedArray","is64bit","vectorTypeToDataType","InputType","arrayTypeToDataType","convert32To64Bit","TypeError","toBigInt64Array","_values64","toBigUint64Array","typeCtor","dataCtor","ctor","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","batchLength","numColumns","Number","POSITIVE_INFINITY","isFinite","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","unshift","_changeLengthAndBackfillNullBitmap","ensureSameLengthData","l","batchData","distributeColumnsIntoRecordBatches","text_encoding_utf_8_1","useNativeEncoders","TextDecoder","TextEncoder","decoder","encoder","file_1","file_2","vectorloader_1","impl","_impl","autoDestroy","isFile","isSync","isAsync","isStream","reset","opening","open","readRecordBatch","objectMode","RecordBatchJSONReaderImpl","fromArrowJSON","stat","file","AsyncRandomAccessFile","magicX2AndPadding","checkForMagicArrowString","readAt","magicLength","AsyncRecordBatchFileReaderImpl","AsyncRecordBatchStreamReaderImpl","fromFileHandle","RecordBatchFileReaderImpl","fromAsyncByteStream","RecordBatchStreamReaderImpl","fromByteStream","readAllSync","readAllAsync","RecordBatchReaderImpl","_dictionaryIndex","_recordBatchIndex","_loadVectors","types","_reader","_handle","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_InternalEmptyPlaceholderRecordBatch","readMessage","RandomAccessFile","_readFooter","_readDictionaryBatch","seek","magicAndPadding","partial0","partial1","partial2","JSONTypeAssembler","toLowerCase","variableWidthColumnErrorMessage","ByteWidthVisitor","____","visitFields","context","byteIndex","remaining","popcnt_array","cnt","view","popcnt_uint32","getUint32","getUint16","getUint8","uint32","setBool","alignedSize","rhsInside","lhsInside","SharedArrayBuf","SharedArrayBuffer","target","targetByteOffset","sourceByteLength","targetByteLength","ArrayBufferViewCtor","sliced","xOffset","yOffset","xLen","yLen","collapseContiguousByteRanges","Infinity","toInt8Array","toInt16Array","toUint16Array","toUint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","pump","toArrayBufferViewIterator","ArrayCtor","wrap","it","toArrayBufferViewAsyncIterator","emit","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","chunked_2","base_2","indexof_1","toarray_1","iterator_1","bytewidth_1","vectorctor_1","transform","newDataType","getByteWidth","_bindDataAccessors","wrapNullableSet","VectorCtor","partialType0","threw","bufferLength","byteRange","isNaN","e","AdaptiveByteReader","releaseLock","stream","events","event","err","onEvent","race","evt","destroy","cleanup","byobReader","defaultReader","supportsBYOB","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","readInto","handler","dictionariesOffset","pad","writeInt32","undf","JSON","stringify","IndexOfVisitor","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","TypeComparator","compareFields","every","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","compareTime","compareUnion","compareInterval","__webpack_exports__","Offset","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","ZERO","toFloat64","equals","opt_initial_size","initial_size","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","capacity","forceDefaults","dataBuffer","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeFloat32","writeFloat64","addInt8","addInt16","addInt64","addFloat32","addFloat64","voffset","defaultValue","slot","addFieldFloat32","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","setPosition","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","root_table","opt_file_identifier","file_identifier","requiredField","table_start","vtable_start","elem_size","num_elems","alignment","s","utf8","codePoint","bytes_","position_","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","vtable_offset","opt_encoding","__has_identifier","ident","isConcatSpreadable","queue","bm","hwm","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","recordbatch_2","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","cols","selectColumnArgs","getColumnIndex","encoding","writeAll","nameToIndex","selectAt","columnName","oldToNew","newIdx","_fs","_selectArgs","Ctor","vals","_selectFieldArgs","_selectChunkArgs","selectVectorChildrenArgs","_selectVectorChildrenArgs","_selectColumnChildrenArgs","toKeysAndValues","ret","fieldIndex","valueIndex","fnBody","noNaNs","valueToCase","Function","inRange","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","pop","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","string","u","stringToCodePoints","convertTo16Bit","getInt32","nBytes","bytesRead","fs","vs","_dictionaries","DictionaryCollector","collect","vectorassembler_1","jsontypeassembler_1","jsonvectorassembler_1","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writeAllAsync","sink","_writeFooter","compareTo","_writeSchema","payload","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","MAGIC","VectorAssembler","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","_writeMagic","fieldToJSON","dictionaryBatchToJSON","records","assembler","run","_byteLength","_bufferRegions","vectorChildren","assembleResult","RangeError","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","readMetadataLength","readMetadata","throwIfNull","PADDING","metadataLength","_body","_batchIndex","flattenDataSources","MAGIC_STR","ToArrayVisitor","arrayOfVector","Value","Literal","Equals","LTeq","GTeq","Not","ge","le","eq","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","p","_batch","rtrn","left_func","right_func","lit","col_func","lastDictionary","reverseLookup","lastKey","func","CustomPredicate","bind_","or","custom"],"mappings":"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AAA,KAA0B,EAC1BC,kBAAA,KAA6B,EAC7BC,QAAAT,GAAsB,IAAAA,EAAA3gB,QAAA3Z,IAAAC,MAAsCA,KAC5DzF,IAAA8/B,EAAA1lB,GACA,OAAAA,GACA,aACA,eACA,eACA,eACA,cACA,aACA,cACA,kBACA,oBACA,2BACA,eACA,qBACA,cACA,WACA,UACA,UACA,UACA,YACA,aACA,WACA,aACA,cACA,cACA,gBACA,uBACA,uBACA,qBACA,uBACA,uBACA,KAAAlR,OAAAujB,SACA,KAAAvjB,OAAAmB,YACA,KAAA4zB,EACA,KAAA5U,EACA,KAAA8U,EACA,KAAAD,EACA,KAAAE,EACA,SAKA,MAHA,iBAAAhkB,GAAA0lB,EAAA7zB,IAAAmO,KACAA,EAAA0lB,EAAAzI,OAAAjd,IAEA0lB,EAAA7zB,IAAAmO,IAEApa,IAAA8/B,EAAA1lB,EAAAomB,GACA,OAAApmB,GACA,aACA,eACA,eACA,eACA,cACA,aACA,cACA,kBACA,oBACA,2BACA,eACA,qBACA,cACA,WACA,UACA,UACA,UACA,YACA,aACA,WACA,aACA,cACA,cACA,gBACA,uBACA,uBACA,qBACA,uBACA,uBACA,KAAAlR,OAAAujB,SACA,KAAAvjB,OAAAmB,YACA,KAAA4zB,EACA,KAAA5U,EACA,KAAA8U,EACA,KAAAD,EACA,KAAAE,EACA,OAAAqC,QAAAn9B,IAAAw8B,EAAA1lB,EAAAomB,GAKA,MAHA,iBAAApmB,GAAAnO,EAAAmzB,KAAAoB,EAAApmB,KACAA,EAAAid,EAAA+H,KAAAoB,EAAApmB,IAEA9W,EAAA87B,KAAAoB,EAAApmB,IAEApa,IAAA8/B,EAAA1lB,EAAAM,EAAA8lB,GACA,OAAApmB,GACA,KAAA6jB,EACA,KAAA5U,EACA,KAAA8U,EACA,KAAAD,EACA,OAAAuC,QAAAt0B,IAAA2zB,EAAA1lB,EAAAM,EAAA8lB,GACA,aACA,eACA,eACA,eACA,cACA,aACA,cACA,kBACA,oBACA,2BACA,eACA,qBACA,cACA,WACA,UACA,UACA,UACA,YACA,aACA,WACA,aACA,cACA,cACA,gBA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","file":"apache-arrow-util.fabf58cbd84a6ac3523b.js","sourcesContent":["\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"../data\");\nconst schema_1 = require(\"../schema\");\nconst type_1 = require(\"../type\");\nconst visitor_1 = require(\"../visitor\");\nconst bit_1 = require(\"../util/bit\");\nconst utf8_1 = require(\"../util/utf8\");\nconst int_1 = require(\"../util/int\");\nconst enum_1 = require(\"../enum\");\nconst buffer_1 = require(\"../util/buffer\");\n/** @ignore */\nclass VectorLoader extends visitor_1.Visitor {\n    constructor(bytes, nodes, buffers, dictionaries) {\n        super();\n        this.nodesIndex = -1;\n        this.buffersIndex = -1;\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n    visit(node) {\n        return super.visit(node instanceof schema_1.Field ? node.type : node);\n    }\n    visitNull(type, { length, } = this.nextFieldNode()) { return data_1.Data.Null(type, 0, length); }\n    visitBool(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitInt(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFloat(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitUtf8(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitBinary(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitFixedSizeBinary(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDate(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTimestamp(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTime(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDecimal(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitList(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0])); }\n    visitStruct(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    visitUnion(type) { return type.mode === enum_1.UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type); }\n    visitDenseUnion(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    visitSparseUnion(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children)); }\n    visitDictionary(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type)); }\n    visitInterval(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFixedSizeList(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0])); }\n    visitMap(type, { length, nullCount } = this.nextFieldNode()) { return data_1.Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0])); }\n    nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    readOffsets(type, buffer) { return this.readData(type, buffer); }\n    readTypeIds(type, buffer) { return this.readData(type, buffer); }\n    readData(_type, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    readDictionary(type) {\n        return this.dictionaries.get(type.id);\n    }\n}\nexports.VectorLoader = VectorLoader;\n/** @ignore */\nclass JSONVectorLoader extends VectorLoader {\n    constructor(sources, nodes, buffers, dictionaries) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : bit_1.packBools(this.sources[offset]);\n    }\n    readOffsets(_type, { offset } = this.nextBufferRange()) {\n        return buffer_1.toArrayBufferView(Uint8Array, buffer_1.toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    readTypeIds(type, { offset } = this.nextBufferRange()) {\n        return buffer_1.toArrayBufferView(Uint8Array, buffer_1.toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    readData(type, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (type_1.DataType.isTimestamp(type)) {\n            return buffer_1.toArrayBufferView(Uint8Array, int_1.Int64.convertArray(sources[offset]));\n        }\n        else if ((type_1.DataType.isInt(type) || type_1.DataType.isTime(type)) && type.bitWidth === 64) {\n            return buffer_1.toArrayBufferView(Uint8Array, int_1.Int64.convertArray(sources[offset]));\n        }\n        else if (type_1.DataType.isDate(type) && type.unit === enum_1.DateUnit.MILLISECOND) {\n            return buffer_1.toArrayBufferView(Uint8Array, int_1.Int64.convertArray(sources[offset]));\n        }\n        else if (type_1.DataType.isDecimal(type)) {\n            return buffer_1.toArrayBufferView(Uint8Array, int_1.Int128.convertArray(sources[offset]));\n        }\n        else if (type_1.DataType.isBinary(type) || type_1.DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset]);\n        }\n        else if (type_1.DataType.isBool(type)) {\n            return bit_1.packBools(sources[offset]);\n        }\n        else if (type_1.DataType.isUtf8(type)) {\n            return utf8_1.encodeUtf8(sources[offset].join(''));\n        }\n        return buffer_1.toArrayBufferView(Uint8Array, buffer_1.toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\nexports.JSONVectorLoader = JSONVectorLoader;\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n\n//# sourceMappingURL=vectorloader.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst row_1 = require(\"./row\");\nconst vector_1 = require(\"../vector\");\nconst base_1 = require(\"./base\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass MapVector extends base_1.BaseVector {\n    asList() {\n        const child = this.type.children[0];\n        return vector_1.Vector.new(this.data.clone(new type_1.List(child)));\n    }\n    bind(index) {\n        const child = this.getChildAt(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new row_1.MapRow(child.slice(begin, end));\n    }\n}\nexports.MapVector = MapVector;\n\n//# sourceMappingURL=map.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst adapters_1 = require(\"./adapters\");\n/** @ignore */\nexports.ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });\n/** @ignore */\nclass ArrowJSON {\n    // @ts-ignore\n    constructor(_json) {\n        this._json = _json;\n    }\n    get schema() { return this._json['schema']; }\n    get batches() { return (this._json['batches'] || []); }\n    get dictionaries() { return (this._json['dictionaries'] || []); }\n}\nexports.ArrowJSON = ArrowJSON;\n/** @ignore */\nclass ReadableInterop {\n    tee() {\n        return this._getDOMStream().tee();\n    }\n    pipe(writable, options) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    pipeTo(writable, options) { return this._getDOMStream().pipeTo(writable, options); }\n    pipeThrough(duplex, options) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n    _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n    _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\nexports.ReadableInterop = ReadableInterop;\n/** @ignore */\nclass AsyncQueue extends ReadableInterop {\n    constructor() {\n        super();\n        this._values = [];\n        this.resolvers = [];\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    get closed() { return this._closedPromise; }\n    async cancel(reason) { await this.return(reason); }\n    write(value) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift().resolve({ done: false, value }));\n        }\n    }\n    abort(value) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift().reject({ done: true, value }));\n        }\n    }\n    close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift().resolve(exports.ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    toDOMStream(options) {\n        return adapters_1.default.toDOMStream((this._closedPromiseResolve || this._error)\n            ? this\n            : this._values, options);\n    }\n    toNodeStream(options) {\n        return adapters_1.default.toNodeStream((this._closedPromiseResolve || this._error)\n            ? this\n            : this._values, options);\n    }\n    async throw(_) { await this.abort(_); return exports.ITERATOR_DONE; }\n    async return(_) { await this.close(); return exports.ITERATOR_DONE; }\n    async read(size) { return (await this.next(size, 'read')).value; }\n    async peek(size) { return (await this.next(size, 'peek')).value; }\n    next(..._args) {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift() });\n        }\n        else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        }\n        else if (!this._closedPromiseResolve) {\n            return Promise.resolve(exports.ITERATOR_DONE);\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n    _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\nexports.AsyncQueue = AsyncQueue;\n\n//# sourceMappingURL=interfaces.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst type_1 = require(\"./type\");\nconst args_1 = require(\"./util/args\");\nconst args_2 = require(\"./util/args\");\nconst typecomparator_1 = require(\"./visitor/typecomparator\");\nclass Schema {\n    constructor(fields = [], metadata, dictionaries) {\n        this.fields = (fields || []);\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    /** @nocollapse */\n    static from(...args) {\n        return Schema.new(args[0], args[1]);\n    }\n    /** @nocollapse */\n    static new(...args) {\n        return new Schema(args_2.selectFieldArgs(args)[0]);\n    }\n    get [Symbol.toStringTag]() { return 'Schema'; }\n    toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n    compareTo(other) {\n        return typecomparator_1.instance.compareSchemas(this, other);\n    }\n    select(...columnNames) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    selectAt(...columnIndices) {\n        return new Schema(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n    assign(...args) {\n        const other = args[0] instanceof Schema ? args[0]\n            : new Schema(args_1.selectArgs(Field, args));\n        const curFields = [...this.fields];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        });\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n        return new Schema([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));\n    }\n}\nexports.Schema = Schema;\nclass Field {\n    constructor(name, type, nullable = false, metadata) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n    /** @nocollapse */\n    static new(...args) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field(`${name}`, type, nullable, metadata);\n    }\n    get typeId() { return this.type.typeId; }\n    get [Symbol.toStringTag]() { return 'Field'; }\n    toString() { return `${this.name}: ${this.type}`; }\n    compareTo(other) {\n        return typecomparator_1.instance.compareField(this, other);\n    }\n    clone(...args) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({ name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata } = args[0]);\n        return Field.new(name, type, nullable, metadata);\n    }\n}\nexports.Field = Field;\n/** @ignore */\nfunction mergeMaps(m1, m2) {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n/** @ignore */\nfunction generateDictionaryMap(fields, dictionaries = new Map()) {\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (type_1.DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            }\n            else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n    return dictionaries;\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;\n\n//# sourceMappingURL=schema.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst enum_1 = require(\"../enum\");\nconst base_1 = require(\"./base\");\nconst index_1 = require(\"./index\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass DateVector extends base_1.BaseVector {\n    /** @nocollapse */\n    static from(...args) {\n        if (args.length === 2) {\n            return index_1.vectorFromValuesWithType(() => args[1] === enum_1.DateUnit.DAY ? new type_1.DateDay() : new type_1.DateMillisecond(), args[0]);\n        }\n        return index_1.vectorFromValuesWithType(() => new type_1.DateMillisecond(), args[0]);\n    }\n}\nexports.DateVector = DateVector;\n/** @ignore */\nclass DateDayVector extends DateVector {\n}\nexports.DateDayVector = DateDayVector;\n/** @ignore */\nclass DateMillisecondVector extends DateVector {\n}\nexports.DateMillisecondVector = DateMillisecondVector;\n\n//# sourceMappingURL=date.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"./vector\");\nconst enum_1 = require(\"./enum\");\nconst data_1 = require(\"./data\");\nconst valid_1 = require(\"./builder/valid\");\nconst buffer_1 = require(\"./builder/buffer\");\nconst type_1 = require(\"./type\");\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nclass Builder {\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }) {\n        /**\n         * The number of values written to the `Builder` that haven't been flushed yet.\n         * @readonly\n         */\n        this.length = 0;\n        /**\n         * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n         * @readonly\n         */\n        this.finished = false;\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = type_1.strideForType(type);\n        this._nulls = new buffer_1.BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = valid_1.createIsValidFunction(nulls);\n        }\n    }\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    static new(options) { }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughDOM(options) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    static throughIterable(options) {\n        return throughIterable(options);\n    }\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    static throughAsyncIterable(options) {\n        return throughAsyncIterable(options);\n    }\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    toVector() { return vector_1.Vector.new(this.flush()); }\n    get ArrayType() { return this.type.ArrayType; }\n    get nullCount() { return this._nulls.numInvalid; }\n    get numChildren() { return this.children.length; }\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    get byteLength() {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    get reservedLength() {\n        return this._nulls.reservedLength;\n    }\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    get reservedByteLength() {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n    get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n    get values() { return this._values ? this._values.buffer : null; }\n    get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n    get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    append(value) { return this.set(this.length, value); }\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    isValid(value) { return this._isValid(value); }\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    set(index, value) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    setValue(index, value) { this._setValue(this, index, value); }\n    setValid(index, valid) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n    // @ts-ignore\n    addChild(child, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    getChildAt(index) {\n        return this.children[index] || null;\n    }\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    flush() {\n        const buffers = [];\n        const values = this._values;\n        const offsets = this._offsets;\n        const typeIds = this._typeIds;\n        const { length, nullCount } = this;\n        if (typeIds) { /* Unions */\n            buffers[enum_1.BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[enum_1.BufferType.OFFSET] = offsets.flush(length));\n        }\n        else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[enum_1.BufferType.DATA] = values.flush(offsets.last()));\n            buffers[enum_1.BufferType.OFFSET] = offsets.flush(length);\n        }\n        else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[enum_1.BufferType.DATA] = values.flush(length);\n        }\n        nullCount > 0 && (buffers[enum_1.BufferType.VALIDITY] = this._nulls.flush(length));\n        const data = data_1.Data.new(this.type, 0, length, nullCount, buffers, this.children.map((child) => child.flush()));\n        this.clear();\n        return data;\n    }\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\nexports.Builder = Builder;\nBuilder.prototype.length = 1;\nBuilder.prototype.stride = 1;\nBuilder.prototype.children = null;\nBuilder.prototype.finished = false;\nBuilder.prototype.nullValues = null;\nBuilder.prototype._isValid = () => true;\n/** @ignore */\nclass FixedWidthBuilder extends Builder {\n    constructor(opts) {\n        super(opts);\n        this._values = new buffer_1.DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    setValue(index, value) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\nexports.FixedWidthBuilder = FixedWidthBuilder;\n/** @ignore */\nclass VariableWidthBuilder extends Builder {\n    constructor(opts) {\n        super(opts);\n        this._pendingLength = 0;\n        this._offsets = new buffer_1.OffsetsBufferBuilder();\n    }\n    setValue(index, value) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    setValid(index, isValid) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    flush() {\n        this._flush();\n        return super.flush();\n    }\n    finish() {\n        this._flush();\n        return super.finish();\n    }\n    _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n}\nexports.VariableWidthBuilder = VariableWidthBuilder;\n/** @ignore */\nfunction throughIterable(options) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function* (source) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n/** @ignore */\nfunction throughAsyncIterable(options) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n//# sourceMappingURL=builder.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst adapters_1 = require(\"./io/adapters\");\nconst index_1 = require(\"./builder/index\");\nconst reader_1 = require(\"./ipc/reader\");\nconst writer_1 = require(\"./ipc/writer\");\nconst iterable_1 = require(\"./io/whatwg/iterable\");\nconst builder_1 = require(\"./io/whatwg/builder\");\nconst reader_2 = require(\"./io/whatwg/reader\");\nconst writer_2 = require(\"./io/whatwg/writer\");\nadapters_1.default.toDOMStream = iterable_1.toDOMStream;\nindex_1.Builder['throughDOM'] = builder_1.builderThroughDOMStream;\nreader_1.RecordBatchReader['throughDOM'] = reader_2.recordBatchReaderThroughDOMStream;\nwriter_1.RecordBatchWriter['throughDOM'] = writer_2.recordBatchWriterThroughDOMStream;\nvar Arrow_1 = require(\"./Arrow\");\nexports.ArrowType = Arrow_1.ArrowType;\nexports.DateUnit = Arrow_1.DateUnit;\nexports.IntervalUnit = Arrow_1.IntervalUnit;\nexports.MessageHeader = Arrow_1.MessageHeader;\nexports.MetadataVersion = Arrow_1.MetadataVersion;\nexports.Precision = Arrow_1.Precision;\nexports.TimeUnit = Arrow_1.TimeUnit;\nexports.Type = Arrow_1.Type;\nexports.UnionMode = Arrow_1.UnionMode;\nexports.BufferType = Arrow_1.BufferType;\nexports.Data = Arrow_1.Data;\nexports.DataType = Arrow_1.DataType;\nexports.Null = Arrow_1.Null;\nexports.Bool = Arrow_1.Bool;\nexports.Int = Arrow_1.Int;\nexports.Int8 = Arrow_1.Int8;\nexports.Int16 = Arrow_1.Int16;\nexports.Int32 = Arrow_1.Int32;\nexports.Int64 = Arrow_1.Int64;\nexports.Uint8 = Arrow_1.Uint8;\nexports.Uint16 = Arrow_1.Uint16;\nexports.Uint32 = Arrow_1.Uint32;\nexports.Uint64 = Arrow_1.Uint64;\nexports.Float = Arrow_1.Float;\nexports.Float16 = Arrow_1.Float16;\nexports.Float32 = Arrow_1.Float32;\nexports.Float64 = Arrow_1.Float64;\nexports.Utf8 = Arrow_1.Utf8;\nexports.Binary = Arrow_1.Binary;\nexports.FixedSizeBinary = Arrow_1.FixedSizeBinary;\nexports.Date_ = Arrow_1.Date_;\nexports.DateDay = Arrow_1.DateDay;\nexports.DateMillisecond = Arrow_1.DateMillisecond;\nexports.Timestamp = Arrow_1.Timestamp;\nexports.TimestampSecond = Arrow_1.TimestampSecond;\nexports.TimestampMillisecond = Arrow_1.TimestampMillisecond;\nexports.TimestampMicrosecond = Arrow_1.TimestampMicrosecond;\nexports.TimestampNanosecond = Arrow_1.TimestampNanosecond;\nexports.Time = Arrow_1.Time;\nexports.TimeSecond = Arrow_1.TimeSecond;\nexports.TimeMillisecond = Arrow_1.TimeMillisecond;\nexports.TimeMicrosecond = Arrow_1.TimeMicrosecond;\nexports.TimeNanosecond = Arrow_1.TimeNanosecond;\nexports.Decimal = Arrow_1.Decimal;\nexports.List = Arrow_1.List;\nexports.Struct = Arrow_1.Struct;\nexports.Union = Arrow_1.Union;\nexports.DenseUnion = Arrow_1.DenseUnion;\nexports.SparseUnion = Arrow_1.SparseUnion;\nexports.Dictionary = Arrow_1.Dictionary;\nexports.Interval = Arrow_1.Interval;\nexports.IntervalDayTime = Arrow_1.IntervalDayTime;\nexports.IntervalYearMonth = Arrow_1.IntervalYearMonth;\nexports.FixedSizeList = Arrow_1.FixedSizeList;\nexports.Map_ = Arrow_1.Map_;\nexports.Table = Arrow_1.Table;\nexports.Column = Arrow_1.Column;\nexports.Schema = Arrow_1.Schema;\nexports.Field = Arrow_1.Field;\nexports.Visitor = Arrow_1.Visitor;\nexports.Vector = Arrow_1.Vector;\nexports.BaseVector = Arrow_1.BaseVector;\nexports.BinaryVector = Arrow_1.BinaryVector;\nexports.BoolVector = Arrow_1.BoolVector;\nexports.Chunked = Arrow_1.Chunked;\nexports.DateVector = Arrow_1.DateVector;\nexports.DateDayVector = Arrow_1.DateDayVector;\nexports.DateMillisecondVector = Arrow_1.DateMillisecondVector;\nexports.DecimalVector = Arrow_1.DecimalVector;\nexports.DictionaryVector = Arrow_1.DictionaryVector;\nexports.FixedSizeBinaryVector = Arrow_1.FixedSizeBinaryVector;\nexports.FixedSizeListVector = Arrow_1.FixedSizeListVector;\nexports.FloatVector = Arrow_1.FloatVector;\nexports.Float16Vector = Arrow_1.Float16Vector;\nexports.Float32Vector = Arrow_1.Float32Vector;\nexports.Float64Vector = Arrow_1.Float64Vector;\nexports.IntervalVector = Arrow_1.IntervalVector;\nexports.IntervalDayTimeVector = Arrow_1.IntervalDayTimeVector;\nexports.IntervalYearMonthVector = Arrow_1.IntervalYearMonthVector;\nexports.IntVector = Arrow_1.IntVector;\nexports.Int8Vector = Arrow_1.Int8Vector;\nexports.Int16Vector = Arrow_1.Int16Vector;\nexports.Int32Vector = Arrow_1.Int32Vector;\nexports.Int64Vector = Arrow_1.Int64Vector;\nexports.Uint8Vector = Arrow_1.Uint8Vector;\nexports.Uint16Vector = Arrow_1.Uint16Vector;\nexports.Uint32Vector = Arrow_1.Uint32Vector;\nexports.Uint64Vector = Arrow_1.Uint64Vector;\nexports.ListVector = Arrow_1.ListVector;\nexports.MapVector = Arrow_1.MapVector;\nexports.NullVector = Arrow_1.NullVector;\nexports.StructVector = Arrow_1.StructVector;\nexports.TimestampVector = Arrow_1.TimestampVector;\nexports.TimestampSecondVector = Arrow_1.TimestampSecondVector;\nexports.TimestampMillisecondVector = Arrow_1.TimestampMillisecondVector;\nexports.TimestampMicrosecondVector = Arrow_1.TimestampMicrosecondVector;\nexports.TimestampNanosecondVector = Arrow_1.TimestampNanosecondVector;\nexports.TimeVector = Arrow_1.TimeVector;\nexports.TimeSecondVector = Arrow_1.TimeSecondVector;\nexports.TimeMillisecondVector = Arrow_1.TimeMillisecondVector;\nexports.TimeMicrosecondVector = Arrow_1.TimeMicrosecondVector;\nexports.TimeNanosecondVector = Arrow_1.TimeNanosecondVector;\nexports.UnionVector = Arrow_1.UnionVector;\nexports.DenseUnionVector = Arrow_1.DenseUnionVector;\nexports.SparseUnionVector = Arrow_1.SparseUnionVector;\nexports.Utf8Vector = Arrow_1.Utf8Vector;\nexports.ByteStream = Arrow_1.ByteStream;\nexports.AsyncByteStream = Arrow_1.AsyncByteStream;\nexports.AsyncByteQueue = Arrow_1.AsyncByteQueue;\nexports.RecordBatchReader = Arrow_1.RecordBatchReader;\nexports.RecordBatchFileReader = Arrow_1.RecordBatchFileReader;\nexports.RecordBatchStreamReader = Arrow_1.RecordBatchStreamReader;\nexports.AsyncRecordBatchFileReader = Arrow_1.AsyncRecordBatchFileReader;\nexports.AsyncRecordBatchStreamReader = Arrow_1.AsyncRecordBatchStreamReader;\nexports.RecordBatchWriter = Arrow_1.RecordBatchWriter;\nexports.RecordBatchFileWriter = Arrow_1.RecordBatchFileWriter;\nexports.RecordBatchStreamWriter = Arrow_1.RecordBatchStreamWriter;\nexports.RecordBatchJSONWriter = Arrow_1.RecordBatchJSONWriter;\nexports.MessageReader = Arrow_1.MessageReader;\nexports.AsyncMessageReader = Arrow_1.AsyncMessageReader;\nexports.JSONMessageReader = Arrow_1.JSONMessageReader;\nexports.Message = Arrow_1.Message;\nexports.RecordBatch = Arrow_1.RecordBatch;\nexports.DataFrame = Arrow_1.DataFrame;\nexports.FilteredDataFrame = Arrow_1.FilteredDataFrame;\nexports.CountByResult = Arrow_1.CountByResult;\nexports.predicate = Arrow_1.predicate;\nexports.util = Arrow_1.util;\nexports.Builder = Arrow_1.Builder;\nexports.BinaryBuilder = Arrow_1.BinaryBuilder;\nexports.BoolBuilder = Arrow_1.BoolBuilder;\nexports.DateBuilder = Arrow_1.DateBuilder;\nexports.DateDayBuilder = Arrow_1.DateDayBuilder;\nexports.DateMillisecondBuilder = Arrow_1.DateMillisecondBuilder;\nexports.DecimalBuilder = Arrow_1.DecimalBuilder;\nexports.DictionaryBuilder = Arrow_1.DictionaryBuilder;\nexports.FixedSizeBinaryBuilder = Arrow_1.FixedSizeBinaryBuilder;\nexports.FixedSizeListBuilder = Arrow_1.FixedSizeListBuilder;\nexports.FloatBuilder = Arrow_1.FloatBuilder;\nexports.Float16Builder = Arrow_1.Float16Builder;\nexports.Float32Builder = Arrow_1.Float32Builder;\nexports.Float64Builder = Arrow_1.Float64Builder;\nexports.IntervalBuilder = Arrow_1.IntervalBuilder;\nexports.IntervalDayTimeBuilder = Arrow_1.IntervalDayTimeBuilder;\nexports.IntervalYearMonthBuilder = Arrow_1.IntervalYearMonthBuilder;\nexports.IntBuilder = Arrow_1.IntBuilder;\nexports.Int8Builder = Arrow_1.Int8Builder;\nexports.Int16Builder = Arrow_1.Int16Builder;\nexports.Int32Builder = Arrow_1.Int32Builder;\nexports.Int64Builder = Arrow_1.Int64Builder;\nexports.Uint8Builder = Arrow_1.Uint8Builder;\nexports.Uint16Builder = Arrow_1.Uint16Builder;\nexports.Uint32Builder = Arrow_1.Uint32Builder;\nexports.Uint64Builder = Arrow_1.Uint64Builder;\nexports.ListBuilder = Arrow_1.ListBuilder;\nexports.MapBuilder = Arrow_1.MapBuilder;\nexports.NullBuilder = Arrow_1.NullBuilder;\nexports.StructBuilder = Arrow_1.StructBuilder;\nexports.TimestampBuilder = Arrow_1.TimestampBuilder;\nexports.TimestampSecondBuilder = Arrow_1.TimestampSecondBuilder;\nexports.TimestampMillisecondBuilder = Arrow_1.TimestampMillisecondBuilder;\nexports.TimestampMicrosecondBuilder = Arrow_1.TimestampMicrosecondBuilder;\nexports.TimestampNanosecondBuilder = Arrow_1.TimestampNanosecondBuilder;\nexports.TimeBuilder = Arrow_1.TimeBuilder;\nexports.TimeSecondBuilder = Arrow_1.TimeSecondBuilder;\nexports.TimeMillisecondBuilder = Arrow_1.TimeMillisecondBuilder;\nexports.TimeMicrosecondBuilder = Arrow_1.TimeMicrosecondBuilder;\nexports.TimeNanosecondBuilder = Arrow_1.TimeNanosecondBuilder;\nexports.UnionBuilder = Arrow_1.UnionBuilder;\nexports.DenseUnionBuilder = Arrow_1.DenseUnionBuilder;\nexports.SparseUnionBuilder = Arrow_1.SparseUnionBuilder;\nexports.Utf8Builder = Arrow_1.Utf8Builder;\n\n//# sourceMappingURL=Arrow.dom.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"./buffer\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass BoolBuilder extends builder_1.Builder {\n    constructor(options) {\n        super(options);\n        this._values = new buffer_1.BitmapBufferBuilder();\n    }\n    setValue(index, value) {\n        this._values.set(index, +value);\n    }\n}\nexports.BoolBuilder = BoolBuilder;\n\n//# sourceMappingURL=bool.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst type_1 = require(\"../type\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass DictionaryBuilder extends builder_1.Builder {\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }) {\n        super({ type: new type_1.Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) });\n        this._nulls = null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = builder_1.Builder.new({ 'type': this.type.indices, 'nullValues': nulls });\n        this.dictionary = builder_1.Builder.new({ 'type': this.type.dictionary, 'nullValues': null });\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n    get values() { return this.indices.values; }\n    get nullCount() { return this.indices.nullCount; }\n    get nullBitmap() { return this.indices.nullBitmap; }\n    get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    isValid(value) { return this.indices.isValid(value); }\n    setValid(index, valid) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    setValue(index, value) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary;\n        this.clear();\n        return data;\n    }\n    finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    valueToKey(val) {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\nexports.DictionaryBuilder = DictionaryBuilder;\n\n//# sourceMappingURL=dictionary.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @ignore */\nconst carryBit16 = 1 << 16;\n/** @ignore */\nfunction intAsHex(value) {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000];\n/** @ignore */\nclass BaseInt64 {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    high() { return this.buffer[1]; }\n    low() { return this.buffer[0]; }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\nexports.BaseInt64 = BaseInt64;\n/** @ignore */\nclass Uint64 extends BaseInt64 {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Uint64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        const length = str.length;\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexports.Uint64 = Uint64;\n/** @ignore */\nclass Int64 extends BaseInt64 {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Int64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexports.Int64 = Int64;\n/** @ignore */\nclass Int128 {\n    constructor(buffer) {\n        this.buffer = buffer;\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n    high() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        if (this.buffer[1] == 0) {\n            ++this.buffer[2];\n        }\n        if (this.buffer[2] == 0) {\n            ++this.buffer[3];\n        }\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(4)) {\n        return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(4)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\nexports.Int128 = Int128;\n\n//# sourceMappingURL=int.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @ignore */\nvar builder_1 = require(\"../builder\");\nexports.Builder = builder_1.Builder;\nvar bool_1 = require(\"./bool\");\nexports.BoolBuilder = bool_1.BoolBuilder;\nvar null_1 = require(\"./null\");\nexports.NullBuilder = null_1.NullBuilder;\nvar date_1 = require(\"./date\");\nexports.DateBuilder = date_1.DateBuilder;\nexports.DateDayBuilder = date_1.DateDayBuilder;\nexports.DateMillisecondBuilder = date_1.DateMillisecondBuilder;\nvar decimal_1 = require(\"./decimal\");\nexports.DecimalBuilder = decimal_1.DecimalBuilder;\nvar dictionary_1 = require(\"./dictionary\");\nexports.DictionaryBuilder = dictionary_1.DictionaryBuilder;\nvar fixedsizebinary_1 = require(\"./fixedsizebinary\");\nexports.FixedSizeBinaryBuilder = fixedsizebinary_1.FixedSizeBinaryBuilder;\nvar float_1 = require(\"./float\");\nexports.FloatBuilder = float_1.FloatBuilder;\nexports.Float16Builder = float_1.Float16Builder;\nexports.Float32Builder = float_1.Float32Builder;\nexports.Float64Builder = float_1.Float64Builder;\nvar int_1 = require(\"./int\");\nexports.IntBuilder = int_1.IntBuilder;\nexports.Int8Builder = int_1.Int8Builder;\nexports.Int16Builder = int_1.Int16Builder;\nexports.Int32Builder = int_1.Int32Builder;\nexports.Int64Builder = int_1.Int64Builder;\nexports.Uint8Builder = int_1.Uint8Builder;\nexports.Uint16Builder = int_1.Uint16Builder;\nexports.Uint32Builder = int_1.Uint32Builder;\nexports.Uint64Builder = int_1.Uint64Builder;\nvar time_1 = require(\"./time\");\nexports.TimeBuilder = time_1.TimeBuilder;\nexports.TimeSecondBuilder = time_1.TimeSecondBuilder;\nexports.TimeMillisecondBuilder = time_1.TimeMillisecondBuilder;\nexports.TimeMicrosecondBuilder = time_1.TimeMicrosecondBuilder;\nexports.TimeNanosecondBuilder = time_1.TimeNanosecondBuilder;\nvar timestamp_1 = require(\"./timestamp\");\nexports.TimestampBuilder = timestamp_1.TimestampBuilder;\nexports.TimestampSecondBuilder = timestamp_1.TimestampSecondBuilder;\nexports.TimestampMillisecondBuilder = timestamp_1.TimestampMillisecondBuilder;\nexports.TimestampMicrosecondBuilder = timestamp_1.TimestampMicrosecondBuilder;\nexports.TimestampNanosecondBuilder = timestamp_1.TimestampNanosecondBuilder;\nvar interval_1 = require(\"./interval\");\nexports.IntervalBuilder = interval_1.IntervalBuilder;\nexports.IntervalDayTimeBuilder = interval_1.IntervalDayTimeBuilder;\nexports.IntervalYearMonthBuilder = interval_1.IntervalYearMonthBuilder;\nvar utf8_1 = require(\"./utf8\");\nexports.Utf8Builder = utf8_1.Utf8Builder;\nvar binary_1 = require(\"./binary\");\nexports.BinaryBuilder = binary_1.BinaryBuilder;\nvar list_1 = require(\"./list\");\nexports.ListBuilder = list_1.ListBuilder;\nvar fixedsizelist_1 = require(\"./fixedsizelist\");\nexports.FixedSizeListBuilder = fixedsizelist_1.FixedSizeListBuilder;\nvar map_1 = require(\"./map\");\nexports.MapBuilder = map_1.MapBuilder;\nvar struct_1 = require(\"./struct\");\nexports.StructBuilder = struct_1.StructBuilder;\nvar union_1 = require(\"./union\");\nexports.UnionBuilder = union_1.UnionBuilder;\nexports.SparseUnionBuilder = union_1.SparseUnionBuilder;\nexports.DenseUnionBuilder = union_1.DenseUnionBuilder;\nconst enum_1 = require(\"../enum\");\nconst utf8_2 = require(\"./utf8\");\nconst builder_2 = require(\"../builder\");\nconst set_1 = require(\"../visitor/set\");\nconst builderctor_1 = require(\"../visitor/builderctor\");\n/** @nocollapse */\nbuilder_2.Builder.new = newBuilder;\nfunction newBuilder(options) {\n    const type = options.type;\n    const builder = new (builderctor_1.instance.getVisitFn(type)())(options);\n    if (type.children && type.children.length > 0) {\n        const children = options['children'] || [];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_, i) => children[i] || defaultOptions)\n            : (({ name }) => children[name] || defaultOptions);\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n    return builder;\n}\nObject.keys(enum_1.Type)\n    .map((T) => enum_1.Type[T])\n    .filter((T) => typeof T === 'number' && T !== enum_1.Type.NONE)\n    .forEach((typeId) => {\n    const BuilderCtor = builderctor_1.instance.visit(typeId);\n    BuilderCtor.prototype._setValue = set_1.instance.getVisitFn(typeId);\n});\nutf8_2.Utf8Builder.prototype._setValue = set_1.instance.visitBinary;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n/* tslint:disable:class-name */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @enum {number}\n */\nvar org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MetadataVersion;\n                (function (MetadataVersion) {\n                    /**\n                     * 0.1.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n                    /**\n                     * 0.2.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n                    /**\n                     * 0.3.0 -> 0.7.1\n                     */\n                    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n                    /**\n                     * >= 0.8.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n                })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let UnionMode;\n                (function (UnionMode) {\n                    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n                    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n                })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Precision;\n                (function (Precision) {\n                    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n                    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n                    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let DateUnit;\n                (function (DateUnit) {\n                    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n                    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let TimeUnit;\n                (function (TimeUnit) {\n                    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n                    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n                    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n                })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let IntervalUnit;\n                (function (IntervalUnit) {\n                    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n                    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n                })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Type;\n                (function (Type) {\n                    Type[Type[\"NONE\"] = 0] = \"NONE\";\n                    Type[Type[\"Null\"] = 1] = \"Null\";\n                    Type[Type[\"Int\"] = 2] = \"Int\";\n                    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n                    Type[Type[\"Binary\"] = 4] = \"Binary\";\n                    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n                    Type[Type[\"Bool\"] = 6] = \"Bool\";\n                    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n                    Type[Type[\"Date\"] = 8] = \"Date\";\n                    Type[Type[\"Time\"] = 9] = \"Time\";\n                    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n                    Type[Type[\"Interval\"] = 11] = \"Interval\";\n                    Type[Type[\"List\"] = 12] = \"List\";\n                    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n                    Type[Type[\"Union\"] = 14] = \"Union\";\n                    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n                    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n                    Type[Type[\"Map\"] = 17] = \"Map\";\n                    Type[Type[\"Duration\"] = 18] = \"Duration\";\n                    Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n                    Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n                    Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n                })(Type = flatbuf.Type || (flatbuf.Type = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Endianness;\n                (function (Endianness) {\n                    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n                    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n                })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Null {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Null\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Null= obj\n                     * @returns Null\n                     */\n                    static getRootAsNull(bb, obj) {\n                        return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startNull(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endNull(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createNull(builder) {\n                        Null.startNull(builder);\n                        return Null.endNull(builder);\n                    }\n                }\n                flatbuf.Null = Null;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Struct_ {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Struct_\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Struct_= obj\n                     * @returns Struct_\n                     */\n                    static getRootAsStruct_(bb, obj) {\n                        return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startStruct_(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endStruct_(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createStruct_(builder) {\n                        Struct_.startStruct_(builder);\n                        return Struct_.endStruct_(builder);\n                    }\n                }\n                flatbuf.Struct_ = Struct_;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class List {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns List\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param List= obj\n                     * @returns List\n                     */\n                    static getRootAsList(bb, obj) {\n                        return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startList(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createList(builder) {\n                        List.startList(builder);\n                        return List.endList(builder);\n                    }\n                }\n                flatbuf.List = List;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class LargeList {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns LargeList\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param LargeList= obj\n                     * @returns LargeList\n                     */\n                    static getRootAsLargeList(bb, obj) {\n                        return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startLargeList(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endLargeList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createLargeList(builder) {\n                        LargeList.startLargeList(builder);\n                        return LargeList.endLargeList(builder);\n                    }\n                }\n                flatbuf.LargeList = LargeList;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeList {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns FixedSizeList\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param FixedSizeList= obj\n                     * @returns FixedSizeList\n                     */\n                    static getRootAsFixedSizeList(bb, obj) {\n                        return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of list items per value\n                     *\n                     * @returns number\n                     */\n                    listSize() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startFixedSizeList(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number listSize\n                     */\n                    static addListSize(builder, listSize) {\n                        builder.addFieldInt32(0, listSize, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endFixedSizeList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createFixedSizeList(builder, listSize) {\n                        FixedSizeList.startFixedSizeList(builder);\n                        FixedSizeList.addListSize(builder, listSize);\n                        return FixedSizeList.endFixedSizeList(builder);\n                    }\n                }\n                flatbuf.FixedSizeList = FixedSizeList;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Map {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Map\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Map= obj\n                     * @returns Map\n                     */\n                    static getRootAsMap(bb, obj) {\n                        return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Set to true if the keys within each value are sorted\n                     *\n                     * @returns boolean\n                     */\n                    keysSorted() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startMap(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param boolean keysSorted\n                     */\n                    static addKeysSorted(builder, keysSorted) {\n                        builder.addFieldInt8(0, +keysSorted, +false);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endMap(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createMap(builder, keysSorted) {\n                        Map.startMap(builder);\n                        Map.addKeysSorted(builder, keysSorted);\n                        return Map.endMap(builder);\n                    }\n                }\n                flatbuf.Map = Map;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Union {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Union\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Union= obj\n                     * @returns Union\n                     */\n                    static getRootAsUnion(bb, obj) {\n                        return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.UnionMode\n                     */\n                    mode() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n                    }\n                    /**\n                     * @param number index\n                     * @returns number\n                     */\n                    typeIds(index) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    typeIdsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns Int32Array\n                     */\n                    typeIdsArray() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startUnion(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.UnionMode mode\n                     */\n                    static addMode(builder, mode) {\n                        builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset typeIdsOffset\n                     */\n                    static addTypeIds(builder, typeIdsOffset) {\n                        builder.addFieldOffset(1, typeIdsOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param Array.<number> data\n                     * @returns flatbuffers.Offset\n                     */\n                    static createTypeIdsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addInt32(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startTypeIdsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endUnion(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createUnion(builder, mode, typeIdsOffset) {\n                        Union.startUnion(builder);\n                        Union.addMode(builder, mode);\n                        Union.addTypeIds(builder, typeIdsOffset);\n                        return Union.endUnion(builder);\n                    }\n                }\n                flatbuf.Union = Union;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Int {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Int\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Int= obj\n                     * @returns Int\n                     */\n                    static getRootAsInt(bb, obj) {\n                        return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns number\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns boolean\n                     */\n                    isSigned() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startInt(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param boolean isSigned\n                     */\n                    static addIsSigned(builder, isSigned) {\n                        builder.addFieldInt8(1, +isSigned, +false);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endInt(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createInt(builder, bitWidth, isSigned) {\n                        Int.startInt(builder);\n                        Int.addBitWidth(builder, bitWidth);\n                        Int.addIsSigned(builder, isSigned);\n                        return Int.endInt(builder);\n                    }\n                }\n                flatbuf.Int = Int;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FloatingPoint {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns FloatingPoint\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param FloatingPoint= obj\n                     * @returns FloatingPoint\n                     */\n                    static getRootAsFloatingPoint(bb, obj) {\n                        return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.Precision\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startFloatingPoint(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.Precision precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endFloatingPoint(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createFloatingPoint(builder, precision) {\n                        FloatingPoint.startFloatingPoint(builder);\n                        FloatingPoint.addPrecision(builder, precision);\n                        return FloatingPoint.endFloatingPoint(builder);\n                    }\n                }\n                flatbuf.FloatingPoint = FloatingPoint;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Utf8 {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Utf8\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Utf8= obj\n                     * @returns Utf8\n                     */\n                    static getRootAsUtf8(bb, obj) {\n                        return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startUtf8(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endUtf8(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createUtf8(builder) {\n                        Utf8.startUtf8(builder);\n                        return Utf8.endUtf8(builder);\n                    }\n                }\n                flatbuf.Utf8 = Utf8;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Opaque binary data\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Binary {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Binary\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Binary= obj\n                     * @returns Binary\n                     */\n                    static getRootAsBinary(bb, obj) {\n                        return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startBinary(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createBinary(builder) {\n                        Binary.startBinary(builder);\n                        return Binary.endBinary(builder);\n                    }\n                }\n                flatbuf.Binary = Binary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class LargeUtf8 {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns LargeUtf8\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param LargeUtf8= obj\n                     * @returns LargeUtf8\n                     */\n                    static getRootAsLargeUtf8(bb, obj) {\n                        return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startLargeUtf8(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endLargeUtf8(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createLargeUtf8(builder) {\n                        LargeUtf8.startLargeUtf8(builder);\n                        return LargeUtf8.endLargeUtf8(builder);\n                    }\n                }\n                flatbuf.LargeUtf8 = LargeUtf8;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class LargeBinary {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns LargeBinary\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param LargeBinary= obj\n                     * @returns LargeBinary\n                     */\n                    static getRootAsLargeBinary(bb, obj) {\n                        return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startLargeBinary(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endLargeBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createLargeBinary(builder) {\n                        LargeBinary.startLargeBinary(builder);\n                        return LargeBinary.endLargeBinary(builder);\n                    }\n                }\n                flatbuf.LargeBinary = LargeBinary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeBinary {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns FixedSizeBinary\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param FixedSizeBinary= obj\n                     * @returns FixedSizeBinary\n                     */\n                    static getRootAsFixedSizeBinary(bb, obj) {\n                        return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of bytes per value\n                     *\n                     * @returns number\n                     */\n                    byteWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startFixedSizeBinary(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number byteWidth\n                     */\n                    static addByteWidth(builder, byteWidth) {\n                        builder.addFieldInt32(0, byteWidth, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endFixedSizeBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createFixedSizeBinary(builder, byteWidth) {\n                        FixedSizeBinary.startFixedSizeBinary(builder);\n                        FixedSizeBinary.addByteWidth(builder, byteWidth);\n                        return FixedSizeBinary.endFixedSizeBinary(builder);\n                    }\n                }\n                flatbuf.FixedSizeBinary = FixedSizeBinary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Bool {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Bool\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Bool= obj\n                     * @returns Bool\n                     */\n                    static getRootAsBool(bb, obj) {\n                        return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startBool(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endBool(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createBool(builder) {\n                        Bool.startBool(builder);\n                        return Bool.endBool(builder);\n                    }\n                }\n                flatbuf.Bool = Bool;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Decimal {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Decimal\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Decimal= obj\n                     * @returns Decimal\n                     */\n                    static getRootAsDecimal(bb, obj) {\n                        return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Total number of decimal digits\n                     *\n                     * @returns number\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Number of digits after the decimal point \".\"\n                     *\n                     * @returns number\n                     */\n                    scale() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startDecimal(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt32(0, precision, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number scale\n                     */\n                    static addScale(builder, scale) {\n                        builder.addFieldInt32(1, scale, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endDecimal(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createDecimal(builder, precision, scale) {\n                        Decimal.startDecimal(builder);\n                        Decimal.addPrecision(builder, precision);\n                        Decimal.addScale(builder, scale);\n                        return Decimal.endDecimal(builder);\n                    }\n                }\n                flatbuf.Decimal = Decimal;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Date {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Date\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Date= obj\n                     * @returns Date\n                     */\n                    static getRootAsDate(bb, obj) {\n                        return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.DateUnit\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startDate(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.DateUnit unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endDate(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createDate(builder, unit) {\n                        Date.startDate(builder);\n                        Date.addUnit(builder, unit);\n                        return Date.endDate(builder);\n                    }\n                }\n                flatbuf.Date = Date;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Time {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Time\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Time= obj\n                     * @returns Time\n                     */\n                    static getRootAsTime(bb, obj) {\n                        return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.TimeUnit\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startTime(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.TimeUnit unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(1, bitWidth, 32);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endTime(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createTime(builder, unit, bitWidth) {\n                        Time.startTime(builder);\n                        Time.addUnit(builder, unit);\n                        Time.addBitWidth(builder, bitWidth);\n                        return Time.endTime(builder);\n                    }\n                }\n                flatbuf.Time = Time;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Timestamp {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Timestamp\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Timestamp= obj\n                     * @returns Timestamp\n                     */\n                    static getRootAsTimestamp(bb, obj) {\n                        return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.TimeUnit\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n                    }\n                    timezone(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startTimestamp(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.TimeUnit unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset timezoneOffset\n                     */\n                    static addTimezone(builder, timezoneOffset) {\n                        builder.addFieldOffset(1, timezoneOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endTimestamp(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createTimestamp(builder, unit, timezoneOffset) {\n                        Timestamp.startTimestamp(builder);\n                        Timestamp.addUnit(builder, unit);\n                        Timestamp.addTimezone(builder, timezoneOffset);\n                        return Timestamp.endTimestamp(builder);\n                    }\n                }\n                flatbuf.Timestamp = Timestamp;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Interval {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Interval\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Interval= obj\n                     * @returns Interval\n                     */\n                    static getRootAsInterval(bb, obj) {\n                        return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.IntervalUnit\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startInterval(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.IntervalUnit unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endInterval(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createInterval(builder, unit) {\n                        Interval.startInterval(builder);\n                        Interval.addUnit(builder, unit);\n                        return Interval.endInterval(builder);\n                    }\n                }\n                flatbuf.Interval = Interval;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Duration {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Duration\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Duration= obj\n                     * @returns Duration\n                     */\n                    static getRootAsDuration(bb, obj) {\n                        return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.TimeUnit\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startDuration(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.TimeUnit unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endDuration(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createDuration(builder, unit) {\n                        Duration.startDuration(builder);\n                        Duration.addUnit(builder, unit);\n                        return Duration.endDuration(builder);\n                    }\n                }\n                flatbuf.Duration = Duration;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class KeyValue {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns KeyValue\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param KeyValue= obj\n                     * @returns KeyValue\n                     */\n                    static getRootAsKeyValue(bb, obj) {\n                        return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    key(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    value(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startKeyValue(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset keyOffset\n                     */\n                    static addKey(builder, keyOffset) {\n                        builder.addFieldOffset(0, keyOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset valueOffset\n                     */\n                    static addValue(builder, valueOffset) {\n                        builder.addFieldOffset(1, valueOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endKeyValue(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createKeyValue(builder, keyOffset, valueOffset) {\n                        KeyValue.startKeyValue(builder);\n                        KeyValue.addKey(builder, keyOffset);\n                        KeyValue.addValue(builder, valueOffset);\n                        return KeyValue.endKeyValue(builder);\n                    }\n                }\n                flatbuf.KeyValue = KeyValue;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryEncoding {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns DictionaryEncoding\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param DictionaryEncoding= obj\n                     * @returns DictionaryEncoding\n                     */\n                    static getRootAsDictionaryEncoding(bb, obj) {\n                        return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * The known dictionary id in the application where this data is used. In\n                     * the file or streaming formats, the dictionary ids are found in the\n                     * DictionaryBatch messages\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * The dictionary indices are constrained to be positive integers. If this\n                     * field is null, the indices must be signed int32\n                     *\n                     * @param org.apache.arrow.flatbuf.Int= obj\n                     * @returns org.apache.arrow.flatbuf.Int|null\n                     */\n                    indexType(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * By default, dictionaries are not ordered, or the order does not have\n                     * semantic meaning. In some statistical, applications, dictionary-encoding\n                     * is used to represent ordered categorical data, and we provide a way to\n                     * preserve that metadata here\n                     *\n                     * @returns boolean\n                     */\n                    isOrdered() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startDictionaryEncoding(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Long id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset indexTypeOffset\n                     */\n                    static addIndexType(builder, indexTypeOffset) {\n                        builder.addFieldOffset(1, indexTypeOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param boolean isOrdered\n                     */\n                    static addIsOrdered(builder, isOrdered) {\n                        builder.addFieldInt8(2, +isOrdered, +false);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endDictionaryEncoding(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createDictionaryEncoding(builder, id, indexTypeOffset, isOrdered) {\n                        DictionaryEncoding.startDictionaryEncoding(builder);\n                        DictionaryEncoding.addId(builder, id);\n                        DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n                        DictionaryEncoding.addIsOrdered(builder, isOrdered);\n                        return DictionaryEncoding.endDictionaryEncoding(builder);\n                    }\n                }\n                flatbuf.DictionaryEncoding = DictionaryEncoding;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Field {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Field\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Field= obj\n                     * @returns Field\n                     */\n                    static getRootAsField(bb, obj) {\n                        return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    name(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * Whether or not this field can contain nulls. Should be true in general.\n                     *\n                     * @returns boolean\n                     */\n                    nullable() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.Type\n                     */\n                    typeType() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n                    }\n                    /**\n                     * This is the type of the decoded value if the field is dictionary encoded.\n                     *\n                     * @param flatbuffers.Table obj\n                     * @returns ?flatbuffers.Table\n                     */\n                    type(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * Present only if the field is dictionary encoded.\n                     *\n                     * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n                     * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n                     */\n                    dictionary(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * children apply only to nested data types like Struct, List and Union. For\n                     * primitive types children will have length 0.\n                     *\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.Field= obj\n                     * @returns org.apache.arrow.flatbuf.Field\n                     */\n                    children(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    childrenLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * User-defined metadata\n                     *\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.KeyValue= obj\n                     * @returns org.apache.arrow.flatbuf.KeyValue\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startField(builder) {\n                        builder.startObject(7);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset nameOffset\n                     */\n                    static addName(builder, nameOffset) {\n                        builder.addFieldOffset(0, nameOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param boolean nullable\n                     */\n                    static addNullable(builder, nullable) {\n                        builder.addFieldInt8(1, +nullable, +false);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.Type typeType\n                     */\n                    static addTypeType(builder, typeType) {\n                        builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset typeOffset\n                     */\n                    static addType(builder, typeOffset) {\n                        builder.addFieldOffset(3, typeOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset dictionaryOffset\n                     */\n                    static addDictionary(builder, dictionaryOffset) {\n                        builder.addFieldOffset(4, dictionaryOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset childrenOffset\n                     */\n                    static addChildren(builder, childrenOffset) {\n                        builder.addFieldOffset(5, childrenOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param Array.<flatbuffers.Offset> data\n                     * @returns flatbuffers.Offset\n                     */\n                    static createChildrenVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startChildrenVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(6, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param Array.<flatbuffers.Offset> data\n                     * @returns flatbuffers.Offset\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endField(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createField(builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {\n                        Field.startField(builder);\n                        Field.addName(builder, nameOffset);\n                        Field.addNullable(builder, nullable);\n                        Field.addTypeType(builder, typeType);\n                        Field.addType(builder, typeOffset);\n                        Field.addDictionary(builder, dictionaryOffset);\n                        Field.addChildren(builder, childrenOffset);\n                        Field.addCustomMetadata(builder, customMetadataOffset);\n                        return Field.endField(builder);\n                    }\n                }\n                flatbuf.Field = Field;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Buffer {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Buffer\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The relative offset into the shared memory page where the bytes for this\n                     * buffer starts\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The absolute length (in bytes) of the memory buffer. The memory is found\n                     * from offset (inclusive) to offset + length (non-inclusive).\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Long offset\n                     * @param flatbuffers.Long length\n                     * @returns flatbuffers.Offset\n                     */\n                    static createBuffer(builder, offset, length) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(length);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Buffer = Buffer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Schema {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Schema\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Schema= obj\n                     * @returns Schema\n                     */\n                    static getRootAsSchema(bb, obj) {\n                        return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * endianness of the buffer\n                     * it is Little Endian by default\n                     * if endianness doesn't match the underlying system then the vectors need to be converted\n                     *\n                     * @returns org.apache.arrow.flatbuf.Endianness\n                     */\n                    endianness() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n                    }\n                    /**\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.Field= obj\n                     * @returns org.apache.arrow.flatbuf.Field\n                     */\n                    fields(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    fieldsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.KeyValue= obj\n                     * @returns org.apache.arrow.flatbuf.KeyValue\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startSchema(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.Endianness endianness\n                     */\n                    static addEndianness(builder, endianness) {\n                        builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset fieldsOffset\n                     */\n                    static addFields(builder, fieldsOffset) {\n                        builder.addFieldOffset(1, fieldsOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param Array.<flatbuffers.Offset> data\n                     * @returns flatbuffers.Offset\n                     */\n                    static createFieldsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startFieldsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(2, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param Array.<flatbuffers.Offset> data\n                     * @returns flatbuffers.Offset\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endSchema(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset offset\n                     */\n                    static finishSchemaBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                    static createSchema(builder, endianness, fieldsOffset, customMetadataOffset) {\n                        Schema.startSchema(builder);\n                        Schema.addEndianness(builder, endianness);\n                        Schema.addFields(builder, fieldsOffset);\n                        Schema.addCustomMetadata(builder, customMetadataOffset);\n                        return Schema.endSchema(builder);\n                    }\n                }\n                flatbuf.Schema = Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n\n//# sourceMappingURL=Schema.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass FixedSizeBinaryVector extends base_1.BaseVector {\n}\nexports.FixedSizeBinaryVector = FixedSizeBinaryVector;\n\n//# sourceMappingURL=fixedsizebinary.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar enum_1 = require(\"./enum\");\nexports.ArrowType = enum_1.ArrowType;\nexports.DateUnit = enum_1.DateUnit;\nexports.IntervalUnit = enum_1.IntervalUnit;\nexports.MessageHeader = enum_1.MessageHeader;\nexports.MetadataVersion = enum_1.MetadataVersion;\nexports.Precision = enum_1.Precision;\nexports.TimeUnit = enum_1.TimeUnit;\nexports.Type = enum_1.Type;\nexports.UnionMode = enum_1.UnionMode;\nexports.BufferType = enum_1.BufferType;\nvar data_1 = require(\"./data\");\nexports.Data = data_1.Data;\nvar type_1 = require(\"./type\");\nexports.DataType = type_1.DataType;\nexports.Null = type_1.Null;\nexports.Bool = type_1.Bool;\nexports.Int = type_1.Int;\nexports.Int8 = type_1.Int8;\nexports.Int16 = type_1.Int16;\nexports.Int32 = type_1.Int32;\nexports.Int64 = type_1.Int64;\nexports.Uint8 = type_1.Uint8;\nexports.Uint16 = type_1.Uint16;\nexports.Uint32 = type_1.Uint32;\nexports.Uint64 = type_1.Uint64;\nexports.Float = type_1.Float;\nexports.Float16 = type_1.Float16;\nexports.Float32 = type_1.Float32;\nexports.Float64 = type_1.Float64;\nexports.Utf8 = type_1.Utf8;\nexports.Binary = type_1.Binary;\nexports.FixedSizeBinary = type_1.FixedSizeBinary;\nexports.Date_ = type_1.Date_;\nexports.DateDay = type_1.DateDay;\nexports.DateMillisecond = type_1.DateMillisecond;\nexports.Timestamp = type_1.Timestamp;\nexports.TimestampSecond = type_1.TimestampSecond;\nexports.TimestampMillisecond = type_1.TimestampMillisecond;\nexports.TimestampMicrosecond = type_1.TimestampMicrosecond;\nexports.TimestampNanosecond = type_1.TimestampNanosecond;\nexports.Time = type_1.Time;\nexports.TimeSecond = type_1.TimeSecond;\nexports.TimeMillisecond = type_1.TimeMillisecond;\nexports.TimeMicrosecond = type_1.TimeMicrosecond;\nexports.TimeNanosecond = type_1.TimeNanosecond;\nexports.Decimal = type_1.Decimal;\nexports.List = type_1.List;\nexports.Struct = type_1.Struct;\nexports.Union = type_1.Union;\nexports.DenseUnion = type_1.DenseUnion;\nexports.SparseUnion = type_1.SparseUnion;\nexports.Dictionary = type_1.Dictionary;\nexports.Interval = type_1.Interval;\nexports.IntervalDayTime = type_1.IntervalDayTime;\nexports.IntervalYearMonth = type_1.IntervalYearMonth;\nexports.FixedSizeList = type_1.FixedSizeList;\nexports.Map_ = type_1.Map_;\nvar table_1 = require(\"./table\");\nexports.Table = table_1.Table;\nvar column_1 = require(\"./column\");\nexports.Column = column_1.Column;\nvar visitor_1 = require(\"./visitor\");\nexports.Visitor = visitor_1.Visitor;\nvar schema_1 = require(\"./schema\");\nexports.Schema = schema_1.Schema;\nexports.Field = schema_1.Field;\nvar index_1 = require(\"./vector/index\");\nexports.Vector = index_1.Vector;\nexports.BaseVector = index_1.BaseVector;\nexports.BinaryVector = index_1.BinaryVector;\nexports.BoolVector = index_1.BoolVector;\nexports.Chunked = index_1.Chunked;\nexports.DateVector = index_1.DateVector;\nexports.DateDayVector = index_1.DateDayVector;\nexports.DateMillisecondVector = index_1.DateMillisecondVector;\nexports.DecimalVector = index_1.DecimalVector;\nexports.DictionaryVector = index_1.DictionaryVector;\nexports.FixedSizeBinaryVector = index_1.FixedSizeBinaryVector;\nexports.FixedSizeListVector = index_1.FixedSizeListVector;\nexports.FloatVector = index_1.FloatVector;\nexports.Float16Vector = index_1.Float16Vector;\nexports.Float32Vector = index_1.Float32Vector;\nexports.Float64Vector = index_1.Float64Vector;\nexports.IntervalVector = index_1.IntervalVector;\nexports.IntervalDayTimeVector = index_1.IntervalDayTimeVector;\nexports.IntervalYearMonthVector = index_1.IntervalYearMonthVector;\nexports.IntVector = index_1.IntVector;\nexports.Int8Vector = index_1.Int8Vector;\nexports.Int16Vector = index_1.Int16Vector;\nexports.Int32Vector = index_1.Int32Vector;\nexports.Int64Vector = index_1.Int64Vector;\nexports.Uint8Vector = index_1.Uint8Vector;\nexports.Uint16Vector = index_1.Uint16Vector;\nexports.Uint32Vector = index_1.Uint32Vector;\nexports.Uint64Vector = index_1.Uint64Vector;\nexports.ListVector = index_1.ListVector;\nexports.MapVector = index_1.MapVector;\nexports.NullVector = index_1.NullVector;\nexports.StructVector = index_1.StructVector;\nexports.TimestampVector = index_1.TimestampVector;\nexports.TimestampSecondVector = index_1.TimestampSecondVector;\nexports.TimestampMillisecondVector = index_1.TimestampMillisecondVector;\nexports.TimestampMicrosecondVector = index_1.TimestampMicrosecondVector;\nexports.TimestampNanosecondVector = index_1.TimestampNanosecondVector;\nexports.TimeVector = index_1.TimeVector;\nexports.TimeSecondVector = index_1.TimeSecondVector;\nexports.TimeMillisecondVector = index_1.TimeMillisecondVector;\nexports.TimeMicrosecondVector = index_1.TimeMicrosecondVector;\nexports.TimeNanosecondVector = index_1.TimeNanosecondVector;\nexports.UnionVector = index_1.UnionVector;\nexports.DenseUnionVector = index_1.DenseUnionVector;\nexports.SparseUnionVector = index_1.SparseUnionVector;\nexports.Utf8Vector = index_1.Utf8Vector;\nvar index_2 = require(\"./builder/index\");\nexports.Builder = index_2.Builder;\nexports.BinaryBuilder = index_2.BinaryBuilder;\nexports.BoolBuilder = index_2.BoolBuilder;\nexports.DateBuilder = index_2.DateBuilder;\nexports.DateDayBuilder = index_2.DateDayBuilder;\nexports.DateMillisecondBuilder = index_2.DateMillisecondBuilder;\nexports.DecimalBuilder = index_2.DecimalBuilder;\nexports.DictionaryBuilder = index_2.DictionaryBuilder;\nexports.FixedSizeBinaryBuilder = index_2.FixedSizeBinaryBuilder;\nexports.FixedSizeListBuilder = index_2.FixedSizeListBuilder;\nexports.FloatBuilder = index_2.FloatBuilder;\nexports.Float16Builder = index_2.Float16Builder;\nexports.Float32Builder = index_2.Float32Builder;\nexports.Float64Builder = index_2.Float64Builder;\nexports.IntervalBuilder = index_2.IntervalBuilder;\nexports.IntervalDayTimeBuilder = index_2.IntervalDayTimeBuilder;\nexports.IntervalYearMonthBuilder = index_2.IntervalYearMonthBuilder;\nexports.IntBuilder = index_2.IntBuilder;\nexports.Int8Builder = index_2.Int8Builder;\nexports.Int16Builder = index_2.Int16Builder;\nexports.Int32Builder = index_2.Int32Builder;\nexports.Int64Builder = index_2.Int64Builder;\nexports.Uint8Builder = index_2.Uint8Builder;\nexports.Uint16Builder = index_2.Uint16Builder;\nexports.Uint32Builder = index_2.Uint32Builder;\nexports.Uint64Builder = index_2.Uint64Builder;\nexports.ListBuilder = index_2.ListBuilder;\nexports.MapBuilder = index_2.MapBuilder;\nexports.NullBuilder = index_2.NullBuilder;\nexports.StructBuilder = index_2.StructBuilder;\nexports.TimestampBuilder = index_2.TimestampBuilder;\nexports.TimestampSecondBuilder = index_2.TimestampSecondBuilder;\nexports.TimestampMillisecondBuilder = index_2.TimestampMillisecondBuilder;\nexports.TimestampMicrosecondBuilder = index_2.TimestampMicrosecondBuilder;\nexports.TimestampNanosecondBuilder = index_2.TimestampNanosecondBuilder;\nexports.TimeBuilder = index_2.TimeBuilder;\nexports.TimeSecondBuilder = index_2.TimeSecondBuilder;\nexports.TimeMillisecondBuilder = index_2.TimeMillisecondBuilder;\nexports.TimeMicrosecondBuilder = index_2.TimeMicrosecondBuilder;\nexports.TimeNanosecondBuilder = index_2.TimeNanosecondBuilder;\nexports.UnionBuilder = index_2.UnionBuilder;\nexports.DenseUnionBuilder = index_2.DenseUnionBuilder;\nexports.SparseUnionBuilder = index_2.SparseUnionBuilder;\nexports.Utf8Builder = index_2.Utf8Builder;\nvar stream_1 = require(\"./io/stream\");\nexports.ByteStream = stream_1.ByteStream;\nexports.AsyncByteStream = stream_1.AsyncByteStream;\nexports.AsyncByteQueue = stream_1.AsyncByteQueue;\nvar reader_1 = require(\"./ipc/reader\");\nexports.RecordBatchReader = reader_1.RecordBatchReader;\nexports.RecordBatchFileReader = reader_1.RecordBatchFileReader;\nexports.RecordBatchStreamReader = reader_1.RecordBatchStreamReader;\nexports.AsyncRecordBatchFileReader = reader_1.AsyncRecordBatchFileReader;\nexports.AsyncRecordBatchStreamReader = reader_1.AsyncRecordBatchStreamReader;\nvar writer_1 = require(\"./ipc/writer\");\nexports.RecordBatchWriter = writer_1.RecordBatchWriter;\nexports.RecordBatchFileWriter = writer_1.RecordBatchFileWriter;\nexports.RecordBatchStreamWriter = writer_1.RecordBatchStreamWriter;\nexports.RecordBatchJSONWriter = writer_1.RecordBatchJSONWriter;\nvar message_1 = require(\"./ipc/message\");\nexports.MessageReader = message_1.MessageReader;\nexports.AsyncMessageReader = message_1.AsyncMessageReader;\nexports.JSONMessageReader = message_1.JSONMessageReader;\nvar message_2 = require(\"./ipc/metadata/message\");\nexports.Message = message_2.Message;\nvar recordbatch_1 = require(\"./recordbatch\");\nexports.RecordBatch = recordbatch_1.RecordBatch;\nvar dataframe_1 = require(\"./compute/dataframe\");\nexports.DataFrame = dataframe_1.DataFrame;\nexports.FilteredDataFrame = dataframe_1.FilteredDataFrame;\nexports.CountByResult = dataframe_1.CountByResult;\nconst util_bn_ = require(\"./util/bn\");\nconst util_int_ = require(\"./util/int\");\nconst util_bit_ = require(\"./util/bit\");\nconst util_math_ = require(\"./util/math\");\nconst util_buffer_ = require(\"./util/buffer\");\nconst util_vector_ = require(\"./util/vector\");\nconst predicate = require(\"./compute/predicate\");\nexports.predicate = predicate;\n/** @ignore */\nexports.util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n\n//# sourceMappingURL=Arrow.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst row_1 = require(\"./row\");\nconst base_1 = require(\"./base\");\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nclass StructVector extends base_1.BaseVector {\n    bind(index) {\n        const proto = this._row || (this._row = new row_1.StructRow(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\nexports.StructVector = StructVector;\n\n//# sourceMappingURL=struct.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bn_1 = require(\"../util/bn\");\nconst column_1 = require(\"../column\");\nconst vector_1 = require(\"../vector\");\nconst visitor_1 = require(\"../visitor\");\nconst enum_1 = require(\"../enum\");\nconst recordbatch_1 = require(\"../recordbatch\");\nconst enum_2 = require(\"../enum\");\nconst bit_1 = require(\"../util/bit\");\nconst args_1 = require(\"../util/args\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass JSONVectorAssembler extends visitor_1.Visitor {\n    /** @nocollapse */\n    static assemble(...args) {\n        return new JSONVectorAssembler().visitMany(args_1.selectColumnChildrenArgs(recordbatch_1.RecordBatch, args));\n    }\n    visit(column) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = type_1.DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [enum_1.BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': type_1.DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                    : [...bit_1.iterateBits(nullBitmap, offset, length, null, bit_1.getBit)],\n            ...super.visit(vector_1.Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    visitNull() { return {}; }\n    visitBool({ values, offset, length }) {\n        return { 'DATA': [...bit_1.iterateBits(values, offset, length, null, bit_1.getBool)] };\n    }\n    visitInt(vector) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    visitFloat(vector) {\n        return { 'DATA': [...vector.values] };\n    }\n    visitUtf8(vector) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    visitBinary(vector) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    visitFixedSizeBinary(vector) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    visitDate(vector) {\n        return {\n            'DATA': vector.type.unit === enum_2.DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    visitTimestamp(vector) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    visitTime(vector) {\n        return {\n            'DATA': vector.type.unit < enum_2.TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    visitDecimal(vector) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    visitList(vector) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitStruct(vector) {\n        return {\n            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitUnion(vector) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === enum_2.UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitInterval(vector) {\n        return { 'DATA': [...vector.values] };\n    }\n    visitFixedSizeList(vector) {\n        return {\n            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitMap(vector) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))\n        };\n    }\n}\nexports.JSONVectorAssembler = JSONVectorAssembler;\n/** @ignore */\nfunction* binaryToString(vector) {\n    for (const octets of vector) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n/** @ignore */\nfunction* bigNumsToStrings(values, stride) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${bn_1.BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n\n//# sourceMappingURL=jsonvectorassembler.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interfaces_1 = require(\"../io/interfaces\");\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [BigIntUnavailable, false];\n})();\nexports.BigInt = BigIntCtor;\nexports.BigIntAvailable = BigIntAvailable;\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];\n})();\nexports.BigInt64Array = BigInt64ArrayCtor;\nexports.BigInt64ArrayAvailable = BigInt64ArrayAvailable;\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];\n})();\nexports.BigUint64Array = BigUint64ArrayCtor;\nexports.BigUint64ArrayAvailable = BigUint64ArrayAvailable;\n/** @ignore */ const isNumber = (x) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x) => typeof x === 'function';\n/** @ignore */\nexports.isObject = (x) => x != null && Object(x) === x;\n/** @ignore */\nexports.isPromise = (x) => {\n    return exports.isObject(x) && isFunction(x.then);\n};\n/** @ignore */\nexports.isObservable = (x) => {\n    return exports.isObject(x) && isFunction(x.subscribe);\n};\n/** @ignore */\nexports.isIterable = (x) => {\n    return exports.isObject(x) && isFunction(x[Symbol.iterator]);\n};\n/** @ignore */\nexports.isAsyncIterable = (x) => {\n    return exports.isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n/** @ignore */\nexports.isArrowJSON = (x) => {\n    return exports.isObject(x) && exports.isObject(x['schema']);\n};\n/** @ignore */\nexports.isArrayLike = (x) => {\n    return exports.isObject(x) && isNumber(x['length']);\n};\n/** @ignore */\nexports.isIteratorResult = (x) => {\n    return exports.isObject(x) && ('done' in x) && ('value' in x);\n};\n/** @ignore */\nexports.isUnderlyingSink = (x) => {\n    return exports.isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n/** @ignore */\nexports.isFileHandle = (x) => {\n    return exports.isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n/** @ignore */\nexports.isFSReadStream = (x) => {\n    return exports.isReadableNodeStream(x) && isNumber(x['bytesRead']);\n};\n/** @ignore */\nexports.isFetchResponse = (x) => {\n    return exports.isObject(x) && exports.isReadableDOMStream(x['body']);\n};\n/** @ignore */\nexports.isWritableDOMStream = (x) => {\n    return exports.isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof interfaces_1.ReadableInterop);\n};\n/** @ignore */\nexports.isReadableDOMStream = (x) => {\n    return exports.isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof interfaces_1.ReadableInterop);\n};\n/** @ignore */\nexports.isWritableNodeStream = (x) => {\n    return exports.isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof interfaces_1.ReadableInterop);\n};\n/** @ignore */\nexports.isReadableNodeStream = (x) => {\n    return exports.isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof interfaces_1.ReadableInterop);\n};\n\n//# sourceMappingURL=compat.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"../visitor\");\nconst binary_1 = require(\"../builder/binary\");\nconst bool_1 = require(\"../builder/bool\");\nconst date_1 = require(\"../builder/date\");\nconst decimal_1 = require(\"../builder/decimal\");\nconst dictionary_1 = require(\"../builder/dictionary\");\nconst fixedsizebinary_1 = require(\"../builder/fixedsizebinary\");\nconst fixedsizelist_1 = require(\"../builder/fixedsizelist\");\nconst float_1 = require(\"../builder/float\");\nconst interval_1 = require(\"../builder/interval\");\nconst int_1 = require(\"../builder/int\");\nconst list_1 = require(\"../builder/list\");\nconst map_1 = require(\"../builder/map\");\nconst null_1 = require(\"../builder/null\");\nconst struct_1 = require(\"../builder/struct\");\nconst timestamp_1 = require(\"../builder/timestamp\");\nconst time_1 = require(\"../builder/time\");\nconst union_1 = require(\"../builder/union\");\nconst utf8_1 = require(\"../builder/utf8\");\n/** @ignore */\nclass GetBuilderCtor extends visitor_1.Visitor {\n    visitNull() { return null_1.NullBuilder; }\n    visitBool() { return bool_1.BoolBuilder; }\n    visitInt() { return int_1.IntBuilder; }\n    visitInt8() { return int_1.Int8Builder; }\n    visitInt16() { return int_1.Int16Builder; }\n    visitInt32() { return int_1.Int32Builder; }\n    visitInt64() { return int_1.Int64Builder; }\n    visitUint8() { return int_1.Uint8Builder; }\n    visitUint16() { return int_1.Uint16Builder; }\n    visitUint32() { return int_1.Uint32Builder; }\n    visitUint64() { return int_1.Uint64Builder; }\n    visitFloat() { return float_1.FloatBuilder; }\n    visitFloat16() { return float_1.Float16Builder; }\n    visitFloat32() { return float_1.Float32Builder; }\n    visitFloat64() { return float_1.Float64Builder; }\n    visitUtf8() { return utf8_1.Utf8Builder; }\n    visitBinary() { return binary_1.BinaryBuilder; }\n    visitFixedSizeBinary() { return fixedsizebinary_1.FixedSizeBinaryBuilder; }\n    visitDate() { return date_1.DateBuilder; }\n    visitDateDay() { return date_1.DateDayBuilder; }\n    visitDateMillisecond() { return date_1.DateMillisecondBuilder; }\n    visitTimestamp() { return timestamp_1.TimestampBuilder; }\n    visitTimestampSecond() { return timestamp_1.TimestampSecondBuilder; }\n    visitTimestampMillisecond() { return timestamp_1.TimestampMillisecondBuilder; }\n    visitTimestampMicrosecond() { return timestamp_1.TimestampMicrosecondBuilder; }\n    visitTimestampNanosecond() { return timestamp_1.TimestampNanosecondBuilder; }\n    visitTime() { return time_1.TimeBuilder; }\n    visitTimeSecond() { return time_1.TimeSecondBuilder; }\n    visitTimeMillisecond() { return time_1.TimeMillisecondBuilder; }\n    visitTimeMicrosecond() { return time_1.TimeMicrosecondBuilder; }\n    visitTimeNanosecond() { return time_1.TimeNanosecondBuilder; }\n    visitDecimal() { return decimal_1.DecimalBuilder; }\n    visitList() { return list_1.ListBuilder; }\n    visitStruct() { return struct_1.StructBuilder; }\n    visitUnion() { return union_1.UnionBuilder; }\n    visitDenseUnion() { return union_1.DenseUnionBuilder; }\n    visitSparseUnion() { return union_1.SparseUnionBuilder; }\n    visitDictionary() { return dictionary_1.DictionaryBuilder; }\n    visitInterval() { return interval_1.IntervalBuilder; }\n    visitIntervalDayTime() { return interval_1.IntervalDayTimeBuilder; }\n    visitIntervalYearMonth() { return interval_1.IntervalYearMonthBuilder; }\n    visitFixedSizeList() { return fixedsizelist_1.FixedSizeListBuilder; }\n    visitMap() { return map_1.MapBuilder; }\n}\nexports.GetBuilderCtor = GetBuilderCtor;\n/** @ignore */\nexports.instance = new GetBuilderCtor();\n\n//# sourceMappingURL=builderctor.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst flatbuffers_1 = require(\"flatbuffers\");\nvar Long = flatbuffers_1.flatbuffers.Long;\nconst Schema_ = require(\"../fb/Schema\");\nconst visitor_1 = require(\"../visitor\");\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n/** @ignore */\nclass TypeAssembler extends visitor_1.Visitor {\n    visit(node, builder) {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    visitNull(_node, b) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    visitInt(node, b) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    visitFloat(node, b) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    visitBinary(_node, b) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    visitBool(_node, b) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    visitUtf8(_node, b) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    visitDecimal(node, b) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    visitDate(node, b) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    visitTime(node, b) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    visitTimestamp(node, b) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    visitInterval(node, b) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    visitList(_node, b) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    visitStruct(_node, b) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    visitUnion(node, b) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    visitDictionary(node, b) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    visitFixedSizeBinary(node, b) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    visitFixedSizeList(node, b) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    visitMap(node, b) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\nexports.TypeAssembler = TypeAssembler;\n/** @ignore */\nexports.instance = new TypeAssembler();\n\n//# sourceMappingURL=typeassembler.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst run_1 = require(\"./run\");\nconst schema_1 = require(\"../schema\");\nconst builder_1 = require(\"../builder\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass FixedSizeListBuilder extends builder_1.Builder {\n    constructor() {\n        super(...arguments);\n        this._run = new run_1.Run();\n    }\n    setValue(index, value) {\n        super.setValue(index, this._run.bind(value));\n    }\n    addChild(child, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new type_1.FixedSizeList(this.type.listSize, new schema_1.Field(name, child.type, true));\n        return childIndex;\n    }\n    clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\nexports.FixedSizeListBuilder = FixedSizeListBuilder;\n\n//# sourceMappingURL=fixedsizelist.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst schema_1 = require(\"../schema\");\nconst buffer_1 = require(\"./buffer\");\nconst builder_1 = require(\"../builder\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass UnionBuilder extends builder_1.Builder {\n    constructor(options) {\n        super(options);\n        this._typeIds = new buffer_1.DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n    get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n    append(value, childTypeId) {\n        return this.set(this.length, value, childTypeId);\n    }\n    set(index, value, childTypeId) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n    // @ts-ignore\n    setValue(index, value, childTypeId) {\n        this._typeIds.set(index, childTypeId);\n        super.setValue(index, value);\n    }\n    // @ts-ignore\n    addChild(child, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new schema_1.Field(name, child.type)];\n        this.type = new type_1.Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n    /** @ignore */\n    // @ts-ignore\n    _valueToChildTypeId(builder, value, offset) {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\nexports.UnionBuilder = UnionBuilder;\n/** @ignore */\nclass SparseUnionBuilder extends UnionBuilder {\n}\nexports.SparseUnionBuilder = SparseUnionBuilder;\n/** @ignore */\nclass DenseUnionBuilder extends UnionBuilder {\n    constructor(options) {\n        super(options);\n        this._offsets = new buffer_1.DataBufferBuilder(new Int32Array(0));\n    }\n    /** @ignore */\n    setValue(index, value, childTypeId) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId];\n        this._offsets.set(index, this.getChildAt(childIndex).length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\nexports.DenseUnionBuilder = DenseUnionBuilder;\n\n//# sourceMappingURL=union.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable:class-name */\nconst File_ = require(\"../../fb/File\");\nconst flatbuffers_1 = require(\"flatbuffers\");\nvar Long = flatbuffers_1.flatbuffers.Long;\nvar Builder = flatbuffers_1.flatbuffers.Builder;\nvar ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nconst schema_1 = require(\"../../schema\");\nconst enum_1 = require(\"../../enum\");\nconst buffer_1 = require(\"../../util/buffer\");\n/** @ignore */\nclass Footer_ {\n    constructor(schema, version = enum_1.MetadataVersion.V4, recordBatches, dictionaryBatches) {\n        this.schema = schema;\n        this.version = version;\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(buffer_1.toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = schema_1.Schema.decode(footer.schema());\n        return new OffHeapFooter(schema, footer);\n    }\n    /** @nocollapse */\n    static encode(footer) {\n        const b = new Builder();\n        const schemaOffset = schema_1.Schema.encode(b, footer.schema);\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n        const dictionaryBatchesOffset = b.endVector();\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, enum_1.MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n        return b.asUint8Array();\n    }\n    get numRecordBatches() { return this._recordBatches.length; }\n    get numDictionaries() { return this._dictionaryBatches.length; }\n    *recordBatches() {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    *dictionaryBatches() {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    getRecordBatch(index) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n    getDictionaryBatch(index) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\nexports.Footer = Footer_;\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n    constructor(schema, _footer) {\n        super(schema, _footer.version());\n        this._footer = _footer;\n    }\n    get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    get numDictionaries() { return this._footer.dictionariesLength(); }\n    getRecordBatch(index) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n    getDictionaryBatch(index) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nclass FileBlock {\n    /** @nocollapse */\n    static decode(block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n    /** @nocollapse */\n    static encode(b, fileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n    constructor(metaDataLength, bodyLength, offset) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\nexports.FileBlock = FileBlock;\n\n//# sourceMappingURL=file.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst enum_1 = require(\"../enum\");\nconst visitor_1 = require(\"../visitor\");\nconst bit_1 = require(\"../util/bit\");\nconst get_1 = require(\"./get\");\n/** @ignore */\nclass IteratorVisitor extends visitor_1.Visitor {\n}\nexports.IteratorVisitor = IteratorVisitor;\n/** @ignore */\nfunction nullableIterator(vector) {\n    const getFn = get_1.instance.getVisitFn(vector);\n    return bit_1.iterateBits(vector.nullBitmap, vector.offset, vector.length, vector, (vec, idx, nullByte, nullBit) => ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null);\n}\n/** @ignore */\nfunction vectorIterator(vector) {\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator(vector);\n    }\n    const { type, typeId, length } = vector;\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && ((typeId === enum_1.Type.Timestamp) ||\n        (typeId === enum_1.Type.Int && type.bitWidth !== 64) ||\n        (typeId === enum_1.Type.Time && type.bitWidth !== 64) ||\n        (typeId === enum_1.Type.Float && type.precision > 0 /* Precision.HALF */))) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(get_1.instance.getVisitFn(vector));\n}\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\n/** @ignore */\nexports.instance = new IteratorVisitor();\n\n//# sourceMappingURL=iterator.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bn_1 = require(\"../util/bn\");\nconst visitor_1 = require(\"../visitor\");\nconst utf8_1 = require(\"../util/utf8\");\nconst math_1 = require(\"../util/math\");\nconst enum_1 = require(\"../enum\");\n/** @ignore */\nclass GetVisitor extends visitor_1.Visitor {\n}\nexports.GetVisitor = GetVisitor;\n/** @ignore */ const epochDaysToMs = (data, index) => 86400000 * data[index];\n/** @ignore */ const epochMillisecondsLongToMs = (data, index) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */ const epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */ const epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n/** @ignore */ const epochMillisecondsToDate = (epochMs) => new Date(epochMs);\n/** @ignore */ const epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */ const epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n/** @ignore */\nconst getNull = (_vector, _index) => null;\n/** @ignore */\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null;\n};\n/** @ignore */\nconst getBool = ({ offset, values }, index) => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n/** @ignore */\nconst getDateDay = ({ values }, index) => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = ({ values }, index) => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric = ({ stride, values }, index) => values[stride * index];\n/** @ignore */\nconst getFloat16 = ({ stride, values }, index) => math_1.uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts = ({ stride, values, type }, index) => bn_1.BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\nconst getBinary = ({ values, valueOffsets }, index) => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = ({ values, valueOffsets }, index) => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? utf8_1.decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = (vector, index) => (vector.type.bitWidth < 64\n    ? getNumeric(vector, index)\n    : getBigInts(vector, index));\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = (vector, index) => (vector.type.precision !== enum_1.Precision.HALF\n    ? getNumeric(vector, index)\n    : getFloat16(vector, index));\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = (vector, index) => (vector.type.unit === enum_1.DateUnit.DAY\n    ? getDateDay(vector, index)\n    : getDateMillisecond(vector, index));\n/** @ignore */\nconst getTimestampSecond = ({ values }, index) => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = ({ values }, index) => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = ({ values }, index) => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond = ({ values }, index) => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = (vector, index) => {\n    switch (vector.type.unit) {\n        case enum_1.TimeUnit.SECOND: return getTimestampSecond(vector, index);\n        case enum_1.TimeUnit.MILLISECOND: return getTimestampMillisecond(vector, index);\n        case enum_1.TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector, index);\n        case enum_1.TimeUnit.NANOSECOND: return getTimestampNanosecond(vector, index);\n    }\n};\n/** @ignore */\nconst getTimeSecond = ({ values, stride }, index) => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = ({ values, stride }, index) => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = ({ values }, index) => bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond = ({ values }, index) => bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = (vector, index) => {\n    switch (vector.type.unit) {\n        case enum_1.TimeUnit.SECOND: return getTimeSecond(vector, index);\n        case enum_1.TimeUnit.MILLISECOND: return getTimeMillisecond(vector, index);\n        case enum_1.TimeUnit.MICROSECOND: return getTimeMicrosecond(vector, index);\n        case enum_1.TimeUnit.NANOSECOND: return getTimeNanosecond(vector, index);\n    }\n};\n/** @ignore */\nconst getDecimal = ({ values }, index) => bn_1.BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n/** @ignore */\nconst getList = (vector, index) => {\n    const child = vector.getChildAt(0), { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]);\n};\n/** @ignore */\nconst getMap = (vector, index) => {\n    return vector.bind(index);\n};\n/** @ignore */\nconst getStruct = (vector, index) => {\n    return vector.bind(index);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = (vector, index) => {\n    return vector.type.mode === enum_1.UnionMode.Dense ?\n        getDenseUnion(vector, index) :\n        getSparseUnion(vector, index);\n};\n/** @ignore */\nconst getDenseUnion = (vector, index) => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n/** @ignore */\nconst getSparseUnion = (vector, index) => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n/** @ignore */\nconst getDictionary = (vector, index) => {\n    return vector.getValue(vector.getKey(index));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = (vector, index) => (vector.type.unit === enum_1.IntervalUnit.DAY_TIME)\n    ? getIntervalDayTime(vector, index)\n    : getIntervalYearMonth(vector, index);\n/** @ignore */\nconst getIntervalDayTime = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\nconst getIntervalYearMonth = ({ values }, index) => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n/** @ignore */\nconst getFixedSizeList = (vector, index) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getBigInts;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getBigInts;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getStruct;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getMap;\n/** @ignore */\nexports.instance = new GetVisitor();\n\n//# sourceMappingURL=get.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"../visitor\");\nconst binary_1 = require(\"../vector/binary\");\nconst bool_1 = require(\"../vector/bool\");\nconst date_1 = require(\"../vector/date\");\nconst decimal_1 = require(\"../vector/decimal\");\nconst dictionary_1 = require(\"../vector/dictionary\");\nconst fixedsizebinary_1 = require(\"../vector/fixedsizebinary\");\nconst fixedsizelist_1 = require(\"../vector/fixedsizelist\");\nconst float_1 = require(\"../vector/float\");\nconst interval_1 = require(\"../vector/interval\");\nconst int_1 = require(\"../vector/int\");\nconst list_1 = require(\"../vector/list\");\nconst map_1 = require(\"../vector/map\");\nconst null_1 = require(\"../vector/null\");\nconst struct_1 = require(\"../vector/struct\");\nconst timestamp_1 = require(\"../vector/timestamp\");\nconst time_1 = require(\"../vector/time\");\nconst union_1 = require(\"../vector/union\");\nconst utf8_1 = require(\"../vector/utf8\");\n/** @ignore */\nclass GetVectorConstructor extends visitor_1.Visitor {\n    visitNull() { return null_1.NullVector; }\n    visitBool() { return bool_1.BoolVector; }\n    visitInt() { return int_1.IntVector; }\n    visitInt8() { return int_1.Int8Vector; }\n    visitInt16() { return int_1.Int16Vector; }\n    visitInt32() { return int_1.Int32Vector; }\n    visitInt64() { return int_1.Int64Vector; }\n    visitUint8() { return int_1.Uint8Vector; }\n    visitUint16() { return int_1.Uint16Vector; }\n    visitUint32() { return int_1.Uint32Vector; }\n    visitUint64() { return int_1.Uint64Vector; }\n    visitFloat() { return float_1.FloatVector; }\n    visitFloat16() { return float_1.Float16Vector; }\n    visitFloat32() { return float_1.Float32Vector; }\n    visitFloat64() { return float_1.Float64Vector; }\n    visitUtf8() { return utf8_1.Utf8Vector; }\n    visitBinary() { return binary_1.BinaryVector; }\n    visitFixedSizeBinary() { return fixedsizebinary_1.FixedSizeBinaryVector; }\n    visitDate() { return date_1.DateVector; }\n    visitDateDay() { return date_1.DateDayVector; }\n    visitDateMillisecond() { return date_1.DateMillisecondVector; }\n    visitTimestamp() { return timestamp_1.TimestampVector; }\n    visitTimestampSecond() { return timestamp_1.TimestampSecondVector; }\n    visitTimestampMillisecond() { return timestamp_1.TimestampMillisecondVector; }\n    visitTimestampMicrosecond() { return timestamp_1.TimestampMicrosecondVector; }\n    visitTimestampNanosecond() { return timestamp_1.TimestampNanosecondVector; }\n    visitTime() { return time_1.TimeVector; }\n    visitTimeSecond() { return time_1.TimeSecondVector; }\n    visitTimeMillisecond() { return time_1.TimeMillisecondVector; }\n    visitTimeMicrosecond() { return time_1.TimeMicrosecondVector; }\n    visitTimeNanosecond() { return time_1.TimeNanosecondVector; }\n    visitDecimal() { return decimal_1.DecimalVector; }\n    visitList() { return list_1.ListVector; }\n    visitStruct() { return struct_1.StructVector; }\n    visitUnion() { return union_1.UnionVector; }\n    visitDenseUnion() { return union_1.DenseUnionVector; }\n    visitSparseUnion() { return union_1.SparseUnionVector; }\n    visitDictionary() { return dictionary_1.DictionaryVector; }\n    visitInterval() { return interval_1.IntervalVector; }\n    visitIntervalDayTime() { return interval_1.IntervalDayTimeVector; }\n    visitIntervalYearMonth() { return interval_1.IntervalYearMonthVector; }\n    visitFixedSizeList() { return fixedsizelist_1.FixedSizeListVector; }\n    visitMap() { return map_1.MapVector; }\n}\nexports.GetVectorConstructor = GetVectorConstructor;\n/** @ignore */\nexports.instance = new GetVectorConstructor();\n\n//# sourceMappingURL=vectorctor.js.map\n","import { DataFrame, FieldType, Field, Vector } from '@grafana/data';\nimport { Table, ArrowType } from 'apache-arrow';\n\nexport function base64StringToArrowTable(text: string): Table {\n  const b64 = atob(text);\n  const arr = Uint8Array.from(b64, c => {\n    return c.charCodeAt(0);\n  });\n  return Table.from(arr);\n}\n\nexport function arrowTableToDataFrame(table: Table): DataFrame {\n  const fields: Field[] = [];\n  for (let i = 0; i < table.numCols; i++) {\n    const col = table.getColumnAt(i);\n    if (col) {\n      const schema = table.schema.fields[i];\n      let type = FieldType.other;\n      const values: Vector<any> = col;\n      switch ((schema.typeId as unknown) as ArrowType) {\n        case ArrowType.Decimal:\n        case ArrowType.Int:\n        case ArrowType.FloatingPoint: {\n          type = FieldType.number;\n          break;\n        }\n        case ArrowType.Bool: {\n          type = FieldType.boolean;\n          break;\n        }\n        case ArrowType.Timestamp: {\n          type = FieldType.time;\n          break;\n        }\n        default:\n          console.log('UNKNOWN Type:', schema);\n      }\n\n      fields.push({\n        name: col.name,\n        type,\n        config: {}, // TODO, pull from metadata\n        values,\n      });\n    }\n  }\n  return {\n    fields,\n    length: table.length,\n  };\n}\n\nexport function gelResponseToDataFrames(rsp: any): DataFrame[] {\n  const frames: DataFrame[] = [];\n  for (const res of Object.values(rsp.results)) {\n    for (const b of (res as any).dataframes) {\n      const t = base64StringToArrowTable(b as string);\n      frames.push(arrowTableToDataFrame(t));\n    }\n  }\n  return frames;\n}\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst type_1 = require(\"../type\");\nconst base_1 = require(\"./base\");\nconst index_1 = require(\"./index\");\n/** @ignore */\nclass BoolVector extends base_1.BaseVector {\n    /** @nocollapse */\n    static from(input) {\n        return index_1.vectorFromValuesWithType(() => new type_1.Bool(), input);\n    }\n}\nexports.BoolVector = BoolVector;\n\n//# sourceMappingURL=bool.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bn_1 = require(\"../util/bn\");\nconst buffer_1 = require(\"./buffer\");\nconst compat_1 = require(\"../util/compat\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass IntBuilder extends builder_1.FixedWidthBuilder {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\nexports.IntBuilder = IntBuilder;\n/** @ignore */\nclass Int8Builder extends IntBuilder {\n}\nexports.Int8Builder = Int8Builder;\n/** @ignore */\nclass Int16Builder extends IntBuilder {\n}\nexports.Int16Builder = Int16Builder;\n/** @ignore */\nclass Int32Builder extends IntBuilder {\n}\nexports.Int32Builder = Int32Builder;\n/** @ignore */\nclass Int64Builder extends IntBuilder {\n    constructor(options) {\n        if (options['nullValues']) {\n            options['nullValues'] = options['nullValues'].map(toBigInt);\n        }\n        super(options);\n        this._values = new buffer_1.WideBufferBuilder(new Int32Array(0), 2);\n    }\n    get values64() { return this._values.buffer64; }\n    isValid(value) { return super.isValid(toBigInt(value)); }\n}\nexports.Int64Builder = Int64Builder;\n/** @ignore */\nclass Uint8Builder extends IntBuilder {\n}\nexports.Uint8Builder = Uint8Builder;\n/** @ignore */\nclass Uint16Builder extends IntBuilder {\n}\nexports.Uint16Builder = Uint16Builder;\n/** @ignore */\nclass Uint32Builder extends IntBuilder {\n}\nexports.Uint32Builder = Uint32Builder;\n/** @ignore */\nclass Uint64Builder extends IntBuilder {\n    constructor(options) {\n        if (options['nullValues']) {\n            options['nullValues'] = options['nullValues'].map(toBigInt);\n        }\n        super(options);\n        this._values = new buffer_1.WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    get values64() { return this._values.buffer64; }\n    isValid(value) { return super.isValid(toBigInt(value)); }\n}\nexports.Uint64Builder = Uint64Builder;\nconst toBigInt = ((memo) => (value) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bn_1.bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': compat_1.BigInt64Array });\n\n//# sourceMappingURL=int.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass IntervalVector extends base_1.BaseVector {\n}\nexports.IntervalVector = IntervalVector;\n/** @ignore */\nclass IntervalDayTimeVector extends IntervalVector {\n}\nexports.IntervalDayTimeVector = IntervalDayTimeVector;\n/** @ignore */\nclass IntervalYearMonthVector extends IntervalVector {\n}\nexports.IntervalYearMonthVector = IntervalYearMonthVector;\n\n//# sourceMappingURL=interval.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass TimeBuilder extends builder_1.FixedWidthBuilder {\n}\nexports.TimeBuilder = TimeBuilder;\n/** @ignore */\nclass TimeSecondBuilder extends TimeBuilder {\n}\nexports.TimeSecondBuilder = TimeSecondBuilder;\n/** @ignore */\nclass TimeMillisecondBuilder extends TimeBuilder {\n}\nexports.TimeMillisecondBuilder = TimeMillisecondBuilder;\n/** @ignore */\nclass TimeMicrosecondBuilder extends TimeBuilder {\n}\nexports.TimeMicrosecondBuilder = TimeMicrosecondBuilder;\n/** @ignore */\nclass TimeNanosecondBuilder extends TimeBuilder {\n}\nexports.TimeNanosecondBuilder = TimeNanosecondBuilder;\n\n//# sourceMappingURL=time.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utf8_1 = require(\"../util/utf8\");\nconst binary_1 = require(\"./binary\");\nconst buffer_1 = require(\"./buffer\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass Utf8Builder extends builder_1.VariableWidthBuilder {\n    constructor(opts) {\n        super(opts);\n        this._values = new buffer_1.BufferBuilder(new Uint8Array(0));\n    }\n    get byteLength() {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    setValue(index, value) {\n        return super.setValue(index, utf8_1.encodeUtf8(value));\n    }\n    // @ts-ignore\n    _flushPending(pending, pendingLength) { }\n}\nexports.Utf8Builder = Utf8Builder;\nUtf8Builder.prototype._flushPending = binary_1.BinaryBuilder.prototype._flushPending;\n\n//# sourceMappingURL=utf8.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst schema_1 = require(\"../schema\");\nconst builder_1 = require(\"../builder\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass StructBuilder extends builder_1.Builder {\n    addChild(child, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new type_1.Struct([...this.type.children, new schema_1.Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\nexports.StructBuilder = StructBuilder;\n\n//# sourceMappingURL=struct.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"../vector\");\nconst visitor_1 = require(\"../visitor\");\nconst utf8_1 = require(\"../util/utf8\");\nconst math_1 = require(\"../util/math\");\nconst buffer_1 = require(\"../util/buffer\");\nconst enum_1 = require(\"../enum\");\n/** @ignore */\nclass SetVisitor extends visitor_1.Visitor {\n}\nexports.SetVisitor = SetVisitor;\n/** @ignore */\nconst setEpochMsToDays = (data, index, epochMs) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setVariableWidthBytes = (values, valueOffsets, index, value) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n/** @ignore */\nconst setBool = ({ offset, values }, index, val) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8))) // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n};\n/** @ignore */\nconst setDateDay = ({ values }, index, value) => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = ({ values }, index, value) => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric = ({ stride, values }, index, value) => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16 = ({ stride, values }, index, value) => { values[stride * index] = math_1.float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2 = (vector, index, value) => {\n    switch (typeof value) {\n        case 'bigint':\n            vector.values64[index] = value;\n            break;\n        case 'number':\n            vector.values[index * vector.stride] = value;\n            break;\n        default:\n            const val = value;\n            const { stride, ArrayType } = vector;\n            const long = buffer_1.toArrayBufferView(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setBinary = ({ values, valueOffsets }, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = ({ values, valueOffsets }, index, value) => {\n    setVariableWidthBytes(values, valueOffsets, index, utf8_1.encodeUtf8(value));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = (vector, index, value) => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector, index, value)\n        : setNumericX2(vector, index, value);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = (vector, index, value) => {\n    vector.type.precision !== enum_1.Precision.HALF\n        ? setNumeric(vector, index, value)\n        : setFloat16(vector, index, value);\n};\n/* istanbul ignore next */\nconst setDate = (vector, index, value) => {\n    vector.type.unit === enum_1.DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\n/** @ignore */\nconst setTimestampSecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = ({ values }, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond = ({ values }, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case enum_1.TimeUnit.SECOND: return setTimestampSecond(vector, index, value);\n        case enum_1.TimeUnit.MILLISECOND: return setTimestampMillisecond(vector, index, value);\n        case enum_1.TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector, index, value);\n        case enum_1.TimeUnit.NANOSECOND: return setTimestampNanosecond(vector, index, value);\n    }\n};\n/** @ignore */\nconst setTimeSecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case enum_1.TimeUnit.SECOND: return setTimeSecond(vector, index, value);\n        case enum_1.TimeUnit.MILLISECOND: return setTimeMillisecond(vector, index, value);\n        case enum_1.TimeUnit.MICROSECOND: return setTimeMicrosecond(vector, index, value);\n        case enum_1.TimeUnit.NANOSECOND: return setTimeNanosecond(vector, index, value);\n    }\n};\n/** @ignore */\nconst setDecimal = ({ values }, index, value) => { values.set(value.subarray(0, 4), 4 * index); };\n/** @ignore */\nconst setList = (vector, index, value) => {\n    const values = vector.getChildAt(0), valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n/** @ignore */\nconst setMap = (vector, index, value) => {\n    const values = vector.getChildAt(0), valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n/** @ignore */ const _setStructArrayValue = (o, v) => (c, _, i) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o, v) => (c, _, i) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o, v) => (c, f, _) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o, v) => (c, f, _) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = (vector, index, value) => {\n    const setValue = value instanceof Map ? _setStructMapValue(index, value) :\n        value instanceof vector_1.Vector ? _setStructVectorValue(index, value) :\n            Array.isArray(value) ? _setStructArrayValue(index, value) :\n                _setStructObjectValue(index, value);\n    vector.type.children.forEach((f, i) => setValue(vector.getChildAt(i), f, i));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = (vector, index, value) => {\n    vector.type.mode === enum_1.UnionMode.Dense ?\n        setDenseUnion(vector, index, value) :\n        setSparseUnion(vector, index, value);\n};\n/** @ignore */\nconst setDenseUnion = (vector, index, value) => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n/** @ignore */\nconst setSparseUnion = (vector, index, value) => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n/** @ignore */\nconst setDictionary = (vector, index, value) => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = (vector, index, value) => {\n    (vector.type.unit === enum_1.IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n/** @ignore */\nconst setIntervalDayTime = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = ({ values }, index, value) => { values[index] = (value[0] * 12) + (value[1] % 12); };\n/** @ignore */\nconst setFixedSizeList = (vector, index, value) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = setDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setStruct;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setMap;\n/** @ignore */\nexports.instance = new SetVisitor();\n\n//# sourceMappingURL=set.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"../util/buffer\");\nconst compat_1 = require(\"../util/compat\");\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len, BPE) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = (arr, len = 0) => (arr.length >= len ? arr.subarray(0, len) : buffer_1.memcpy(new arr.constructor(len), arr, 0));\n/** @ignore */\nclass BufferBuilder {\n    constructor(buffer, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n    get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    get reservedLength() { return this.buffer.length / this.stride; }\n    get reservedByteLength() { return this.buffer.byteLength; }\n    // @ts-ignore\n    set(index, value) { return this; }\n    append(value) { return this.set(this.length, value); }\n    reserve(extra) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n            }\n        }\n        return this;\n    }\n    flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    _resize(newLength) {\n        return this.buffer = buffer_1.memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\nexports.BufferBuilder = BufferBuilder;\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\nclass DataBufferBuilder extends BufferBuilder {\n    last() { return this.get(this.length - 1); }\n    get(index) { return this.buffer[index]; }\n    set(index, value) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\nexports.DataBufferBuilder = DataBufferBuilder;\n/** @ignore */\nclass BitmapBufferBuilder extends DataBufferBuilder {\n    constructor(data = new Uint8Array(0)) {\n        super(data, 1 / 8);\n        this.numValid = 0;\n    }\n    get numInvalid() { return this.length - this.numValid; }\n    get(idx) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    set(idx, val) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |= (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\nexports.BitmapBufferBuilder = BitmapBufferBuilder;\n/** @ignore */\nclass OffsetsBufferBuilder extends DataBufferBuilder {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    append(value) {\n        return this.set(this.length - 1, value);\n    }\n    set(index, value) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\nexports.OffsetsBufferBuilder = OffsetsBufferBuilder;\n/** @ignore */\nclass WideBufferBuilder extends BufferBuilder {\n    get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = (this.buffer instanceof Int32Array ? compat_1.BigInt64Array : compat_1.BigUint64Array));\n    }\n    set(index, value) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint':\n                this.buffer64[index] = value;\n                break;\n            case 'number':\n                this.buffer[index * this.stride] = value;\n                break;\n            default: this.buffer.set(value, index * this.stride);\n        }\n        return this;\n    }\n    _resize(newLength) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (compat_1.BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\nexports.WideBufferBuilder = WideBufferBuilder;\n\n//# sourceMappingURL=buffer.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass UnionVector extends base_1.BaseVector {\n    get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\nexports.UnionVector = UnionVector;\n/** @ignore */\nclass DenseUnionVector extends UnionVector {\n    get valueOffsets() { return this.data.valueOffsets; }\n}\nexports.DenseUnionVector = DenseUnionVector;\n/** @ignore */\nclass SparseUnionVector extends UnionVector {\n}\nexports.SparseUnionVector = SparseUnionVector;\n\n//# sourceMappingURL=union.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"./data\");\nconst vector_1 = require(\"./vector\");\nconst enum_1 = require(\"./enum\");\nconst type_1 = require(\"./type\");\nclass Visitor {\n    visitMany(nodes, ...args) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    visit(...args) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    getVisitFn(node, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    visitNull(_node, ..._args) { return null; }\n    visitBool(_node, ..._args) { return null; }\n    visitInt(_node, ..._args) { return null; }\n    visitFloat(_node, ..._args) { return null; }\n    visitUtf8(_node, ..._args) { return null; }\n    visitBinary(_node, ..._args) { return null; }\n    visitFixedSizeBinary(_node, ..._args) { return null; }\n    visitDate(_node, ..._args) { return null; }\n    visitTimestamp(_node, ..._args) { return null; }\n    visitTime(_node, ..._args) { return null; }\n    visitDecimal(_node, ..._args) { return null; }\n    visitList(_node, ..._args) { return null; }\n    visitStruct(_node, ..._args) { return null; }\n    visitUnion(_node, ..._args) { return null; }\n    visitDictionary(_node, ..._args) { return null; }\n    visitInterval(_node, ..._args) { return null; }\n    visitFixedSizeList(_node, ..._args) { return null; }\n    visitMap(_node, ..._args) { return null; }\n}\nexports.Visitor = Visitor;\n/** @ignore */\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n    let fn = null;\n    let dtype = enum_1.Type.NONE;\n    // tslint:disable\n    if (node instanceof data_1.Data) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof vector_1.Vector) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof type_1.DataType) {\n        dtype = inferDType(node);\n    }\n    else if (typeof (dtype = node) !== 'number') {\n        dtype = enum_1.Type[node];\n    }\n    switch (dtype) {\n        case enum_1.Type.Null:\n            fn = visitor.visitNull;\n            break;\n        case enum_1.Type.Bool:\n            fn = visitor.visitBool;\n            break;\n        case enum_1.Type.Int:\n            fn = visitor.visitInt;\n            break;\n        case enum_1.Type.Int8:\n            fn = visitor.visitInt8 || visitor.visitInt;\n            break;\n        case enum_1.Type.Int16:\n            fn = visitor.visitInt16 || visitor.visitInt;\n            break;\n        case enum_1.Type.Int32:\n            fn = visitor.visitInt32 || visitor.visitInt;\n            break;\n        case enum_1.Type.Int64:\n            fn = visitor.visitInt64 || visitor.visitInt;\n            break;\n        case enum_1.Type.Uint8:\n            fn = visitor.visitUint8 || visitor.visitInt;\n            break;\n        case enum_1.Type.Uint16:\n            fn = visitor.visitUint16 || visitor.visitInt;\n            break;\n        case enum_1.Type.Uint32:\n            fn = visitor.visitUint32 || visitor.visitInt;\n            break;\n        case enum_1.Type.Uint64:\n            fn = visitor.visitUint64 || visitor.visitInt;\n            break;\n        case enum_1.Type.Float:\n            fn = visitor.visitFloat;\n            break;\n        case enum_1.Type.Float16:\n            fn = visitor.visitFloat16 || visitor.visitFloat;\n            break;\n        case enum_1.Type.Float32:\n            fn = visitor.visitFloat32 || visitor.visitFloat;\n            break;\n        case enum_1.Type.Float64:\n            fn = visitor.visitFloat64 || visitor.visitFloat;\n            break;\n        case enum_1.Type.Utf8:\n            fn = visitor.visitUtf8;\n            break;\n        case enum_1.Type.Binary:\n            fn = visitor.visitBinary;\n            break;\n        case enum_1.Type.FixedSizeBinary:\n            fn = visitor.visitFixedSizeBinary;\n            break;\n        case enum_1.Type.Date:\n            fn = visitor.visitDate;\n            break;\n        case enum_1.Type.DateDay:\n            fn = visitor.visitDateDay || visitor.visitDate;\n            break;\n        case enum_1.Type.DateMillisecond:\n            fn = visitor.visitDateMillisecond || visitor.visitDate;\n            break;\n        case enum_1.Type.Timestamp:\n            fn = visitor.visitTimestamp;\n            break;\n        case enum_1.Type.TimestampSecond:\n            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n            break;\n        case enum_1.Type.TimestampMillisecond:\n            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n            break;\n        case enum_1.Type.TimestampMicrosecond:\n            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n            break;\n        case enum_1.Type.TimestampNanosecond:\n            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n            break;\n        case enum_1.Type.Time:\n            fn = visitor.visitTime;\n            break;\n        case enum_1.Type.TimeSecond:\n            fn = visitor.visitTimeSecond || visitor.visitTime;\n            break;\n        case enum_1.Type.TimeMillisecond:\n            fn = visitor.visitTimeMillisecond || visitor.visitTime;\n            break;\n        case enum_1.Type.TimeMicrosecond:\n            fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n            break;\n        case enum_1.Type.TimeNanosecond:\n            fn = visitor.visitTimeNanosecond || visitor.visitTime;\n            break;\n        case enum_1.Type.Decimal:\n            fn = visitor.visitDecimal;\n            break;\n        case enum_1.Type.List:\n            fn = visitor.visitList;\n            break;\n        case enum_1.Type.Struct:\n            fn = visitor.visitStruct;\n            break;\n        case enum_1.Type.Union:\n            fn = visitor.visitUnion;\n            break;\n        case enum_1.Type.DenseUnion:\n            fn = visitor.visitDenseUnion || visitor.visitUnion;\n            break;\n        case enum_1.Type.SparseUnion:\n            fn = visitor.visitSparseUnion || visitor.visitUnion;\n            break;\n        case enum_1.Type.Dictionary:\n            fn = visitor.visitDictionary;\n            break;\n        case enum_1.Type.Interval:\n            fn = visitor.visitInterval;\n            break;\n        case enum_1.Type.IntervalDayTime:\n            fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n            break;\n        case enum_1.Type.IntervalYearMonth:\n            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n            break;\n        case enum_1.Type.FixedSizeList:\n            fn = visitor.visitFixedSizeList;\n            break;\n        case enum_1.Type.Map:\n            fn = visitor.visitMap;\n            break;\n    }\n    if (typeof fn === 'function')\n        return fn;\n    if (!throwIfNotFound)\n        return () => null;\n    throw new Error(`Unrecognized type '${enum_1.Type[dtype]}'`);\n}\n/** @ignore */\nfunction inferDType(type) {\n    switch (type.typeId) {\n        case enum_1.Type.Null: return enum_1.Type.Null;\n        case enum_1.Type.Int:\n            const { bitWidth, isSigned } = type;\n            switch (bitWidth) {\n                case 8: return isSigned ? enum_1.Type.Int8 : enum_1.Type.Uint8;\n                case 16: return isSigned ? enum_1.Type.Int16 : enum_1.Type.Uint16;\n                case 32: return isSigned ? enum_1.Type.Int32 : enum_1.Type.Uint32;\n                case 64: return isSigned ? enum_1.Type.Int64 : enum_1.Type.Uint64;\n            }\n            return enum_1.Type.Int;\n        case enum_1.Type.Float:\n            switch (type.precision) {\n                case enum_1.Precision.HALF: return enum_1.Type.Float16;\n                case enum_1.Precision.SINGLE: return enum_1.Type.Float32;\n                case enum_1.Precision.DOUBLE: return enum_1.Type.Float64;\n            }\n            return enum_1.Type.Float;\n        case enum_1.Type.Binary: return enum_1.Type.Binary;\n        case enum_1.Type.Utf8: return enum_1.Type.Utf8;\n        case enum_1.Type.Bool: return enum_1.Type.Bool;\n        case enum_1.Type.Decimal: return enum_1.Type.Decimal;\n        case enum_1.Type.Time:\n            switch (type.unit) {\n                case enum_1.TimeUnit.SECOND: return enum_1.Type.TimeSecond;\n                case enum_1.TimeUnit.MILLISECOND: return enum_1.Type.TimeMillisecond;\n                case enum_1.TimeUnit.MICROSECOND: return enum_1.Type.TimeMicrosecond;\n                case enum_1.TimeUnit.NANOSECOND: return enum_1.Type.TimeNanosecond;\n            }\n            return enum_1.Type.Time;\n        case enum_1.Type.Timestamp:\n            switch (type.unit) {\n                case enum_1.TimeUnit.SECOND: return enum_1.Type.TimestampSecond;\n                case enum_1.TimeUnit.MILLISECOND: return enum_1.Type.TimestampMillisecond;\n                case enum_1.TimeUnit.MICROSECOND: return enum_1.Type.TimestampMicrosecond;\n                case enum_1.TimeUnit.NANOSECOND: return enum_1.Type.TimestampNanosecond;\n            }\n            return enum_1.Type.Timestamp;\n        case enum_1.Type.Date:\n            switch (type.unit) {\n                case enum_1.DateUnit.DAY: return enum_1.Type.DateDay;\n                case enum_1.DateUnit.MILLISECOND: return enum_1.Type.DateMillisecond;\n            }\n            return enum_1.Type.Date;\n        case enum_1.Type.Interval:\n            switch (type.unit) {\n                case enum_1.IntervalUnit.DAY_TIME: return enum_1.Type.IntervalDayTime;\n                case enum_1.IntervalUnit.YEAR_MONTH: return enum_1.Type.IntervalYearMonth;\n            }\n            return enum_1.Type.Interval;\n        case enum_1.Type.Map: return enum_1.Type.Map;\n        case enum_1.Type.List: return enum_1.Type.List;\n        case enum_1.Type.Struct: return enum_1.Type.Struct;\n        case enum_1.Type.Union:\n            switch (type.mode) {\n                case enum_1.UnionMode.Dense: return enum_1.Type.DenseUnion;\n                case enum_1.UnionMode.Sparse: return enum_1.Type.SparseUnion;\n            }\n            return enum_1.Type.Union;\n        case enum_1.Type.FixedSizeBinary: return enum_1.Type.FixedSizeBinary;\n        case enum_1.Type.FixedSizeList: return enum_1.Type.FixedSizeList;\n        case enum_1.Type.Dictionary: return enum_1.Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${enum_1.Type[type.typeId]}'`);\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;\n\n//# sourceMappingURL=visitor.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pretty_1 = require(\"../util/pretty\");\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\nclass Row {\n    constructor(parent, numKeys) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n    entries() { return this[Symbol.iterator](); }\n    has(key) { return this.get(key) !== undefined; }\n    get(key) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n            else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n    set(key, val) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n    clear() { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n    delete(_) { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n    *[Symbol.iterator]() {\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n        for (let k, v, i = 0, kr, vr; !((kr = ki.next()).done || (vr = vi.next()).done); ++i) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n    forEach(callbackfn, thisArg) {\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v, k, m) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n        for (let k, v, i = 0, kr, vr; !((kr = ki.next()).done || (vr = vi.next()).done); ++i) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n    toArray() { return [...this.values()]; }\n    toJSON() {\n        const obj = {};\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n    inspect() { return this.toString(); }\n    [kCustomInspect]() { return this.toString(); }\n    toString() {\n        const str = [];\n        this.forEach((val, key) => {\n            key = pretty_1.valueToString(key);\n            val = pretty_1.valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n}\nRow[Symbol.toStringTag] = ((proto) => {\n    Object.defineProperties(proto, {\n        'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n        [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n        [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n    });\n    return proto[Symbol.toStringTag] = 'Row';\n})(Row.prototype);\nclass MapRow extends Row {\n    constructor(slice) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    keys() {\n        return this[kParent].getChildAt(0)[Symbol.iterator]();\n    }\n    values() {\n        return this[kParent].getChildAt(1)[Symbol.iterator]();\n    }\n    getKey(idx) {\n        return this[kParent].getChildAt(0).get(idx);\n    }\n    getIndex(key) {\n        return this[kParent].getChildAt(0).indexOf(key);\n    }\n    getValue(index) {\n        return this[kParent].getChildAt(1).get(index);\n    }\n    setValue(index, value) {\n        this[kParent].getChildAt(1).set(index, value);\n    }\n}\nexports.MapRow = MapRow;\nclass StructRow extends Row {\n    constructor(parent) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name;\n        }\n    }\n    *values() {\n        for (const field of this[kParent].type.children) {\n            yield this[field.name];\n        }\n    }\n    getKey(idx) {\n        return this[kParent].type.children[idx].name;\n    }\n    getIndex(key) {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    getValue(index) {\n        return this[kParent].getChildAt(index).get(this[kRowIndex]);\n    }\n    setValue(index, value) {\n        return this[kParent].getChildAt(index).set(this[kRowIndex], value);\n    }\n}\nexports.StructRow = StructRow;\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null, set: null };\n    return (row) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key) => function () { return this.get(key); };\n        const setter = (key) => function (val) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row, key) {\n            switch (key) {\n                case 'getKey':\n                case 'getIndex':\n                case 'getValue':\n                case 'setValue':\n                case 'toArray':\n                case 'toJSON':\n                case 'inspect':\n                case 'constructor':\n                case 'isPrototypeOf':\n                case 'propertyIsEnumerable':\n                case 'toString':\n                case 'toLocaleString':\n                case 'valueOf':\n                case 'size':\n                case 'has':\n                case 'get':\n                case 'set':\n                case 'clear':\n                case 'delete':\n                case 'keys':\n                case 'values':\n                case 'entries':\n                case 'forEach':\n                case '__proto__':\n                case '__defineGetter__':\n                case '__defineSetter__':\n                case 'hasOwnProperty':\n                case '__lookupGetter__':\n                case '__lookupSetter__':\n                case Symbol.iterator:\n                case Symbol.toStringTag:\n                case kParent:\n                case kRowIndex:\n                case kIdxToVal:\n                case kKeyToIdx:\n                case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row, key, receiver) {\n            switch (key) {\n                case 'getKey':\n                case 'getIndex':\n                case 'getValue':\n                case 'setValue':\n                case 'toArray':\n                case 'toJSON':\n                case 'inspect':\n                case 'constructor':\n                case 'isPrototypeOf':\n                case 'propertyIsEnumerable':\n                case 'toString':\n                case 'toLocaleString':\n                case 'valueOf':\n                case 'size':\n                case 'has':\n                case 'get':\n                case 'set':\n                case 'clear':\n                case 'delete':\n                case 'keys':\n                case 'values':\n                case 'entries':\n                case 'forEach':\n                case '__proto__':\n                case '__defineGetter__':\n                case '__defineSetter__':\n                case 'hasOwnProperty':\n                case '__lookupGetter__':\n                case '__lookupSetter__':\n                case Symbol.iterator:\n                case Symbol.toStringTag:\n                case kParent:\n                case kRowIndex:\n                case kIdxToVal:\n                case kKeyToIdx:\n                case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row, key, val, receiver) {\n            switch (key) {\n                case kParent:\n                case kRowIndex:\n                case kIdxToVal:\n                case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey':\n                case 'getIndex':\n                case 'getValue':\n                case 'setValue':\n                case 'toArray':\n                case 'toJSON':\n                case 'inspect':\n                case 'constructor':\n                case 'isPrototypeOf':\n                case 'propertyIsEnumerable':\n                case 'toString':\n                case 'toLocaleString':\n                case 'valueOf':\n                case 'size':\n                case 'has':\n                case 'get':\n                case 'set':\n                case 'clear':\n                case 'delete':\n                case 'keys':\n                case 'values':\n                case 'entries':\n                case 'forEach':\n                case '__proto__':\n                case '__defineGetter__':\n                case '__defineSetter__':\n                case 'hasOwnProperty':\n                case '__lookupGetter__':\n                case '__lookupSetter__':\n                case Symbol.iterator:\n                case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return (row) => new Proxy(row, RowProxyHandler);\n})();\n\n//# sourceMappingURL=row.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass IntervalBuilder extends builder_1.FixedWidthBuilder {\n}\nexports.IntervalBuilder = IntervalBuilder;\n/** @ignore */\nclass IntervalDayTimeBuilder extends IntervalBuilder {\n}\nexports.IntervalDayTimeBuilder = IntervalDayTimeBuilder;\n/** @ignore */\nclass IntervalYearMonthBuilder extends IntervalBuilder {\n}\nexports.IntervalYearMonthBuilder = IntervalYearMonthBuilder;\n\n//# sourceMappingURL=interval.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bit_1 = require(\"./util/bit\");\nconst bit_2 = require(\"./util/bit\");\nconst enum_1 = require(\"./enum\");\nconst type_1 = require(\"./type\");\nconst buffer_1 = require(\"./util/buffer\");\n/** @ignore */ exports.kUnknownNullCount = -1;\n/** @ignore */\nclass Data {\n    constructor(type, offset, length, nullCount, buffers, childData, dictionary) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data);\n        let buffer;\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        }\n        else {\n            this.stride = type_1.strideForType(type);\n            if (buffers) {\n                (buffer = buffers[0]) && (this.valueOffsets = buffer);\n                (buffer = buffers[1]) && (this.values = buffer);\n                (buffer = buffers[2]) && (this.nullBitmap = buffer);\n                (buffer = buffers[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n    get typeId() { return this.type.typeId; }\n    get ArrayType() { return this.type.ArrayType; }\n    get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n    }\n    get byteLength() {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values && (byteLength += values.byteLength);\n        nullBitmap && (byteLength += nullBitmap.byteLength);\n        typeIds && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount <= exports.kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - bit_2.popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    clone(type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this, childData = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n    slice(offset, length) {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, \n        // Don't slice children if we have value offsets (the variable-width types)\n        (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n    _changeLengthAndBackfillNullBitmap(newLength) {\n        if (this.typeId === enum_1.Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(bit_1.truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[enum_1.BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n    _sliceBuffers(offset, length, stride, typeId) {\n        let arr, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[enum_1.BufferType.TYPE]) && (buffers[enum_1.BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[enum_1.BufferType.OFFSET]) && (buffers[enum_1.BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n            (arr = buffers[enum_1.BufferType.DATA]) && (buffers[enum_1.BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n    _sliceChildren(childData, offset, length) {\n        return childData.map((child) => child.slice(offset, length));\n    }\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    static new(type, offset, length, nullCount, buffers, childData, dictionary) {\n        if (buffers instanceof Data) {\n            buffers = buffers.buffers;\n        }\n        else if (!buffers) {\n            buffers = [];\n        }\n        switch (type.typeId) {\n            case enum_1.Type.Null: return Data.Null(type, offset, length);\n            case enum_1.Type.Int: return Data.Int(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Dictionary: return Data.Dictionary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || [], dictionary);\n            case enum_1.Type.Float: return Data.Float(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Bool: return Data.Bool(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Decimal: return Data.Decimal(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Date: return Data.Date(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Time: return Data.Time(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Timestamp: return Data.Timestamp(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Interval: return Data.Interval(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.FixedSizeBinary: return Data.FixedSizeBinary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Binary: return Data.Binary(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.Utf8: return Data.Utf8(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], buffers[enum_1.BufferType.DATA] || []);\n            case enum_1.Type.List: return Data.List(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], (childData || [])[0]);\n            case enum_1.Type.FixedSizeList: return Data.FixedSizeList(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], (childData || [])[0]);\n            case enum_1.Type.Struct: return Data.Struct(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], childData || []);\n            case enum_1.Type.Map: return Data.Map(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.OFFSET] || [], (childData || [])[0]);\n            case enum_1.Type.Union: return Data.Union(type, offset, length, nullCount || 0, buffers[enum_1.BufferType.VALIDITY], buffers[enum_1.BufferType.TYPE] || [], buffers[enum_1.BufferType.OFFSET] || childData, childData);\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n    /** @nocollapse */\n    static Null(type, offset, length) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    static Int(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Dictionary(type, offset, length, nullCount, nullBitmap, data, dictionary) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.indices.ArrayType, data), buffer_1.toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    static Float(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Bool(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Decimal(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Date(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Time(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Interval(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    static List(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), undefined, buffer_1.toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    static FixedSizeList(type, offset, length, nullCount, nullBitmap, child) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    static Struct(type, offset, length, nullCount, nullBitmap, children) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    static Map(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), undefined, buffer_1.toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {\n        const buffers = [\n            undefined, undefined,\n            buffer_1.toUint8Array(nullBitmap),\n            buffer_1.toArrayBufferView(type.ArrayType, typeIds)\n        ];\n        if (type.mode === enum_1.UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);\n        }\n        buffers[enum_1.BufferType.OFFSET] = buffer_1.toInt32Array(valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\nexports.Data = Data;\nData.prototype.childData = Object.freeze([]);\n\n//# sourceMappingURL=data.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass NullVector extends base_1.BaseVector {\n}\nexports.NullVector = NullVector;\n\n//# sourceMappingURL=null.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"../vector\");\nconst base_1 = require(\"./base\");\nconst type_1 = require(\"../type\");\nconst index_1 = require(\"./index\");\n/** @ignore */\nclass Utf8Vector extends base_1.BaseVector {\n    /** @nocollapse */\n    static from(input) {\n        return index_1.vectorFromValuesWithType(() => new type_1.Utf8(), input);\n    }\n    asBinary() {\n        return vector_1.Vector.new(this.data.clone(new type_1.Binary()));\n    }\n}\nexports.Utf8Vector = Utf8Vector;\n\n//# sourceMappingURL=utf8.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass ListVector extends base_1.BaseVector {\n}\nexports.ListVector = ListVector;\n\n//# sourceMappingURL=list.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst table_1 = require(\"../table\");\nconst int_1 = require(\"../vector/int\");\nconst schema_1 = require(\"../schema\");\nconst predicate_1 = require(\"./predicate\");\nconst recordbatch_1 = require(\"../recordbatch\");\nconst type_1 = require(\"../type\");\ntable_1.Table.prototype.countBy = function (name) { return new DataFrame(this.chunks).countBy(name); };\ntable_1.Table.prototype.scan = function (next, bind) { return new DataFrame(this.chunks).scan(next, bind); };\ntable_1.Table.prototype.scanReverse = function (next, bind) { return new DataFrame(this.chunks).scanReverse(next, bind); };\ntable_1.Table.prototype.filter = function (predicate) { return new DataFrame(this.chunks).filter(predicate); };\nclass DataFrame extends table_1.Table {\n    filter(predicate) {\n        return new FilteredDataFrame(this.chunks, predicate);\n    }\n    scan(next, bind) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) {\n                bind(batch);\n            }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    scanReverse(next, bind) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) {\n                bind(batch);\n            }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    countBy(name) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new predicate_1.Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!type_1.DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, int_1.IntVector.from(counts));\n    }\n}\nexports.DataFrame = DataFrame;\n/** @ignore */\nclass CountByResult extends table_1.Table {\n    constructor(values, counts) {\n        const schema = new schema_1.Schema([\n            new schema_1.Field('values', values.type),\n            new schema_1.Field('counts', counts.type)\n        ]);\n        super(new recordbatch_1.RecordBatch(schema, counts.length, [values, counts]));\n    }\n    toJSON() {\n        const values = this.getColumnAt(0);\n        const counts = this.getColumnAt(1);\n        const result = {};\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\nexports.CountByResult = CountByResult;\n/** @ignore */\nclass FilteredDataFrame extends DataFrame {\n    constructor(batches, predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    scan(next, bind) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) {\n                bind(batch);\n            }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    scanReverse(next, bind) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) {\n                bind(batch);\n            }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    count() {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    ++sum;\n                }\n            }\n        }\n        return sum;\n    }\n    *[Symbol.iterator]() {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    yield batch.get(index);\n                }\n            }\n        }\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n    }\n    countBy(name) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new predicate_1.Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!type_1.DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, int_1.IntVector.from(counts));\n    }\n}\nexports.FilteredDataFrame = FilteredDataFrame;\n\n//# sourceMappingURL=dataframe.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"../../builder/index\");\n/** @ignore */\nfunction builderThroughDOMStream(options) {\n    return new BuilderTransform(options);\n}\nexports.builderThroughDOMStream = builderThroughDOMStream;\n/** @ignore */\nclass BuilderTransform {\n    constructor(options) {\n        // Access properties by string indexers to defeat closure compiler\n        this._numChunks = 0;\n        this._finished = false;\n        this._bufferedSize = 0;\n        const { ['readableStrategy']: readableStrategy, ['writableStrategy']: writableStrategy, ['queueingStrategy']: queueingStrategy = 'count', ...builderOptions } = options;\n        this._controller = null;\n        this._builder = index_1.Builder.new(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n        this['readable'] = new ReadableStream({\n            ['cancel']: () => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n    _writeValueAndReturnChunkSize(value) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n    _maybeFlush(builder, controller) {\n        if (controller === null) {\n            return;\n        }\n        if (this._bufferedSize >= controller.desiredSize) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n    _enqueue(controller, chunk) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\nexports.BuilderTransform = BuilderTransform;\n/** @ignore */ const chunkLength = (chunk) => chunk.length;\n/** @ignore */ const chunkByteLength = (chunk) => chunk.byteLength;\n\n//# sourceMappingURL=builder.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass DateBuilder extends builder_1.FixedWidthBuilder {\n}\nexports.DateBuilder = DateBuilder;\n/** @ignore */\nclass DateDayBuilder extends DateBuilder {\n}\nexports.DateDayBuilder = DateDayBuilder;\n/** @ignore */\nclass DateMillisecondBuilder extends DateBuilder {\n}\nexports.DateMillisecondBuilder = DateMillisecondBuilder;\n\n//# sourceMappingURL=date.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typecomparator_1 = require(\"./visitor/typecomparator\");\nconst enum_1 = require(\"./enum\");\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nclass DataType {\n    /** @nocollapse */ static isNull(x) { return x && x.typeId === enum_1.Type.Null; }\n    /** @nocollapse */ static isInt(x) { return x && x.typeId === enum_1.Type.Int; }\n    /** @nocollapse */ static isFloat(x) { return x && x.typeId === enum_1.Type.Float; }\n    /** @nocollapse */ static isBinary(x) { return x && x.typeId === enum_1.Type.Binary; }\n    /** @nocollapse */ static isUtf8(x) { return x && x.typeId === enum_1.Type.Utf8; }\n    /** @nocollapse */ static isBool(x) { return x && x.typeId === enum_1.Type.Bool; }\n    /** @nocollapse */ static isDecimal(x) { return x && x.typeId === enum_1.Type.Decimal; }\n    /** @nocollapse */ static isDate(x) { return x && x.typeId === enum_1.Type.Date; }\n    /** @nocollapse */ static isTime(x) { return x && x.typeId === enum_1.Type.Time; }\n    /** @nocollapse */ static isTimestamp(x) { return x && x.typeId === enum_1.Type.Timestamp; }\n    /** @nocollapse */ static isInterval(x) { return x && x.typeId === enum_1.Type.Interval; }\n    /** @nocollapse */ static isList(x) { return x && x.typeId === enum_1.Type.List; }\n    /** @nocollapse */ static isStruct(x) { return x && x.typeId === enum_1.Type.Struct; }\n    /** @nocollapse */ static isUnion(x) { return x && x.typeId === enum_1.Type.Union; }\n    /** @nocollapse */ static isFixedSizeBinary(x) { return x && x.typeId === enum_1.Type.FixedSizeBinary; }\n    /** @nocollapse */ static isFixedSizeList(x) { return x && x.typeId === enum_1.Type.FixedSizeList; }\n    /** @nocollapse */ static isMap(x) { return x && x.typeId === enum_1.Type.Map; }\n    /** @nocollapse */ static isDictionary(x) { return x && x.typeId === enum_1.Type.Dictionary; }\n    get typeId() { return enum_1.Type.NONE; }\n    compareTo(other) {\n        return typecomparator_1.instance.visit(this, other);\n    }\n}\nDataType[Symbol.toStringTag] = ((proto) => {\n    proto.children = null;\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\nexports.DataType = DataType;\n/** @ignore */\nclass Null extends DataType {\n    toString() { return `Null`; }\n    get typeId() { return enum_1.Type.Null; }\n}\nNull[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\nexports.Null = Null;\n/** @ignore */\nclass Int_ extends DataType {\n    constructor(isSigned, bitWidth) {\n        super();\n        this.isSigned = isSigned;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() { return enum_1.Type.Int; }\n    get ArrayType() {\n        switch (this.bitWidth) {\n            case 8: return this.isSigned ? Int8Array : Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n}\nInt_[Symbol.toStringTag] = ((proto) => {\n    proto.isSigned = null;\n    proto.bitWidth = null;\n    return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexports.Int = Int_;\n/** @ignore */\nclass Int8 extends Int_ {\n    constructor() { super(true, 8); }\n}\nexports.Int8 = Int8;\n/** @ignore */\nclass Int16 extends Int_ {\n    constructor() { super(true, 16); }\n}\nexports.Int16 = Int16;\n/** @ignore */\nclass Int32 extends Int_ {\n    constructor() { super(true, 32); }\n}\nexports.Int32 = Int32;\n/** @ignore */\nclass Int64 extends Int_ {\n    constructor() { super(true, 64); }\n}\nexports.Int64 = Int64;\n/** @ignore */\nclass Uint8 extends Int_ {\n    constructor() { super(false, 8); }\n}\nexports.Uint8 = Uint8;\n/** @ignore */\nclass Uint16 extends Int_ {\n    constructor() { super(false, 16); }\n}\nexports.Uint16 = Uint16;\n/** @ignore */\nclass Uint32 extends Int_ {\n    constructor() { super(false, 32); }\n}\nexports.Uint32 = Uint32;\n/** @ignore */\nclass Uint64 extends Int_ {\n    constructor() { super(false, 64); }\n}\nexports.Uint64 = Uint64;\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n/** @ignore */\nclass Float extends DataType {\n    constructor(precision) {\n        super();\n        this.precision = precision;\n    }\n    get typeId() { return enum_1.Type.Float; }\n    get ArrayType() {\n        switch (this.precision) {\n            case enum_1.Precision.HALF: return Uint16Array;\n            case enum_1.Precision.SINGLE: return Float32Array;\n            case enum_1.Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `Float${(this.precision << 5) || 16}`; }\n}\nFloat[Symbol.toStringTag] = ((proto) => {\n    proto.precision = null;\n    return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\nexports.Float = Float;\n/** @ignore */\nclass Float16 extends Float {\n    constructor() { super(enum_1.Precision.HALF); }\n}\nexports.Float16 = Float16;\n/** @ignore */\nclass Float32 extends Float {\n    constructor() { super(enum_1.Precision.SINGLE); }\n}\nexports.Float32 = Float32;\n/** @ignore */\nclass Float64 extends Float {\n    constructor() { super(enum_1.Precision.DOUBLE); }\n}\nexports.Float64 = Float64;\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n/** @ignore */\nclass Binary extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return enum_1.Type.Binary; }\n    toString() { return `Binary`; }\n}\nBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\nexports.Binary = Binary;\n/** @ignore */\nclass Utf8 extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return enum_1.Type.Utf8; }\n    toString() { return `Utf8`; }\n}\nUtf8[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\nexports.Utf8 = Utf8;\n/** @ignore */\nclass Bool extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return enum_1.Type.Bool; }\n    toString() { return `Bool`; }\n}\nBool[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\nexports.Bool = Bool;\n/** @ignore */\nclass Decimal extends DataType {\n    constructor(scale, precision) {\n        super();\n        this.scale = scale;\n        this.precision = precision;\n    }\n    get typeId() { return enum_1.Type.Decimal; }\n    toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n}\nDecimal[Symbol.toStringTag] = ((proto) => {\n    proto.scale = null;\n    proto.precision = null;\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\nexports.Decimal = Decimal;\n/** @ignore */\nclass Date_ extends DataType {\n    constructor(unit) {\n        super();\n        this.unit = unit;\n    }\n    get typeId() { return enum_1.Type.Date; }\n    toString() { return `Date${(this.unit + 1) * 32}<${enum_1.DateUnit[this.unit]}>`; }\n}\nDate_[Symbol.toStringTag] = ((proto) => {\n    proto.unit = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\nexports.Date_ = Date_;\n/** @ignore */\nclass DateDay extends Date_ {\n    constructor() { super(enum_1.DateUnit.DAY); }\n}\nexports.DateDay = DateDay;\n/** @ignore */\nclass DateMillisecond extends Date_ {\n    constructor() { super(enum_1.DateUnit.MILLISECOND); }\n}\nexports.DateMillisecond = DateMillisecond;\n/** @ignore */\nclass Time_ extends DataType {\n    constructor(unit, bitWidth) {\n        super();\n        this.unit = unit;\n        this.bitWidth = bitWidth;\n    }\n    get typeId() { return enum_1.Type.Time; }\n    toString() { return `Time${this.bitWidth}<${enum_1.TimeUnit[this.unit]}>`; }\n}\nTime_[Symbol.toStringTag] = ((proto) => {\n    proto.unit = null;\n    proto.bitWidth = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexports.Time = Time_;\n/** @ignore */\nclass TimeSecond extends Time_ {\n    constructor() { super(enum_1.TimeUnit.SECOND, 32); }\n}\nexports.TimeSecond = TimeSecond;\n/** @ignore */\nclass TimeMillisecond extends Time_ {\n    constructor() { super(enum_1.TimeUnit.MILLISECOND, 32); }\n}\nexports.TimeMillisecond = TimeMillisecond;\n/** @ignore */\nclass TimeMicrosecond extends Time_ {\n    constructor() { super(enum_1.TimeUnit.MICROSECOND, 64); }\n}\nexports.TimeMicrosecond = TimeMicrosecond;\n/** @ignore */\nclass TimeNanosecond extends Time_ {\n    constructor() { super(enum_1.TimeUnit.NANOSECOND, 64); }\n}\nexports.TimeNanosecond = TimeNanosecond;\n/** @ignore */\nclass Timestamp_ extends DataType {\n    constructor(unit, timezone) {\n        super();\n        this.unit = unit;\n        this.timezone = timezone;\n    }\n    get typeId() { return enum_1.Type.Timestamp; }\n    toString() { return `Timestamp<${enum_1.TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n}\nTimestamp_[Symbol.toStringTag] = ((proto) => {\n    proto.unit = null;\n    proto.timezone = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexports.Timestamp = Timestamp_;\n/** @ignore */\nclass TimestampSecond extends Timestamp_ {\n    constructor(timezone) { super(enum_1.TimeUnit.SECOND, timezone); }\n}\nexports.TimestampSecond = TimestampSecond;\n/** @ignore */\nclass TimestampMillisecond extends Timestamp_ {\n    constructor(timezone) { super(enum_1.TimeUnit.MILLISECOND, timezone); }\n}\nexports.TimestampMillisecond = TimestampMillisecond;\n/** @ignore */\nclass TimestampMicrosecond extends Timestamp_ {\n    constructor(timezone) { super(enum_1.TimeUnit.MICROSECOND, timezone); }\n}\nexports.TimestampMicrosecond = TimestampMicrosecond;\n/** @ignore */\nclass TimestampNanosecond extends Timestamp_ {\n    constructor(timezone) { super(enum_1.TimeUnit.NANOSECOND, timezone); }\n}\nexports.TimestampNanosecond = TimestampNanosecond;\n/** @ignore */\nclass Interval_ extends DataType {\n    constructor(unit) {\n        super();\n        this.unit = unit;\n    }\n    get typeId() { return enum_1.Type.Interval; }\n    toString() { return `Interval<${enum_1.IntervalUnit[this.unit]}>`; }\n}\nInterval_[Symbol.toStringTag] = ((proto) => {\n    proto.unit = null;\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexports.Interval = Interval_;\n/** @ignore */\nclass IntervalDayTime extends Interval_ {\n    constructor() { super(enum_1.IntervalUnit.DAY_TIME); }\n}\nexports.IntervalDayTime = IntervalDayTime;\n/** @ignore */\nclass IntervalYearMonth extends Interval_ {\n    constructor() { super(enum_1.IntervalUnit.YEAR_MONTH); }\n}\nexports.IntervalYearMonth = IntervalYearMonth;\n/** @ignore */\nclass List extends DataType {\n    constructor(child) {\n        super();\n        this.children = [child];\n    }\n    get typeId() { return enum_1.Type.List; }\n    toString() { return `List<${this.valueType}>`; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n}\nList[Symbol.toStringTag] = ((proto) => {\n    proto.children = null;\n    return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\nexports.List = List;\n/** @ignore */\nclass Struct extends DataType {\n    constructor(children) {\n        super();\n        this.children = children;\n        this.children = children;\n    }\n    get typeId() { return enum_1.Type.Struct; }\n    toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n}\nStruct[Symbol.toStringTag] = ((proto) => {\n    proto.children = null;\n    return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\nexports.Struct = Struct;\n/** @ignore */\nclass Union_ extends DataType {\n    constructor(mode, typeIds, children) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null));\n    }\n    get typeId() { return enum_1.Type.Union; }\n    toString() {\n        return `${this[Symbol.toStringTag]}<${this.children.map((x) => `${x.type}`).join(` | `)}>`;\n    }\n}\nUnion_[Symbol.toStringTag] = ((proto) => {\n    proto.mode = null;\n    proto.typeIds = null;\n    proto.children = null;\n    proto.typeIdToChildIndex = null;\n    proto.ArrayType = Int8Array;\n    return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexports.Union = Union_;\n/** @ignore */\nclass DenseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(enum_1.UnionMode.Dense, typeIds, children);\n    }\n}\nexports.DenseUnion = DenseUnion;\n/** @ignore */\nclass SparseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(enum_1.UnionMode.Sparse, typeIds, children);\n    }\n}\nexports.SparseUnion = SparseUnion;\n/** @ignore */\nclass FixedSizeBinary extends DataType {\n    constructor(byteWidth) {\n        super();\n        this.byteWidth = byteWidth;\n    }\n    get typeId() { return enum_1.Type.FixedSizeBinary; }\n    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n}\nFixedSizeBinary[Symbol.toStringTag] = ((proto) => {\n    proto.byteWidth = null;\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\nexports.FixedSizeBinary = FixedSizeBinary;\n/** @ignore */\nclass FixedSizeList extends DataType {\n    constructor(listSize, child) {\n        super();\n        this.listSize = listSize;\n        this.children = [child];\n    }\n    get typeId() { return enum_1.Type.FixedSizeList; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n    toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n}\nFixedSizeList[Symbol.toStringTag] = ((proto) => {\n    proto.children = null;\n    proto.listSize = null;\n    return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\nexports.FixedSizeList = FixedSizeList;\n/** @ignore */\nclass Map_ extends DataType {\n    constructor(child, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    get typeId() { return enum_1.Type.Map; }\n    get keyType() { return this.children[0].type.children[0].type; }\n    get valueType() { return this.children[0].type.children[1].type; }\n    toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n}\nMap_[Symbol.toStringTag] = ((proto) => {\n    proto.children = null;\n    proto.keysSorted = null;\n    return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\nexports.Map_ = Map_;\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n/** @ignore */\nclass Dictionary extends DataType {\n    constructor(dictionary, indices, id, isOrdered) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    get typeId() { return enum_1.Type.Dictionary; }\n    get children() { return this.dictionary.children; }\n    get valueType() { return this.dictionary; }\n    get ArrayType() { return this.dictionary.ArrayType; }\n    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n}\nDictionary[Symbol.toStringTag] = ((proto) => {\n    proto.id = null;\n    proto.indices = null;\n    proto.isOrdered = null;\n    proto.dictionary = null;\n    return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\nexports.Dictionary = Dictionary;\n/** @ignore */\nfunction strideForType(type) {\n    let t = type;\n    switch (type.typeId) {\n        case enum_1.Type.Decimal: return 4;\n        case enum_1.Type.Timestamp: return 2;\n        case enum_1.Type.Date: return 1 + t.unit;\n        case enum_1.Type.Interval: return 1 + t.unit;\n        case enum_1.Type.Int: return 1 + +(t.bitWidth > 32);\n        case enum_1.Type.Time: return 1 + +(t.bitWidth > 32);\n        case enum_1.Type.FixedSizeList: return t.listSize;\n        case enum_1.Type.FixedSizeBinary: return t.byteWidth;\n        default: return 1;\n    }\n}\nexports.strideForType = strideForType;\n\n//# sourceMappingURL=type.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"../vector\");\nconst row_1 = require(\"../vector/row\");\nconst buffer_1 = require(\"../util/buffer\");\nconst compat_1 = require(\"./compat\");\n/** @ignore */\nfunction clampIndex(source, index, then) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\nexports.clampIndex = clampIndex;\n/** @ignore */\nlet tmp;\n/** @ignore */\nfunction clampRange(source, begin, end, then) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n    // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\nexports.clampRange = clampRange;\nconst big0 = compat_1.BigIntAvailable ? compat_1.BigInt(0) : 0;\nconst isNaNFast = (value) => value !== value;\n/** @ignore */\nfunction createElementComparator(search) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value) => value === search\n            : (value) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value) => value ? buffer_1.compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) {\n        return creatMapComparator(search);\n    }\n    // Compare Array-likes\n    if (Array.isArray(search)) {\n        return createArrayLikeComparator(search);\n    }\n    // Compare Vectors\n    if (search instanceof vector_1.Vector) {\n        return createVectorComparator(search);\n    }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\nexports.createElementComparator = createElementComparator;\n/** @ignore */\nfunction createArrayLikeComparator(lhs) {\n    const comparitors = [];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparitors[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparitors);\n}\n/** @ignore */\nfunction creatMapComparator(lhs) {\n    let i = -1;\n    const comparitors = [];\n    lhs.forEach((v) => comparitors[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparitors);\n}\n/** @ignore */\nfunction createVectorComparator(lhs) {\n    const comparitors = [];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparitors[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparitors);\n}\n/** @ignore */\nfunction createObjectComparator(lhs) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) {\n        return () => false;\n    }\n    const comparitors = [];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparitors[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparitors, keys);\n}\nfunction createSubElementsComparator(comparitors, keys) {\n    return (rhs) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparitors, rhs);\n            case Map:\n            case row_1.MapRow:\n            case row_1.StructRow:\n                return compareObject(comparitors, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparitors, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof vector_1.Vector ? compareVector(comparitors, rhs) : false;\n    };\n}\nfunction compareArray(comparitors, arr) {\n    const n = comparitors.length;\n    if (arr.length !== n) {\n        return false;\n    }\n    for (let i = -1; ++i < n;) {\n        if (!(comparitors[i](arr[i]))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareVector(comparitors, vec) {\n    const n = comparitors.length;\n    if (vec.length !== n) {\n        return false;\n    }\n    for (let i = -1; ++i < n;) {\n        if (!(comparitors[i](vec.get(i)))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObject(comparitors, obj, keys) {\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n    let i = 0;\n    let n = comparitors.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done; ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparitors[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n\n//# sourceMappingURL=vector.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst schema_1 = require(\"../../schema\");\nconst type_1 = require(\"../../type\");\nconst message_1 = require(\"./message\");\nconst enum_1 = require(\"../../enum\");\n/** @ignore */\nfunction schemaFromJSON(_schema, dictionaries = new Map()) {\n    return new schema_1.Schema(schemaFieldsFromJSON(_schema, dictionaries), customMetadataFromJSON(_schema['customMetadata']), dictionaries);\n}\nexports.schemaFromJSON = schemaFromJSON;\n/** @ignore */\nfunction recordBatchFromJSON(b) {\n    return new message_1.RecordBatch(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));\n}\nexports.recordBatchFromJSON = recordBatchFromJSON;\n/** @ignore */\nfunction dictionaryBatchFromJSON(b) {\n    return new message_1.DictionaryBatch(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);\n}\nexports.dictionaryBatchFromJSON = dictionaryBatchFromJSON;\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema, dictionaries) {\n    return (_schema['fields'] || []).filter(Boolean).map((f) => schema_1.Field.fromJSON(f, dictionaries));\n}\n/** @ignore */\nfunction fieldChildrenFromJSON(_field, dictionaries) {\n    return (_field['children'] || []).filter(Boolean).map((f) => schema_1.Field.fromJSON(f, dictionaries));\n}\n/** @ignore */\nfunction fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column) => [\n        ...fieldNodes,\n        new message_1.FieldNode(column['count'], nullCountFromJSON(column['VALIDITY'])),\n        ...fieldNodesFromJSON(column['children'])\n    ], []);\n}\n/** @ignore */\nfunction buffersFromJSON(xs, buffers = []) {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new message_1.BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new message_1.BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new message_1.BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new message_1.BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n/** @ignore */\nfunction nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n/** @ignore */\nfunction fieldFromJSON(_field, dictionaries) {\n    let id;\n    let keys;\n    let field;\n    let dictMeta;\n    let type;\n    let dictType;\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new schema_1.Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new type_1.Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new type_1.Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new schema_1.Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new type_1.Int32();\n        dictType = new type_1.Dictionary(dictionaries.get(id), keys, id, dictMeta['isOrdered']);\n        field = new schema_1.Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\nexports.fieldFromJSON = fieldFromJSON;\n/** @ignore */\nfunction customMetadataFromJSON(_metadata) {\n    return new Map(Object.entries(_metadata || {}));\n}\n/** @ignore */\nfunction indexTypeFromJSON(_type) {\n    return new type_1.Int(_type['isSigned'], _type['bitWidth']);\n}\n/** @ignore */\nfunction typeFromJSON(f, children) {\n    const typeId = f['type']['name'];\n    switch (typeId) {\n        case 'NONE': return new type_1.Null();\n        case 'null': return new type_1.Null();\n        case 'binary': return new type_1.Binary();\n        case 'utf8': return new type_1.Utf8();\n        case 'bool': return new type_1.Bool();\n        case 'list': return new type_1.List((children || [])[0]);\n        case 'struct': return new type_1.Struct(children || []);\n        case 'struct_': return new type_1.Struct(children || []);\n    }\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new type_1.Int(t['isSigned'], t['bitWidth']);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new type_1.Float(enum_1.Precision[t['precision']]);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new type_1.Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new type_1.Date_(enum_1.DateUnit[t['unit']]);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new type_1.Time(enum_1.TimeUnit[t['unit']], t['bitWidth']);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new type_1.Timestamp(enum_1.TimeUnit[t['unit']], t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new type_1.Interval(enum_1.IntervalUnit[t['unit']]);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new type_1.Union(enum_1.UnionMode[t['mode']], (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new type_1.FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new type_1.FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new type_1.Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n\n//# sourceMappingURL=json.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst flatbuffers_1 = require(\"flatbuffers\");\nconst Schema_ = require(\"../../fb/Schema\");\nconst Message_ = require(\"../../fb/Message\");\nconst schema_1 = require(\"../../schema\");\nconst buffer_1 = require(\"../../util/buffer\");\nconst enum_1 = require(\"../../enum\");\nconst typeassembler_1 = require(\"../../visitor/typeassembler\");\nconst json_1 = require(\"./json\");\nvar Long = flatbuffers_1.flatbuffers.Long;\nvar Builder = flatbuffers_1.flatbuffers.Builder;\nvar ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nconst type_1 = require(\"../../type\");\n/**\n * @ignore\n * @private\n **/\nclass Message {\n    constructor(bodyLength, version, headerType, header) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */\n    static fromJSON(msg, headerType) {\n        const message = new Message(0, enum_1.MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(buffer_1.toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength = _message.bodyLength();\n        const version = _message.version();\n        const headerType = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static encode(message) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = schema_1.Schema.encode(b, message.header());\n        }\n        else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header());\n        }\n        else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header());\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, enum_1.MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n    /** @nocollapse */\n    static from(header, bodyLength = 0) {\n        if (header instanceof schema_1.Schema) {\n            return new Message(0, enum_1.MetadataVersion.V4, enum_1.MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, enum_1.MetadataVersion.V4, enum_1.MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, enum_1.MetadataVersion.V4, enum_1.MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n    get type() { return this.headerType; }\n    get version() { return this._version; }\n    get headerType() { return this._headerType; }\n    get bodyLength() { return this._bodyLength; }\n    header() { return this._createHeader(); }\n    isSchema() { return this.headerType === enum_1.MessageHeader.Schema; }\n    isRecordBatch() { return this.headerType === enum_1.MessageHeader.RecordBatch; }\n    isDictionaryBatch() { return this.headerType === enum_1.MessageHeader.DictionaryBatch; }\n}\nexports.Message = Message;\n/**\n * @ignore\n * @private\n **/\nclass RecordBatch {\n    get nodes() { return this._nodes; }\n    get length() { return this._length; }\n    get buffers() { return this._buffers; }\n    constructor(length, nodes, buffers) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\nexports.RecordBatch = RecordBatch;\n/**\n * @ignore\n * @private\n **/\nclass DictionaryBatch {\n    get id() { return this._id; }\n    get data() { return this._data; }\n    get isDelta() { return this._isDelta; }\n    get length() { return this.data.length; }\n    get nodes() { return this.data.nodes; }\n    get buffers() { return this.data.buffers; }\n    constructor(data, id, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\nexports.DictionaryBatch = DictionaryBatch;\n/**\n * @ignore\n * @private\n **/\nclass BufferRegion {\n    constructor(offset, length) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\nexports.BufferRegion = BufferRegion;\n/**\n * @ignore\n * @private\n **/\nclass FieldNode {\n    constructor(length, nullCount) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\nexports.FieldNode = FieldNode;\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n    return (() => {\n        switch (type) {\n            case enum_1.MessageHeader.Schema: return schema_1.Schema.fromJSON(message);\n            case enum_1.MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case enum_1.MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${enum_1.MessageHeader[type]}, type: ${type} }`);\n    });\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n    return (() => {\n        switch (type) {\n            case enum_1.MessageHeader.Schema: return schema_1.Schema.decode(message.header(new _Schema()));\n            case enum_1.MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n            case enum_1.MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${enum_1.MessageHeader[type]}, type: ${type} }`);\n    });\n}\nschema_1.Field['encode'] = encodeField;\nschema_1.Field['decode'] = decodeField;\nschema_1.Field['fromJSON'] = json_1.fieldFromJSON;\nschema_1.Schema['encode'] = encodeSchema;\nschema_1.Schema['decode'] = decodeSchema;\nschema_1.Schema['fromJSON'] = json_1.schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = json_1.recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = json_1.dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema, dictionaries = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new schema_1.Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch, version = enum_1.MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch, version = enum_1.MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n    return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n    const nodes = [];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n    const bufferRegions = [];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n            // If this Arrow buffer was written before version 4,\n            // advance the buffer's bb_pos 8 bytes to skip past\n            // the now-removed page_id field\n            if (version < enum_1.MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n    const fields = [];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = schema_1.Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n    const children = [];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = schema_1.Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n    let id;\n    let field;\n    let type;\n    let keys;\n    let dictType;\n    let dictMeta;\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new schema_1.Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1.Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new type_1.Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new schema_1.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1.Int32();\n        dictType = new type_1.Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n        field = new schema_1.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value());\n            }\n        }\n    }\n    return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n    return new type_1.Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n    const typeId = f.typeType();\n    switch (typeId) {\n        case Type.NONE: return new type_1.Null();\n        case Type.Null: return new type_1.Null();\n        case Type.Binary: return new type_1.Binary();\n        case Type.Utf8: return new type_1.Utf8();\n        case Type.Bool: return new type_1.Bool();\n        case Type.List: return new type_1.List((children || [])[0]);\n        case Type.Struct_: return new type_1.Struct(children || []);\n    }\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n            return new type_1.Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n            return new type_1.Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n            return new type_1.Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n            return new type_1.Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n            return new type_1.Time(t.unit(), t.bitWidth());\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n            return new type_1.Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n            return new type_1.Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n            return new type_1.Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n            return new type_1.FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n            return new type_1.FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n            return new type_1.Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n    const fieldOffsets = schema.fields.map((f) => schema_1.Field.encode(b, f));\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n    if (metadataOffset !== -1) {\n        _Schema.addCustomMetadata(b, metadataOffset);\n    }\n    return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n    let type = field.type;\n    let typeId = field.typeId;\n    if (!type_1.DataType.isDictionary(type)) {\n        typeOffset = typeassembler_1.instance.visit(type, b);\n    }\n    else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeassembler_1.instance.visit(type, b);\n        typeOffset = typeassembler_1.instance.visit(type.dictionary, b);\n    }\n    const childOffsets = (type.children || []).map((f) => schema_1.Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n    if (nameOffset !== -1) {\n        _Field.addName(b, nameOffset);\n    }\n    if (dictionaryOffset !== -1) {\n        _Field.addDictionary(b, dictionaryOffset);\n    }\n    if (metadataOffset !== -1) {\n        _Field.addCustomMetadata(b, metadataOffset);\n    }\n    return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n    const nodesVectorOffset = b.endVector();\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n    const buffersVectorOffset = b.endVector();\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nconst platformIsLittleEndian = (function () {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n//# sourceMappingURL=message.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass TimeVector extends base_1.BaseVector {\n}\nexports.TimeVector = TimeVector;\n/** @ignore */\nclass TimeSecondVector extends TimeVector {\n}\nexports.TimeSecondVector = TimeSecondVector;\n/** @ignore */\nclass TimeMillisecondVector extends TimeVector {\n}\nexports.TimeMillisecondVector = TimeMillisecondVector;\n/** @ignore */\nclass TimeMicrosecondVector extends TimeVector {\n}\nexports.TimeMicrosecondVector = TimeMicrosecondVector;\n/** @ignore */\nclass TimeNanosecondVector extends TimeVector {\n}\nexports.TimeNanosecondVector = TimeNanosecondVector;\n\n//# sourceMappingURL=time.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nfunction uint16ToFloat64(h) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\nexports.uint16ToFloat64 = uint16ToFloat64;\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nfunction float64ToUint16(d) {\n    if (d !== d) {\n        return 0x7E00;\n    } // NaN\n    f64[0] = d;\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        }\n        else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    }\n    else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    }\n    else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n    return sign | expo | sigf & 0xFFFF;\n}\nexports.float64ToUint16 = float64ToUint16;\n\n//# sourceMappingURL=math.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"../util/vector\");\nconst type_1 = require(\"../type\");\nconst args_1 = require(\"../util/args\");\nconst vector_2 = require(\"../vector\");\n/** @ignore */\nclass Chunked extends vector_2.AbstractVector {\n    constructor(type, chunks = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._nullCount = -1;\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n    /** @nocollapse */\n    static flatten(...vectors) {\n        return args_1.selectChunkArgs(vector_2.Vector, vectors);\n    }\n    /** @nocollapse */\n    static concat(...vectors) {\n        const chunks = Chunked.flatten(...vectors);\n        return new Chunked(chunks[0].type, chunks);\n    }\n    get type() { return this._type; }\n    get length() { return this._length; }\n    get chunks() { return this._chunks; }\n    get typeId() { return this._type.typeId; }\n    get VectorName() { return `Chunked<${this._type}>`; }\n    get data() {\n        return this._chunks[0] ? this._chunks[0].data : null;\n    }\n    get ArrayType() { return this._type.ArrayType; }\n    get numChildren() { return this._numChildren; }\n    get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    get byteLength() {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n    get indices() {\n        if (type_1.DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = this._chunks;\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices)));\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    get dictionary() {\n        if (type_1.DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary;\n        }\n        return null;\n    }\n    *[Symbol.iterator]() {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n    clone(chunks = this._chunks) {\n        return new Chunked(this._type, chunks);\n    }\n    concat(...others) {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n    slice(begin, end) {\n        return vector_1.clampRange(this, begin, end, this._sliceInternal);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this._numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let child, field, chunks;\n        if (child = columns[index]) {\n            return child;\n        }\n        if (field = (this._type.children || [])[index]) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked(field.type, chunks));\n            }\n        }\n        return null;\n    }\n    search(index, then) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0) {\n            return null;\n        }\n        if (idx >= offsets[rhs]) {\n            return null;\n        }\n        if (rhs <= 1) {\n            return then ? then(this, 0, idx) : [0, idx];\n        }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n    isValid(index) {\n        return !!this.search(index, this.isValidInternal);\n    }\n    get(index) {\n        return this.search(index, this.getInternal);\n    }\n    set(index, value) {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n    indexOf(element, offset) {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element));\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n    toArray() {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType = this._type.ArrayType;\n        if (n <= 0) {\n            return new ArrayType(0);\n        }\n        if (n <= 1) {\n            return chunks[0].toArray();\n        }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n    getInternal({ _chunks }, i, j) { return _chunks[i].get(j); }\n    isValidInternal({ _chunks }, i, j) { return _chunks[i].isValid(j); }\n    indexOfInternal({ _chunks }, chunkIndex, fromIndex, element) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n    _sliceInternal(self, begin, end) {\n        const slices = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) {\n                break;\n            }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) {\n                continue;\n            }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to));\n        }\n        return self.clone(slices);\n    }\n}\nexports.Chunked = Chunked;\n/** @ignore */\nfunction calculateOffsets(vectors) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n/** @ignore */\nconst typedSet = (src, dst, offset) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n/** @ignore */\nconst arraySet = (src, dst, offset) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n//# sourceMappingURL=chunked.js.map\n","\"use strict\";\n// automatically generated by the FlatBuffers compiler, do not modify\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NS7624605610262437867 = require(\"./Schema\");\nvar org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MessageHeader;\n                (function (MessageHeader) {\n                    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n                    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n                    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n                    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n                    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n                    MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FieldNode {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns FieldNode\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The number of value slots in the Arrow array at this level of a nested\n                     * tree\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The number of observed nulls. Fields with null_count == 0 may choose not\n                     * to write their physical validity bitmap out as a materialized buffer,\n                     * instead setting the length of the bitmap buffer to 0.\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    nullCount() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Long length\n                     * @param flatbuffers.Long null_count\n                     * @returns flatbuffers.Offset\n                     */\n                    static createFieldNode(builder, length, null_count) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(null_count);\n                        builder.writeInt64(length);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.FieldNode = FieldNode;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class RecordBatch {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns RecordBatch\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param RecordBatch= obj\n                     * @returns RecordBatch\n                     */\n                    static getRootAsRecordBatch(bb, obj) {\n                        return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * number of records / rows. The arrays in the batch should all have this\n                     * length\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    length() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * Nodes correspond to the pre-ordered flattened logical schema\n                     *\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.FieldNode= obj\n                     * @returns org.apache.arrow.flatbuf.FieldNode\n                     */\n                    nodes(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    nodesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Buffers correspond to the pre-ordered flattened buffer tree\n                     *\n                     * The number of buffers appended to this list depends on the schema. For\n                     * example, most primitive arrays will have 2 buffers, 1 for the validity\n                     * bitmap and 1 for the values. For struct arrays, there will only be a\n                     * single buffer for the validity (nulls) bitmap\n                     *\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.Buffer= obj\n                     * @returns org.apache.arrow.flatbuf.Buffer\n                     */\n                    buffers(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    buffersLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startRecordBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Long length\n                     */\n                    static addLength(builder, length) {\n                        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset nodesOffset\n                     */\n                    static addNodes(builder, nodesOffset) {\n                        builder.addFieldOffset(1, nodesOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startNodesVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset buffersOffset\n                     */\n                    static addBuffers(builder, buffersOffset) {\n                        builder.addFieldOffset(2, buffersOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startBuffersVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endRecordBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createRecordBatch(builder, length, nodesOffset, buffersOffset) {\n                        RecordBatch.startRecordBatch(builder);\n                        RecordBatch.addLength(builder, length);\n                        RecordBatch.addNodes(builder, nodesOffset);\n                        RecordBatch.addBuffers(builder, buffersOffset);\n                        return RecordBatch.endRecordBatch(builder);\n                    }\n                }\n                flatbuf.RecordBatch = RecordBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryBatch {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns DictionaryBatch\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param DictionaryBatch= obj\n                     * @returns DictionaryBatch\n                     */\n                    static getRootAsDictionaryBatch(bb, obj) {\n                        return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns flatbuffers.Long\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param org.apache.arrow.flatbuf.RecordBatch= obj\n                     * @returns org.apache.arrow.flatbuf.RecordBatch|null\n                     */\n                    data(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * If isDelta is true the values in the dictionary are to be appended to a\n                     * dictionary with the indicated id\n                     *\n                     * @returns boolean\n                     */\n                    isDelta() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startDictionaryBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Long id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset dataOffset\n                     */\n                    static addData(builder, dataOffset) {\n                        builder.addFieldOffset(1, dataOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param boolean isDelta\n                     */\n                    static addIsDelta(builder, isDelta) {\n                        builder.addFieldInt8(2, +isDelta, +false);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endDictionaryBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    static createDictionaryBatch(builder, id, dataOffset, isDelta) {\n                        DictionaryBatch.startDictionaryBatch(builder);\n                        DictionaryBatch.addId(builder, id);\n                        DictionaryBatch.addData(builder, dataOffset);\n                        DictionaryBatch.addIsDelta(builder, isDelta);\n                        return DictionaryBatch.endDictionaryBatch(builder);\n                    }\n                }\n                flatbuf.DictionaryBatch = DictionaryBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Message {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Message\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Message= obj\n                     * @returns Message\n                     */\n                    static getRootAsMessage(bb, obj) {\n                        return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.MetadataVersion\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.MessageHeader\n                     */\n                    headerType() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n                    }\n                    /**\n                     * @param flatbuffers.Table obj\n                     * @returns ?flatbuffers.Table\n                     */\n                    header(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @returns flatbuffers.Long\n                     */\n                    bodyLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.KeyValue= obj\n                     * @returns org.apache.arrow.flatbuf.KeyValue\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startMessage(builder) {\n                        builder.startObject(5);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.MetadataVersion version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.MessageHeader headerType\n                     */\n                    static addHeaderType(builder, headerType) {\n                        builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset headerOffset\n                     */\n                    static addHeader(builder, headerOffset) {\n                        builder.addFieldOffset(2, headerOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Long bodyLength\n                     */\n                    static addBodyLength(builder, bodyLength) {\n                        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(4, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param Array.<flatbuffers.Offset> data\n                     * @returns flatbuffers.Offset\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endMessage(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset offset\n                     */\n                    static finishMessageBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                    static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n                        Message.startMessage(builder);\n                        Message.addVersion(builder, version);\n                        Message.addHeaderType(builder, headerType);\n                        Message.addHeader(builder, headerOffset);\n                        Message.addBodyLength(builder, bodyLength);\n                        Message.addCustomMetadata(builder, customMetadataOffset);\n                        return Message.endMessage(builder);\n                    }\n                }\n                flatbuf.Message = Message;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n\n//# sourceMappingURL=Message.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst schema_1 = require(\"./schema\");\nconst vector_1 = require(\"./vector\");\nconst chunked_1 = require(\"./vector/chunked\");\nclass Column extends chunked_1.Chunked {\n    constructor(field, vectors = [], offsets) {\n        vectors = chunked_1.Chunked.flatten(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n    /** @nocollapse */\n    static new(field, data, ...rest) {\n        const chunks = chunked_1.Chunked.flatten(Array.isArray(data) ? [...data, ...rest] :\n            data instanceof vector_1.Vector ? [data, ...rest] :\n                [vector_1.Vector.new(data, ...rest)]);\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new schema_1.Field(field, type, true);\n        }\n        else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n    get field() { return this._field; }\n    get name() { return this._field.name; }\n    get nullable() { return this._field.nullable; }\n    get metadata() { return this._field.metadata; }\n    clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this.numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let column, field, chunks;\n        if (column = columns[index]) {\n            return column;\n        }\n        if (field = (this.type.children || [])[index]) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column(field, chunks));\n            }\n        }\n        return null;\n    }\n}\nexports.Column = Column;\n/** @ignore */\nclass SingleChunkColumn extends Column {\n    constructor(field, vector, offsets) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    search(index, then) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    isValid(index) {\n        return this._chunk.isValid(index);\n    }\n    get(index) {\n        return this._chunk.get(index);\n    }\n    set(index, value) {\n        this._chunk.set(index, value);\n    }\n    indexOf(element, offset) {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n\n//# sourceMappingURL=column.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"../util/buffer\");\nconst buffer_2 = require(\"./buffer\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass BinaryBuilder extends builder_1.VariableWidthBuilder {\n    constructor(opts) {\n        super(opts);\n        this._values = new buffer_2.BufferBuilder(new Uint8Array(0));\n    }\n    get byteLength() {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    setValue(index, value) {\n        return super.setValue(index, buffer_1.toUint8Array(value));\n    }\n    _flushPending(pending, pendingLength) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            }\n            else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\nexports.BinaryBuilder = BinaryBuilder;\n\n//# sourceMappingURL=binary.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst adapters_1 = require(\"./adapters\");\nconst utf8_1 = require(\"../util/utf8\");\nconst interfaces_1 = require(\"./interfaces\");\nconst buffer_1 = require(\"../util/buffer\");\nconst compat_1 = require(\"../util/compat\");\n/** @ignore */\nclass AsyncByteQueue extends interfaces_1.AsyncQueue {\n    write(value) {\n        if ((value = buffer_1.toUint8Array(value)).byteLength > 0) {\n            return super.write(value);\n        }\n    }\n    toString(sync = false) {\n        return sync\n            ? utf8_1.decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(utf8_1.decodeUtf8);\n    }\n    toUint8Array(sync = false) {\n        return sync ? buffer_1.joinUint8Arrays(this._values)[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return buffer_1.joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\nexports.AsyncByteQueue = AsyncByteQueue;\n/** @ignore */\nclass ByteStream {\n    constructor(source) {\n        if (source) {\n            this.source = new ByteStreamSource(adapters_1.default.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\nexports.ByteStream = ByteStream;\n/** @ignore */\nclass AsyncByteStream {\n    constructor(source) {\n        if (source instanceof AsyncByteStream) {\n            this.source = source.source;\n        }\n        else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));\n        }\n        else if (compat_1.isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(adapters_1.default.fromNodeStream(source));\n        }\n        else if (compat_1.isReadableDOMStream(source)) {\n            this.source = new AsyncByteStreamSource(adapters_1.default.fromDOMStream(source));\n        }\n        else if (compat_1.isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(adapters_1.default.fromDOMStream(source.body));\n        }\n        else if (compat_1.isIterable(source)) {\n            this.source = new AsyncByteStreamSource(adapters_1.default.fromIterable(source));\n        }\n        else if (compat_1.isPromise(source)) {\n            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));\n        }\n        else if (compat_1.isAsyncIterable(source)) {\n            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    get closed() { return this.source.closed; }\n    cancel(reason) { return this.source.cancel(reason); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\nexports.AsyncByteStream = AsyncByteStream;\n/** @ignore */\nclass ByteStreamSource {\n    constructor(source) {\n        this.source = source;\n    }\n    cancel(reason) { this.return(reason); }\n    peek(size) { return this.next(size, 'peek').value; }\n    read(size) { return this.next(size, 'read').value; }\n    next(size, cmd = 'read') { return this.source.next({ cmd, size }); }\n    throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || interfaces_1.ITERATOR_DONE); }\n    return(value) { return Object.create((this.source.return && this.source.return(value)) || interfaces_1.ITERATOR_DONE); }\n}\n/** @ignore */\nclass AsyncByteStreamSource {\n    constructor(source) {\n        this.source = source;\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    async cancel(reason) { await this.return(reason); }\n    get closed() { return this._closedPromise; }\n    async read(size) { return (await this.next(size, 'read')).value; }\n    async peek(size) { return (await this.next(size, 'peek')).value; }\n    async next(size, cmd = 'read') { return (await this.source.next({ cmd, size })); }\n    async throw(value) {\n        const result = (this.source.throw && await this.source.throw(value)) || interfaces_1.ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    async return(value) {\n        const result = (this.source.return && await this.source.return(value)) || interfaces_1.ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n\n//# sourceMappingURL=stream.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass FixedSizeListVector extends base_1.BaseVector {\n}\nexports.FixedSizeListVector = FixedSizeListVector;\n\n//# sourceMappingURL=fixedsizelist.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass TimestampBuilder extends builder_1.FixedWidthBuilder {\n}\nexports.TimestampBuilder = TimestampBuilder;\n/** @ignore */\nclass TimestampSecondBuilder extends TimestampBuilder {\n}\nexports.TimestampSecondBuilder = TimestampSecondBuilder;\n/** @ignore */\nclass TimestampMillisecondBuilder extends TimestampBuilder {\n}\nexports.TimestampMillisecondBuilder = TimestampMillisecondBuilder;\n/** @ignore */\nclass TimestampMicrosecondBuilder extends TimestampBuilder {\n}\nexports.TimestampMicrosecondBuilder = TimestampMicrosecondBuilder;\n/** @ignore */\nclass TimestampNanosecondBuilder extends TimestampBuilder {\n}\nexports.TimestampNanosecondBuilder = TimestampNanosecondBuilder;\n\n//# sourceMappingURL=timestamp.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass FixedSizeBinaryBuilder extends builder_1.FixedWidthBuilder {\n}\nexports.FixedSizeBinaryBuilder = FixedSizeBinaryBuilder;\n\n//# sourceMappingURL=fixedsizebinary.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"../../io/stream\");\n/** @ignore */\nfunction recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n    const writer = new this(writableStrategy);\n    const reader = new stream_1.AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n    async function next(controller) {\n        let buf = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\nexports.recordBatchWriterThroughDOMStream = recordBatchWriterThroughDOMStream;\n\n//# sourceMappingURL=writer.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass DecimalBuilder extends builder_1.FixedWidthBuilder {\n}\nexports.DecimalBuilder = DecimalBuilder;\n\n//# sourceMappingURL=decimal.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"./buffer\");\nconst compat_1 = require(\"./compat\");\n/** @ignore */\nexports.isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n/** @ignore */\nfunction BigNum(x, ...xs) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(buffer_1.toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\nBigNum.prototype[exports.isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function () { return `\"${exports.bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function () { return bignumToNumber(this); };\nBigNum.prototype.toString = function () { return exports.bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function (hint = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return exports.bignumToString(this);\n        case 'default': return exports.bignumToBigInt(this);\n    }\n    return exports.bignumToString(this);\n};\n/** @ignore */\nfunction SignedBigNum(...args) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(...args) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(...args) { return BigNum.apply(this, args); }\nObject.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype, BigNum.prototype, { 'constructor': SignedBigNum, 'signed': true, 'TypedArray': Int32Array, 'BigIntArray': compat_1.BigInt64Array });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': compat_1.BigUint64Array });\nObject.assign(DecimalBigNum.prototype, BigNum.prototype, { 'constructor': DecimalBigNum, 'signed': true, 'TypedArray': Uint32Array, 'BigIntArray': compat_1.BigUint64Array });\n/** @ignore */\nfunction bignumToNumber(bn) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\nif (!compat_1.BigIntAvailable) {\n    exports.bignumToString = decimalToString;\n    exports.bignumToBigInt = exports.bignumToString;\n}\nelse {\n    exports.bignumToBigInt = ((a) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a));\n    exports.bignumToString = ((a) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n/** @ignore */\nfunction decimalToString(a) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n/** @ignore */\nclass BN {\n    constructor(num, isSigned) {\n        return BN.new(num, isSigned);\n    }\n    /** @nocollapse */\n    static new(num, isSigned) {\n        switch (isSigned) {\n            case true: return new SignedBigNum(num);\n            case false: return new UnsignedBigNum(num);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case compat_1.BigInt64Array:\n                return new SignedBigNum(num);\n        }\n        if (num.byteLength === 16) {\n            return new DecimalBigNum(num);\n        }\n        return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n    static signed(num) {\n        return new SignedBigNum(num);\n    }\n    /** @nocollapse */\n    static unsigned(num) {\n        return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n    static decimal(num) {\n        return new DecimalBigNum(num);\n    }\n}\nexports.BN = BN;\n\n//# sourceMappingURL=bn.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"../data\");\nconst vector_1 = require(\"../vector\");\nconst base_1 = require(\"./base\");\nconst index_1 = require(\"./index\");\nconst compat_1 = require(\"../util/compat\");\nconst buffer_1 = require(\"../util/buffer\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass IntVector extends base_1.BaseVector {\n    /** @nocollapse */\n    static from(...args) {\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return vector_1.Vector.new(data_1.Data.Int(type, 0, length, 0, null, input));\n            }\n        }\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return index_1.vectorFromValuesWithType(() => new ArrowType(), input);\n        }\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\nexports.IntVector = IntVector;\n/** @ignore */\nclass Int8Vector extends IntVector {\n}\nexports.Int8Vector = Int8Vector;\n/** @ignore */\nclass Int16Vector extends IntVector {\n}\nexports.Int16Vector = Int16Vector;\n/** @ignore */\nclass Int32Vector extends IntVector {\n}\nexports.Int32Vector = Int32Vector;\n/** @ignore */\nclass Int64Vector extends IntVector {\n    toBigInt64Array() {\n        return buffer_1.toBigInt64Array(this.values);\n    }\n    get values64() {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\nexports.Int64Vector = Int64Vector;\n/** @ignore */\nclass Uint8Vector extends IntVector {\n}\nexports.Uint8Vector = Uint8Vector;\n/** @ignore */\nclass Uint16Vector extends IntVector {\n}\nexports.Uint16Vector = Uint16Vector;\n/** @ignore */\nclass Uint32Vector extends IntVector {\n}\nexports.Uint32Vector = Uint32Vector;\n/** @ignore */\nclass Uint64Vector extends IntVector {\n    toBigUint64Array() {\n        return buffer_1.toBigUint64Array(this.values);\n    }\n    get values64() {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\nexports.Uint64Vector = Uint64Vector;\nconst convert32To64Bit = (typeCtor, dataCtor) => {\n    return (typeCtor === type_1.Int64 || typeCtor === type_1.Uint64) &&\n        (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n/** @ignore */\nconst arrayTypeToDataType = (ctor, is64bit) => {\n    switch (ctor) {\n        case Int8Array: return type_1.Int8;\n        case Int16Array: return type_1.Int16;\n        case Int32Array: return is64bit ? type_1.Int64 : type_1.Int32;\n        case compat_1.BigInt64Array: return type_1.Int64;\n        case Uint8Array: return type_1.Uint8;\n        case Uint16Array: return type_1.Uint16;\n        case Uint32Array: return is64bit ? type_1.Uint64 : type_1.Uint32;\n        case compat_1.BigUint64Array: return type_1.Uint64;\n        default: return null;\n    }\n};\n/** @ignore */\nconst vectorTypeToDataType = (ctor, is64bit) => {\n    switch (ctor) {\n        case Int8Vector: return type_1.Int8;\n        case Int16Vector: return type_1.Int16;\n        case Int32Vector: return is64bit ? type_1.Int64 : type_1.Int32;\n        case Int64Vector: return type_1.Int64;\n        case Uint8Vector: return type_1.Uint8;\n        case Uint16Vector: return type_1.Uint16;\n        case Uint32Vector: return is64bit ? type_1.Uint64 : type_1.Uint32;\n        case Uint64Vector: return type_1.Uint64;\n        default: return null;\n    }\n};\n\n//# sourceMappingURL=int.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"../data\");\nconst schema_1 = require(\"../schema\");\nconst chunked_1 = require(\"../vector/chunked\");\nconst recordbatch_1 = require(\"../recordbatch\");\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength) => [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n];\n/** @ignore */\nfunction ensureSameLengthData(schema, chunks, batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)) {\n    let data;\n    let field;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        }\n        else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }));\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : data_1.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));\n        }\n    }\n    return [new schema_1.Schema(fields), batchLength, batchData];\n}\nexports.ensureSameLengthData = ensureSameLengthData;\n/** @ignore */\nfunction distributeColumnsIntoRecordBatches(columns) {\n    return distributeVectorsIntoRecordBatches(new schema_1.Schema(columns.map(({ field }) => field)), columns);\n}\nexports.distributeColumnsIntoRecordBatches = distributeColumnsIntoRecordBatches;\n/** @ignore */\nfunction distributeVectorsIntoRecordBatches(schema, vecs) {\n    return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v) => v instanceof chunked_1.Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\nexports.distributeVectorsIntoRecordBatches = distributeVectorsIntoRecordBatches;\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches(schema, columns) {\n    const fields = [...schema.fields];\n    const batchArgs = [];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n    let numBatches = 0, batchLength = 0;\n    let i = -1, numColumns = columns.length;\n    let child, childData = [];\n    while (memo.numBatches-- > 0) {\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift();\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new schema_1.Schema(fields, schema.metadata),\n        batchArgs.map((xs) => new recordbatch_1.RecordBatch(schema, ...xs))\n    ];\n}\n/** @ignore */\nfunction distributeChildData(fields, batchLength, childData, columns, memo) {\n    let data;\n    let field;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            }\n            else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        }\n        else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }));\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : data_1.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));\n        }\n    }\n    return childData;\n}\n\n//# sourceMappingURL=recordbatch.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst schema_1 = require(\"../schema\");\nconst type_1 = require(\"../type\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass MapBuilder extends builder_1.VariableWidthBuilder {\n    set(index, value) {\n        return super.set(index, value);\n    }\n    setValue(index, value) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n    addChild(child, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new type_1.Map_(new schema_1.Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n    _flushPending(pending) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            }\n            else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\nexports.MapBuilder = MapBuilder;\n\n//# sourceMappingURL=map.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"./buffer\");\nconst text_encoding_utf_8_1 = require(\"text-encoding-utf-8\");\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n/** @ignore */\nexports.decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer) => decoder.decode(buffer);\n    }\n    return (input) => {\n        const { buffer, byteOffset, length } = buffer_1.toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : text_encoding_utf_8_1.TextDecoder);\n/** @ignore */\nexports.encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value) => encoder.encode(value);\n    }\n    return (input = '') => buffer_1.toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : text_encoding_utf_8_1.TextEncoder);\n\n//# sourceMappingURL=utf8.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"../vector\");\nconst enum_1 = require(\"../enum\");\nconst file_1 = require(\"./metadata/file\");\nconst adapters_1 = require(\"../io/adapters\");\nconst stream_1 = require(\"../io/stream\");\nconst file_2 = require(\"../io/file\");\nconst vectorloader_1 = require(\"../visitor/vectorloader\");\nconst recordbatch_1 = require(\"../recordbatch\");\nconst interfaces_1 = require(\"../io/interfaces\");\nconst message_1 = require(\"./message\");\nconst compat_1 = require(\"../util/compat\");\nclass RecordBatchReader extends interfaces_1.ReadableInterop {\n    constructor(impl) {\n        super();\n        this._impl = impl;\n    }\n    get closed() { return this._impl.closed; }\n    get schema() { return this._impl.schema; }\n    get autoDestroy() { return this._impl.autoDestroy; }\n    get dictionaries() { return this._impl.dictionaries; }\n    get numDictionaries() { return this._impl.numDictionaries; }\n    get numRecordBatches() { return this._impl.numRecordBatches; }\n    get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n    isSync() { return this._impl.isSync(); }\n    isAsync() { return this._impl.isAsync(); }\n    isFile() { return this._impl.isFile(); }\n    isStream() { return this._impl.isStream(); }\n    next() {\n        return this._impl.next();\n    }\n    throw(value) {\n        return this._impl.throw(value);\n    }\n    return(value) {\n        return this._impl.return(value);\n    }\n    cancel() {\n        return this._impl.cancel();\n    }\n    reset(schema) {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    open(options) {\n        const opening = this._impl.open(options);\n        return compat_1.isPromise(opening) ? opening.then(() => this) : this;\n    }\n    readRecordBatch(index) {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    [Symbol.iterator]() {\n        return this._impl[Symbol.iterator]();\n    }\n    [Symbol.asyncIterator]() {\n        return this._impl[Symbol.asyncIterator]();\n    }\n    toDOMStream() {\n        return adapters_1.default.toDOMStream((this.isSync()\n            ? { [Symbol.iterator]: () => this }\n            : { [Symbol.asyncIterator]: () => this }));\n    }\n    toNodeStream() {\n        return adapters_1.default.toNodeStream((this.isSync()\n            ? { [Symbol.iterator]: () => this }\n            : { [Symbol.asyncIterator]: () => this }), { objectMode: true });\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static throughDOM(\n    // @ts-ignore\n    writableStrategy, \n    // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static from(source) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        }\n        else if (compat_1.isArrowJSON(source)) {\n            return fromArrowJSON(source);\n        }\n        else if (compat_1.isFileHandle(source)) {\n            return fromFileHandle(source);\n        }\n        else if (compat_1.isPromise(source)) {\n            return (async () => await RecordBatchReader.from(await source))();\n        }\n        else if (compat_1.isFetchResponse(source) || compat_1.isReadableDOMStream(source) || compat_1.isReadableNodeStream(source) || compat_1.isAsyncIterable(source)) {\n            return fromAsyncByteStream(new stream_1.AsyncByteStream(source));\n        }\n        return fromByteStream(new stream_1.ByteStream(source));\n    }\n    /** @nocollapse */\n    static readAll(source) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source);\n        }\n        else if (compat_1.isArrowJSON(source) || ArrayBuffer.isView(source) || compat_1.isIterable(source) || compat_1.isIteratorResult(source)) {\n            return readAllSync(source);\n        }\n        return readAllAsync(source);\n    }\n}\nexports.RecordBatchReader = RecordBatchReader;\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n/** @ignore */\nclass RecordBatchStreamReader extends RecordBatchReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n    [Symbol.iterator]() { return this._impl[Symbol.iterator](); }\n    async *[Symbol.asyncIterator]() { yield* this[Symbol.iterator](); }\n}\nexports.RecordBatchStreamReader = RecordBatchStreamReader;\n/** @ignore */\nclass AsyncRecordBatchStreamReader extends RecordBatchReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n    [Symbol.iterator]() { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    [Symbol.asyncIterator]() { return this._impl[Symbol.asyncIterator](); }\n}\nexports.AsyncRecordBatchStreamReader = AsyncRecordBatchStreamReader;\n/** @ignore */\nclass RecordBatchFileReader extends RecordBatchStreamReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n}\nexports.RecordBatchFileReader = RecordBatchFileReader;\n/** @ignore */\nclass AsyncRecordBatchFileReader extends AsyncRecordBatchStreamReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n}\nexports.AsyncRecordBatchFileReader = AsyncRecordBatchFileReader;\n/** @ignore */\nclass RecordBatchReaderImpl {\n    constructor(dictionaries = new Map()) {\n        this.closed = false;\n        this.autoDestroy = true;\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.dictionaries = dictionaries;\n    }\n    get numDictionaries() { return this._dictionaryIndex; }\n    get numRecordBatches() { return this._recordBatchIndex; }\n    isSync() { return false; }\n    isAsync() { return false; }\n    isFile() { return false; }\n    isStream() { return false; }\n    reset(schema) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    _loadRecordBatch(header, body) {\n        return new recordbatch_1.RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    _loadDictionaryBatch(header, body) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id);\n            return (dictionary && isDelta ? dictionary.concat(vector_1.Vector.new(this._loadVectors(data, body, [type])[0])) :\n                vector_1.Vector.new(this._loadVectors(data, body, [type])[0]));\n        }\n        return dictionary;\n    }\n    _loadVectors(header, body, types) {\n        return new vectorloader_1.VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n/** @ignore */\nclass RecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n    constructor(source, dictionaries) {\n        super(dictionaries);\n        this._reader = !compat_1.isArrowJSON(source)\n            ? new message_1.MessageReader(this._handle = source)\n            : new message_1.JSONMessageReader(this._handle = source);\n    }\n    isSync() { return true; }\n    isStream() { return true; }\n    [Symbol.iterator]() {\n        return this;\n    }\n    cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = null;\n            this.dictionaries = null;\n        }\n    }\n    open(options) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    throw(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return interfaces_1.ITERATOR_DONE;\n    }\n    return(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return interfaces_1.ITERATOR_DONE;\n    }\n    next() {\n        if (this.closed) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        let message, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new recordbatch_1._InternalEmptyPlaceholderRecordBatch(this.schema) };\n        }\n        return this.return();\n    }\n    _readNextMessageAndValidate(type) {\n        return this._reader.readMessage(type);\n    }\n}\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n    constructor(source, dictionaries) {\n        super(dictionaries);\n        this._reader = new message_1.AsyncMessageReader(this._handle = source);\n    }\n    isAsync() { return true; }\n    isStream() { return true; }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = null;\n            this.dictionaries = null;\n        }\n    }\n    async open(options) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    async throw(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return interfaces_1.ITERATOR_DONE;\n    }\n    async return(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return interfaces_1.ITERATOR_DONE;\n    }\n    async next() {\n        if (this.closed) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        let message, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new recordbatch_1._InternalEmptyPlaceholderRecordBatch(this.schema) };\n        }\n        return await this.return();\n    }\n    async _readNextMessageAndValidate(type) {\n        return await this._reader.readMessage(type);\n    }\n}\n/** @ignore */\nclass RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries) {\n        super(source instanceof file_2.RandomAccessFile ? source : new file_2.RandomAccessFile(source), dictionaries);\n    }\n    get footer() { return this._footer; }\n    get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n    isSync() { return true; }\n    isFile() { return true; }\n    open(options) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    readRecordBatch(index) {\n        if (this.closed) {\n            return null;\n        }\n        if (!this._footer) {\n            this.open();\n        }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(enum_1.MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    _readDictionaryBatch(index) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - message_1.magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return file_1.Footer.decode(buffer);\n    }\n    _readNextMessageAndValidate(type) {\n        if (!this._footer) {\n            this.open();\n        }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {\n    constructor(source, ...rest) {\n        const byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n        super(source instanceof file_2.AsyncRandomAccessFile ? source : new file_2.AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    get footer() { return this._footer; }\n    get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n    isFile() { return true; }\n    isAsync() { return true; }\n    async open(options) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    async readRecordBatch(index) {\n        if (this.closed) {\n            return null;\n        }\n        if (!this._footer) {\n            await this.open();\n        }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(enum_1.MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    async _readDictionaryBatch(index) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - message_1.magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return file_1.Footer.decode(buffer);\n    }\n    async _readNextMessageAndValidate(type) {\n        if (!this._footer) {\n            await this.open();\n        }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nclass RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries) {\n        super(source, dictionaries);\n    }\n    _loadVectors(header, body, types) {\n        return new vectorloader_1.JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */\nfunction shouldAutoDestroy(self, options) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\nfunction* readAllSync(source) {\n    const reader = RecordBatchReader.from(source);\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do {\n                yield reader;\n            } while (!(reader.reset().open()).closed);\n        }\n    }\n    finally {\n        reader.cancel();\n    }\n}\n/** @ignore */\nasync function* readAllAsync(source) {\n    const reader = await RecordBatchReader.from(source);\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do {\n                yield reader;\n            } while (!(await reader.reset().open()).closed);\n        }\n    }\n    finally {\n        await reader.cancel();\n    }\n}\n/** @ignore */\nfunction fromArrowJSON(source) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\nfunction fromByteStream(source) {\n    const bytes = source.peek((message_1.magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !message_1.checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function* () { }()));\n}\n/** @ignore */\nasync function fromAsyncByteStream(source) {\n    const bytes = await source.peek((message_1.magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !message_1.checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(async function* () { }()));\n}\n/** @ignore */\nasync function fromFileHandle(source) {\n    const { size } = await source.stat();\n    const file = new file_2.AsyncRandomAccessFile(source, size);\n    if (size >= message_1.magicX2AndPadding) {\n        if (message_1.checkForMagicArrowString(await file.readAt(0, (message_1.magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file));\n}\n\n//# sourceMappingURL=reader.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst math_1 = require(\"../util/math\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass FloatBuilder extends builder_1.FixedWidthBuilder {\n}\nexports.FloatBuilder = FloatBuilder;\n/** @ignore */\nclass Float16Builder extends FloatBuilder {\n    setValue(index, value) {\n        // convert JS float64 to a uint16\n        this._values.set(index, math_1.float64ToUint16(value));\n    }\n}\nexports.Float16Builder = Float16Builder;\n/** @ignore */\nclass Float32Builder extends FloatBuilder {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\nexports.Float32Builder = Float32Builder;\n/** @ignore */\nclass Float64Builder extends FloatBuilder {\n    setValue(index, value) {\n        this._values.set(index, value);\n    }\n}\nexports.Float64Builder = Float64Builder;\n\n//# sourceMappingURL=float.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @ignore */\nfunction partial0(visit) {\n    return function () { return visit(this); };\n}\nexports.partial0 = partial0;\n/** @ignore */\nfunction partial1(visit) {\n    return function (a) { return visit(this, a); };\n}\nexports.partial1 = partial1;\n/** @ignore */\nfunction partial2(visit) {\n    return function (a, b) { return visit(this, a, b); };\n}\nexports.partial2 = partial2;\n\n//# sourceMappingURL=fn.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"../visitor\");\nconst enum_1 = require(\"../enum\");\n/** @ignore */\nclass JSONTypeAssembler extends visitor_1.Visitor {\n    visit(node) {\n        return node == null ? undefined : super.visit(node);\n    }\n    visitNull({ typeId }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase() };\n    }\n    visitInt({ typeId, bitWidth, isSigned }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    visitFloat({ typeId, precision }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'precision': enum_1.Precision[precision] };\n    }\n    visitBinary({ typeId }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase() };\n    }\n    visitBool({ typeId }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase() };\n    }\n    visitUtf8({ typeId }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase() };\n    }\n    visitDecimal({ typeId, scale, precision }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    visitDate({ typeId, unit }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.DateUnit[unit] };\n    }\n    visitTime({ typeId, unit, bitWidth }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.TimeUnit[unit], bitWidth };\n    }\n    visitTimestamp({ typeId, timezone, unit }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.TimeUnit[unit], timezone };\n    }\n    visitInterval({ typeId, unit }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'unit': enum_1.IntervalUnit[unit] };\n    }\n    visitList({ typeId }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase() };\n    }\n    visitStruct({ typeId }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase() };\n    }\n    visitUnion({ typeId, mode, typeIds }) {\n        return {\n            'name': enum_1.ArrowType[typeId].toLowerCase(),\n            'mode': enum_1.UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    visitDictionary(node) {\n        return this.visit(node.dictionary);\n    }\n    visitFixedSizeBinary({ typeId, byteWidth }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    visitFixedSizeList({ typeId, listSize }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    visitMap({ typeId, keysSorted }) {\n        return { 'name': enum_1.ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\nexports.JSONTypeAssembler = JSONTypeAssembler;\n\n//# sourceMappingURL=jsontypeassembler.js.map\n","\"use strict\";\n/* istanbul ignore file */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"../visitor\");\nconst enum_1 = require(\"../enum\");\n/** @ignore */ const sum = (x, y) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type) => `Cannot compute the byte width of variable-width column ${type}`;\n/** @ignore */\nclass ByteWidthVisitor extends visitor_1.Visitor {\n    visitNull(____) { return 0; }\n    visitInt(type) { return type.bitWidth / 8; }\n    visitFloat(type) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    visitBinary(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitUtf8(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitBool(____) { return 1 / 8; }\n    visitDecimal(____) { return 16; }\n    visitDate(type) { return (type.unit + 1) * 4; }\n    visitTime(type) { return type.bitWidth / 8; }\n    visitTimestamp(type) { return type.unit === enum_1.TimeUnit.SECOND ? 4 : 8; }\n    visitInterval(type) { return (type.unit + 1) * 4; }\n    visitList(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitStruct(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitUnion(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitFixedSizeBinary(type) { return type.byteWidth; }\n    visitFixedSizeList(type) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    visitMap(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitDictionary(type) { return this.visit(type.indices); }\n    visitFields(fields) { return (fields || []).map((field) => this.visit(field.type)); }\n    visitSchema(schema) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\nexports.ByteWidthVisitor = ByteWidthVisitor;\n/** @ignore */\nexports.instance = new ByteWidthVisitor();\n\n//# sourceMappingURL=bytewidth.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @ignore */\nfunction getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\nexports.getBool = getBool;\n/** @ignore */\nfunction getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\nexports.getBit = getBit;\n/** @ignore */\nfunction setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\nexports.setBool = setBool;\n/** @ignore */\nfunction truncateBitmap(offset, length, bitmap) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\nexports.truncateBitmap = truncateBitmap;\n/** @ignore */\nfunction packBools(values) {\n    let xs = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\nexports.packBools = packBools;\n/** @ignore */\nfunction* iterateBits(bytes, begin, length, context, get) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\nexports.iterateBits = iterateBits;\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nfunction popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\nexports.popcnt_bit_range = popcnt_bit_range;\n/** @ignore */\nfunction popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = byteOffset | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\nexports.popcnt_array = popcnt_array;\n/** @ignore */\nfunction popcnt_uint32(uint32) {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\nexports.popcnt_uint32 = popcnt_uint32;\n\n//# sourceMappingURL=bit.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst flatbuffers_1 = require(\"flatbuffers\");\nconst utf8_1 = require(\"../util/utf8\");\nvar ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;\nconst compat_1 = require(\"./compat\");\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset, yOffset, xLen, yLen;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n/** @ignore */\nfunction memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\nexports.memcpy = memcpy;\n/** @ignore */\nfunction joinUint8Arrays(chunks, size) {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source, sliced, buffer;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            }\n            else if (sliced.length === source.length) {\n                index++;\n            }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\nexports.joinUint8Arrays = joinUint8Arrays;\nfunction toArrayBufferView(ArrayBufferViewCtor, input) {\n    let value = compat_1.isIteratorResult(input) ? input.value : input;\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) {\n        return new ArrayBufferViewCtor(0);\n    }\n    if (typeof value === 'string') {\n        value = utf8_1.encodeUtf8(value);\n    }\n    if (value instanceof ArrayBuffer) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof SharedArrayBuf) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof ByteBuffer) {\n        return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n    }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\nexports.toArrayBufferView = toArrayBufferView;\n/** @ignore */ exports.toInt8Array = (input) => toArrayBufferView(Int8Array, input);\n/** @ignore */ exports.toInt16Array = (input) => toArrayBufferView(Int16Array, input);\n/** @ignore */ exports.toInt32Array = (input) => toArrayBufferView(Int32Array, input);\n/** @ignore */ exports.toBigInt64Array = (input) => toArrayBufferView(compat_1.BigInt64Array, input);\n/** @ignore */ exports.toUint8Array = (input) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ exports.toUint16Array = (input) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ exports.toUint32Array = (input) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ exports.toBigUint64Array = (input) => toArrayBufferView(compat_1.BigUint64Array, input);\n/** @ignore */ exports.toFloat32Array = (input) => toArrayBufferView(Float32Array, input);\n/** @ignore */ exports.toFloat64Array = (input) => toArrayBufferView(Float64Array, input);\n/** @ignore */ exports.toUint8ClampedArray = (input) => toArrayBufferView(Uint8ClampedArray, input);\n/** @ignore */\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nfunction* toArrayBufferViewIterator(ArrayCtor, source) {\n    const wrap = function* (x) { yield x; };\n    const buffers = (typeof source === 'string') ? wrap(source)\n        : (ArrayBuffer.isView(source)) ? wrap(source)\n            : (source instanceof ArrayBuffer) ? wrap(source)\n                : (source instanceof SharedArrayBuf) ? wrap(source)\n                    : !compat_1.isIterable(source) ? wrap(source) : source;\n    yield* pump((function* (it) {\n        let r = null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\nexports.toArrayBufferViewIterator = toArrayBufferViewIterator;\n/** @ignore */ exports.toInt8ArrayIterator = (input) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ exports.toInt16ArrayIterator = (input) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ exports.toInt32ArrayIterator = (input) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ exports.toUint8ArrayIterator = (input) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ exports.toUint16ArrayIterator = (input) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ exports.toUint32ArrayIterator = (input) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ exports.toFloat32ArrayIterator = (input) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ exports.toFloat64ArrayIterator = (input) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ exports.toUint8ClampedArrayIterator = (input) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\nasync function* toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (compat_1.isPromise(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n    const wrap = async function* (x) { yield await x; };\n    const emit = async function* (source) {\n        yield* pump((function* (it) {\n            let r = null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n    const buffers = (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n        : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n            : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n                    : compat_1.isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n                        : !compat_1.isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                            : source; // otherwise if AsyncIterable, use it\n    yield* pump((async function* (it) {\n        let r = null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\nexports.toArrayBufferViewAsyncIterator = toArrayBufferViewAsyncIterator;\n/** @ignore */ exports.toInt8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ exports.toInt16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ exports.toInt32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ exports.toUint8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ exports.toUint16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ exports.toUint32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ exports.toFloat32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ exports.toFloat64ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ exports.toUint8ClampedArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/** @ignore */\nfunction rebaseValueOffsets(offset, length, valueOffsets) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\nexports.rebaseValueOffsets = rebaseValueOffsets;\n/** @ignore */\nfunction compareArrayLike(a, b) {\n    let i = 0, n = a.length;\n    if (n !== b.length) {\n        return false;\n    }\n    if (n > 0) {\n        do {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        } while (++i < n);\n    }\n    return true;\n}\nexports.compareArrayLike = compareArrayLike;\n\n//# sourceMappingURL=buffer.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vector_1 = require(\"../vector\");\nexports.Vector = vector_1.Vector;\nvar base_1 = require(\"./base\");\nexports.BaseVector = base_1.BaseVector;\nvar binary_1 = require(\"./binary\");\nexports.BinaryVector = binary_1.BinaryVector;\nvar bool_1 = require(\"./bool\");\nexports.BoolVector = bool_1.BoolVector;\nvar chunked_1 = require(\"./chunked\");\nexports.Chunked = chunked_1.Chunked;\nvar date_1 = require(\"./date\");\nexports.DateVector = date_1.DateVector;\nexports.DateDayVector = date_1.DateDayVector;\nexports.DateMillisecondVector = date_1.DateMillisecondVector;\nvar decimal_1 = require(\"./decimal\");\nexports.DecimalVector = decimal_1.DecimalVector;\nvar dictionary_1 = require(\"./dictionary\");\nexports.DictionaryVector = dictionary_1.DictionaryVector;\nvar fixedsizebinary_1 = require(\"./fixedsizebinary\");\nexports.FixedSizeBinaryVector = fixedsizebinary_1.FixedSizeBinaryVector;\nvar fixedsizelist_1 = require(\"./fixedsizelist\");\nexports.FixedSizeListVector = fixedsizelist_1.FixedSizeListVector;\nvar float_1 = require(\"./float\");\nexports.FloatVector = float_1.FloatVector;\nexports.Float16Vector = float_1.Float16Vector;\nexports.Float32Vector = float_1.Float32Vector;\nexports.Float64Vector = float_1.Float64Vector;\nvar interval_1 = require(\"./interval\");\nexports.IntervalVector = interval_1.IntervalVector;\nexports.IntervalDayTimeVector = interval_1.IntervalDayTimeVector;\nexports.IntervalYearMonthVector = interval_1.IntervalYearMonthVector;\nvar int_1 = require(\"./int\");\nexports.IntVector = int_1.IntVector;\nexports.Int8Vector = int_1.Int8Vector;\nexports.Int16Vector = int_1.Int16Vector;\nexports.Int32Vector = int_1.Int32Vector;\nexports.Int64Vector = int_1.Int64Vector;\nexports.Uint8Vector = int_1.Uint8Vector;\nexports.Uint16Vector = int_1.Uint16Vector;\nexports.Uint32Vector = int_1.Uint32Vector;\nexports.Uint64Vector = int_1.Uint64Vector;\nvar list_1 = require(\"./list\");\nexports.ListVector = list_1.ListVector;\nvar map_1 = require(\"./map\");\nexports.MapVector = map_1.MapVector;\nvar null_1 = require(\"./null\");\nexports.NullVector = null_1.NullVector;\nvar struct_1 = require(\"./struct\");\nexports.StructVector = struct_1.StructVector;\nvar timestamp_1 = require(\"./timestamp\");\nexports.TimestampVector = timestamp_1.TimestampVector;\nexports.TimestampSecondVector = timestamp_1.TimestampSecondVector;\nexports.TimestampMillisecondVector = timestamp_1.TimestampMillisecondVector;\nexports.TimestampMicrosecondVector = timestamp_1.TimestampMicrosecondVector;\nexports.TimestampNanosecondVector = timestamp_1.TimestampNanosecondVector;\nvar time_1 = require(\"./time\");\nexports.TimeVector = time_1.TimeVector;\nexports.TimeSecondVector = time_1.TimeSecondVector;\nexports.TimeMillisecondVector = time_1.TimeMillisecondVector;\nexports.TimeMicrosecondVector = time_1.TimeMicrosecondVector;\nexports.TimeNanosecondVector = time_1.TimeNanosecondVector;\nvar union_1 = require(\"./union\");\nexports.UnionVector = union_1.UnionVector;\nexports.DenseUnionVector = union_1.DenseUnionVector;\nexports.SparseUnionVector = union_1.SparseUnionVector;\nvar utf8_1 = require(\"./utf8\");\nexports.Utf8Vector = utf8_1.Utf8Vector;\nvar row_1 = require(\"./row\");\nexports.MapRow = row_1.MapRow;\nexports.StructRow = row_1.StructRow;\nconst fn = require(\"../util/fn\");\nconst enum_1 = require(\"../enum\");\nconst vector_2 = require(\"../vector\");\nconst chunked_2 = require(\"./chunked\");\nconst base_2 = require(\"./base\");\nconst bit_1 = require(\"../util/bit\");\nconst compat_1 = require(\"../util/compat\");\nconst builder_1 = require(\"../builder\");\nconst get_1 = require(\"../visitor/get\");\nconst set_1 = require(\"../visitor/set\");\nconst indexof_1 = require(\"../visitor/indexof\");\nconst toarray_1 = require(\"../visitor/toarray\");\nconst iterator_1 = require(\"../visitor/iterator\");\nconst bytewidth_1 = require(\"../visitor/bytewidth\");\nconst vectorctor_1 = require(\"../visitor/vectorctor\");\n/** @nocollapse */\nvector_2.Vector.new = newVector;\n/** @nocollapse */\nvector_2.Vector.from = vectorFrom;\n/** @ignore */\nfunction newVector(data, ...args) {\n    return new (vectorctor_1.instance.getVisitFn(data)())(data, ...args);\n}\n/** @ignore */\nfunction vectorFromValuesWithType(newDataType, input) {\n    if (compat_1.isIterable(input)) {\n        return vector_2.Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input });\n    }\n    else if (compat_1.isAsyncIterable(input)) {\n        return vector_2.Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input });\n    }\n    const { 'values': values = [], 'type': type = newDataType(), 'nullValues': nullValues = [null, undefined], } = { ...input };\n    return compat_1.isIterable(values)\n        ? vector_2.Vector.from({ nullValues, ...input, type })\n        : vector_2.Vector.from({ nullValues, ...input, type });\n}\nexports.vectorFromValuesWithType = vectorFromValuesWithType;\nfunction vectorFrom(input) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input };\n    if (compat_1.isIterable(values)) {\n        const chunks = [...builder_1.Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : chunked_2.Chunked.concat(chunks);\n    }\n    return (async (chunks) => {\n        const transform = builder_1.Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : chunked_2.Chunked.concat(chunks);\n    })([]);\n}\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\nbase_2.BaseVector.prototype.get = function baseVectorGet(index) {\n    return get_1.instance.visit(this, index);\n};\nbase_2.BaseVector.prototype.set = function baseVectorSet(index, value) {\n    return set_1.instance.visit(this, index, value);\n};\nbase_2.BaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n    return indexof_1.instance.visit(this, value, fromIndex);\n};\nbase_2.BaseVector.prototype.toArray = function baseVectorToArray() {\n    return toarray_1.instance.visit(this);\n};\nbase_2.BaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n    return bytewidth_1.instance.visit(this.type);\n};\nbase_2.BaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n    return iterator_1.instance.visit(this);\n};\nbase_2.BaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\nObject.keys(enum_1.Type)\n    .map((T) => enum_1.Type[T])\n    .filter((T) => typeof T === 'number')\n    .filter((typeId) => typeId !== enum_1.Type.NONE)\n    .forEach((typeId) => {\n    const VectorCtor = vectorctor_1.instance.visit(typeId);\n    VectorCtor.prototype['get'] = fn.partial1(get_1.instance.getVisitFn(typeId));\n    VectorCtor.prototype['set'] = fn.partial2(set_1.instance.getVisitFn(typeId));\n    VectorCtor.prototype['indexOf'] = fn.partial2(indexof_1.instance.getVisitFn(typeId));\n    VectorCtor.prototype['toArray'] = fn.partial0(toarray_1.instance.getVisitFn(typeId));\n    VectorCtor.prototype['getByteWidth'] = partialType0(bytewidth_1.instance.getVisitFn(typeId));\n    VectorCtor.prototype[Symbol.iterator] = fn.partial0(iterator_1.instance.getVisitFn(typeId));\n});\n/** @ignore */\nfunction partialType0(visit) {\n    return function () { return visit(this.type); };\n}\n/** @ignore */\nfunction wrapNullableGet(fn) {\n    return function (i) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n/** @ignore */\nfunction wrapNullableSet(fn) {\n    return function (i, a) {\n        if (bit_1.setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n/** @ignore */\nfunction bindBaseVectorDataAccessors() {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"../util/buffer\");\n/** @ignore */\nexports.default = {\n    fromIterable(source) {\n        return pump(fromIterable(source));\n    },\n    fromAsyncIterable(source) {\n        return pump(fromAsyncIterable(source));\n    },\n    fromDOMStream(source) {\n        return pump(fromDOMStream(source));\n    },\n    fromNodeStream(stream) {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream(source, options) {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream(source, options) {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n/** @ignore */\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nfunction* fromIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return buffer_1.joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = buffer_1.joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    let it = buffer_1.toUint8ArrayIterator(source)[Symbol.iterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n/** @ignore */\nasync function* fromAsyncIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return buffer_1.joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = buffer_1.joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    let it = buffer_1.toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream(source) {\n    let done = false, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return buffer_1.joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = buffer_1.joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield null);\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer_1.toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    }\n    finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n/** @ignore */\nclass AdaptiveByteReader {\n    constructor(source) {\n        this.source = source;\n        this.byobReader = null;\n        this.defaultReader = null;\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        }\n        catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n    get closed() {\n        return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();\n    }\n    releaseLock() {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n    async cancel(reason) {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => { }));\n        source && (source['locked'] && this.releaseLock());\n    }\n    async read(size) {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = buffer_1.toUint8Array(result));\n        return result;\n    }\n    getDefaultReader() {\n        if (this.byobReader) {\n            this.releaseLock();\n        }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.defaultReader);\n    }\n    getBYOBReader() {\n        if (this.defaultReader) {\n            this.releaseLock();\n        }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.byobReader);\n    }\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    async readFromBYOBReader(size) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n/** @ignore */\nasync function readInto(reader, buffer, offset, size) {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n/** @ignore */\nconst onEvent = (stream, event) => {\n    let handler = (_) => resolve([event, _]);\n    let resolve;\n    return [event, handler, new Promise((r) => (resolve = r) && stream['once'](event, handler))];\n};\n/** @ignore */\nasync function* fromNodeStream(stream) {\n    let events = [];\n    let event = 'error';\n    let done = false, err = null;\n    let cmd, size, bufferLength = 0;\n    let buffers = [], buffer;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return buffer_1.joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = buffer_1.joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield null);\n    // ignore stdin if it's a TTY\n    if (stream['isTTY']) {\n        return yield new Uint8Array(0);\n    }\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n        do {\n            events[2] = onEvent(stream, 'readable');\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') {\n                break;\n            }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = buffer_1.toUint8Array(stream['read'](undefined));\n                }\n                else {\n                    buffer = buffer_1.toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = buffer_1.toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n    function cleanup(events, err) {\n        buffer = buffers = null;\n        return new Promise(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = stream['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            }\n            catch (e) {\n                err = e || err;\n            }\n            finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=adapters.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"../vector\");\n/** @ignore */\nclass Run {\n    get length() { return this._values.length; }\n    get(index) { return this._values[index]; }\n    clear() { this._values = null; return this; }\n    bind(values) {\n        if (values instanceof vector_1.Vector) {\n            return values;\n        }\n        this._values = values;\n        return this;\n    }\n}\nexports.Run = Run;\n\n//# sourceMappingURL=run.js.map\n","\"use strict\";\n// automatically generated by the FlatBuffers compiler, do not modify\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NS7624605610262437867 = require(\"./Schema\");\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nvar org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Footer {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Footer\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param flatbuffers.ByteBuffer bb\n                     * @param Footer= obj\n                     * @returns Footer\n                     */\n                    static getRootAsFooter(bb, obj) {\n                        return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns org.apache.arrow.flatbuf.MetadataVersion\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /**  */ (this.bb.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @param org.apache.arrow.flatbuf.Schema= obj\n                     * @returns org.apache.arrow.flatbuf.Schema|null\n                     */\n                    schema(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.Block= obj\n                     * @returns org.apache.arrow.flatbuf.Block\n                     */\n                    dictionaries(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    dictionariesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param number index\n                     * @param org.apache.arrow.flatbuf.Block= obj\n                     * @returns org.apache.arrow.flatbuf.Block\n                     */\n                    recordBatches(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns number\n                     */\n                    recordBatchesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     */\n                    static startFooter(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param org.apache.arrow.flatbuf.MetadataVersion version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset schemaOffset\n                     */\n                    static addSchema(builder, schemaOffset) {\n                        builder.addFieldOffset(1, schemaOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset dictionariesOffset\n                     */\n                    static addDictionaries(builder, dictionariesOffset) {\n                        builder.addFieldOffset(2, dictionariesOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startDictionariesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset recordBatchesOffset\n                     */\n                    static addRecordBatches(builder, recordBatchesOffset) {\n                        builder.addFieldOffset(3, recordBatchesOffset, 0);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param number numElems\n                     */\n                    static startRecordBatchesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @returns flatbuffers.Offset\n                     */\n                    static endFooter(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Offset offset\n                     */\n                    static finishFooterBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                    static createFooter(builder, version, schemaOffset, dictionariesOffset, recordBatchesOffset) {\n                        Footer.startFooter(builder);\n                        Footer.addVersion(builder, version);\n                        Footer.addSchema(builder, schemaOffset);\n                        Footer.addDictionaries(builder, dictionariesOffset);\n                        Footer.addRecordBatches(builder, recordBatchesOffset);\n                        return Footer.endFooter(builder);\n                    }\n                }\n                flatbuf.Footer = Footer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Block {\n                    constructor() {\n                        this.bb = null;\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param number i\n                     * @param flatbuffers.ByteBuffer bb\n                     * @returns Block\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * Index to the start of the RecordBlock (note this is past the Message header)\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * Length of the metadata\n                     *\n                     * @returns number\n                     */\n                    metaDataLength() {\n                        return this.bb.readInt32(this.bb_pos + 8);\n                    }\n                    /**\n                     * Length of the data (this is aligned so there can be a gap between this and\n                     * the metatdata).\n                     *\n                     * @returns flatbuffers.Long\n                     */\n                    bodyLength() {\n                        return this.bb.readInt64(this.bb_pos + 16);\n                    }\n                    /**\n                     * @param flatbuffers.Builder builder\n                     * @param flatbuffers.Long offset\n                     * @param number metaDataLength\n                     * @param flatbuffers.Long bodyLength\n                     * @returns flatbuffers.Offset\n                     */\n                    static createBlock(builder, offset, metaDataLength, bodyLength) {\n                        builder.prep(8, 24);\n                        builder.writeInt64(bodyLength);\n                        builder.pad(4);\n                        builder.writeInt32(metaDataLength);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Block = Block;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org = exports.org || (exports.org = {}));\n\n//# sourceMappingURL=File.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass NullBuilder extends builder_1.Builder {\n    // @ts-ignore\n    setValue(index, value) { }\n    setValid(index, valid) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\nexports.NullBuilder = NullBuilder;\n\n//# sourceMappingURL=null.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @ignore */ const undf = void (0);\n/** @ignore */\nfunction valueToString(x) {\n    if (x === null) {\n        return 'null';\n    }\n    if (x === undf) {\n        return 'undefined';\n    }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\nexports.valueToString = valueToString;\n\n//# sourceMappingURL=pretty.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"../visitor\");\nconst bit_1 = require(\"../util/bit\");\nconst vector_1 = require(\"../util/vector\");\n/** @ignore */\nclass IndexOfVisitor extends visitor_1.Visitor {\n}\nexports.IndexOfVisitor = IndexOfVisitor;\n/** @ignore */\nfunction nullIndexOf(vector, searchElement) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n/** @ignore */\nfunction indexOfNull(vector, fromIndex) {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of bit_1.iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, bit_1.getBool)) {\n        if (!isValid) {\n            return i;\n        }\n        ++i;\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfValue(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    const compare = vector_1.createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfUnion(vector, searchElement, fromIndex) {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = vector_1.createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\nIndexOfVisitor.prototype.visitNull = nullIndexOf;\nIndexOfVisitor.prototype.visitBool = indexOfValue;\nIndexOfVisitor.prototype.visitInt = indexOfValue;\nIndexOfVisitor.prototype.visitInt8 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16 = indexOfValue;\nIndexOfVisitor.prototype.visitInt32 = indexOfValue;\nIndexOfVisitor.prototype.visitInt64 = indexOfValue;\nIndexOfVisitor.prototype.visitUint8 = indexOfValue;\nIndexOfVisitor.prototype.visitUint16 = indexOfValue;\nIndexOfVisitor.prototype.visitUint32 = indexOfValue;\nIndexOfVisitor.prototype.visitUint64 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64 = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;\nIndexOfVisitor.prototype.visitDate = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTime = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal = indexOfValue;\nIndexOfVisitor.prototype.visitList = indexOfValue;\nIndexOfVisitor.prototype.visitStruct = indexOfValue;\nIndexOfVisitor.prototype.visitUnion = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary = indexOfValue;\nIndexOfVisitor.prototype.visitInterval = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;\nIndexOfVisitor.prototype.visitMap = indexOfValue;\n/** @ignore */\nexports.instance = new IndexOfVisitor();\n\n//# sourceMappingURL=indexof.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"../visitor\");\n/** @ignore */\nclass TypeComparator extends visitor_1.Visitor {\n    compareSchemas(schema, other) {\n        return (schema === other) || (other instanceof schema.constructor &&\n            exports.instance.compareFields(schema.fields, other.fields));\n    }\n    compareFields(fields, others) {\n        return (fields === others) || (Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => exports.instance.compareField(f, others[i])));\n    }\n    compareField(field, other) {\n        return (field === other) || (other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            exports.instance.visit(field.type, other.type));\n    }\n}\nexports.TypeComparator = TypeComparator;\nfunction compareConstructor(type, other) {\n    return other instanceof type.constructor;\n}\nfunction compareAny(type, other) {\n    return (type === other) || compareConstructor(type, other);\n}\nfunction compareInt(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned);\n}\nfunction compareFloat(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.precision === other.precision);\n}\nfunction compareFixedSizeBinary(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth);\n}\nfunction compareDate(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit);\n}\nfunction compareTimestamp(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone);\n}\nfunction compareTime(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth);\n}\nfunction compareList(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        exports.instance.compareFields(type.children, other.children));\n}\nfunction compareStruct(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        exports.instance.compareFields(type.children, other.children));\n}\nfunction compareUnion(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        exports.instance.compareFields(type.children, other.children));\n}\nfunction compareDictionary(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        exports.instance.visit(type.indices, other.indices) &&\n        exports.instance.visit(type.dictionary, other.dictionary));\n}\nfunction compareInterval(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.unit === other.unit);\n}\nfunction compareFixedSizeList(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        exports.instance.compareFields(type.children, other.children));\n}\nfunction compareMap(type, other) {\n    return (type === other) || (compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        exports.instance.compareFields(type.children, other.children));\n}\nTypeComparator.prototype.visitNull = compareAny;\nTypeComparator.prototype.visitBool = compareAny;\nTypeComparator.prototype.visitInt = compareInt;\nTypeComparator.prototype.visitInt8 = compareInt;\nTypeComparator.prototype.visitInt16 = compareInt;\nTypeComparator.prototype.visitInt32 = compareInt;\nTypeComparator.prototype.visitInt64 = compareInt;\nTypeComparator.prototype.visitUint8 = compareInt;\nTypeComparator.prototype.visitUint16 = compareInt;\nTypeComparator.prototype.visitUint32 = compareInt;\nTypeComparator.prototype.visitUint64 = compareInt;\nTypeComparator.prototype.visitFloat = compareFloat;\nTypeComparator.prototype.visitFloat16 = compareFloat;\nTypeComparator.prototype.visitFloat32 = compareFloat;\nTypeComparator.prototype.visitFloat64 = compareFloat;\nTypeComparator.prototype.visitUtf8 = compareAny;\nTypeComparator.prototype.visitBinary = compareAny;\nTypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate = compareDate;\nTypeComparator.prototype.visitDateDay = compareDate;\nTypeComparator.prototype.visitDateMillisecond = compareDate;\nTypeComparator.prototype.visitTimestamp = compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;\nTypeComparator.prototype.visitTime = compareTime;\nTypeComparator.prototype.visitTimeSecond = compareTime;\nTypeComparator.prototype.visitTimeMillisecond = compareTime;\nTypeComparator.prototype.visitTimeMicrosecond = compareTime;\nTypeComparator.prototype.visitTimeNanosecond = compareTime;\nTypeComparator.prototype.visitDecimal = compareAny;\nTypeComparator.prototype.visitList = compareList;\nTypeComparator.prototype.visitStruct = compareStruct;\nTypeComparator.prototype.visitUnion = compareUnion;\nTypeComparator.prototype.visitDenseUnion = compareUnion;\nTypeComparator.prototype.visitSparseUnion = compareUnion;\nTypeComparator.prototype.visitDictionary = compareDictionary;\nTypeComparator.prototype.visitInterval = compareInterval;\nTypeComparator.prototype.visitIntervalDayTime = compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth = compareInterval;\nTypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;\nTypeComparator.prototype.visitMap = compareMap;\n/** @ignore */\nexports.instance = new TypeComparator();\n\n//# sourceMappingURL=typecomparator.js.map\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst enum_1 = require(\"../enum\");\nconst chunked_1 = require(\"./chunked\");\nconst vector_1 = require(\"../util/vector\");\nconst vector_2 = require(\"../vector\");\n/** @ignore */\nclass BaseVector extends vector_2.AbstractVector {\n    constructor(data, children) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n    get type() { return this.data.type; }\n    get typeId() { return this.data.typeId; }\n    get length() { return this.data.length; }\n    get offset() { return this.data.offset; }\n    get stride() { return this.data.stride; }\n    get nullCount() { return this.data.nullCount; }\n    get byteLength() { return this.data.byteLength; }\n    get VectorName() { return `${enum_1.Type[this.typeId]}Vector`; }\n    get ArrayType() { return this.type.ArrayType; }\n    get values() { return this.data.values; }\n    get typeIds() { return this.data.typeIds; }\n    get nullBitmap() { return this.data.nullBitmap; }\n    get valueOffsets() { return this.data.valueOffsets; }\n    get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n    clone(data, children = this._children) {\n        return vector_2.Vector.new(data, children);\n    }\n    concat(...others) {\n        return chunked_1.Chunked.concat(this, ...others);\n    }\n    slice(begin, end) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return vector_1.clampRange(this, begin, end, this._sliceInternal);\n    }\n    isValid(index) {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numChildren ? null : ((this._children || (this._children = []))[index] ||\n            (this._children[index] = vector_2.Vector.new(this.data.childData[index])));\n    }\n    toJSON() { return [...this]; }\n    _sliceInternal(self, begin, end) {\n        return self.clone(self.data.slice(begin, end - begin), null);\n    }\n    // @ts-ignore\n    _bindDataAccessors(data) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\nexports.BaseVector = BaseVector;\nBaseVector.prototype[Symbol.isConcatSpreadable] = true;\n\n//# sourceMappingURL=base.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"../../io/stream\");\nconst reader_1 = require(\"../../ipc/reader\");\n/** @ignore */\nfunction recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {\n    const queue = new stream_1.AsyncByteQueue();\n    let reader = null;\n    const readable = new ReadableStream({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n    async function open() {\n        return await (await reader_1.RecordBatchReader.from(queue)).open(readableStrategy);\n    }\n    async function next(controller, reader) {\n        let size = controller.desiredSize;\n        let r = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\nexports.recordBatchReaderThroughDOMStream = recordBatchReaderThroughDOMStream;\n\n//# sourceMappingURL=reader.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst buffer_1 = require(\"../../util/buffer\");\nconst compat_1 = require(\"../../util/compat\");\n/** @ignore */\nfunction toDOMStream(source, options) {\n    if (compat_1.isAsyncIterable(source)) {\n        return asyncIterableAsReadableDOMStream(source, options);\n    }\n    if (compat_1.isIterable(source)) {\n        return iterableAsReadableDOMStream(source, options);\n    }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\nexports.toDOMStream = toDOMStream;\n/** @ignore */\nfunction iterableAsReadableDOMStream(source, options) {\n    let it = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n    return new ReadableStream({\n        ...options,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n    function next(controller, it) {\n        let buf;\n        let r = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream(source, options) {\n    let it = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n    return new ReadableStream({\n        ...options,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n    async function next(controller, it) {\n        let buf;\n        let r = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\n//# sourceMappingURL=iterable.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass TimestampVector extends base_1.BaseVector {\n}\nexports.TimestampVector = TimestampVector;\n/** @ignore */\nclass TimestampSecondVector extends TimestampVector {\n}\nexports.TimestampSecondVector = TimestampSecondVector;\n/** @ignore */\nclass TimestampMillisecondVector extends TimestampVector {\n}\nexports.TimestampMillisecondVector = TimestampMillisecondVector;\n/** @ignore */\nclass TimestampMicrosecondVector extends TimestampVector {\n}\nexports.TimestampMicrosecondVector = TimestampMicrosecondVector;\n/** @ignore */\nclass TimestampNanosecondVector extends TimestampVector {\n}\nexports.TimestampNanosecondVector = TimestampNanosecondVector;\n\n//# sourceMappingURL=timestamp.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst column_1 = require(\"./column\");\nconst schema_1 = require(\"./schema\");\nconst recordbatch_1 = require(\"./recordbatch\");\nconst reader_1 = require(\"./ipc/reader\");\nconst type_1 = require(\"./type\");\nconst args_1 = require(\"./util/args\");\nconst compat_1 = require(\"./util/compat\");\nconst writer_1 = require(\"./ipc/writer\");\nconst recordbatch_2 = require(\"./util/recordbatch\");\nconst index_1 = require(\"./vector/index\");\nclass Table extends index_1.Chunked {\n    constructor(...args) {\n        let schema = null;\n        if (args[0] instanceof schema_1.Schema) {\n            schema = args.shift();\n        }\n        let chunks = args_1.selectArgs(recordbatch_1.RecordBatch, args);\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n        chunks[0] || (chunks[0] = new recordbatch_1._InternalEmptyPlaceholderRecordBatch(schema));\n        super(new type_1.Struct(schema.fields), chunks);\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n    /** @nocollapse */\n    static empty(schema = new schema_1.Schema([])) { return new Table(schema, []); }\n    /** @nocollapse */\n    static from(input) {\n        if (!input) {\n            return Table.empty();\n        }\n        if (typeof input === 'object') {\n            let table = compat_1.isIterable(input['values']) ? tableFromIterable(input)\n                : compat_1.isAsyncIterable(input['values']) ? tableFromAsyncIterable(input)\n                    : null;\n            if (table !== null) {\n                return table;\n            }\n        }\n        let reader = reader_1.RecordBatchReader.from(input);\n        if (compat_1.isPromise(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n    /** @nocollapse */\n    static async fromAsync(source) {\n        return await Table.from(source);\n    }\n    /** @nocollapse */\n    static fromStruct(vector) {\n        return Table.new(vector.data.childData, vector.type.children);\n    }\n    /** @nocollapse */\n    static new(...cols) {\n        return new Table(...recordbatch_2.distributeColumnsIntoRecordBatches(args_1.selectColumnArgs(cols)));\n    }\n    get schema() { return this._schema; }\n    get length() { return this._length; }\n    get chunks() { return this._chunks; }\n    get numCols() { return this._numChildren; }\n    clone(chunks = this._chunks) {\n        return new Table(this._schema, chunks);\n    }\n    getColumn(name) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    getColumnAt(index) {\n        return this.getChildAt(index);\n    }\n    getColumnIndex(name) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this.numChildren) {\n            return null;\n        }\n        let field, child;\n        const fields = this._schema.fields;\n        const columns = this._children || (this._children = []);\n        if (child = columns[index]) {\n            return child;\n        }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new column_1.Column(field, chunks));\n            }\n        }\n        return null;\n    }\n    // @ts-ignore\n    serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? writer_1.RecordBatchFileWriter\n            : writer_1.RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    count() {\n        return this._length;\n    }\n    select(...columnNames) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)).filter((x) => x > -1));\n    }\n    selectAt(...columnIndices) {\n        const schema = this._schema.selectAt(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new recordbatch_1.RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    assign(other) {\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []]);\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) => (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))),\n            ...indices.map((i) => other.getColumnAt(i))\n        ].filter(Boolean);\n        return new Table(...recordbatch_2.distributeVectorsIntoRecordBatches(schema, columns));\n    }\n}\nexports.Table = Table;\nfunction tableFromIterable(input) {\n    const { type } = input;\n    if (type instanceof type_1.Struct) {\n        return Table.fromStruct(index_1.StructVector.from(input));\n    }\n    return null;\n}\nfunction tableFromAsyncIterable(input) {\n    const { type } = input;\n    if (type instanceof type_1.Struct) {\n        return index_1.StructVector.from(input).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n\n//# sourceMappingURL=table.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"../data\");\nconst schema_1 = require(\"../schema\");\nconst column_1 = require(\"../column\");\nconst vector_1 = require(\"../vector\");\nconst type_1 = require(\"../type\");\nconst chunked_1 = require(\"../vector/chunked\");\nconst isArray = Array.isArray;\n/** @ignore */\nexports.selectArgs = (Ctor, vals) => _selectArgs(Ctor, vals, [], 0);\n/** @ignore */\nexports.selectColumnArgs = (args) => {\n    const [fields, values] = _selectFieldArgs(args, [[], []]);\n    return values.map((x, i) => x instanceof column_1.Column ? column_1.Column.new(x.field.clone(fields[i]), x) :\n        x instanceof vector_1.Vector ? column_1.Column.new(fields[i], x) :\n            column_1.Column.new(fields[i], []));\n};\n/** @ignore */\nexports.selectFieldArgs = (args) => _selectFieldArgs(args, [[], []]);\n/** @ignore */\nexports.selectChunkArgs = (Ctor, vals) => _selectChunkArgs(Ctor, vals, [], 0);\n/** @ignore */\nexports.selectVectorChildrenArgs = (Ctor, vals) => _selectVectorChildrenArgs(Ctor, vals, [], 0);\n/** @ignore */\nexports.selectColumnChildrenArgs = (Ctor, vals) => _selectColumnChildrenArgs(Ctor, vals, [], 0);\n/** @ignore */\nfunction _selectArgs(Ctor, vals, res, idx) {\n    let value, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        }\n        else if (value instanceof Ctor) {\n            res[j++] = value;\n        }\n    }\n    return res;\n}\n/** @ignore */\nfunction _selectChunkArgs(Ctor, vals, res, idx) {\n    let value, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        }\n        else if (value instanceof chunked_1.Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        }\n        else if (value instanceof Ctor) {\n            res[j++] = value;\n        }\n    }\n    return res;\n}\n/** @ignore */\nfunction _selectVectorChildrenArgs(Ctor, vals, res, idx) {\n    let value, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        }\n        else if (value instanceof Ctor) {\n            j = _selectArgs(vector_1.Vector, value.schema.fields.map((_, i) => value.getChildAt(i)), res, j).length;\n        }\n        else if (value instanceof vector_1.Vector) {\n            res[j++] = value;\n        }\n    }\n    return res;\n}\n/** @ignore */\nfunction _selectColumnChildrenArgs(Ctor, vals, res, idx) {\n    let value, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        }\n        else if (value instanceof Ctor) {\n            j = _selectArgs(column_1.Column, value.schema.fields.map((f, i) => column_1.Column.new(f, value.getChildAt(i))), res, j).length;\n        }\n        else if (value instanceof column_1.Column) {\n            res[j++] = value;\n        }\n    }\n    return res;\n}\n/** @ignore */\nconst toKeysAndValues = (xs, [k, v], i) => (xs[0][i] = k, xs[1][i] = v, xs);\n/** @ignore */\nfunction _selectFieldArgs(vals, ret) {\n    let keys, n;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) {\n                return ret;\n            }\n            if (isArray(vals[0])) {\n                return _selectFieldArgs(vals[0], ret);\n            }\n            if (!(vals[0] instanceof data_1.Data || vals[0] instanceof vector_1.Vector || vals[0] instanceof type_1.DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field;\n    let val;\n    let [fields, values] = ret;\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof column_1.Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        }\n        else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof type_1.DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = schema_1.Field.new(field, val, true);\n            }\n            else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof data_1.Data && (values[valueIndex] = val = vector_1.Vector.new(val));\n                fields[++fieldIndex] = schema_1.Field.new(field, val.type, true);\n            }\n        }\n    }\n    return ret;\n}\n\n//# sourceMappingURL=args.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pretty_1 = require(\"../util/pretty\");\nconst compat_1 = require(\"../util/compat\");\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nfunction createIsValidFunction(nullValues) {\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value) { return true; };\n    }\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n    return new Function(`x`, `${fnBody}\\nreturn true;`);\n}\nexports.createIsValidFunction = createIsValidFunction;\n/** @ignore */\nfunction valueToCase(x) {\n    if (typeof x !== 'bigint') {\n        return pretty_1.valueToString(x);\n    }\n    else if (compat_1.BigIntAvailable) {\n        return `${pretty_1.valueToString(x)}n`;\n    }\n    return `\"${pretty_1.valueToString(x)}\"`;\n}\n\n//# sourceMappingURL=valid.js.map\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"../data\");\nconst vector_1 = require(\"../vector\");\nconst base_1 = require(\"./base\");\nconst index_1 = require(\"./index\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass FloatVector extends base_1.BaseVector {\n    /** @nocollapse */\n    static from(input) {\n        let ArrowType = vectorTypeToDataType(this);\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return vector_1.Vector.new(data_1.Data.Float(type, 0, length, 0, null, input));\n                }\n            }\n        }\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return index_1.vectorFromValuesWithType(() => new ArrowType(), input);\n        }\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\nexports.FloatVector = FloatVector;\n/** @ignore */\nclass Float16Vector extends FloatVector {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    toFloat32Array() { return new Float32Array(this); }\n    toFloat64Array() { return new Float64Array(this); }\n}\nexports.Float16Vector = Float16Vector;\n/** @ignore */\nclass Float32Vector extends FloatVector {\n}\nexports.Float32Vector = Float32Vector;\n/** @ignore */\nclass Float64Vector extends FloatVector {\n}\nexports.Float64Vector = Float64Vector;\nconst convertTo16Bit = (typeCtor, dataCtor) => {\n    return (typeCtor === type_1.Float16) && (dataCtor !== Uint16Array);\n};\n/** @ignore */\nconst arrayTypeToDataType = (ctor) => {\n    switch (ctor) {\n        case Uint16Array: return type_1.Float16;\n        case Float32Array: return type_1.Float32;\n        case Float64Array: return type_1.Float64;\n        default: return null;\n    }\n};\n/** @ignore */\nconst vectorTypeToDataType = (ctor) => {\n    switch (ctor) {\n        case Float16Vector: return type_1.Float16;\n        case Float32Vector: return type_1.Float32;\n        case Float64Vector: return type_1.Float64;\n        default: return null;\n    }\n};\n\n//# sourceMappingURL=float.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"./stream\");\nconst buffer_1 = require(\"../util/buffer\");\n/** @ignore */\nclass RandomAccessFile extends stream_1.ByteStream {\n    constructor(buffer, byteLength) {\n        super();\n        this.position = 0;\n        this.buffer = buffer_1.toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    readInt32(position) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    seek(position) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    read(nBytes) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Infinity;\n            }\n            this.position = Math.min(size, position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    readAt(position, nBytes) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    close() { this.buffer && (this.buffer = null); }\n    throw(value) { this.close(); return { done: true, value }; }\n    return(value) { this.close(); return { done: true, value }; }\n}\nexports.RandomAccessFile = RandomAccessFile;\n/** @ignore */\nclass AsyncRandomAccessFile extends stream_1.AsyncByteStream {\n    constructor(file, byteLength) {\n        super();\n        this.position = 0;\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        }\n        else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    async readInt32(position) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    async seek(position) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    async read(nBytes) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Infinity;\n            }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    async readAt(position, nBytes) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    async throw(value) { await this.close(); return { done: true, value }; }\n    async return(value) { await this.close(); return { done: true, value }; }\n}\nexports.AsyncRandomAccessFile = AsyncRandomAccessFile;\n\n//# sourceMappingURL=file.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass AbstractVector {\n}\nexports.AbstractVector = AbstractVector;\nexports.Vector = AbstractVector;\n\n//# sourceMappingURL=vector.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vector_1 = require(\"../vector\");\nconst base_1 = require(\"./base\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass BinaryVector extends base_1.BaseVector {\n    asUtf8() {\n        return vector_1.Vector.new(this.data.clone(new type_1.Utf8()));\n    }\n}\nexports.BinaryVector = BinaryVector;\n\n//# sourceMappingURL=binary.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"./data\");\nconst table_1 = require(\"./table\");\nconst vector_1 = require(\"./vector\");\nconst visitor_1 = require(\"./visitor\");\nconst schema_1 = require(\"./schema\");\nconst compat_1 = require(\"./util/compat\");\nconst chunked_1 = require(\"./vector/chunked\");\nconst args_1 = require(\"./util/args\");\nconst type_1 = require(\"./type\");\nconst recordbatch_1 = require(\"./util/recordbatch\");\nconst index_1 = require(\"./vector/index\");\nclass RecordBatch extends index_1.StructVector {\n    constructor(...args) {\n        let data;\n        let schema = args[0];\n        let children;\n        if (args[1] instanceof data_1.Data) {\n            [, data, children] = args;\n        }\n        else {\n            const fields = schema.fields;\n            const [, length, childData] = args;\n            data = data_1.Data.Struct(new type_1.Struct(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n    /** @nocollapse */\n    static from(options) {\n        if (compat_1.isIterable(options['values'])) {\n            return table_1.Table.from(options);\n        }\n        return table_1.Table.from(options);\n    }\n    /** @nocollapse */\n    static new(...args) {\n        const [fs, xs] = args_1.selectFieldArgs(args);\n        const vs = xs.filter((x) => x instanceof vector_1.Vector);\n        return new RecordBatch(...recordbatch_1.ensureSameLengthData(new schema_1.Schema(fs), vs.map((x) => x.data)));\n    }\n    clone(data, children = this._children) {\n        return new RecordBatch(this._schema, data, children);\n    }\n    concat(...others) {\n        const schema = this._schema, chunks = chunked_1.Chunked.flatten(this, ...others);\n        return new table_1.Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n    get schema() { return this._schema; }\n    get numCols() { return this._schema.fields.length; }\n    get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n    select(...columnNames) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)).filter((x) => x > -1));\n    }\n    selectAt(...columnIndices) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch(schema, this.length, childData);\n    }\n}\nexports.RecordBatch = RecordBatch;\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nclass _InternalEmptyPlaceholderRecordBatch extends RecordBatch {\n    constructor(schema) {\n        super(schema, 0, schema.fields.map((f) => data_1.Data.new(f.type, 0, 0, 0)));\n    }\n}\nexports._InternalEmptyPlaceholderRecordBatch = _InternalEmptyPlaceholderRecordBatch;\n/** @ignore */\nclass DictionaryCollector extends visitor_1.Visitor {\n    constructor() {\n        super(...arguments);\n        this.dictionaries = new Map();\n    }\n    static collect(batch) {\n        return new DictionaryCollector().visit(batch.data, new type_1.Struct(batch.schema.fields)).dictionaries;\n    }\n    visit(data, type) {\n        if (type_1.DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        }\n        else {\n            data.childData.forEach((child, i) => this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    visitDictionary(data, type) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n\n//# sourceMappingURL=recordbatch.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst table_1 = require(\"../table\");\nconst message_1 = require(\"./message\");\nconst column_1 = require(\"../column\");\nconst type_1 = require(\"../type\");\nconst schema_1 = require(\"../schema\");\nconst message_2 = require(\"./metadata/message\");\nconst metadata = require(\"./metadata/message\");\nconst file_1 = require(\"./metadata/file\");\nconst enum_1 = require(\"../enum\");\nconst stream_1 = require(\"../io/stream\");\nconst vectorassembler_1 = require(\"../visitor/vectorassembler\");\nconst jsontypeassembler_1 = require(\"../visitor/jsontypeassembler\");\nconst jsonvectorassembler_1 = require(\"../visitor/jsonvectorassembler\");\nconst buffer_1 = require(\"../util/buffer\");\nconst recordbatch_1 = require(\"../recordbatch\");\nconst interfaces_1 = require(\"../io/interfaces\");\nconst compat_1 = require(\"../util/compat\");\nclass RecordBatchWriter extends interfaces_1.ReadableInterop {\n    constructor(options) {\n        super();\n        this._position = 0;\n        this._started = false;\n        // @ts-ignore\n        this._sink = new stream_1.AsyncByteQueue();\n        this._schema = null;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n        compat_1.isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static throughDOM(\n    // @ts-ignore\n    writableStrategy, \n    // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    toString(sync = false) {\n        return this._sink.toString(sync);\n    }\n    toUint8Array(sync = false) {\n        return this._sink.toUint8Array(sync);\n    }\n    writeAll(input) {\n        if (compat_1.isPromise(input)) {\n            return input.then((x) => this.writeAll(x));\n        }\n        else if (compat_1.isAsyncIterable(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, input);\n    }\n    get closed() { return this._sink.closed; }\n    [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    toDOMStream(options) { return this._sink.toDOMStream(options); }\n    toNodeStream(options) { return this._sink.toNodeStream(options); }\n    close() {\n        return this.reset()._sink.close();\n    }\n    abort(reason) {\n        return this.reset()._sink.abort(reason);\n    }\n    finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    reset(sink = this._sink, schema = null) {\n        if ((sink === this._sink) || (sink instanceof stream_1.AsyncByteQueue)) {\n            this._sink = sink;\n        }\n        else {\n            this._sink = new stream_1.AsyncByteQueue();\n            if (sink && compat_1.isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            }\n            else if (sink && compat_1.isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            }\n            else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n        return this;\n    }\n    write(payload) {\n        let schema = null;\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        }\n        else if (payload instanceof table_1.Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n        else if (payload instanceof recordbatch_1.RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n        if (payload instanceof recordbatch_1.RecordBatch) {\n            if (!(payload instanceof recordbatch_1._InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        }\n        else if (payload instanceof table_1.Table) {\n            this.writeAll(payload.chunks);\n        }\n        else if (compat_1.isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n    _writeMessage(message, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = message_2.Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n        if (message.headerType === enum_1.MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new file_1.FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n        else if (message.headerType === enum_1.MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new file_1.FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) {\n            this._write(buffer);\n        }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n    _write(chunk) {\n        if (this._started) {\n            const buffer = buffer_1.toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n    _writeSchema(schema) {\n        return this._writeMessage(message_2.Message.from(schema));\n    }\n    // @ts-ignore\n    _writeFooter(schema) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n    _writeMagic() {\n        return this._write(message_1.MAGIC);\n    }\n    _writePadding(nBytes) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n    _writeRecordBatch(batch) {\n        const { byteLength, nodes, bufferRegions, buffers } = vectorassembler_1.VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = message_2.Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = vectorassembler_1.VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = message_2.Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeBodyBuffers(buffers) {\n        let buffer;\n        let size, padding;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n    _writeDictionaries(batch) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? dictionary.chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\nexports.RecordBatchWriter = RecordBatchWriter;\n/** @ignore */\nclass RecordBatchStreamWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(input, options) {\n        const writer = new RecordBatchStreamWriter(options);\n        if (compat_1.isPromise(input)) {\n            return input.then((x) => writer.writeAll(x));\n        }\n        else if (compat_1.isAsyncIterable(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\nexports.RecordBatchStreamWriter = RecordBatchStreamWriter;\n/** @ignore */\nclass RecordBatchFileWriter extends RecordBatchWriter {\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n    /** @nocollapse */\n    static writeAll(input) {\n        const writer = new RecordBatchFileWriter();\n        if (compat_1.isPromise(input)) {\n            return input.then((x) => writer.writeAll(x));\n        }\n        else if (compat_1.isAsyncIterable(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n    // @ts-ignore\n    _writeSchema(schema) {\n        return this._writeMagic()._writePadding(2);\n    }\n    _writeFooter(schema) {\n        const buffer = file_1.Footer.encode(new file_1.Footer(schema, enum_1.MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\nexports.RecordBatchFileWriter = RecordBatchFileWriter;\n/** @ignore */\nclass RecordBatchJSONWriter extends RecordBatchWriter {\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n    /** @nocollapse */\n    static writeAll(input) {\n        return new RecordBatchJSONWriter().writeAll(input);\n    }\n    _writeMessage() { return this; }\n    // @ts-ignore\n    _writeFooter(schema) { return this; }\n    _writeSchema(schema) {\n        return this._write(`{\\n  \"schema\": ${JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)}`);\n    }\n    _writeDictionaries(batch) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new file_1.FileBlock(0, 0, 0));\n        return this;\n    }\n    _writeRecordBatch(batch) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    close() {\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new file_1.FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        this._dictionaries = [];\n        this._recordBatches = [];\n        return super.close();\n    }\n}\nexports.RecordBatchJSONWriter = RecordBatchJSONWriter;\n/** @ignore */\nfunction writeAll(writer, input) {\n    let chunks = input;\n    if (input instanceof table_1.Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n/** @ignore */\nasync function writeAllAsync(writer, batches) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }) {\n    const assembler = new jsontypeassembler_1.JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !type_1.DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary, id, isDelta = false) {\n    const field = new schema_1.Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = jsonvectorassembler_1.JSONVectorAssembler.assemble(new column_1.Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n/** @ignore */\nfunction recordBatchToJSON(records) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': jsonvectorassembler_1.JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n\n//# sourceMappingURL=writer.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Schema_ = require(\"./fb/Schema\");\nconst Message_ = require(\"./fb/Message\");\nexports.ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexports.DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexports.TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexports.Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexports.UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexports.IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexports.MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexports.MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nvar Type;\n(function (Type) {\n    /** The default placeholder type */\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    /** A NULL type having no physical storage */\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    /** 2, 4, or 8-byte floating point value */\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    /** UTF8 variable-length string as List<Char> */\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    /** A list of some logical data type */\n    Type[Type[\"List\"] = 12] = \"List\";\n    /** Struct of logical types */\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    /** Union of logical types */\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    /** Map of named logical types */\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    /** Dictionary aka Category type */\n    Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n    Type[Type[\"Int8\"] = -2] = \"Int8\";\n    Type[Type[\"Int16\"] = -3] = \"Int16\";\n    Type[Type[\"Int32\"] = -4] = \"Int32\";\n    Type[Type[\"Int64\"] = -5] = \"Int64\";\n    Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n    Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n    Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n    Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n    Type[Type[\"Float16\"] = -10] = \"Float16\";\n    Type[Type[\"Float32\"] = -11] = \"Float32\";\n    Type[Type[\"Float64\"] = -12] = \"Float64\";\n    Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n    Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n    Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n    Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n    Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n    Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n    Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n    Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n    Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n    Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n    Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n    Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n    Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n    Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n})(Type = exports.Type || (exports.Type = {}));\nvar BufferType;\n(function (BufferType) {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    BufferType[BufferType[\"OFFSET\"] = 0] = \"OFFSET\";\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    BufferType[BufferType[\"DATA\"] = 1] = \"DATA\";\n    /**\n     * Bit vector indicating if each value is null\n     */\n    BufferType[BufferType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n    /**\n     * Type vector used in Union type\n     */\n    BufferType[BufferType[\"TYPE\"] = 3] = \"TYPE\";\n})(BufferType = exports.BufferType || (exports.BufferType = {}));\n\n//# sourceMappingURL=enum.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst data_1 = require(\"../data\");\nconst vector_1 = require(\"../vector\");\nconst base_1 = require(\"./base\");\nconst index_1 = require(\"./index\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass DictionaryVector extends base_1.BaseVector {\n    constructor(data) {\n        super(data);\n        this.indices = vector_1.Vector.new(data.clone(this.type.indices));\n    }\n    /** @nocollapse */\n    static from(...args) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args;\n            const type = new type_1.Dictionary(values.type, indices, null, null);\n            return vector_1.Vector.new(data_1.Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return index_1.vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n    get dictionary() { return this.data.dictionary; }\n    reverseLookup(value) { return this.dictionary.indexOf(value); }\n    getKey(idx) { return this.indices.get(idx); }\n    getValue(key) { return this.dictionary.get(key); }\n    setKey(idx, key) { return this.indices.set(idx, key); }\n    setValue(key, value) { return this.dictionary.set(key, value); }\n}\nexports.DictionaryVector = DictionaryVector;\nDictionaryVector.prototype.indices = null;\n\n//# sourceMappingURL=dictionary.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = require(\"./base\");\n/** @ignore */\nclass DecimalVector extends base_1.BaseVector {\n}\nexports.DecimalVector = DecimalVector;\n\n//# sourceMappingURL=decimal.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst run_1 = require(\"./run\");\nconst schema_1 = require(\"../schema\");\nconst type_1 = require(\"../type\");\nconst buffer_1 = require(\"./buffer\");\nconst builder_1 = require(\"../builder\");\n/** @ignore */\nclass ListBuilder extends builder_1.VariableWidthBuilder {\n    constructor(opts) {\n        super(opts);\n        this._run = new run_1.Run();\n        this._offsets = new buffer_1.OffsetsBufferBuilder();\n    }\n    addChild(child, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new type_1.List(new schema_1.Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    _flushPending(pending) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            }\n            else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\nexports.ListBuilder = ListBuilder;\n\n//# sourceMappingURL=list.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst visitor_1 = require(\"../visitor\");\nconst enum_1 = require(\"../enum\");\nconst recordbatch_1 = require(\"../recordbatch\");\nconst buffer_1 = require(\"../util/buffer\");\nconst bit_1 = require(\"../util/bit\");\nconst args_1 = require(\"../util/args\");\nconst message_1 = require(\"../ipc/metadata/message\");\nconst type_1 = require(\"../type\");\n/** @ignore */\nclass VectorAssembler extends visitor_1.Visitor {\n    constructor() {\n        super();\n        this._byteLength = 0;\n        this._nodes = [];\n        this._buffers = [];\n        this._bufferRegions = [];\n    }\n    /** @nocollapse */\n    static assemble(...args) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = args_1.selectVectorChildrenArgs(recordbatch_1.RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n    visit(vector) {\n        if (!type_1.DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!type_1.DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : bit_1.truncateBitmap(data.offset, length, data.nullBitmap));\n            }\n            this.nodes.push(new message_1.FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n    visitNull(_nullV) {\n        return this;\n    }\n    visitDictionary(vector) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n    get nodes() { return this._nodes; }\n    get buffers() { return this._buffers; }\n    get byteLength() { return this._byteLength; }\n    get bufferRegions() { return this._bufferRegions; }\n}\nexports.VectorAssembler = VectorAssembler;\n/** @ignore */\nfunction addBuffer(values) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new message_1.BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n/** @ignore */\nfunction assembleUnion(vector) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === enum_1.UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    }\n    else if (type.mode === enum_1.UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        }\n        else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = buffer_1.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n/** @ignore */\nfunction assembleBoolVector(vector) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, bit_1.truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, bit_1.packBools(vector));\n}\n/** @ignore */\nfunction assembleFlatVector(vector) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n/** @ignore */\nfunction assembleFlatListVector(vector) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, buffer_1.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n/** @ignore */\nfunction assembleListVector(vector) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, buffer_1.rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0));\n}\n/** @ignore */\nfunction assembleNestedVector(vector) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)).filter(Boolean))[0];\n}\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;\n\n//# sourceMappingURL=vectorassembler.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst enum_1 = require(\"../enum\");\nconst flatbuffers_1 = require(\"flatbuffers\");\nvar ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;\nconst message_1 = require(\"./metadata/message\");\nconst compat_1 = require(\"../util/compat\");\nconst file_1 = require(\"../io/file\");\nconst buffer_1 = require(\"../util/buffer\");\nconst stream_1 = require(\"../io/stream\");\nconst interfaces_1 = require(\"../io/interfaces\");\n/** @ignore */ const invalidMessageType = (type) => `Expected ${enum_1.MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage = (type) => `Header pointer of flatbuffer-encoded ${enum_1.MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n/** @ignore */\nclass MessageReader {\n    constructor(source) {\n        this.source = source instanceof stream_1.ByteStream ? source : new stream_1.ByteStream(source);\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        let r;\n        if ((r = this.readMetadataLength()).done) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        if ((r = this.readMetadata(r.value)).done) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        return r;\n    }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = buffer_1.toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n            /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    readSchema(throwIfNull = false) {\n        const type = enum_1.MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    readMetadataLength() {\n        const buf = this.source.read(exports.PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    readMetadata(metadataLength) {\n        const buf = this.source.read(metadataLength);\n        if (!buf) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: message_1.Message.decode(buf) };\n    }\n}\nexports.MessageReader = MessageReader;\n/** @ignore */\nclass AsyncMessageReader {\n    constructor(source, byteLength) {\n        this.source = source instanceof stream_1.AsyncByteStream ? source\n            : compat_1.isFileHandle(source)\n                ? new file_1.AsyncRandomAccessFile(source, byteLength)\n                : new stream_1.AsyncByteStream(source);\n    }\n    [Symbol.asyncIterator]() { return this; }\n    async next() {\n        let r;\n        if ((r = await this.readMetadataLength()).done) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        if ((r = await this.readMetadata(r.value)).done) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        return r;\n    }\n    async throw(value) { return await this.source.throw(value); }\n    async return(value) { return await this.source.return(value); }\n    async readMessage(type) {\n        let r;\n        if ((r = await this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    async readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = buffer_1.toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n            /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    async readSchema(throwIfNull = false) {\n        const type = enum_1.MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    async readMetadataLength() {\n        const buf = await this.source.read(exports.PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    async readMetadata(metadataLength) {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) {\n            return interfaces_1.ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: message_1.Message.decode(buf) };\n    }\n}\nexports.AsyncMessageReader = AsyncMessageReader;\n/** @ignore */\nclass JSONMessageReader extends MessageReader {\n    constructor(source) {\n        super(new Uint8Array(0));\n        this._schema = false;\n        this._body = [];\n        this._batchIndex = 0;\n        this._dictionaryIndex = 0;\n        this._json = source instanceof interfaces_1.ArrowJSON ? source : new interfaces_1.ArrowJSON(source);\n    }\n    next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = message_1.Message.fromJSON(_json.schema, enum_1.MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = message_1.Message.fromJSON(batch, enum_1.MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = message_1.Message.fromJSON(batch, enum_1.MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return interfaces_1.ITERATOR_DONE;\n    }\n    readMessageBody(_bodyLength) {\n        return flattenDataSources(this._body);\n        function flattenDataSources(xs) {\n            return (xs || []).reduce((buffers, column) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], []);\n        }\n    }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readSchema() {\n        const type = enum_1.MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\nexports.JSONMessageReader = JSONMessageReader;\n/** @ignore */\nexports.PADDING = 4;\n/** @ignore */\nexports.MAGIC_STR = 'ARROW1';\n/** @ignore */\nexports.MAGIC = new Uint8Array(exports.MAGIC_STR.length);\nfor (let i = 0; i < exports.MAGIC_STR.length; i += 1 | 0) {\n    exports.MAGIC[i] = exports.MAGIC_STR.charCodeAt(i);\n}\n/** @ignore */\nfunction checkForMagicArrowString(buffer, index = 0) {\n    for (let i = -1, n = exports.MAGIC.length; ++i < n;) {\n        if (exports.MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.checkForMagicArrowString = checkForMagicArrowString;\n/** @ignore */\nexports.magicLength = exports.MAGIC.length;\n/** @ignore */\nexports.magicAndPadding = exports.magicLength + exports.PADDING;\n/** @ignore */\nexports.magicX2AndPadding = exports.magicLength * 2 + exports.PADDING;\n\n//# sourceMappingURL=message.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst enum_1 = require(\"../enum\");\nconst visitor_1 = require(\"../visitor\");\nconst iterator_1 = require(\"./iterator\");\n/** @ignore */\nclass ToArrayVisitor extends visitor_1.Visitor {\n}\nexports.ToArrayVisitor = ToArrayVisitor;\n/** @ignore */\nfunction arrayOfVector(vector) {\n    const { type, length, stride } = vector;\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case enum_1.Type.Int:\n        case enum_1.Type.Float:\n        case enum_1.Type.Decimal:\n        case enum_1.Type.Time:\n        case enum_1.Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n    // Otherwise if not primitive, slow copy\n    return [...iterator_1.instance.visit(vector)];\n}\nToArrayVisitor.prototype.visitNull = arrayOfVector;\nToArrayVisitor.prototype.visitBool = arrayOfVector;\nToArrayVisitor.prototype.visitInt = arrayOfVector;\nToArrayVisitor.prototype.visitInt8 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16 = arrayOfVector;\nToArrayVisitor.prototype.visitInt32 = arrayOfVector;\nToArrayVisitor.prototype.visitInt64 = arrayOfVector;\nToArrayVisitor.prototype.visitUint8 = arrayOfVector;\nToArrayVisitor.prototype.visitUint16 = arrayOfVector;\nToArrayVisitor.prototype.visitUint32 = arrayOfVector;\nToArrayVisitor.prototype.visitUint64 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64 = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary = arrayOfVector;\nToArrayVisitor.prototype.visitDate = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTime = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal = arrayOfVector;\nToArrayVisitor.prototype.visitList = arrayOfVector;\nToArrayVisitor.prototype.visitStruct = arrayOfVector;\nToArrayVisitor.prototype.visitUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary = arrayOfVector;\nToArrayVisitor.prototype.visitInterval = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList = arrayOfVector;\nToArrayVisitor.prototype.visitMap = arrayOfVector;\n/** @ignore */\nexports.instance = new ToArrayVisitor();\n\n//# sourceMappingURL=toarray.js.map\n","\"use strict\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst dictionary_1 = require(\"../vector/dictionary\");\n/** @ignore */\nclass Value {\n    eq(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new Equals(this, other);\n    }\n    le(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new LTeq(this, other);\n    }\n    ge(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new GTeq(this, other);\n    }\n    lt(other) {\n        return new Not(this.ge(other));\n    }\n    gt(other) {\n        return new Not(this.le(other));\n    }\n    ne(other) {\n        return new Not(this.eq(other));\n    }\n}\nexports.Value = Value;\n/** @ignore */\nclass Literal extends Value {\n    constructor(v) {\n        super();\n        this.v = v;\n    }\n}\nexports.Literal = Literal;\n/** @ignore */\nclass Col extends Value {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    bind(batch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) {\n                throw new Error(`Failed to bind Col \"${this.name}\"`);\n            }\n        }\n        const vec = this.vector = batch.getChildAt(this.colidx);\n        return (idx) => vec.get(idx);\n    }\n}\nexports.Col = Col;\n/** @ignore */\nclass Predicate {\n    and(...expr) { return new And(this, ...expr); }\n    or(...expr) { return new Or(this, ...expr); }\n    not() { return new Not(this); }\n}\nexports.Predicate = Predicate;\n/** @ignore */\nclass ComparisonPredicate extends Predicate {\n    constructor(left, right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n    bind(batch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindLitCol(batch, this.left, this.right);\n            }\n        }\n        else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindColCol(batch, this.left, this.right);\n            }\n        }\n    }\n}\nexports.ComparisonPredicate = ComparisonPredicate;\n/** @ignore */\nclass CombinationPredicate extends Predicate {\n    constructor(...children) {\n        super();\n        this.children = children;\n    }\n}\nexports.CombinationPredicate = CombinationPredicate;\n// add children to protoype so it doesn't get mangled in es2015/umd\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\n/** @ignore */\nclass And extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ands\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.every((p) => p(idx, batch));\n    }\n}\nexports.And = And;\n/** @ignore */\nclass Or extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ors\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.some((p) => p(idx, batch));\n    }\n}\nexports.Or = Or;\n/** @ignore */\nclass Equals extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v == right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof dictionary_1.DictionaryVector) {\n            let key;\n            const vector = col.vector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            }\n            else {\n                key = this.lastKey;\n            }\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            }\n            else {\n                return (idx) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        }\n        else {\n            return (idx, cols) => col_func(idx, cols) == lit.v;\n        }\n    }\n    _bindLitCol(batch, lit, col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\nexports.Equals = Equals;\n/** @ignore */\nclass LTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v <= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) <= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v <= col_func(idx, cols);\n    }\n}\nexports.LTeq = LTeq;\n/** @ignore */\nclass GTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v >= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) >= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v >= col_func(idx, cols);\n    }\n}\nexports.GTeq = GTeq;\n/** @ignore */\nclass Not extends Predicate {\n    constructor(child) {\n        super();\n        this.child = child;\n    }\n    bind(batch) {\n        const func = this.child.bind(batch);\n        return (idx, batch) => !func(idx, batch);\n    }\n}\nexports.Not = Not;\n/** @ignore */\nclass CustomPredicate extends Predicate {\n    constructor(next, bind_) {\n        super();\n        this.next = next;\n        this.bind_ = bind_;\n    }\n    bind(batch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\nexports.CustomPredicate = CustomPredicate;\nfunction lit(v) { return new Literal(v); }\nexports.lit = lit;\nfunction col(n) { return new Col(n); }\nexports.col = col;\nfunction and(...p) { return new And(...p); }\nexports.and = and;\nfunction or(...p) { return new Or(...p); }\nexports.or = or;\nfunction custom(next, bind) {\n    return new CustomPredicate(next, bind);\n}\nexports.custom = custom;\n\n//# sourceMappingURL=predicate.js.map\n"],"sourceRoot":""}