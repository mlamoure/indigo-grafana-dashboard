{"version":3,"sources":["webpack:///./public/app/plugins/datasource/elasticsearch/query_def.ts","webpack:///./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack:///./public/app/plugins/datasource/elasticsearch/index_pattern.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_builder.ts","webpack:///./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/bucket_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/metric_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/pipeline_variables.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/ElasticDetails.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/LogsConfig.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/DataLink.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/DataLinks.tsx","webpack:///./public/app/plugins/datasource/elasticsearch/module.ts","webpack:///./public/app/plugins/datasource/elasticsearch/configuration/ConfigEditor.tsx","webpack:///./public/app/core/components/Select/DataSourcePicker.tsx","webpack:///./node_modules/react-use/esm/usePrevious.js"],"names":["metricAggTypes","text","value","requiresField","supportsInlineScript","supportsMissing","isPipelineAgg","minVersion","supportsMultipleBucketPaths","bucketAggTypes","orderByOptions","orderOptions","sizeOptions","extendedStats","intervalOptions","movingAvgModelOptions","pipelineOptions","moving_avg","default","undefined","derivative","cumulative_sum","bucket_script","movingAvgModelSettings","simple","linear","ewma","holt","holt_winters","isCheckbox","getMetricAggTypes","esVersion","_","filter","f","metricType","po","isPipelineAggWithMultipleBucketPaths","find","t","getMovingAvgSettings","model","filtered","filteredResult","each","setting","push","describeMetric","metric","def","type","field","findMetricById","metrics","id","hasMetricOfType","target","some","m","ElasticResponse","targets","response","processResponseToSeries","seriesList","i","responses","length","error","getErrorFromElasticResponse","hits","processHits","aggregations","tmpSeriesList","table","TableModel","processBuckets","trimDatapoints","nameSeries","y","rows","data","this","esAgg","props","newSeries","bucket","hide","datapoints","buckets","doc_count","key","percentiles","values","percentileName","statName","meta","stats","std_deviation_bounds_upper","std_deviation_bounds","upper","std_deviation_bounds_lower","lower","metricId","normalized_value","aggDef","columns","keys","propKey","addColumn","filterable","addMetricValue","metricName","isArray","propValues","getMetricName","aggs","depth","aggId","maxDepth","bucketAggs","processMetrics","processAggregationDocs","nameIndex","clone","key_as_string","metricDef","queryDef","series","metricTypeCount","alias","replace","match","g1","g2","group","indexOf","substring","agg","settings","script","pipelineVariables","pv","appliedAgg","pipelineAgg","name","propName","trim","uniq","map","getSeriesName","hit","doc","total","_id","_type","_index","_source","fields","histogram","trimEdges","prop","points","slice","err","result","JSON","stringify","root_cause","reason","message","$$config","config","processResponseToDataFrames","logMessageField","logLevelField","isLogsRequest","dataFrame","n","flattenHits","propNames","docs","createEmptyDataFrame","timeField","add","addPreferredVisualisationType","toDataFrame","flattened","flatten","Object","sort","MutableDataFrame","addField","FieldType","time","string","parse","v","fieldNames","includes","s","preferredVisualisationType","intervalMap","Hourly","startOf","amount","Daily","Weekly","Monthly","Yearly","IndexPattern","pattern","interval","toUtc","format","from","to","intervalInfo","start","dateTime","utc","endEpoch","valueOf","indexList","ElasticQueryBuilder","options","gte","lte","queryNode","metricRef","terms","size","parseInt","orderBy","order","isNaN","min_doc_count","missing","extended_bounds","min","max","offset","filterObj","filters","query","label","query_string","analyze_wildcard","unmapped_type","script_fields","adhocFilters","condition","queryCondition","operator","bool","must","match_phrase","must_not","lt","range","gt","regexp","queryString","j","nestedAggs","getRangeFilter","addAdhocFilters","documentQuery","getDateHistogramAgg","getHistogramAgg","getFiltersAgg","buildTermsAgg","precision","aggField","metricAgg","buckets_path","test","hasOwnProperty","keyname","querystring","build","ElasticDatasource","instanceSettings","templateSrv","timeSrv","basicAuth","withCredentials","url","index","database","settingsData","jsonData","indexPattern","timeInterval","maxConcurrentShardRequests","queryBuilder","dataLinks","method","headers","Authorization","getBackendSrv","datasourceRequest","catch","timeRange","getIndexList","requestAllIndices","then","results","request","getIndexForToday","maxTraversals","listLen","Math","status","annotation","timeEndField","tagsField","textField","dateRanges","rangeStart","rangeEnd","should","minimum_should_match","header","search_type","ignore_unavailable","payload","angular","toJson","post","res","list","getFieldFromSource","source","fieldName","split","fieldValue","console","log","isString","isNumber","event","tags","timeEnd","titleField","title","queries","scopedVars","expandedQueries","datasource","getFields","dateFields","searchType","timeFrom","timeTo","queryHeader","cloneDeep","sentTargets","getAdhocFilters","queryObj","isLogsQuery","getLogsQuery","esQuery","getQueryHeader","Promise","resolve","toString","getMultiSearchUrl","er","getLogs","enhanceDataFrame","getTimeSeries","configuredEsVersion","get","typeMap","float","double","integer","long","date","scaled_float","nested","shouldAddField","obj","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","concat","join","pop","indexName","mappings","typeName","getTermsQuery","fromJson","getTerms","variableExists","bucketAgg","objectContainsTemplate","isPrimitive","Array","item","DataSourceApi","link","dataLinkConfig","dataLink","datasourceUid","internal","links","ElasticBucketAggCtrl","$scope","uiSegmentSrv","$rootScope","getBucketAggTypes","getOrderOptions","getSizeOptions","onAppEvent","CoreEvents","elasticQueryUpdated","validateModel","init","onChangeInternal","onChange","onTypeChanged","showOptions","isFirst","bucketAggCount","settingsLinkText","reduce","memo","substr","defaultTo","addFiltersQuery","removeFiltersQuery","without","toggleOptions","getOrderByOptions","metricRefs","getFieldsInternal","$fieldType","getIntervalOptions","transformToSegments","addBucketAgg","lastBucket","addIndex","val","splice","fake","removeBucketAgg","coreModule","directive","templateUrl","controller","restrict","scope","ElasticMetricAggCtrl","metricAggs","pipelineAggOptions","modelSettingsValues","updatePipelineAggOptions","isSingle","variablesLinkText","RegExp","opt","precisionThreshold","precision_threshold","percents","movingAvgModelTypes","modelSettings","updateMovingAvgModelSettings","inlineScript","inline","toggleVariables","showVariables","modelSettingsKeys","onChangeClearInternal","minimize","onTypeChange","addMetricAgg","removeMetricAgg","toggleShowMetric","newVariable","ElasticPipelineVariablesCtrl","variables","remove","ElasticQueryCtrl","$injector","refresh","queryUpdated","jsonStr","metricFindQuery","handleQueryError","bind","isPossiblyRawDataSwitch","newJson","rawQueryOld","appEvent","QueryCtrl","Select","LegacyForms","Input","FormField","indexPatternTypes","example","esVersions","ElasticDetails","className","labelWidth","inputWidth","changeHandler","placeholder","required","inputEl","intervalHandler","jsonDataChangeHandler","option","version","defaultMaxConcurrentShardRequests","getMaxConcurrenShardRequestOrDefault","aria-label","validationEvents","EventsWithValidation","onBlur","regexValidation","tooltip","currentTarget","newInterval","startsWith","newDatabase","LogsConfig","Switch","getStyles","stylesFactory","firstRow","css","nameField","regexField","row","DataLink","onDelete","suggestions","styles","useState","showInternalLink","setShowInternalLink","previousUid","usePrevious","useEffect","useInternalLink","variant","icon","onClick","preventDefault","newValue","checked","DataSourceSection","datasources","getDatasourceSrv","getExternal","ds","tracing","uid","selectedDatasource","d","DataSourcePicker","current","theme","infoText","spacing","md","colors","textWeak","sm","DataLinks","useTheme","newField","newDataLinks","DataLinkBuiltInVars","valueRaw","documentation","origin","VariableOrigin","Value","ElasticAnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigEditor","onOptionsChange","defaultUrl","dataSourceConfig","showAccessOptions","setAnnotationQueryCtrl","autoFocus","hideTextValue","openMenuOnFocus","showLoading","invalid","imgUrl","info","logos","small","loading","hideText","selectors","components","container","isMulti","isClearable","backspaceRemovesValue","maxMenuHeight","menuPlacement","noOptionsMessage","PureComponent","defaultProps","state","ref"],"mappings":"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","file":"elasticsearchPlugin.7bf174750e07ac7111d5.js","sourcesContent":["import _ from 'lodash';\n\nexport const metricAggTypes = [\n  { text: 'Count', value: 'count', requiresField: false },\n  {\n    text: 'Average',\n    value: 'avg',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Sum',\n    value: 'sum',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Max',\n    value: 'max',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Min',\n    value: 'min',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Extended Stats',\n    value: 'extended_stats',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Percentiles',\n    value: 'percentiles',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Unique Count',\n    value: 'cardinality',\n    requiresField: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Moving Average',\n    value: 'moving_avg',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Derivative',\n    value: 'derivative',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Cumulative Sum',\n    value: 'cumulative_sum',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Bucket Script',\n    value: 'bucket_script',\n    requiresField: false,\n    isPipelineAgg: true,\n    supportsMultipleBucketPaths: true,\n    minVersion: 2,\n  },\n  { text: 'Raw Document (legacy)', value: 'raw_document', requiresField: false },\n  { text: 'Raw Data', value: 'raw_data', requiresField: false },\n  { text: 'Logs', value: 'logs', requiresField: false },\n];\n\nexport const bucketAggTypes = [\n  { text: 'Terms', value: 'terms', requiresField: true },\n  { text: 'Filters', value: 'filters' },\n  { text: 'Geo Hash Grid', value: 'geohash_grid', requiresField: true },\n  { text: 'Date Histogram', value: 'date_histogram', requiresField: true },\n  { text: 'Histogram', value: 'histogram', requiresField: true },\n];\n\nexport const orderByOptions = [\n  { text: 'Doc Count', value: '_count' },\n  { text: 'Term value', value: '_term' },\n];\n\nexport const orderOptions = [\n  { text: 'Top', value: 'desc' },\n  { text: 'Bottom', value: 'asc' },\n];\n\nexport const sizeOptions = [\n  { text: 'No limit', value: '0' },\n  { text: '1', value: '1' },\n  { text: '2', value: '2' },\n  { text: '3', value: '3' },\n  { text: '5', value: '5' },\n  { text: '10', value: '10' },\n  { text: '15', value: '15' },\n  { text: '20', value: '20' },\n];\n\nexport const extendedStats = [\n  { text: 'Avg', value: 'avg' },\n  { text: 'Min', value: 'min' },\n  { text: 'Max', value: 'max' },\n  { text: 'Sum', value: 'sum' },\n  { text: 'Count', value: 'count' },\n  { text: 'Std Dev', value: 'std_deviation' },\n  { text: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { text: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const intervalOptions = [\n  { text: 'auto', value: 'auto' },\n  { text: '10s', value: '10s' },\n  { text: '1m', value: '1m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '20m', value: '20m' },\n  { text: '1h', value: '1h' },\n  { text: '1d', value: '1d' },\n];\n\nexport const movingAvgModelOptions = [\n  { text: 'Simple', value: 'simple' },\n  { text: 'Linear', value: 'linear' },\n  { text: 'Exponentially Weighted', value: 'ewma' },\n  { text: 'Holt Linear', value: 'holt' },\n  { text: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport const pipelineOptions: any = {\n  moving_avg: [\n    { text: 'window', default: 5 },\n    { text: 'model', default: 'simple' },\n    { text: 'predict', default: undefined },\n    { text: 'minimize', default: false },\n  ],\n  derivative: [{ text: 'unit', default: undefined }],\n  cumulative_sum: [{ text: 'format', default: undefined }],\n  bucket_script: [],\n};\n\nexport const movingAvgModelSettings: any = {\n  simple: [],\n  linear: [],\n  ewma: [{ text: 'Alpha', value: 'alpha', default: undefined }],\n  holt: [\n    { text: 'Alpha', value: 'alpha', default: undefined },\n    { text: 'Beta', value: 'beta', default: undefined },\n  ],\n  holt_winters: [\n    { text: 'Alpha', value: 'alpha', default: undefined },\n    { text: 'Beta', value: 'beta', default: undefined },\n    { text: 'Gamma', value: 'gamma', default: undefined },\n    { text: 'Period', value: 'period', default: undefined },\n    { text: 'Pad', value: 'pad', default: undefined, isCheckbox: true },\n  ],\n};\n\nexport function getMetricAggTypes(esVersion: any) {\n  return _.filter(metricAggTypes, f => {\n    if (f.minVersion) {\n      return f.minVersion <= esVersion;\n    } else {\n      return true;\n    }\n  });\n}\n\nexport function getPipelineOptions(metric: any) {\n  if (!isPipelineAgg(metric.type)) {\n    return [];\n  }\n\n  return pipelineOptions[metric.type];\n}\n\nexport function isPipelineAgg(metricType: any) {\n  if (metricType) {\n    const po = pipelineOptions[metricType];\n    return po !== null && po !== undefined;\n  }\n\n  return false;\n}\n\nexport function isPipelineAggWithMultipleBucketPaths(metricType: any) {\n  if (metricType) {\n    return metricAggTypes.find(t => t.value === metricType && t.supportsMultipleBucketPaths) !== undefined;\n  }\n\n  return false;\n}\n\nexport function getPipelineAggOptions(targets: any) {\n  const result: any[] = [];\n  _.each(targets.metrics, metric => {\n    if (!isPipelineAgg(metric.type)) {\n      result.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return result;\n}\n\nexport function getMovingAvgSettings(model: any, filtered: boolean) {\n  const filteredResult: any[] = [];\n  if (filtered) {\n    _.each(movingAvgModelSettings[model], setting => {\n      if (!setting.isCheckbox) {\n        filteredResult.push(setting);\n      }\n    });\n    return filteredResult;\n  }\n  return movingAvgModelSettings[model];\n}\n\nexport function getOrderByOptions(target: any) {\n  const metricRefs: any[] = [];\n  _.each(target.metrics, metric => {\n    if (metric.type !== 'count') {\n      metricRefs.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return orderByOptions.concat(metricRefs);\n}\n\nexport function describeOrder(order: string) {\n  const def: any = _.find(orderOptions, { value: order });\n  return def.text;\n}\n\nexport function describeMetric(metric: { type: string; field: string }) {\n  const def: any = _.find(metricAggTypes, { value: metric.type });\n  if (!def.requiresField && !isPipelineAgg(metric.type)) {\n    return def.text;\n  }\n  return def.text + ' ' + metric.field;\n}\n\nexport function describeOrderBy(orderBy: any, target: any) {\n  const def: any = _.find(orderByOptions, { value: orderBy });\n  if (def) {\n    return def.text;\n  }\n  const metric: any = _.find(target.metrics, { id: orderBy });\n  if (metric) {\n    return describeMetric(metric);\n  } else {\n    return 'metric not found';\n  }\n}\n\nexport function defaultMetricAgg() {\n  return { type: 'count', id: '1' };\n}\n\nexport function defaultBucketAgg() {\n  return { type: 'date_histogram', id: '2', settings: { interval: 'auto' } };\n}\n\nexport const findMetricById = (metrics: any[], id: any) => {\n  return _.find(metrics, { id: id });\n};\n\nexport function hasMetricOfType(target: any, type: string): boolean {\n  return target && target.metrics && target.metrics.some((m: any) => m.type === type);\n}\n","import _ from 'lodash';\nimport flatten from 'app/core/utils/flatten';\nimport * as queryDef from './query_def';\nimport TableModel from 'app/core/table_model';\nimport {\n  DataQueryResponse,\n  DataFrame,\n  toDataFrame,\n  FieldType,\n  MutableDataFrame,\n  PreferredVisualisationType,\n} from '@grafana/data';\nimport { ElasticsearchAggregation } from './types';\n\nexport class ElasticResponse {\n  constructor(private targets: any, private response: any) {\n    this.targets = targets;\n    this.response = response;\n  }\n\n  processMetrics(esAgg: any, target: any, seriesList: any, props: any) {\n    let metric, y, i, newSeries, bucket, value;\n\n    for (y = 0; y < target.metrics.length; y++) {\n      metric = target.metrics[y];\n      if (metric.hide) {\n        continue;\n      }\n\n      switch (metric.type) {\n        case 'count': {\n          newSeries = { datapoints: [], metric: 'count', props: props };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n            value = bucket.doc_count;\n            newSeries.datapoints.push([value, bucket.key]);\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n        case 'percentiles': {\n          if (esAgg.buckets.length === 0) {\n            break;\n          }\n\n          const firstBucket = esAgg.buckets[0];\n          const percentiles = firstBucket[metric.id].values;\n\n          for (const percentileName in percentiles) {\n            newSeries = {\n              datapoints: [],\n              metric: 'p' + percentileName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const values = bucket[metric.id].values;\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\n            }\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'extended_stats': {\n          for (const statName in metric.meta) {\n            if (!metric.meta[statName]) {\n              continue;\n            }\n\n            newSeries = {\n              datapoints: [],\n              metric: statName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const stats = bucket[metric.id];\n\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              newSeries.datapoints.push([stats[statName], bucket.key]);\n            }\n\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        default: {\n          newSeries = {\n            datapoints: [],\n            metric: metric.type,\n            field: metric.field,\n            metricId: metric.id,\n            props: props,\n          };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n\n            value = bucket[metric.id];\n            if (value !== undefined) {\n              if (value.normalized_value) {\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\n              } else {\n                newSeries.datapoints.push([value.value, bucket.key]);\n              }\n            }\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n      }\n    }\n  }\n\n  processAggregationDocs(esAgg: any, aggDef: ElasticsearchAggregation, target: any, table: any, props: any) {\n    // add columns\n    if (table.columns.length === 0) {\n      for (const propKey of _.keys(props)) {\n        table.addColumn({ text: propKey, filterable: true });\n      }\n      table.addColumn({ text: aggDef.field, filterable: true });\n    }\n\n    // helper func to add values to value array\n    const addMetricValue = (values: any[], metricName: string, value: any) => {\n      table.addColumn({ text: metricName });\n      values.push(value);\n    };\n    const buckets = _.isArray(esAgg.buckets) ? esAgg.buckets : [esAgg.buckets];\n    for (const bucket of buckets) {\n      const values = [];\n\n      for (const propValues of _.values(props)) {\n        values.push(propValues);\n      }\n\n      // add bucket key (value)\n      values.push(bucket.key);\n\n      for (const metric of target.metrics) {\n        switch (metric.type) {\n          case 'count': {\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\n            break;\n          }\n          case 'extended_stats': {\n            for (const statName in metric.meta) {\n              if (!metric.meta[statName]) {\n                continue;\n              }\n\n              const stats = bucket[metric.id];\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              addMetricValue(values, this.getMetricName(statName), stats[statName]);\n            }\n            break;\n          }\n          case 'percentiles': {\n            const percentiles = bucket[metric.id].values;\n\n            for (const percentileName in percentiles) {\n              addMetricValue(values, `p${percentileName} ${metric.field}`, percentiles[percentileName]);\n            }\n            break;\n          }\n          default: {\n            let metricName = this.getMetricName(metric.type);\n            const otherMetrics = _.filter(target.metrics, { type: metric.type });\n\n            // if more of the same metric type include field field name in property\n            if (otherMetrics.length > 1) {\n              metricName += ' ' + metric.field;\n            }\n\n            addMetricValue(values, metricName, bucket[metric.id].value);\n            break;\n          }\n        }\n      }\n\n      table.rows.push(values);\n    }\n  }\n\n  // This is quite complex\n  // need to recurse down the nested buckets to build series\n  processBuckets(aggs: any, target: any, seriesList: any, table: any, props: any, depth: any) {\n    let bucket, aggDef: any, esAgg, aggId;\n    const maxDepth = target.bucketAggs.length - 1;\n\n    for (aggId in aggs) {\n      aggDef = _.find(target.bucketAggs, { id: aggId });\n      esAgg = aggs[aggId];\n\n      if (!aggDef) {\n        continue;\n      }\n\n      if (depth === maxDepth) {\n        if (aggDef.type === 'date_histogram') {\n          this.processMetrics(esAgg, target, seriesList, props);\n        } else {\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\n        }\n      } else {\n        for (const nameIndex in esAgg.buckets) {\n          bucket = esAgg.buckets[nameIndex];\n          props = _.clone(props);\n          if (bucket.key !== void 0) {\n            props[aggDef.field] = bucket.key;\n          } else {\n            props['filter'] = nameIndex;\n          }\n          if (bucket.key_as_string) {\n            props[aggDef.field] = bucket.key_as_string;\n          }\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\n        }\n      }\n    }\n  }\n\n  private getMetricName(metric: any) {\n    let metricDef: any = _.find(queryDef.metricAggTypes, { value: metric });\n    if (!metricDef) {\n      metricDef = _.find(queryDef.extendedStats, { value: metric });\n    }\n\n    return metricDef ? metricDef.text : metric;\n  }\n\n  private getSeriesName(series: any, target: any, metricTypeCount: any) {\n    let metricName = this.getMetricName(series.metric);\n\n    if (target.alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      return target.alias.replace(regex, (match: any, g1: any, g2: any) => {\n        const group = g1 || g2;\n\n        if (group.indexOf('term ') === 0) {\n          return series.props[group.substring(5)];\n        }\n        if (series.props[group] !== void 0) {\n          return series.props[group];\n        }\n        if (group === 'metric') {\n          return metricName;\n        }\n        if (group === 'field') {\n          return series.field || '';\n        }\n\n        return match;\n      });\n    }\n\n    if (series.field && queryDef.isPipelineAgg(series.metric)) {\n      if (series.metric && queryDef.isPipelineAggWithMultipleBucketPaths(series.metric)) {\n        const agg: any = _.find(target.metrics, { id: series.metricId });\n        if (agg && agg.settings.script) {\n          metricName = agg.settings.script;\n\n          for (const pv of agg.pipelineVariables) {\n            const appliedAgg: any = _.find(target.metrics, { id: pv.pipelineAgg });\n            if (appliedAgg) {\n              metricName = metricName.replace('params.' + pv.name, queryDef.describeMetric(appliedAgg));\n            }\n          }\n        } else {\n          metricName = 'Unset';\n        }\n      } else {\n        const appliedAgg: any = _.find(target.metrics, { id: series.field });\n        if (appliedAgg) {\n          metricName += ' ' + queryDef.describeMetric(appliedAgg);\n        } else {\n          metricName = 'Unset';\n        }\n      }\n    } else if (series.field) {\n      metricName += ' ' + series.field;\n    }\n\n    const propKeys = _.keys(series.props);\n    if (propKeys.length === 0) {\n      return metricName;\n    }\n\n    let name = '';\n    for (const propName in series.props) {\n      name += series.props[propName] + ' ';\n    }\n\n    if (metricTypeCount === 1) {\n      return name.trim();\n    }\n\n    return name.trim() + ' ' + metricName;\n  }\n\n  nameSeries(seriesList: any, target: any) {\n    const metricTypeCount = _.uniq(_.map(seriesList, 'metric')).length;\n\n    for (let i = 0; i < seriesList.length; i++) {\n      const series = seriesList[i];\n      series.target = this.getSeriesName(series, target, metricTypeCount);\n    }\n  }\n\n  processHits(hits: { total: { value: any }; hits: any[] }, seriesList: any[]) {\n    const hitsTotal = typeof hits.total === 'number' ? hits.total : hits.total.value; // <- Works with Elasticsearch 7.0+\n\n    const series: any = {\n      target: 'docs',\n      type: 'docs',\n      datapoints: [],\n      total: hitsTotal,\n      filterable: true,\n    };\n    let propName, hit, doc: any, i;\n\n    for (i = 0; i < hits.hits.length; i++) {\n      hit = hits.hits[i];\n      doc = {\n        _id: hit._id,\n        _type: hit._type,\n        _index: hit._index,\n      };\n\n      if (hit._source) {\n        for (propName in hit._source) {\n          doc[propName] = hit._source[propName];\n        }\n      }\n\n      for (propName in hit.fields) {\n        doc[propName] = hit.fields[propName];\n      }\n      series.datapoints.push(doc);\n    }\n\n    seriesList.push(series);\n  }\n\n  trimDatapoints(aggregations: any, target: any) {\n    const histogram: any = _.find(target.bucketAggs, { type: 'date_histogram' });\n\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\n    if (shouldDropFirstAndLast) {\n      const trim = histogram.settings.trimEdges;\n      for (const prop in aggregations) {\n        const points = aggregations[prop];\n        if (points.datapoints.length > trim * 2) {\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\n        }\n      }\n    }\n  }\n\n  getErrorFromElasticResponse(response: any, err: any) {\n    const result: any = {};\n    result.data = JSON.stringify(err, null, 4);\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\n      result.message = err.root_cause[0].reason;\n    } else {\n      result.message = err.reason || 'Unknown elastic error response';\n    }\n\n    if (response.$$config) {\n      result.config = response.$$config;\n    }\n\n    return result;\n  }\n\n  getTimeSeries() {\n    if (this.targets.some((target: any) => target.metrics.some((metric: any) => metric.type === 'raw_data'))) {\n      return this.processResponseToDataFrames(false);\n    }\n    return this.processResponseToSeries();\n  }\n\n  getLogs(logMessageField?: string, logLevelField?: string): DataQueryResponse {\n    return this.processResponseToDataFrames(true, logMessageField, logLevelField);\n  }\n\n  processResponseToDataFrames(\n    isLogsRequest: boolean,\n    logMessageField?: string,\n    logLevelField?: string\n  ): DataQueryResponse {\n    const dataFrame: DataFrame[] = [];\n\n    for (let n = 0; n < this.response.responses.length; n++) {\n      const response = this.response.responses[n];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        const { propNames, docs } = flattenHits(response.hits.hits);\n        if (docs.length > 0) {\n          let series = createEmptyDataFrame(\n            propNames,\n            this.targets[0].timeField,\n            isLogsRequest,\n            logMessageField,\n            logLevelField\n          );\n\n          // Add a row for each document\n          for (const doc of docs) {\n            if (logLevelField) {\n              // Remap level field based on the datasource config. This field is then used in explore to figure out the\n              // log level. We may rewrite some actual data in the level field if they are different.\n              doc['level'] = doc[logLevelField];\n            }\n\n            series.add(doc);\n          }\n          if (isLogsRequest) {\n            series = addPreferredVisualisationType(series, 'logs');\n          }\n          dataFrame.push(series);\n        }\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[n];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        if (table.rows.length > 0) {\n          dataFrame.push(toDataFrame(table));\n        }\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          let series = toDataFrame(tmpSeriesList[y]);\n\n          // When log results, show aggregations only in graph. Log fields are then going to be shown in table.\n          if (isLogsRequest) {\n            series = addPreferredVisualisationType(series, 'graph');\n          }\n\n          dataFrame.push(series);\n        }\n      }\n    }\n\n    return { data: dataFrame };\n  }\n\n  processResponseToSeries = () => {\n    const seriesList = [];\n\n    for (let i = 0; i < this.response.responses.length; i++) {\n      const response = this.response.responses[i];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        this.processHits(response.hits, seriesList);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[i];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          seriesList.push(tmpSeriesList[y]);\n        }\n\n        if (table.rows.length > 0) {\n          seriesList.push(table);\n        }\n      }\n    }\n\n    return { data: seriesList };\n  };\n}\n\ntype Doc = {\n  _id: string;\n  _type: string;\n  _index: string;\n  _source?: any;\n};\n\n/**\n * Flatten the docs from response mainly the _source part which can be nested. This flattens it so that it is one level\n * deep and the keys are: `level1Name.level2Name...`. Also returns list of all properties from all the docs (not all\n * docs have to have the same keys).\n * @param hits\n */\nconst flattenHits = (hits: Doc[]): { docs: Array<Record<string, any>>; propNames: string[] } => {\n  const docs: any[] = [];\n  // We keep a list of all props so that we can create all the fields in the dataFrame, this can lead\n  // to wide sparse dataframes in case the scheme is different per document.\n  let propNames: string[] = [];\n\n  for (const hit of hits) {\n    const flattened = hit._source ? flatten(hit._source, null) : {};\n    const doc = {\n      _id: hit._id,\n      _type: hit._type,\n      _index: hit._index,\n      _source: { ...flattened },\n      ...flattened,\n    };\n\n    for (const propName of Object.keys(doc)) {\n      if (propNames.indexOf(propName) === -1) {\n        propNames.push(propName);\n      }\n    }\n\n    docs.push(doc);\n  }\n\n  propNames.sort();\n  return { docs, propNames };\n};\n\n/**\n * Create empty dataframe but with created fields. Fields are based from propNames (should be from the response) and\n * also from configuration specified fields for message, time, and level.\n * @param propNames\n * @param timeField\n * @param logMessageField\n * @param logLevelField\n */\nconst createEmptyDataFrame = (\n  propNames: string[],\n  timeField: string,\n  isLogsRequest: boolean,\n  logMessageField?: string,\n  logLevelField?: string\n): MutableDataFrame => {\n  const series = new MutableDataFrame({ fields: [] });\n\n  series.addField({\n    name: timeField,\n    type: FieldType.time,\n  });\n\n  if (logMessageField) {\n    series.addField({\n      name: logMessageField,\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  if (logLevelField) {\n    series.addField({\n      name: 'level',\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  const fieldNames = series.fields.map(field => field.name);\n\n  for (const propName of propNames) {\n    // Do not duplicate fields. This can mean that we will shadow some fields.\n    if (fieldNames.includes(propName)) {\n      continue;\n    }\n    // Do not add _source field (besides logs) as we are showing each _source field in table instead.\n    if (!isLogsRequest && propName === '_source') {\n      continue;\n    }\n\n    series.addField({\n      name: propName,\n      type: FieldType.string,\n    }).parse = (v: any) => {\n      return v || '';\n    };\n  }\n\n  return series;\n};\n\nconst addPreferredVisualisationType = (series: any, type: PreferredVisualisationType) => {\n  let s = series;\n  s.meta\n    ? (s.meta.preferredVisualisationType = type)\n    : (s.meta = {\n        preferredVisualisationType: type,\n      });\n\n  return s;\n};\n","import { toUtc, dateTime } from '@grafana/data';\n\nconst intervalMap: any = {\n  Hourly: { startOf: 'hour', amount: 'hours' },\n  Daily: { startOf: 'day', amount: 'days' },\n  Weekly: { startOf: 'isoWeek', amount: 'weeks' },\n  Monthly: { startOf: 'month', amount: 'months' },\n  Yearly: { startOf: 'year', amount: 'years' },\n};\n\nexport class IndexPattern {\n  constructor(private pattern: any, private interval: string | null) {}\n\n  getIndexForToday() {\n    if (this.interval) {\n      return toUtc().format(this.pattern);\n    } else {\n      return this.pattern;\n    }\n  }\n\n  getIndexList(from: any, to: any) {\n    if (!this.interval) {\n      return this.pattern;\n    }\n\n    const intervalInfo = intervalMap[this.interval];\n    const start = dateTime(from)\n      .utc()\n      .startOf(intervalInfo.startOf);\n    const endEpoch = dateTime(to)\n      .utc()\n      .startOf(intervalInfo.startOf)\n      .valueOf();\n    const indexList = [];\n\n    while (start.valueOf() <= endEpoch) {\n      indexList.push(start.format(this.pattern));\n      start.add(1, intervalInfo.amount);\n    }\n\n    return indexList;\n  }\n}\n","import * as queryDef from './query_def';\nimport { ElasticsearchAggregation } from './types';\n\nexport class ElasticQueryBuilder {\n  timeField: string;\n  esVersion: number;\n\n  constructor(options: { timeField: string; esVersion: number }) {\n    this.timeField = options.timeField;\n    this.esVersion = options.esVersion;\n  }\n\n  getRangeFilter() {\n    const filter: any = {};\n    filter[this.timeField] = {\n      gte: '$timeFrom',\n      lte: '$timeTo',\n      format: 'epoch_millis',\n    };\n\n    return filter;\n  }\n\n  buildTermsAgg(aggDef: ElasticsearchAggregation, queryNode: { terms?: any; aggs?: any }, target: { metrics: any[] }) {\n    let metricRef, metric, y;\n    queryNode.terms = { field: aggDef.field };\n\n    if (!aggDef.settings) {\n      return queryNode;\n    }\n\n    queryNode.terms.size = parseInt(aggDef.settings.size, 10) === 0 ? 500 : parseInt(aggDef.settings.size, 10);\n    if (aggDef.settings.orderBy !== void 0) {\n      queryNode.terms.order = {};\n      if (aggDef.settings.orderBy === '_term' && this.esVersion >= 60) {\n        queryNode.terms.order['_key'] = aggDef.settings.order;\n      } else {\n        queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\n      }\n\n      // if metric ref, look it up and add it to this agg level\n      metricRef = parseInt(aggDef.settings.orderBy, 10);\n      if (!isNaN(metricRef)) {\n        for (y = 0; y < target.metrics.length; y++) {\n          metric = target.metrics[y];\n          if (metric.id === aggDef.settings.orderBy) {\n            queryNode.aggs = {};\n            queryNode.aggs[metric.id] = {};\n            queryNode.aggs[metric.id][metric.type] = { field: metric.field };\n            break;\n          }\n        }\n      }\n    }\n\n    if (aggDef.settings.min_doc_count !== void 0) {\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\n\n      if (isNaN(queryNode.terms.min_doc_count)) {\n        queryNode.terms.min_doc_count = aggDef.settings.min_doc_count;\n      }\n    }\n\n    if (aggDef.settings.missing) {\n      queryNode.terms.missing = aggDef.settings.missing;\n    }\n\n    return queryNode;\n  }\n\n  getDateHistogramAgg(aggDef: ElasticsearchAggregation) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = this.timeField;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\n    esAgg.format = 'epoch_millis';\n\n    if (settings.offset !== '') {\n      esAgg.offset = settings.offset;\n    }\n\n    if (esAgg.interval === 'auto') {\n      esAgg.interval = '$__interval';\n    }\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n\n    return esAgg;\n  }\n\n  getHistogramAgg(aggDef: ElasticsearchAggregation) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = aggDef.field;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n    return esAgg;\n  }\n\n  getFiltersAgg(aggDef: ElasticsearchAggregation) {\n    const filterObj: any = {};\n    for (let i = 0; i < aggDef.settings.filters.length; i++) {\n      const query = aggDef.settings.filters[i].query;\n      let label = aggDef.settings.filters[i].label;\n      label = label === '' || label === undefined ? query : label;\n      filterObj[label] = {\n        query_string: {\n          query: query,\n          analyze_wildcard: true,\n        },\n      };\n    }\n\n    return filterObj;\n  }\n\n  documentQuery(query: any, size: number) {\n    query.size = size;\n    query.sort = {};\n    query.sort[this.timeField] = { order: 'desc', unmapped_type: 'boolean' };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      query.fields = ['*', '_source'];\n    }\n\n    query.script_fields = {};\n    return query;\n  }\n\n  addAdhocFilters(query: any, adhocFilters: any) {\n    if (!adhocFilters) {\n      return;\n    }\n\n    let i, filter, condition: any, queryCondition: any;\n\n    for (i = 0; i < adhocFilters.length; i++) {\n      filter = adhocFilters[i];\n      condition = {};\n      condition[filter.key] = filter.value;\n      queryCondition = {};\n      queryCondition[filter.key] = { query: filter.value };\n\n      switch (filter.operator) {\n        case '=':\n          if (!query.query.bool.must) {\n            query.query.bool.must = [];\n          }\n          query.query.bool.must.push({ match_phrase: queryCondition });\n          break;\n        case '!=':\n          if (!query.query.bool.must_not) {\n            query.query.bool.must_not = [];\n          }\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\n          break;\n        case '<':\n          condition[filter.key] = { lt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '>':\n          condition[filter.key] = { gt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '=~':\n          query.query.bool.filter.push({ regexp: condition });\n          break;\n        case '!~':\n          query.query.bool.filter.push({\n            bool: { must_not: { regexp: condition } },\n          });\n          break;\n      }\n    }\n  }\n\n  build(target: any, adhocFilters?: any, queryString?: string) {\n    // make sure query has defaults;\n    target.metrics = target.metrics || [queryDef.defaultMetricAgg()];\n    target.bucketAggs = target.bucketAggs || [queryDef.defaultBucketAgg()];\n    target.timeField = this.timeField;\n\n    let i, j, pv, nestedAggs, metric;\n    const query = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [\n            { range: this.getRangeFilter() },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: queryString,\n              },\n            },\n          ],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    // If target doesn't have bucketAggs and type is not raw_document, it is invalid query.\n    if (target.bucketAggs.length === 0) {\n      metric = target.metrics[0];\n\n      if (!metric || !(metric.type === 'raw_document' || metric.type === 'raw_data')) {\n        throw { message: 'Invalid query' };\n      }\n    }\n\n    /* Handle document query:\n     * Check if metric type is raw_document. If metric doesn't have size (or size is 0), update size to 500.\n     * Otherwise it will not be a valid query and error will be thrown.\n     */\n    if (target.metrics?.[0]?.type === 'raw_document' || target.metrics?.[0]?.type === 'raw_data') {\n      metric = target.metrics[0];\n      const size = (metric.settings && metric.settings.size !== 0 && metric.settings.size) || 500;\n      return this.documentQuery(query, size);\n    }\n\n    nestedAggs = query;\n\n    for (i = 0; i < target.bucketAggs.length; i++) {\n      const aggDef: any = target.bucketAggs[i];\n      const esAgg: any = {};\n\n      switch (aggDef.type) {\n        case 'date_histogram': {\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\n          break;\n        }\n        case 'histogram': {\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\n          break;\n        }\n        case 'filters': {\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\n          break;\n        }\n        case 'terms': {\n          this.buildTermsAgg(aggDef, esAgg, target);\n          break;\n        }\n        case 'geohash_grid': {\n          esAgg['geohash_grid'] = {\n            field: aggDef.field,\n            precision: aggDef.settings.precision,\n          };\n          break;\n        }\n      }\n\n      nestedAggs.aggs = nestedAggs.aggs || {};\n      nestedAggs.aggs[aggDef.id] = esAgg;\n      nestedAggs = esAgg;\n    }\n\n    nestedAggs.aggs = {};\n\n    for (i = 0; i < target.metrics.length; i++) {\n      metric = target.metrics[i];\n      if (metric.type === 'count') {\n        continue;\n      }\n\n      const aggField: any = {};\n      let metricAgg: any = null;\n\n      if (queryDef.isPipelineAgg(metric.type)) {\n        if (queryDef.isPipelineAggWithMultipleBucketPaths(metric.type)) {\n          if (metric.pipelineVariables) {\n            metricAgg = {\n              buckets_path: {},\n            };\n\n            for (j = 0; j < metric.pipelineVariables.length; j++) {\n              pv = metric.pipelineVariables[j];\n\n              if (pv.name && pv.pipelineAgg && /^\\d*$/.test(pv.pipelineAgg)) {\n                const appliedAgg = queryDef.findMetricById(target.metrics, pv.pipelineAgg);\n                if (appliedAgg) {\n                  if (appliedAgg.type === 'count') {\n                    metricAgg.buckets_path[pv.name] = '_count';\n                  } else {\n                    metricAgg.buckets_path[pv.name] = pv.pipelineAgg;\n                  }\n                }\n              }\n            }\n          } else {\n            continue;\n          }\n        } else {\n          if (metric.pipelineAgg && /^\\d*$/.test(metric.pipelineAgg)) {\n            const appliedAgg = queryDef.findMetricById(target.metrics, metric.pipelineAgg);\n            if (appliedAgg) {\n              if (appliedAgg.type === 'count') {\n                metricAgg = { buckets_path: '_count' };\n              } else {\n                metricAgg = { buckets_path: metric.pipelineAgg };\n              }\n            }\n          } else {\n            continue;\n          }\n        }\n      } else {\n        metricAgg = { field: metric.field };\n      }\n\n      for (const prop in metric.settings) {\n        if (metric.settings.hasOwnProperty(prop) && metric.settings[prop] !== null) {\n          metricAgg[prop] = metric.settings[prop];\n        }\n      }\n\n      aggField[metric.type] = metricAgg;\n      nestedAggs.aggs[metric.id] = aggField;\n    }\n\n    return query;\n  }\n\n  getTermsQuery(queryDef: any) {\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (queryDef.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: queryDef.query,\n        },\n      });\n    }\n\n    let size = 500;\n    if (queryDef.size) {\n      size = queryDef.size;\n    }\n\n    query.aggs = {\n      '1': {\n        terms: {\n          field: queryDef.field,\n          size: size,\n          order: {},\n        },\n      },\n    };\n\n    // Default behaviour is to order results by { _key: asc }\n    // queryDef.order allows selection of asc/desc\n    // queryDef.orderBy allows selection of doc_count ordering (defaults desc)\n\n    const { orderBy = 'key', order = orderBy === 'doc_count' ? 'desc' : 'asc' } = queryDef;\n\n    if (['asc', 'desc'].indexOf(order) < 0) {\n      throw { message: `Invalid query sort order ${order}` };\n    }\n\n    switch (orderBy) {\n      case 'key':\n      case 'term':\n        const keyname = this.esVersion >= 60 ? '_key' : '_term';\n        query.aggs['1'].terms.order[keyname] = order;\n        break;\n      case 'doc_count':\n        query.aggs['1'].terms.order['_count'] = order;\n        break;\n      default:\n        throw { message: `Invalid query sort type ${orderBy}` };\n    }\n\n    return query;\n  }\n\n  getLogsQuery(target: any, adhocFilters?: any, querystring?: string) {\n    let query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    if (target.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: querystring,\n        },\n      });\n    }\n\n    query = this.documentQuery(query, 500);\n\n    return {\n      ...query,\n      aggs: this.build(target, null, querystring).aggs,\n    };\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport {\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataFrame,\n  ScopedVars,\n  DataLink,\n} from '@grafana/data';\nimport { ElasticResponse } from './elastic_response';\nimport { IndexPattern } from './index_pattern';\nimport { ElasticQueryBuilder } from './query_builder';\nimport { toUtc } from '@grafana/data';\nimport * as queryDef from './query_def';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { DataLinkConfig, ElasticsearchOptions, ElasticsearchQuery } from './types';\n\nexport class ElasticDatasource extends DataSourceApi<ElasticsearchQuery, ElasticsearchOptions> {\n  basicAuth: string;\n  withCredentials: boolean;\n  url: string;\n  name: string;\n  index: string;\n  timeField: string;\n  esVersion: number;\n  interval: string;\n  maxConcurrentShardRequests: number;\n  queryBuilder: ElasticQueryBuilder;\n  indexPattern: IndexPattern;\n  logMessageField?: string;\n  logLevelField?: string;\n  dataLinks: DataLinkConfig[];\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<ElasticsearchOptions>,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.index = instanceSettings.database;\n    const settingsData = instanceSettings.jsonData || ({} as ElasticsearchOptions);\n\n    this.timeField = settingsData.timeField;\n    this.esVersion = settingsData.esVersion;\n    this.indexPattern = new IndexPattern(this.index, settingsData.interval);\n    this.interval = settingsData.timeInterval;\n    this.maxConcurrentShardRequests = settingsData.maxConcurrentShardRequests;\n    this.queryBuilder = new ElasticQueryBuilder({\n      timeField: this.timeField,\n      esVersion: this.esVersion,\n    });\n    this.logMessageField = settingsData.logMessageField || '';\n    this.logLevelField = settingsData.logLevelField || '';\n    this.dataLinks = settingsData.dataLinks || [];\n\n    if (this.logMessageField === '') {\n      this.logMessageField = null;\n    }\n\n    if (this.logLevelField === '') {\n      this.logLevelField = null;\n    }\n  }\n\n  private request(method: string, url: string, data?: undefined) {\n    const options: any = {\n      url: this.url + '/' + url,\n      method: method,\n      data: data,\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return getBackendSrv()\n      .datasourceRequest(options)\n      .catch((err: any) => {\n        if (err.data && err.data.error) {\n          throw {\n            message: 'Elasticsearch error: ' + err.data.error.reason,\n            error: err.data.error,\n          };\n        }\n        throw err;\n      });\n  }\n\n  /**\n   * Sends a GET request to the specified url on the newest matching and available index.\n   *\n   * When multiple indices span the provided time range, the request is sent starting from the newest index,\n   * and then going backwards until an index is found.\n   *\n   * @param url the url to query the index on, for example `/_mapping`.\n   */\n  private get(url: string) {\n    const range = this.timeSrv.timeRange();\n    const indexList = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());\n    if (_.isArray(indexList) && indexList.length) {\n      return this.requestAllIndices(indexList, url).then((results: any) => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    } else {\n      return this.request('GET', this.indexPattern.getIndexForToday() + url).then((results: any) => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    }\n  }\n\n  private async requestAllIndices(indexList: string[], url: string): Promise<any> {\n    const maxTraversals = 7; // do not go beyond one week (for a daily pattern)\n    const listLen = indexList.length;\n    for (let i = 0; i < Math.min(listLen, maxTraversals); i++) {\n      try {\n        return await this.request('GET', indexList[listLen - i - 1] + url);\n      } catch (err) {\n        if (err.status !== 404 || i === maxTraversals - 1) {\n          throw err;\n        }\n      }\n    }\n  }\n\n  private post(url: string, data: any) {\n    return this.request('POST', url, data).then((results: any) => {\n      results.data.$$config = results.config;\n      return results.data;\n    });\n  }\n\n  annotationQuery(options: any): Promise<any> {\n    const annotation = options.annotation;\n    const timeField = annotation.timeField || '@timestamp';\n    const timeEndField = annotation.timeEndField || null;\n    const queryString = annotation.query || '*';\n    const tagsField = annotation.tagsField || 'tags';\n    const textField = annotation.textField || null;\n\n    const dateRanges = [];\n    const rangeStart: any = {};\n    rangeStart[timeField] = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      format: 'epoch_millis',\n    };\n    dateRanges.push({ range: rangeStart });\n\n    if (timeEndField) {\n      const rangeEnd: any = {};\n      rangeEnd[timeEndField] = {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        format: 'epoch_millis',\n      };\n      dateRanges.push({ range: rangeEnd });\n    }\n\n    const queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');\n    const query = {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: dateRanges,\n              minimum_should_match: 1,\n            },\n          },\n          {\n            query_string: {\n              query: queryInterpolated,\n            },\n          },\n        ],\n      },\n    };\n\n    const data: any = {\n      query,\n      size: 10000,\n    };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      data['fields'] = [timeField, '_source'];\n    }\n\n    const header: any = {\n      search_type: 'query_then_fetch',\n      ignore_unavailable: true,\n    };\n\n    // old elastic annotations had index specified on them\n    if (annotation.index) {\n      header.index = annotation.index;\n    } else {\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\n    }\n\n    const payload = angular.toJson(header) + '\\n' + angular.toJson(data) + '\\n';\n\n    return this.post('_msearch', payload).then((res: any) => {\n      const list = [];\n      const hits = res.responses[0].hits.hits;\n\n      const getFieldFromSource = (source: any, fieldName: any) => {\n        if (!fieldName) {\n          return;\n        }\n\n        const fieldNames = fieldName.split('.');\n        let fieldValue = source;\n\n        for (let i = 0; i < fieldNames.length; i++) {\n          fieldValue = fieldValue[fieldNames[i]];\n          if (!fieldValue) {\n            console.log('could not find field in annotation: ', fieldName);\n            return '';\n          }\n        }\n\n        return fieldValue;\n      };\n\n      for (let i = 0; i < hits.length; i++) {\n        const source = hits[i]._source;\n        let time = getFieldFromSource(source, timeField);\n        if (typeof hits[i].fields !== 'undefined') {\n          const fields = hits[i].fields;\n          if (_.isString(fields[timeField]) || _.isNumber(fields[timeField])) {\n            time = fields[timeField];\n          }\n        }\n\n        const event: {\n          annotation: any;\n          time: number;\n          timeEnd?: number;\n          text: string;\n          tags: string | string[];\n        } = {\n          annotation: annotation,\n          time: toUtc(time).valueOf(),\n          text: getFieldFromSource(source, textField),\n          tags: getFieldFromSource(source, tagsField),\n        };\n\n        if (timeEndField) {\n          const timeEnd = getFieldFromSource(source, timeEndField);\n          if (timeEnd) {\n            event.timeEnd = toUtc(timeEnd).valueOf();\n          }\n        }\n\n        // legacy support for title tield\n        if (annotation.titleField) {\n          const title = getFieldFromSource(source, annotation.titleField);\n          if (title) {\n            event.text = title + '\\n' + event.text;\n          }\n        }\n\n        if (typeof event.tags === 'string') {\n          event.tags = event.tags.split(',');\n        }\n\n        list.push(event);\n      }\n      return list;\n    });\n  }\n\n  interpolateVariablesInQueries(queries: ElasticsearchQuery[], scopedVars: ScopedVars): ElasticsearchQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          query: this.templateSrv.replace(query.query, scopedVars, 'lucene'),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  testDatasource() {\n    // validate that the index exist and has date field\n    return this.getFields({ type: 'date' }).then(\n      (dateFields: any) => {\n        const timeField: any = _.find(dateFields, { text: this.timeField });\n        if (!timeField) {\n          return {\n            status: 'error',\n            message: 'No date field named ' + this.timeField + ' found',\n          };\n        }\n        return { status: 'success', message: 'Index OK. Time field name OK.' };\n      },\n      (err: any) => {\n        console.log(err);\n        if (err.data && err.data.error) {\n          let message = angular.toJson(err.data.error);\n          if (err.data.error.reason) {\n            message = err.data.error.reason;\n          }\n          return { status: 'error', message: message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      }\n    );\n  }\n\n  getQueryHeader(searchType: any, timeFrom: any, timeTo: any) {\n    const queryHeader: any = {\n      search_type: searchType,\n      ignore_unavailable: true,\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\n    };\n    if (this.esVersion >= 56 && this.esVersion < 70) {\n      queryHeader['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;\n    }\n    return angular.toJson(queryHeader);\n  }\n\n  query(options: DataQueryRequest<ElasticsearchQuery>): Promise<DataQueryResponse> {\n    let payload = '';\n    const targets = _.cloneDeep(options.targets);\n    const sentTargets: ElasticsearchQuery[] = [];\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    for (const target of targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      let queryString = this.templateSrv.replace(target.query, options.scopedVars, 'lucene');\n      // Elasticsearch queryString should always be '*' if empty string\n      if (!queryString || queryString === '') {\n        queryString = '*';\n      }\n\n      let queryObj;\n      if (target.isLogsQuery || queryDef.hasMetricOfType(target, 'logs')) {\n        target.bucketAggs = [queryDef.defaultBucketAgg()];\n        target.metrics = [];\n        // Setting this for metrics queries that are typed as logs\n        target.isLogsQuery = true;\n        queryObj = this.queryBuilder.getLogsQuery(target, adhocFilters, queryString);\n      } else {\n        if (target.alias) {\n          target.alias = this.templateSrv.replace(target.alias, options.scopedVars, 'lucene');\n        }\n\n        queryObj = this.queryBuilder.build(target, adhocFilters, queryString);\n      }\n\n      const esQuery = angular.toJson(queryObj);\n\n      const searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\n      payload += header + '\\n';\n\n      payload += esQuery + '\\n';\n\n      sentTargets.push(target);\n    }\n\n    if (sentTargets.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    // We replace the range here for actual values. We need to replace it together with enclosing \"\" so that we replace\n    // it as an integer not as string with digits. This is because elastic will convert the string only if the time\n    // field is specified as type date (which probably should) but can also be specified as integer (millisecond epoch)\n    // and then sending string will error out.\n    payload = payload.replace(/\"\\$timeFrom\"/g, options.range.from.valueOf().toString());\n    payload = payload.replace(/\"\\$timeTo\"/g, options.range.to.valueOf().toString());\n    payload = this.templateSrv.replace(payload, options.scopedVars);\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, payload).then((res: any) => {\n      const er = new ElasticResponse(sentTargets, res);\n      if (sentTargets.some(target => target.isLogsQuery)) {\n        const response = er.getLogs(this.logMessageField, this.logLevelField);\n        for (const dataFrame of response.data) {\n          enhanceDataFrame(dataFrame, this.dataLinks);\n        }\n        return response;\n      }\n\n      return er.getTimeSeries();\n    });\n  }\n\n  getFields(query: any) {\n    const configuredEsVersion = this.esVersion;\n    return this.get('/_mapping').then((result: any) => {\n      const typeMap: any = {\n        float: 'number',\n        double: 'number',\n        integer: 'number',\n        long: 'number',\n        date: 'date',\n        string: 'string',\n        text: 'string',\n        scaled_float: 'number',\n        nested: 'nested',\n      };\n\n      function shouldAddField(obj: any, key: any, query: any) {\n        if (key[0] === '_') {\n          return false;\n        }\n\n        if (!query.type) {\n          return true;\n        }\n\n        // equal query type filter, or via typemap translation\n        return query.type === obj.type || query.type === typeMap[obj.type];\n      }\n\n      // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\n      const fieldNameParts: any = [];\n      const fields: any = {};\n\n      function getFieldsRecursively(obj: any) {\n        for (const key in obj) {\n          const subObj = obj[key];\n\n          // Check mapping field for nested fields\n          if (_.isObject(subObj.properties)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.properties);\n          }\n\n          if (_.isObject(subObj.fields)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.fields);\n          }\n\n          if (_.isString(subObj.type)) {\n            const fieldName = fieldNameParts.concat(key).join('.');\n\n            // Hide meta-fields and check field type\n            if (shouldAddField(subObj, key, query)) {\n              fields[fieldName] = {\n                text: fieldName,\n                type: subObj.type,\n              };\n            }\n          }\n        }\n        fieldNameParts.pop();\n      }\n\n      for (const indexName in result) {\n        const index = result[indexName];\n        if (index && index.mappings) {\n          const mappings = index.mappings;\n\n          if (configuredEsVersion < 70) {\n            for (const typeName in mappings) {\n              const properties = mappings[typeName].properties;\n              getFieldsRecursively(properties);\n            }\n          } else {\n            const properties = mappings.properties;\n            getFieldsRecursively(properties);\n          }\n        }\n      }\n\n      // transform to array\n      return _.map(fields, value => {\n        return value;\n      });\n    });\n  }\n\n  getTerms(queryDef: any) {\n    const range = this.timeSrv.timeRange();\n    const searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';\n    const header = this.getQueryHeader(searchType, range.from, range.to);\n    let esQuery = angular.toJson(this.queryBuilder.getTermsQuery(queryDef));\n\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf().toString());\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf().toString());\n    esQuery = header + '\\n' + esQuery + '\\n';\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, esQuery).then((res: any) => {\n      if (!res.responses[0].aggregations) {\n        return [];\n      }\n\n      const buckets = res.responses[0].aggregations['1'].buckets;\n      return _.map(buckets, bucket => {\n        return {\n          text: bucket.key_as_string || bucket.key,\n          value: bucket.key,\n        };\n      });\n    });\n  }\n\n  getMultiSearchUrl() {\n    if (this.esVersion >= 70 && this.maxConcurrentShardRequests) {\n      return `_msearch?max_concurrent_shard_requests=${this.maxConcurrentShardRequests}`;\n    }\n\n    return '_msearch';\n  }\n\n  metricFindQuery(query: any) {\n    query = angular.fromJson(query);\n    if (query) {\n      if (query.find === 'fields') {\n        query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n        return this.getFields(query);\n      }\n\n      if (query.find === 'terms') {\n        query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n        query.query = this.templateSrv.replace(query.query || '*', {}, 'lucene');\n        return this.getTerms(query);\n      }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getTagKeys() {\n    return this.getFields({});\n  }\n\n  getTagValues(options: any) {\n    return this.getTerms({ field: options.key, query: '*' });\n  }\n\n  targetContainsTemplate(target: any) {\n    if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {\n      return true;\n    }\n\n    for (const bucketAgg of target.bucketAggs) {\n      if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\n        return true;\n      }\n    }\n\n    for (const metric of target.metrics) {\n      if (\n        this.templateSrv.variableExists(metric.field) ||\n        this.objectContainsTemplate(metric.settings) ||\n        this.objectContainsTemplate(metric.meta)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isPrimitive(obj: any) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n    if (['string', 'number', 'boolean'].some(type => type === typeof true)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private objectContainsTemplate(obj: any) {\n    if (!obj) {\n      return false;\n    }\n\n    for (const key of Object.keys(obj)) {\n      if (this.isPrimitive(obj[key])) {\n        if (this.templateSrv.variableExists(obj[key])) {\n          return true;\n        }\n      } else if (Array.isArray(obj[key])) {\n        for (const item of obj[key]) {\n          if (this.objectContainsTemplate(item)) {\n            return true;\n          }\n        }\n      } else {\n        if (this.objectContainsTemplate(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Modifies dataframe and adds dataLinks from the config.\n * Exported for tests.\n */\nexport function enhanceDataFrame(dataFrame: DataFrame, dataLinks: DataLinkConfig[]) {\n  if (dataLinks.length) {\n    for (const field of dataFrame.fields) {\n      const dataLinkConfig = dataLinks.find(dataLink => field.name && field.name.match(dataLink.field));\n      if (dataLinkConfig) {\n        let link: DataLink;\n        if (dataLinkConfig.datasourceUid) {\n          link = {\n            title: '',\n            url: '',\n            internal: {\n              query: { query: dataLinkConfig.url },\n              datasourceUid: dataLinkConfig.datasourceUid,\n            },\n          };\n        } else {\n          link = {\n            title: '',\n            url: dataLinkConfig.url,\n          };\n        }\n        field.config = field.config || {};\n        field.config.links = [...(field.config.links || []), link];\n      }\n    }\n  }\n}\n","import coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { GrafanaRootScope } from 'app/routes/GrafanaCtrl';\nimport { CoreEvents } from 'app/types';\n\nexport class ElasticBucketAggCtrl {\n  /** @ngInject */\n  constructor($scope: any, uiSegmentSrv: any, $rootScope: GrafanaRootScope) {\n    const bucketAggs = $scope.target.bucketAggs;\n\n    $scope.orderByOptions = [];\n\n    $scope.getBucketAggTypes = () => {\n      return queryDef.bucketAggTypes;\n    };\n\n    $scope.getOrderOptions = () => {\n      return queryDef.orderOptions;\n    };\n\n    $scope.getSizeOptions = () => {\n      return queryDef.sizeOptions;\n    };\n\n    $rootScope.onAppEvent(\n      CoreEvents.elasticQueryUpdated,\n      () => {\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.init = () => {\n      $scope.agg = bucketAggs[$scope.index];\n      $scope.validateModel();\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.onTypeChanged = () => {\n      $scope.agg.settings = {};\n      $scope.showOptions = false;\n\n      switch ($scope.agg.type) {\n        case 'date_histogram':\n        case 'histogram':\n        case 'terms': {\n          delete $scope.agg.query;\n          $scope.agg.field = 'select field';\n          break;\n        }\n        case 'filters': {\n          delete $scope.agg.field;\n          $scope.agg.query = '*';\n          break;\n        }\n        case 'geohash_grid': {\n          $scope.agg.settings.precision = 3;\n          break;\n        }\n      }\n\n      $scope.validateModel();\n      $scope.onChange();\n    };\n\n    $scope.validateModel = () => {\n      $scope.index = _.indexOf(bucketAggs, $scope.agg);\n      $scope.isFirst = $scope.index === 0;\n      $scope.bucketAggCount = bucketAggs.length;\n\n      let settingsLinkText = '';\n      const settings = $scope.agg.settings || {};\n\n      switch ($scope.agg.type) {\n        case 'terms': {\n          settings.order = settings.order || 'desc';\n          settings.size = settings.size || '10';\n          settings.min_doc_count = settings.min_doc_count || 0;\n          settings.orderBy = settings.orderBy || '_term';\n\n          if (settings.size !== '0') {\n            settingsLinkText = queryDef.describeOrder(settings.order) + ' ' + settings.size + ', ';\n          }\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += 'Min Doc Count: ' + settings.min_doc_count + ', ';\n          }\n\n          settingsLinkText += 'Order by: ' + queryDef.describeOrderBy(settings.orderBy, $scope.target);\n\n          if (settings.size === '0') {\n            settingsLinkText += ' (' + settings.order + ')';\n          }\n\n          break;\n        }\n        case 'filters': {\n          settings.filters = settings.filters || [{ query: '*' }];\n          settingsLinkText = _.reduce(\n            settings.filters,\n            (memo, value, index) => {\n              memo += 'Q' + (index + 1) + '  = ' + value.query + ' ';\n              return memo;\n            },\n            ''\n          );\n          if (settingsLinkText.length > 50) {\n            settingsLinkText = settingsLinkText.substr(0, 50) + '...';\n          }\n          settingsLinkText = 'Filter Queries (' + settings.filters.length + ')';\n          break;\n        }\n        case 'date_histogram': {\n          settings.interval = settings.interval || 'auto';\n          settings.min_doc_count = settings.min_doc_count || 0;\n          $scope.agg.field = $scope.target.timeField;\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n\n          if (settings.trimEdges === undefined || settings.trimEdges < 0) {\n            settings.trimEdges = 0;\n          }\n\n          if (settings.trimEdges && settings.trimEdges > 0) {\n            settingsLinkText += ', Trim edges: ' + settings.trimEdges;\n          }\n          break;\n        }\n        case 'histogram': {\n          settings.interval = settings.interval || 1000;\n          settings.min_doc_count = _.defaultTo(settings.min_doc_count, 1);\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n          break;\n        }\n        case 'geohash_grid': {\n          // limit precision to 7\n          settings.precision = Math.max(Math.min(settings.precision, 7), 1);\n          settingsLinkText = 'Precision: ' + settings.precision;\n          break;\n        }\n      }\n\n      $scope.settingsLinkText = settingsLinkText;\n      $scope.agg.settings = settings;\n      return true;\n    };\n\n    $scope.addFiltersQuery = () => {\n      $scope.agg.settings.filters.push({ query: '*' });\n    };\n\n    $scope.removeFiltersQuery = (filter: any) => {\n      $scope.agg.settings.filters = _.without($scope.agg.settings.filters, filter);\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n    };\n\n    $scope.getOrderByOptions = () => {\n      return queryDef.getOrderByOptions($scope.target);\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'date_histogram') {\n        return $scope.getFields({ $fieldType: 'date' });\n      } else {\n        return $scope.getFields();\n      }\n    };\n\n    $scope.getIntervalOptions = () => {\n      return Promise.resolve(uiSegmentSrv.transformToSegments(true, 'interval')(queryDef.intervalOptions));\n    };\n\n    $scope.addBucketAgg = () => {\n      // if last is date histogram add it before\n      const lastBucket = bucketAggs[bucketAggs.length - 1];\n      let addIndex = bucketAggs.length - 1;\n\n      if (lastBucket && lastBucket.type === 'date_histogram') {\n        addIndex -= 1;\n      }\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      bucketAggs.splice(addIndex, 0, { type: 'terms', field: 'select field', id: (id + 1).toString(), fake: true });\n      $scope.onChange();\n    };\n\n    $scope.removeBucketAgg = () => {\n      bucketAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nexport function elasticBucketAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/bucket_agg.html',\n    controller: ElasticBucketAggCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n    },\n  };\n}\n\ncoreModule.directive('elasticBucketAgg', elasticBucketAgg);\n","import coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { ElasticsearchAggregation } from './types';\nimport { GrafanaRootScope } from 'app/routes/GrafanaCtrl';\nimport { CoreEvents } from 'app/types';\n\nexport class ElasticMetricAggCtrl {\n  /** @ngInject */\n  constructor($scope: any, uiSegmentSrv: any, $rootScope: GrafanaRootScope) {\n    const metricAggs: ElasticsearchAggregation[] = $scope.target.metrics;\n    $scope.metricAggTypes = queryDef.getMetricAggTypes($scope.esVersion);\n    $scope.extendedStats = queryDef.extendedStats;\n    $scope.pipelineAggOptions = [];\n    $scope.modelSettingsValues = {};\n\n    $scope.init = () => {\n      $scope.agg = metricAggs[$scope.index];\n      $scope.validateModel();\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.updatePipelineAggOptions = () => {\n      $scope.pipelineAggOptions = queryDef.getPipelineAggOptions($scope.target);\n    };\n\n    $rootScope.onAppEvent(\n      CoreEvents.elasticQueryUpdated,\n      () => {\n        $scope.index = _.indexOf(metricAggs, $scope.agg);\n        $scope.updatePipelineAggOptions();\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.validateModel = () => {\n      $scope.isFirst = $scope.index === 0;\n      $scope.isSingle = metricAggs.length === 1;\n      $scope.settingsLinkText = '';\n      $scope.variablesLinkText = '';\n      $scope.aggDef = _.find($scope.metricAggTypes, { value: $scope.agg.type });\n\n      if (queryDef.isPipelineAgg($scope.agg.type)) {\n        if (queryDef.isPipelineAggWithMultipleBucketPaths($scope.agg.type)) {\n          $scope.variablesLinkText = 'Options';\n\n          if ($scope.agg.settings.script) {\n            $scope.variablesLinkText = 'Script: ' + $scope.agg.settings.script.replace(new RegExp('params.', 'g'), '');\n          }\n        } else {\n          $scope.agg.pipelineAgg = $scope.agg.pipelineAgg || 'select metric';\n          $scope.agg.field = $scope.agg.pipelineAgg;\n        }\n\n        const pipelineOptions = queryDef.getPipelineOptions($scope.agg);\n        if (pipelineOptions.length > 0) {\n          _.each(pipelineOptions, opt => {\n            $scope.agg.settings[opt.text] = $scope.agg.settings[opt.text] || opt.default;\n          });\n          $scope.settingsLinkText = 'Options';\n        }\n      } else if (!$scope.agg.field) {\n        $scope.agg.field = 'select field';\n      }\n      switch ($scope.agg.type) {\n        case 'cardinality': {\n          const precisionThreshold = $scope.agg.settings.precision_threshold || '';\n          $scope.settingsLinkText = 'Precision threshold: ' + precisionThreshold;\n          break;\n        }\n        case 'percentiles': {\n          $scope.agg.settings.percents = $scope.agg.settings.percents || [25, 50, 75, 95, 99];\n          $scope.settingsLinkText = 'Values: ' + $scope.agg.settings.percents.join(',');\n          break;\n        }\n        case 'extended_stats': {\n          if (_.keys($scope.agg.meta).length === 0) {\n            $scope.agg.meta.std_deviation_bounds_lower = true;\n            $scope.agg.meta.std_deviation_bounds_upper = true;\n          }\n\n          const stats = _.reduce(\n            $scope.agg.meta,\n            (memo, val, key) => {\n              if (val) {\n                const def: any = _.find($scope.extendedStats, { value: key });\n                memo.push(def.text);\n              }\n              return memo;\n            },\n            []\n          );\n\n          $scope.settingsLinkText = 'Stats: ' + stats.join(', ');\n          break;\n        }\n        case 'moving_avg': {\n          $scope.movingAvgModelTypes = queryDef.movingAvgModelOptions;\n          $scope.modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, true);\n          $scope.updateMovingAvgModelSettings();\n          break;\n        }\n        case 'raw_document':\n        case 'raw_data': {\n          $scope.agg.settings.size = $scope.agg.settings.size || 500;\n          $scope.settingsLinkText = 'Size: ' + $scope.agg.settings.size;\n          $scope.target.metrics.splice(0, $scope.target.metrics.length, $scope.agg);\n\n          $scope.target.bucketAggs = [];\n          break;\n        }\n      }\n      if ($scope.aggDef.supportsInlineScript) {\n        // I know this stores the inline script twice\n        // but having it like this simplifes the query_builder\n        const inlineScript = $scope.agg.inlineScript;\n        if (inlineScript) {\n          $scope.agg.settings.script = { inline: inlineScript };\n        } else {\n          delete $scope.agg.settings.script;\n        }\n\n        if ($scope.settingsLinkText === '') {\n          $scope.settingsLinkText = 'Options';\n        }\n      }\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.toggleVariables = () => {\n      $scope.showVariables = !$scope.showVariables;\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.updateMovingAvgModelSettings = () => {\n      const modelSettingsKeys = [];\n      const modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, false);\n      for (let i = 0; i < modelSettings.length; i++) {\n        modelSettingsKeys.push(modelSettings[i].value);\n      }\n\n      for (const key in $scope.agg.settings.settings) {\n        if ($scope.agg.settings.settings[key] === null || modelSettingsKeys.indexOf(key) === -1) {\n          delete $scope.agg.settings.settings[key];\n        }\n      }\n    };\n\n    $scope.onChangeClearInternal = () => {\n      delete $scope.agg.settings.minimize;\n      $scope.onChange();\n    };\n\n    $scope.onTypeChange = () => {\n      $scope.agg.settings = {};\n      $scope.agg.meta = {};\n      $scope.showOptions = false;\n\n      // reset back to metric/group by query\n      if (\n        $scope.target.bucketAggs.length === 0 &&\n        ($scope.agg.type !== 'raw_document' || $scope.agg.type !== 'raw_data')\n      ) {\n        $scope.target.bucketAggs = [queryDef.defaultBucketAgg()];\n      }\n\n      $scope.showVariables = queryDef.isPipelineAggWithMultipleBucketPaths($scope.agg.type);\n      $scope.updatePipelineAggOptions();\n      $scope.onChange();\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'cardinality') {\n        return $scope.getFields();\n      }\n      return $scope.getFields({ $fieldType: 'number' });\n    };\n\n    $scope.addMetricAgg = () => {\n      const addIndex = metricAggs.length;\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      metricAggs.splice(addIndex, 0, { type: 'count', field: 'select field', id: (id + 1).toString() });\n      $scope.onChange();\n    };\n\n    $scope.removeMetricAgg = () => {\n      metricAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.toggleShowMetric = () => {\n      $scope.agg.hide = !$scope.agg.hide;\n      if (!$scope.agg.hide) {\n        delete $scope.agg.hide;\n      }\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nexport function elasticMetricAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/metric_agg.html',\n    controller: ElasticMetricAggCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n      esVersion: '=',\n    },\n  };\n}\n\ncoreModule.directive('elasticMetricAgg', elasticMetricAgg);\n","import coreModule from 'app/core/core_module';\nimport _ from 'lodash';\n\nexport function elasticPipelineVariables() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/pipeline_variables.html',\n    controller: 'ElasticPipelineVariablesCtrl',\n    restrict: 'E',\n    scope: {\n      onChange: '&',\n      variables: '=',\n      options: '=',\n    },\n  };\n}\n\nconst newVariable = (index: any) => {\n  return {\n    name: 'var' + index,\n    pipelineAgg: 'select metric',\n  };\n};\n\nexport class ElasticPipelineVariablesCtrl {\n  /** @ngInject */\n  constructor($scope: any) {\n    $scope.variables = $scope.variables || [newVariable(1)];\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.add = () => {\n      $scope.variables.push(newVariable($scope.variables.length + 1));\n      $scope.onChange();\n    };\n\n    $scope.remove = (index: number) => {\n      $scope.variables.splice(index, 1);\n      $scope.onChange();\n    };\n  }\n}\n\ncoreModule.directive('elasticPipelineVariables', elasticPipelineVariables);\ncoreModule.controller('ElasticPipelineVariablesCtrl', ElasticPipelineVariablesCtrl);\n","import './bucket_agg';\nimport './metric_agg';\nimport './pipeline_variables';\n\nimport angular, { auto } from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { ElasticsearchAggregation } from './types';\nimport { GrafanaRootScope } from 'app/routes/GrafanaCtrl';\nimport { CoreEvents } from 'app/types';\n\nexport class ElasticQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  esVersion: any;\n  rawQueryOld: string;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private $rootScope: GrafanaRootScope,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.esVersion = this.datasource.esVersion;\n\n    this.target = this.target || {};\n    this.target.metrics = this.target.metrics || [queryDef.defaultMetricAgg()];\n    this.target.bucketAggs = this.target.bucketAggs || [queryDef.defaultBucketAgg()];\n\n    if (this.target.bucketAggs.length === 0) {\n      const metric = this.target.metrics[0];\n      if (!metric || metric.type !== 'raw_document') {\n        this.target.bucketAggs = [queryDef.defaultBucketAgg()];\n      }\n      this.refresh();\n    }\n\n    this.queryUpdated();\n  }\n\n  getFields(type: any) {\n    const jsonStr = angular.toJson({ find: 'fields', type: type });\n    return this.datasource\n      .metricFindQuery(jsonStr)\n      .then(this.uiSegmentSrv.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  queryUpdated() {\n    // As Raw Data and Raw Document have the same request, we need to run refresh if they are updated\n    const isPossiblyRawDataSwitch = this.target.metrics.some(\n      (metric: any) => metric.type === 'raw_data' || metric.type === 'raw_document'\n    );\n    const newJson = angular.toJson(this.datasource.queryBuilder.build(this.target), true);\n    if (this.rawQueryOld && newJson !== this.rawQueryOld) {\n      this.refresh();\n    } else if (isPossiblyRawDataSwitch) {\n      this.refresh();\n    }\n\n    this.rawQueryOld = newJson;\n    this.$rootScope.appEvent(CoreEvents.elasticQueryUpdated);\n  }\n\n  getCollapsedText() {\n    const metricAggs: ElasticsearchAggregation[] = this.target.metrics;\n    const bucketAggs = this.target.bucketAggs;\n    const metricAggTypes = queryDef.getMetricAggTypes(this.esVersion);\n    const bucketAggTypes = queryDef.bucketAggTypes;\n    let text = '';\n\n    if (this.target.query) {\n      text += 'Query: ' + this.target.query + ', ';\n    }\n\n    text += 'Metrics: ';\n\n    _.each(metricAggs, (metric, index) => {\n      const aggDef: any = _.find(metricAggTypes, { value: metric.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += metric.field;\n      }\n      if (aggDef.supportsMultipleBucketPaths) {\n        text += metric.settings.script.replace(new RegExp('params.', 'g'), '');\n      }\n      text += '), ';\n    });\n\n    _.each(bucketAggs, (bucketAgg: any, index: number) => {\n      if (index === 0) {\n        text += ' Group by: ';\n      }\n\n      const aggDef: any = _.find(bucketAggTypes, { value: bucketAgg.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += bucketAgg.field;\n      }\n      text += '), ';\n    });\n\n    if (this.target.alias) {\n      text += 'Alias: ' + this.target.alias;\n    }\n\n    return text;\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import React from 'react';\nimport { EventsWithValidation, regexValidation, LegacyForms } from '@grafana/ui';\nconst { Select, Input, FormField } = LegacyForms;\nimport { ElasticsearchOptions } from '../types';\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\n\nconst indexPatternTypes = [\n  { label: 'No pattern', value: 'none' },\n  { label: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n  { label: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n  { label: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n  { label: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n  { label: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n];\n\nconst esVersions = [\n  { label: '2.x', value: 2 },\n  { label: '5.x', value: 5 },\n  { label: '5.6+', value: 56 },\n  { label: '6.0+', value: 60 },\n  { label: '7.0+', value: 70 },\n];\n\ntype Props = {\n  value: DataSourceSettings<ElasticsearchOptions>;\n  onChange: (value: DataSourceSettings<ElasticsearchOptions>) => void;\n};\nexport const ElasticDetails = (props: Props) => {\n  const { value, onChange } = props;\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Elasticsearch details</h3>\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-25\">\n            <FormField\n              labelWidth={10}\n              inputWidth={15}\n              label=\"Index name\"\n              value={value.database || ''}\n              onChange={changeHandler('database', value, onChange)}\n              placeholder={'es-index-name'}\n              required\n            />\n          </div>\n\n          <div className=\"gf-form width-14\">\n            <FormField\n              labelWidth={10}\n              label=\"Pattern\"\n              inputEl={\n                <Select\n                  options={indexPatternTypes}\n                  onChange={intervalHandler(value, onChange)}\n                  value={indexPatternTypes.find(\n                    pattern =>\n                      pattern.value === (value.jsonData.interval === undefined ? 'none' : value.jsonData.interval)\n                  )}\n                />\n              }\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form max-width-25\">\n          <FormField\n            labelWidth={10}\n            inputWidth={15}\n            label=\"Time field name\"\n            value={value.jsonData.timeField || ''}\n            onChange={jsonDataChangeHandler('timeField', value, onChange)}\n            required\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <span className=\"gf-form-select-wrapper\">\n            <FormField\n              labelWidth={10}\n              label=\"Version\"\n              inputEl={\n                <Select\n                  options={esVersions}\n                  onChange={option => {\n                    const maxConcurrentShardRequests = getMaxConcurrenShardRequestOrDefault(\n                      value.jsonData.maxConcurrentShardRequests,\n                      option.value\n                    );\n                    onChange({\n                      ...value,\n                      jsonData: {\n                        ...value.jsonData,\n                        esVersion: option.value,\n                        maxConcurrentShardRequests,\n                      },\n                    });\n                  }}\n                  value={esVersions.find(version => version.value === value.jsonData.esVersion)}\n                />\n              }\n            />\n          </span>\n        </div>\n        {value.jsonData.esVersion >= 56 && (\n          <div className=\"gf-form max-width-30\">\n            <FormField\n              aria-label={'Max concurrent Shard Requests input'}\n              labelWidth={15}\n              label=\"Max concurrent Shard Requests\"\n              value={value.jsonData.maxConcurrentShardRequests || ''}\n              onChange={jsonDataChangeHandler('maxConcurrentShardRequests', value, onChange)}\n            />\n          </div>\n        )}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              labelWidth={10}\n              label=\"Min time interval\"\n              inputEl={\n                <Input\n                  className={'width-6'}\n                  value={value.jsonData.timeInterval || ''}\n                  onChange={jsonDataChangeHandler('timeInterval', value, onChange)}\n                  placeholder=\"10s\"\n                  validationEvents={{\n                    [EventsWithValidation.onBlur]: [\n                      regexValidation(\n                        /^\\d+(ms|[Mwdhmsy])$/,\n                        'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n                      ),\n                    ],\n                  }}\n                />\n              }\n              tooltip={\n                <>\n                  A lower limit for the auto group by time interval. Recommended to be set to write frequency, for\n                  example <code>1m</code> if your data is written every minute.\n                </>\n              }\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst changeHandler = (\n  key: keyof DataSourceSettings<ElasticsearchOptions>,\n  value: Props['value'],\n  onChange: Props['onChange']\n) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n  onChange({\n    ...value,\n    [key]: event.currentTarget.value,\n  });\n};\n\nconst jsonDataChangeHandler = (key: keyof ElasticsearchOptions, value: Props['value'], onChange: Props['onChange']) => (\n  event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n) => {\n  onChange({\n    ...value,\n    jsonData: {\n      ...value.jsonData,\n      [key]: event.currentTarget.value,\n    },\n  });\n};\n\nconst intervalHandler = (value: Props['value'], onChange: Props['onChange']) => (option: SelectableValue<string>) => {\n  const { database } = value;\n  // If option value is undefined it will send its label instead so we have to convert made up value to undefined here.\n  const newInterval = option.value === 'none' ? undefined : option.value;\n\n  if (!database || database.length === 0 || database.startsWith('[logstash-]')) {\n    let newDatabase = '';\n    if (newInterval !== undefined) {\n      const pattern = indexPatternTypes.find(pattern => pattern.value === newInterval);\n      if (pattern) {\n        newDatabase = pattern.example;\n      }\n    }\n\n    onChange({\n      ...value,\n      database: newDatabase,\n      jsonData: {\n        ...value.jsonData,\n        interval: newInterval,\n      },\n    });\n  } else {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        interval: newInterval,\n      },\n    });\n  }\n};\n\nfunction getMaxConcurrenShardRequestOrDefault(maxConcurrentShardRequests: number, version: number): number {\n  if (maxConcurrentShardRequests === 5 && version < 70) {\n    return 256;\n  }\n\n  if (maxConcurrentShardRequests === 256 && version >= 70) {\n    return 5;\n  }\n\n  return maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(version);\n}\n\nexport function defaultMaxConcurrentShardRequests(version: number) {\n  return version >= 70 ? 5 : 256;\n}\n","import React from 'react';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport { ElasticsearchOptions } from '../types';\n\ntype Props = {\n  value: ElasticsearchOptions;\n  onChange: (value: ElasticsearchOptions) => void;\n};\nexport const LogsConfig = (props: Props) => {\n  const { value, onChange } = props;\n  const changeHandler = (key: keyof ElasticsearchOptions) => (\n    event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    onChange({\n      ...value,\n      [key]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Logs</h3>\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form max-width-30\">\n          <FormField\n            labelWidth={11}\n            label=\"Message field name\"\n            value={value.logMessageField}\n            onChange={changeHandler('logMessageField')}\n            placeholder=\"_source\"\n          />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <FormField\n            labelWidth={11}\n            label=\"Level field name\"\n            value={value.logLevelField}\n            onChange={changeHandler('logLevelField')}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { css } from 'emotion';\nimport { DataSourceSelectItem, VariableSuggestion } from '@grafana/data';\nimport { Button, LegacyForms, DataLinkInput, stylesFactory } from '@grafana/ui';\nconst { FormField, Switch } = LegacyForms;\nimport { DataLinkConfig } from '../types';\nimport { usePrevious } from 'react-use';\nimport { getDatasourceSrv } from '../../../../features/plugins/datasource_srv';\nimport DataSourcePicker from '../../../../core/components/Select/DataSourcePicker';\n\nconst getStyles = stylesFactory(() => ({\n  firstRow: css`\n    display: flex;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n}));\n\ntype Props = {\n  value: DataLinkConfig;\n  onChange: (value: DataLinkConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DataLink = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useInternalLink(value.datasourceUid);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.firstRow + ' gf-form'}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={6}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Field\"\n          type=\"text\"\n          value={value.field}\n          tooltip={'Can be exact field name or a regex pattern that will match on the field name.'}\n          onChange={handleChange('field')}\n        />\n        <Button\n          variant={'destructive'}\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={event => {\n            event.preventDefault();\n            onDelete();\n          }}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <FormField\n          label={showInternalLink ? 'Query' : 'URL'}\n          labelWidth={6}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={newValue =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={css`\n            width: 100%;\n          `}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourceSection\n            onChange={datasourceUid => {\n              onChange({\n                ...value,\n                datasourceUid,\n              });\n            }}\n            datasourceUid={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\ntype DataSourceSectionProps = {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n};\n\nconst DataSourceSection = (props: DataSourceSectionProps) => {\n  const { datasourceUid, onChange } = props;\n  const datasources: DataSourceSelectItem[] = getDatasourceSrv()\n    .getExternal()\n    // At this moment only Jaeger and Zipkin datasource is supported as the link target.\n    .filter(ds => ds.meta.tracing)\n    .map(\n      ds =>\n        ({\n          value: ds.uid,\n          name: ds.name,\n          meta: ds.meta,\n        } as DataSourceSelectItem)\n    );\n\n  let selectedDatasource = datasourceUid && datasources.find(d => d.value === datasourceUid);\n  return (\n    <DataSourcePicker\n      // Uid and value should be always set in the db and so in the items.\n      onChange={ds => onChange(ds.value!)}\n      datasources={datasources}\n      current={selectedDatasource || undefined}\n    />\n  );\n};\n\nfunction useInternalLink(datasourceUid: string): [boolean, Dispatch<SetStateAction<boolean>>] {\n  const [showInternalLink, setShowInternalLink] = useState<boolean>(!!datasourceUid);\n  const previousUid = usePrevious(datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, datasourceUid, showInternalLink]);\n\n  return [showInternalLink, setShowInternalLink];\n}\n","import React from 'react';\nimport { css } from 'emotion';\nimport { Button, stylesFactory, useTheme } from '@grafana/ui';\nimport { GrafanaTheme, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { DataLinkConfig } from '../types';\nimport { DataLink } from './DataLink';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textWeak};\n  `,\n  dataLink: css`\n    margin-bottom: ${theme.spacing.sm};\n  `,\n}));\n\ntype Props = {\n  value?: DataLinkConfig[];\n  onChange: (value: DataLinkConfig[]) => void;\n};\nexport const DataLinks = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Data links</h3>\n\n      <div className={styles.infoText}>\n        Add links to existing fields. Links will be shown in log row details next to the field value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value &&\n          value.map((field, index) => {\n            return (\n              <DataLink\n                className={styles.dataLink}\n                key={index}\n                value={field}\n                onChange={newField => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1, newField);\n                  onChange(newDataLinks);\n                }}\n                onDelete={() => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1);\n                  onChange(newDataLinks);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Raw value of the field',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        <div>\n          <Button\n            variant={'secondary'}\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={event => {\n              event.preventDefault();\n              const newDataLinks = [...(value || []), { field: '', url: '' }];\n              onChange(newDataLinks);\n            }}\n          >\n            Add\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { ElasticDatasource } from './datasource';\nimport { ElasticQueryCtrl } from './query_ctrl';\nimport { ConfigEditor } from './configuration/ConfigEditor';\n\nclass ElasticAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(ElasticDatasource)\n  .setQueryCtrl(ElasticQueryCtrl)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(ElasticAnnotationsQueryCtrl);\n","import React, { useEffect } from 'react';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ElasticsearchOptions } from '../types';\nimport { defaultMaxConcurrentShardRequests, ElasticDetails } from './ElasticDetails';\nimport { LogsConfig } from './LogsConfig';\nimport { DataLinks } from './DataLinks';\n\nexport type Props = DataSourcePluginOptionsEditorProps<ElasticsearchOptions>;\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // Apply some defaults on initial render\n  useEffect(() => {\n    const esVersion = options.jsonData.esVersion || 5;\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        timeField: options.jsonData.timeField || '@timestamp',\n        esVersion,\n        maxConcurrentShardRequests:\n          options.jsonData.maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(esVersion),\n        logMessageField: options.jsonData.logMessageField || '',\n        logLevelField: options.jsonData.logLevelField || '',\n      },\n    });\n  }, []);\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:9200'}\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n      />\n\n      <ElasticDetails value={options} onChange={onOptionsChange} />\n\n      <LogsConfig\n        value={options.jsonData}\n        onChange={newValue =>\n          onOptionsChange({\n            ...options,\n            jsonData: newValue,\n          })\n        }\n      />\n\n      <DataLinks\n        value={options.jsonData.dataLinks}\n        onChange={newValue => {\n          onOptionsChange({\n            ...options,\n            jsonData: {\n              ...options.jsonData,\n              dataLinks: newValue,\n            },\n          });\n        }}\n      />\n    </>\n  );\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { Select } from '@grafana/ui';\nimport { SelectableValue, DataSourceSelectItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface Props {\n  onChange: (ds: DataSourceSelectItem) => void;\n  datasources: DataSourceSelectItem[];\n  current?: DataSourceSelectItem;\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  showLoading?: boolean;\n  placeholder?: string;\n  invalid?: boolean;\n}\n\nexport class DataSourcePicker extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n    placeholder: 'Select datasource',\n  };\n\n  searchInput: HTMLElement;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChange = (item: SelectableValue<string>) => {\n    const ds = this.props.datasources.find(ds => ds.name === item.value);\n\n    if (ds) {\n      this.props.onChange(ds);\n    }\n  };\n\n  render() {\n    const {\n      datasources,\n      current,\n      autoFocus,\n      hideTextValue,\n      onBlur,\n      openMenuOnFocus,\n      showLoading,\n      placeholder,\n      invalid,\n    } = this.props;\n\n    const options = datasources.map(ds => ({\n      value: ds.name,\n      label: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n    }));\n\n    const value = current && {\n      label: current.name.substr(0, 37),\n      value: current.name,\n      imgUrl: current.meta.info.logos.small,\n      loading: showLoading,\n      hideText: hideTextValue,\n    };\n\n    return (\n      <div aria-label={selectors.components.DataSourcePicker.container}>\n        <Select\n          className=\"ds-picker select-container\"\n          isMulti={false}\n          isClearable={false}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          menuPlacement=\"bottom\"\n          placeholder={placeholder}\n          noOptionsMessage=\"No datasources found\"\n          value={value}\n          invalid={invalid}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataSourcePicker;\n","import { useEffect, useRef } from 'react';\nvar usePrevious = function (state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n};\nexport default usePrevious;\n"],"sourceRoot":""}