{"version":3,"sources":["webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/Error.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/LiveLogs.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/QueryStatus.tsx","webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///./public/app/features/explore/ExploreTimeControls.tsx","webpack:///./public/app/features/explore/NoDataSourceCallToAction.tsx","webpack:///./public/app/features/explore/ErrorContainer.tsx","webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///./public/app/features/explore/LogMessageAnsi.tsx","webpack:///./public/app/features/explore/LogRowContextProvider.tsx","webpack:///./public/app/features/explore/LogRowContext.tsx","webpack:///./public/app/features/explore/LogRow.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/core/utils/reselect.ts","webpack:///./public/app/features/explore/state/selectors.ts","webpack:///./public/app/features/explore/Wrapper.tsx"],"names":["__webpack_require__","d","__webpack_exports__","addQueryRow","changeDatasource","changeMode","changeQuery","changeSize","updateTimeRange","changeRefreshInterval","clearQueries","initializeExplore","reconnectDatasource","modifyQueries","runQueries","scanStart","setQueries","splitClose","splitOpen","toggleGraph","toggleTable","changeDedupStrategy","refreshExplore","tslib__WEBPACK_IMPORTED_MODULE_0__","app_core_store__WEBPACK_IMPORTED_MODULE_1__","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_2__","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_3__","app_types_explore__WEBPACK_IMPORTED_MODULE_4__","_actionTypes__WEBPACK_IMPORTED_MODULE_5__","app_features_profile_state_selectors__WEBPACK_IMPORTED_MODULE_6__","_grafana_ui_src_components_RefreshPicker_RefreshPicker__WEBPACK_IMPORTED_MODULE_7__","app_core_utils_timePicker__WEBPACK_IMPORTED_MODULE_8__","updateExploreUIState","exploreId","uiStateFragment","dispatch","Object","index","getState","queries","explore","query","datasource","_this","this","newDataSourceInstance","get","_a","sent","currentDataSourceInstance","datasourceInstance","orgId","user","importQueries","isLive","value","loadDatasource","mode","override","refId","key","height","width","options","refreshInterval","datasourceName","rawRange","containerWidth","eventBridge","ui","timeZone","range","exploreDatasources","getExternal","map","ds","name","meta","length","loadExploreDatasourcesAndSetDatasource","loadDatasourceReady","instance","historyKey","id","history","getObject","set","sourceDataSource","targetDataSource","importedQueries","nextQueries","testDatasource","undefined","datasourceError","testResult","status","message","error_1","statusText","error","requestedDatasourceName","init","err","console","log","modification","modifier","preventSubmit","absoluteRange","rawQueries","itemId","leftState","left","queryState","location","urlState","itemState","queryTransactions","slice","right","togglePanelActionCreator","actionCreator","isPanelVisible","uiFragmentStateUpdate","shouldRunQueries","type","showingGraph","showingTable","dedupStrategy","initialized","update","urlRange","refreshQueries","push","initialQueries","raw","Panel","_super","apply","arguments","onClickToggle","props","onToggle","isOpen","prototype","render","loading","panelClass","collapsible","iconClass","loaderClass","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","onClick","label","children","react__WEBPACK_IMPORTED_MODULE_1__","ErrorBoundary","call","state","errorInfo","componentDidCatch","setState","style","whiteSpace","toString","componentStack","Alert","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","button","text","time_format","ticks","min","max","secPerTick","FLOT_OPTIONS","legend","show","series","lines","linewidth","zero","shadowSize","grid","minBorderMargin","markings","backgroundColor","borderWidth","clickable","color","margin","labelMarginX","selection","Graph","dynamicOptions","hiddenSeries","showAllTimeSeries","onPlotSelected","event","ranges","onChangeTime","from","xaxis","to","onShowAllTimeSeries","draw","getLegendItems","getGraphData","alias","isVisible","indexOf","yAxis","data","componentDidMount","$el","jquery__WEBPACK_IMPORTED_MODULE_1___default","bind","componentDidUpdate","prevProps","prevState","split","componentWillUnmount","unbind","getDynamicOptions","timezone","timeformat","userOptions","filter","ts","getFlotPairs","plot","onSeriesToggle","exclusive","ctrlKey","metaKey","shiftKey","onToggleSeries","nextHiddenSeries","concat","allSeriesLabels","lodash_difference__WEBPACK_IMPORTED_MODULE_3___default","_b","_c","react__WEBPACK_IMPORTED_MODULE_2___default","Fragment","_grafana_ui__WEBPACK_IMPORTED_MODULE_8__","items","displayMode","List","placement","onLabelClick","item","react__WEBPACK_IMPORTED_MODULE_2__","ToggleButtonGroup","transparent","ToggleButton","selected","tooltip","onChange","btnClassName","stopPropagation","_grafana_ui__WEBPACK_IMPORTED_MODULE_2__","content","ElapsedTime","elapsed","tick","Date","now","offset","start","timer","window","setInterval","componentWillReceiveProps","nextProps","time","clearInterval","renderCount","humanize","displayValue","toFixed","duration","_grafana_data__WEBPACK_IMPORTED_MODULE_2__","hours","minutes","seconds","Explore","getRef","el","onClickExample","onClickLabel","onModifyQueries","action","modifyQuery","onResize","size","onStartScanning","onStopScanning","scanStopAction","renderEmptyState","_NoDataSourceCallToAction__WEBPACK_IMPORTED_MODULE_17__","onReconnect","preventDefault","exploreEvents","app_core_utils_emitter__WEBPACK_IMPORTED_MODULE_15__","initialDatasource","initialRange","initialUI","offsetWidth","removeAllListeners","StartPage","datasourceLoading","datasourceMissing","showingStartPage","queryKeys","queryErrors","exploreClass","ref","_ExploreToolbar__WEBPACK_IMPORTED_MODULE_16__","app_core_components_Animations_FadeIn__WEBPACK_IMPORTED_MODULE_18__","in","_Error__WEBPACK_IMPORTED_MODULE_6__","_QueryRows__WEBPACK_IMPORTED_MODULE_10__","_ErrorContainer__WEBPACK_IMPORTED_MODULE_20__","react_virtualized__WEBPACK_IMPORTED_MODULE_4__","disableHeight","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_7__","app_types_explore__WEBPACK_IMPORTED_MODULE_13__","Metrics","_GraphContainer__WEBPACK_IMPORTED_MODULE_8__","_TableContainer__WEBPACK_IMPORTED_MODULE_11__","onClickCell","Logs","_LogsContainer__WEBPACK_IMPORTED_MODULE_9__","PureComponent","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_12__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_21__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","newMode","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_19__","supportedModes","urlMode","app_core_store__WEBPACK_IMPORTED_MODULE_5__","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_14__","urlModeIsValid","includes","modeStateIsValid","GraphContainer","onClickGraphButton","graphResult","graphHeight","_Panel__WEBPACK_IMPORTED_MODULE_7__","_Graph__WEBPACK_IMPORTED_MODULE_6__","_state_actions__WEBPACK_IMPORTED_MODULE_5__","loadingState","_grafana_data__WEBPACK_IMPORTED_MODULE_4__","Loading","Streaming","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_8__","LogsContainer","onStopLive","stopLive","_grafana_ui_src_components_RefreshPicker_RefreshPicker__WEBPACK_IMPORTED_MODULE_12__","handleDedupStrategyChange","handleToggleLogLevel","hiddenLogLevels","toggleLogLevelAction","getLogRowContext","row","logsHighlighterExpressions","logsResult","dedupedResult","scanning","_LiveLogs__WEBPACK_IMPORTED_MODULE_11__","_Logs__WEBPACK_IMPORTED_MODULE_6__","none","dedupedData","highlighterExpressions","onDedupStrategyChange","onToggleLogLevel","scanRange","getRowContext","app_features_explore_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__","app_features_explore_state_selectors__WEBPACK_IMPORTED_MODULE_9__","Set","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_10__","LiveLogs","liveEndDiv","rows","scrollIntoView","theme","styles","logsRowsLive","emotion__WEBPACK_IMPORTED_MODULE_2__","templateObject_1","logsRowFresh","templateObject_2","colors","_grafana_ui__WEBPACK_IMPORTED_MODULE_3__","light","gray6","dark","gray1","logsRowOld","templateObject_3","logsRowsIndicator","templateObject_4","typography","md","spacing","sm","getStyles","rowsToRender","showUtc","fresh","timeEpochMs","title","timeLocal","timeFromNow","timeUtc","entry","element","_ElapsedTime__WEBPACK_IMPORTED_MODULE_4__","variant","orange","LiveLogsWithTheme","QueryRows","_QueryRow__WEBPACK_IMPORTED_MODULE_2__","QueryRow","textEditModeEnabled","onRunQuery","getHighlighterExpression","updateLogsHighlights","onClickAddButton","onClickClearButton","onClickHintFix","onClickRemoveButton","removeQueryRowAction","onClickToggleEditorMode","lodash__WEBPACK_IMPORTED_MODULE_2___default","debounce","expressions","highlightLogsExpressionAction","QueryField","datasourceStatus","queryResponse","latency","canToggleEditorModes","app_types_explore__WEBPACK_IMPORTED_MODULE_8__","has","components","ExploreMetricsQueryField","ExploreLogsQueryField","ExploreQueryField","onHint","panelData","_QueryEditor__WEBPACK_IMPORTED_MODULE_5__","onQueryChange","onExecuteQuery","initialQuery","_QueryStatus__WEBPACK_IMPORTED_MODULE_10__","_state_actions__WEBPACK_IMPORTED_MODULE_6__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_9__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_4__","_grafana_ui__WEBPACK_IMPORTED_MODULE_7__","Disconnected","Connected","queryError","QueryEditor","initTimeSrv","loader","_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__","target","scopeProps","ctrl","refresh","setTimeout","events","panel","targets","dashboard","component","load","angularScope","hasToggledEditorMode","hasNewError","toggleEditorMode","digest","destroy","app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_3__","_grafana_data__WEBPACK_IMPORTED_MODULE_5__","getTimezone","timeRangeUpdated","QueryStatusItem","_grafana_data__WEBPACK_IMPORTED_MODULE_3__","Done","Error","_ElapsedTime__WEBPACK_IMPORTED_MODULE_2__","QueryStatus","TableContainer","onClickTableButton","tableResult","_Panel__WEBPACK_IMPORTED_MODULE_6__","_Table__WEBPACK_IMPORTED_MODULE_5__","_state_actions__WEBPACK_IMPORTED_MODULE_4__","_grafana_data__WEBPACK_IMPORTED_MODULE_7__","EMPTY_TABLE","VALUE_REGEX","Table","getCellProps","rowInfo","column","e","columnKey","Header","rowValue","tableModel","columnNames","columns","filterable","accessor","test","Cell","noDataText","react_table__WEBPACK_IMPORTED_MODULE_3__","getTdProps","minRows","resolveData","cells","lodash__WEBPACK_IMPORTED_MODULE_1___default","zipObject","prepareRows","showPagination","Boolean","IconSide","createResponsiveButton","defaultOptions","iconSide","buttonClassName","iconClassName","splitted","disabled","UnConnectedExploreToolbar","onChangeDatasource","option","onClearAll","clearAll","onChangeRefreshInterval","onModeChange","closeSplit","selectedDatasource","supportedModeOptions","selectedModeOption","hasLiveOption","app_core_components_Select_DataSourcePicker__WEBPACK_IMPORTED_MODULE_6__","datasources","current","app_core_components_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_9__","_ExploreTimeControls__WEBPACK_IMPORTED_MODULE_10__","_state_actions__WEBPACK_IMPORTED_MODULE_7__","ExploreToolbar","react_redux__WEBPACK_IMPORTED_MODULE_2__","exploreItem","find","streaming","supportedModes_1","supportedModes_1_1","next","done","option1","option2","ExploreTimeControls","onMoveTimePicker","direction","app_core_utils_timePicker__WEBPACK_IMPORTED_MODULE_5__","onMoveForward","onMoveBack","onChangeTimePicker","timeRange","onZoom","setActiveTimeOption","timeOptions","rawTimeRange","active","onMoveBackward","selectOptions","_grafana_ui_src_components_TimePicker_TimePicker__WEBPACK_IMPORTED_MODULE_4__","onIntervalChanged","onRefresh","func","interval","NoDataSourceCallToAction","footer","href","ctaElement","icon","cardClassName","breakpoints","lg","callToActionElement","ErrorContainer","app_core_components_Animations_FadeIn__WEBPACK_IMPORTED_MODULE_1__","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_2__","showError","LogLabelStatsRow","logLabelStatsModel","count","proportion","percent","Math","round","barStyle","classnames_default","logs-stats-row--active","react_default","LogLabelStats_LogLabelStats","LogLabelStats","tslib_es6","rowCount","stats","onClickClose","topRows","activeRow","otherRows","insertActiveRow","otherCount","reduce","sum","total","otherProportion","stat","react","LogLabel_LogLabel","LogLabel","showStats","onClickStats","allRows","getRows","logs_model","plain","LogLabels_LogLabels","LogLabels","labels","keys","LogMessageAnsi_LogMessageAnsi","LogMessageAnsi","chunks","prevValue","getDerivedStateFromProps","ansicolor","parse","spans","span","css","accumulated","line","match","replace","_","character","toUpperCase","chunk","getRowContexts","limit","promises","Promise","all","p","catch","results","result","dataResult","r","timestamp","errors","errorResult","LogRowContextProvider","setLimit","setResult","_d","hasMoreContextRows","setHasMoreContextRows","useAsync_default","currentResult","hasMoreLogsBefore","hasMoreLogsAfter","before","after","flatten_default","updateLimit","getLogRowContextStyles","gradientTop","grafana_ui_src","white","dark1","gradientBottom","gray7","dark2","boxShadowColor","gray5","black","borderColor","dark9","commonStyles","index_esm","pageBg","border","radius","header","logs","LogRowContextGroupHeader","onLoadMoreContext","canLoadMoreRows","templateObject_5","LogRowContextGroup","shouldScrollToBottom","scrollTop","setScrollTop","listContainerRef","offsetHeight","headerProps","autoHide","renderItem","templateObject_6","LogRowContext","context","onOutsideClick","templateObject_7","templateObject_8","logRowStyles","LogRow_templateObject_1","LogRow_LogRow","LogRow","fieldCount","fieldLabel","fieldStats","fieldValue","parsed","parser","parsedFieldHighlights","showFieldStats","showContext","onClickHighlight","fieldText","getLabelFromField","getValueFromField","matcher","buildMatcher","onMouseOverMessage","isTextSelected","mouseMessageTimer","parseMessage","onMouseOutMessage","clearTimeout","getFields","toggleContext","onContextToggle","getSelection","anchorNode","isCollapsed","renderLogRow","showDuplicates","showLabels","showTime","hasAnsi","previewHighlights","lodash_default","isEqual","searchWords","highlights","needsHighlighter","highlightClassName","logs-row__match-highlight--preview","Consumer","outlineColor","LogRow_templateObject_2","tinycolor_default","setAlpha","toRgbString","getLogRowWithContextStyles","duplicates","logLevel","uniqueLabels","onMouseEnter","onMouseLeave","LogRow_templateObject_3","main_default","autoEscape","highlightTag","textToHighlight","findChunks","utils_text","LogRow_templateObject_4","graphOptions","stack","bars","lineWidth","yaxis","tickDecimals","Logs_Logs","deferLogs","renderAll","onChangeDedup","dedup","src","onChangeLabels","checked","rawLevel","hiddenRawLevels","level","onClickScan","onClickStopScan","renderAll_1","PREVIEW_LIMIT","deferLogsTimer","renderAllTimer","hasData","hasLabel","hasUniqueLabels","dedupCount","kind","Number","processedRows","firstRows","lastRows","scanText","describeTimeRange","timeSeries","time_series2","datapoints","dedupType","i","LabelsMap","createLodashMemoizedSelector","es","lodash","args","_i","acc","val","JSON","stringify","exploreItemUIStateSelector","deduplicatedLogsSelector","filteredData","Wrapper","resetExploreAction","autoHeightMin","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__","_Explore__WEBPACK_IMPORTED_MODULE_6__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__"],"mappings":"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","file":"explore.169b0a5192f4fb865790.js","sourcesContent":["// Libraries\nimport _ from 'lodash';\n\n// Services & Utils\nimport store from 'app/core/store';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { Emitter } from 'app/core/core';\nimport {\n  ensureQueries,\n  generateEmptyQuery,\n  parseUrlState,\n  getTimeRange,\n  getTimeRangeFromUrl,\n  generateNewKeyAndAddRefIdIfMissing,\n  lastUsedDatasourceKeyForOrgId,\n} from 'app/core/utils/explore';\n\n// Types\nimport { ThunkResult } from 'app/types';\nimport { DataSourceApi, DataQuery, DataSourceSelectItem, QueryFixAction } from '@grafana/ui';\n\nimport { RawTimeRange, LogsDedupStrategy, AbsoluteTimeRange } from '@grafana/data';\nimport { ExploreId, ExploreUIState, QueryTransaction, ExploreMode } from 'app/types/explore';\nimport {\n  updateDatasourceInstanceAction,\n  changeQueryAction,\n  changeRefreshIntervalAction,\n  ChangeRefreshIntervalPayload,\n  changeSizeAction,\n  ChangeSizePayload,\n  clearQueriesAction,\n  initializeExploreAction,\n  loadDatasourceMissingAction,\n  loadDatasourcePendingAction,\n  queriesImportedAction,\n  LoadDatasourceReadyPayload,\n  loadDatasourceReadyAction,\n  modifyQueriesAction,\n  scanStartAction,\n  setQueriesAction,\n  splitCloseAction,\n  splitOpenAction,\n  addQueryRowAction,\n  toggleGraphAction,\n  toggleTableAction,\n  ToggleGraphPayload,\n  ToggleTablePayload,\n  updateUIStateAction,\n  testDataSourcePendingAction,\n  testDataSourceSuccessAction,\n  testDataSourceFailureAction,\n  loadExploreDatasources,\n  changeModeAction,\n  scanStopAction,\n  runQueriesAction,\n  stateSaveAction,\n  updateTimeRangeAction,\n} from './actionTypes';\nimport { ActionOf, ActionCreator } from 'app/core/redux/actionCreatorFactory';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { offOption } from '@grafana/ui/src/components/RefreshPicker/RefreshPicker';\nimport { getShiftedTimeRange } from 'app/core/utils/timePicker';\n\n/**\n * Updates UI state and save it to the URL\n */\nconst updateExploreUIState = (exploreId: ExploreId, uiStateFragment: Partial<ExploreUIState>): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\n    dispatch(stateSaveAction());\n  };\n};\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const queries = getState().explore[exploreId].queries;\n    const query = generateEmptyQuery(queries, index);\n\n    dispatch(addQueryRowAction({ exploreId, index, query }));\n  };\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    let newDataSourceInstance: DataSourceApi = null;\n\n    if (!datasource) {\n      newDataSourceInstance = await getDatasourceSrv().get();\n    } else {\n      newDataSourceInstance = await getDatasourceSrv().get(datasource);\n    }\n\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    const queries = getState().explore[exploreId].queries;\n    const orgId = getState().user.orgId;\n\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\n\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\n\n    if (getState().explore[exploreId].isLive) {\n      dispatch(changeRefreshInterval(exploreId, offOption.value));\n    }\n\n    await dispatch(loadDatasource(exploreId, newDataSourceInstance, orgId));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Change the display mode in Explore.\n */\nexport function changeMode(exploreId: ExploreId, mode: ExploreMode): ThunkResult<void> {\n  return dispatch => {\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(changeModeAction({ exploreId, mode }));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override: boolean\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Null query means reset\n    if (query === null) {\n      const queries = getState().explore[exploreId].queries;\n      const { refId, key } = queries[index];\n      query = generateNewKeyAndAddRefIdIfMissing({ refId, key }, queries, index);\n    }\n\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): ActionOf<ChangeSizePayload> {\n  return changeSizeAction({ exploreId, height, width });\n}\n\nexport const updateTimeRange = (options: {\n  exploreId: ExploreId;\n  rawRange?: RawTimeRange;\n  absoluteRange?: AbsoluteTimeRange;\n}): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateTimeRangeAction({ ...options }));\n    dispatch(runQueries(options.exploreId));\n  };\n};\n\n/**\n * Change the refresh interval of Explore. Called from the Refresh picker.\n */\nexport function changeRefreshInterval(\n  exploreId: ExploreId,\n  refreshInterval: string\n): ActionOf<ChangeRefreshIntervalPayload> {\n  return changeRefreshIntervalAction({ exploreId, refreshInterval });\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStopAction({ exploreId }));\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(stateSaveAction());\n  };\n}\n\n/**\n * Loads all explore data sources and sets the chosen datasource.\n * If there are no datasources a missing datasource action is dispatched.\n */\nexport function loadExploreDatasourcesAndSetDatasource(\n  exploreId: ExploreId,\n  datasourceName: string\n): ThunkResult<void> {\n  return dispatch => {\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\n      .getExternal()\n      .map(\n        (ds: any) =>\n          ({\n            value: ds.name,\n            name: ds.name,\n            meta: ds.meta,\n          } as DataSourceSelectItem)\n      );\n\n    dispatch(loadExploreDatasources({ exploreId, exploreDatasources }));\n\n    if (exploreDatasources.length >= 1) {\n      dispatch(changeDatasource(exploreId, datasourceName));\n    } else {\n      dispatch(loadDatasourceMissingAction({ exploreId }));\n    }\n  };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasourceName: string,\n  queries: DataQuery[],\n  rawRange: RawTimeRange,\n  mode: ExploreMode,\n  containerWidth: number,\n  eventBridge: Emitter,\n  ui: ExploreUIState\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRange(timeZone, rawRange);\n    dispatch(loadExploreDatasourcesAndSetDatasource(exploreId, datasourceName));\n    dispatch(\n      initializeExploreAction({\n        exploreId,\n        containerWidth,\n        eventBridge,\n        queries,\n        range,\n        mode,\n        ui,\n      })\n    );\n    dispatch(updateTimeRangeAction({ exploreId }));\n  };\n}\n\n/**\n * Datasource loading was successfully completed.\n */\nexport const loadDatasourceReady = (\n  exploreId: ExploreId,\n  instance: DataSourceApi,\n  orgId: number\n): ActionOf<LoadDatasourceReadyPayload> => {\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n\n  store.set(lastUsedDatasourceKeyForOrgId(orgId), instance.name);\n\n  return loadDatasourceReadyAction({\n    exploreId,\n    history,\n  });\n};\n\nexport function importQueries(\n  exploreId: ExploreId,\n  queries: DataQuery[],\n  sourceDataSource: DataSourceApi,\n  targetDataSource: DataSourceApi\n): ThunkResult<void> {\n  return async dispatch => {\n    if (!sourceDataSource) {\n      // explore not initialized\n      dispatch(queriesImportedAction({ exploreId, queries }));\n      return;\n    }\n\n    let importedQueries = queries;\n    // Check if queries can be imported from previously selected datasource\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\n      // Keep same queries if same type of datasource\n      importedQueries = [...queries];\n    } else if (targetDataSource.importQueries) {\n      // Datasource-specific importers\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\n    } else {\n      // Default is blank queries\n      importedQueries = ensureQueries();\n    }\n\n    const nextQueries = ensureQueries(importedQueries);\n\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\n  };\n}\n\n/**\n * Tests datasource.\n */\nexport const testDatasource = (exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> => {\n  return async dispatch => {\n    let datasourceError = null;\n\n    dispatch(testDataSourcePendingAction({ exploreId }));\n\n    try {\n      const testResult = await instance.testDatasource();\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\n    } catch (error) {\n      datasourceError = (error && error.statusText) || 'Network error';\n    }\n\n    if (datasourceError) {\n      dispatch(testDataSourceFailureAction({ exploreId, error: datasourceError }));\n      return;\n    }\n\n    dispatch(testDataSourceSuccessAction({ exploreId }));\n  };\n};\n\n/**\n * Reconnects datasource when there is a connection failure.\n */\nexport const reconnectDatasource = (exploreId: ExploreId): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    const instance = getState().explore[exploreId].datasourceInstance;\n    dispatch(changeDatasource(exploreId, instance.name));\n  };\n};\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi, orgId: number): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\n\n    await dispatch(testDatasource(exploreId, instance));\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    if (instance.init) {\n      try {\n        instance.init();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    dispatch(loadDatasourceReady(exploreId, instance, orgId));\n  };\n}\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: QueryFixAction,\n  index: number,\n  modifier: any\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport function runQueries(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    dispatch(updateTimeRangeAction({ exploreId }));\n    dispatch(runQueriesAction({ exploreId }));\n  };\n}\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Register the scanner\n    dispatch(scanStartAction({ exploreId }));\n    // Scanning must trigger query run, and return the new range\n    const range = getShiftedTimeRange(-1, getState().explore[exploreId].range);\n    // Set the new range to be displayed\n    dispatch(updateTimeRangeAction({ exploreId, absoluteRange: range }));\n    dispatch(runQueriesAction({ exploreId }));\n  };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Inject react keys into query objects\n    const queries = getState().explore[exploreId].queries;\n    const nextQueries = rawQueries.map((query, index) => generateNewKeyAndAddRefIdIfMissing(query, queries, index));\n    dispatch(setQueriesAction({ exploreId, queries: nextQueries }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(itemId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(splitCloseAction({ itemId }));\n    dispatch(stateSaveAction());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore[ExploreId.left];\n    const queryState = getState().location.query[ExploreId.left] as string;\n    const urlState = parseUrlState(queryState);\n    const queryTransactions: QueryTransaction[] = [];\n    const itemState = {\n      ...leftState,\n      queryTransactions,\n      queries: leftState.queries.slice(),\n      exploreId: ExploreId.right,\n      urlState,\n    };\n    dispatch(splitOpenAction({ itemState }));\n    dispatch(stateSaveAction());\n  };\n}\n\n/**\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\n * queries won't be run\n */\nconst togglePanelActionCreator = (\n  actionCreator: ActionCreator<ToggleGraphPayload> | ActionCreator<ToggleTablePayload>\n) => (exploreId: ExploreId, isPanelVisible: boolean): ThunkResult<void> => {\n  return dispatch => {\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\n    const shouldRunQueries = !isPanelVisible;\n\n    switch (actionCreator.type) {\n      case toggleGraphAction.type:\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\n        break;\n      case toggleTableAction.type:\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\n        break;\n    }\n\n    dispatch(actionCreator({ exploreId }));\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\n\n    if (shouldRunQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n};\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\n\n/**\n * Change logs deduplication strategy and update URL.\n */\nexport const changeDedupStrategy = (exploreId: ExploreId, dedupStrategy: LogsDedupStrategy): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\n  };\n};\n\nexport function refreshExplore(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const itemState = getState().explore[exploreId];\n    if (!itemState.initialized) {\n      return;\n    }\n\n    const { urlState, update, containerWidth, eventBridge } = itemState;\n    const { datasource, queries, range: urlRange, mode, ui } = urlState;\n    const refreshQueries: DataQuery[] = [];\n    for (let index = 0; index < queries.length; index++) {\n      const query = queries[index];\n      refreshQueries.push(generateNewKeyAndAddRefIdIfMissing(query, refreshQueries, index));\n    }\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRangeFromUrl(urlRange, timeZone);\n\n    // need to refresh datasource\n    if (update.datasource) {\n      const initialQueries = ensureQueries(queries);\n      dispatch(initializeExplore(exploreId, datasource, initialQueries, range, mode, containerWidth, eventBridge, ui));\n      return;\n    }\n\n    if (update.range) {\n      dispatch(updateTimeRangeAction({ exploreId, rawRange: range.raw }));\n    }\n\n    // need to refresh ui state\n    if (update.ui) {\n      dispatch(updateUIStateAction({ ...ui, exploreId }));\n    }\n\n    // need to refresh queries\n    if (update.queries) {\n      dispatch(setQueriesAction({ exploreId, queries: refreshQueries }));\n    }\n\n    // need to refresh mode\n    if (update.mode) {\n      dispatch(changeModeAction({ exploreId, mode }));\n    }\n\n    // always run queries when refresh is needed\n    if (update.queries || update.ui || update.range) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n","import React, { PureComponent } from 'react';\n\ninterface Props {\n  isOpen: boolean;\n  label: string;\n  loading?: boolean;\n  collapsible?: boolean;\n  onToggle?: (isOpen: boolean) => void;\n}\n\nexport default class Panel extends PureComponent<Props> {\n  onClickToggle = () => {\n    const { onToggle, isOpen } = this.props;\n    if (onToggle) {\n      onToggle(!isOpen);\n    }\n  };\n\n  render() {\n    const { isOpen, loading, collapsible } = this.props;\n    const panelClass = collapsible\n      ? 'explore-panel explore-panel--collapsible panel-container'\n      : 'explore-panel panel-container';\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\n    return (\n      <div className={panelClass}>\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\n          <div className=\"explore-panel__header-buttons\">\n            <span className={iconClass} />\n          </div>\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\n        </div>\n        {isOpen && (\n          <div className=\"explore-panel__body\">\n            <div className={loaderClass} />\n            {this.props.children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component<{}, any> {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div className=\"explore-container\">\n          <h3>An unexpected error happened.</h3>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import React, { FC } from 'react';\n\ninterface Props {\n  message: any;\n  button?: {\n    text: string;\n    onClick: (event: React.MouseEvent) => void;\n  };\n}\n\nexport const Alert: FC<Props> = props => {\n  const { message, button } = props;\n  return (\n    <div className=\"alert-container\">\n      <div className=\"alert-error alert\">\n        <div className=\"alert-icon\">\n          <i className=\"fa fa-exclamation-triangle\" />\n        </div>\n        <div className=\"alert-body\">\n          <div className=\"alert-title\">{message}</div>\n        </div>\n        {button && (\n          <div className=\"alert-button\">\n            <button className=\"btn btn-outline-danger\" onClick={button.onClick}>\n              {button.text}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport difference from 'lodash/difference';\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.stack';\n\nimport { GraphLegend, LegendItem, LegendDisplayMode } from '@grafana/ui';\nimport { TimeZone, AbsoluteTimeRange } from '@grafana/data';\nimport TimeSeries from 'app/core/time_series2';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\n// Copied from graph.ts\nfunction time_format(ticks, min, max) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return '%H:%M:%S';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return '%H:%M';\n    }\n    if (secPerTick <= 80000) {\n      return '%m/%d %H:%M';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return '%m/%d';\n    }\n    return '%Y-%m';\n  }\n\n  return '%H:%M';\n}\n\nconst FLOT_OPTIONS = {\n  legend: {\n    show: false,\n  },\n  series: {\n    lines: {\n      linewidth: 1,\n      zero: false,\n    },\n    shadowSize: 0,\n  },\n  grid: {\n    minBorderMargin: 0,\n    markings: [],\n    backgroundColor: null,\n    borderWidth: 0,\n    // hoverable: true,\n    clickable: true,\n    color: '#a1a1a1',\n    margin: { left: 0, right: 0 },\n    labelMarginX: 0,\n  },\n  selection: {\n    mode: 'x',\n    color: '#666',\n  },\n  // crosshair: {\n  //   mode: 'x',\n  // },\n};\n\ninterface GraphProps {\n  data: any[];\n  height?: number;\n  width?: number;\n  id?: string;\n  range: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  split?: boolean;\n  userOptions?: any;\n  onChangeTime?: (range: AbsoluteTimeRange) => void;\n  onToggleSeries?: (alias: string, hiddenSeries: string[]) => void;\n}\n\ninterface GraphState {\n  /**\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\n   * Consequently, all series sharing the same alias will share visibility state.\n   */\n  hiddenSeries: string[];\n  showAllTimeSeries: boolean;\n}\n\nexport class Graph extends PureComponent<GraphProps, GraphState> {\n  $el: any;\n  dynamicOptions = null;\n\n  state = {\n    hiddenSeries: [],\n    showAllTimeSeries: false,\n  };\n\n  getGraphData(): TimeSeries[] {\n    const { data } = this.props;\n\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  }\n\n  componentDidMount() {\n    this.draw();\n    this.$el = $(`#${this.props.id}`);\n    this.$el.bind('plotselected', this.onPlotSelected);\n  }\n\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.range !== this.props.range ||\n      prevProps.split !== this.props.split ||\n      prevProps.height !== this.props.height ||\n      prevProps.width !== this.props.width ||\n      prevState.hiddenSeries !== this.state.hiddenSeries\n    ) {\n      this.draw();\n    }\n  }\n\n  componentWillUnmount() {\n    this.$el.unbind('plotselected', this.onPlotSelected);\n  }\n\n  onPlotSelected = (event: JQueryEventObject, ranges) => {\n    const { onChangeTime } = this.props;\n    if (onChangeTime) {\n      this.props.onChangeTime({\n        from: ranges.xaxis.from,\n        to: ranges.xaxis.to,\n      });\n    }\n  };\n\n  getDynamicOptions() {\n    const { range, width, timeZone } = this.props;\n    const ticks = (width || 0) / 100;\n    const min = range.from;\n    const max = range.to;\n    return {\n      xaxis: {\n        mode: 'time',\n        min: min,\n        max: max,\n        label: 'Datetime',\n        ticks: ticks,\n        timezone: timeZone,\n        timeformat: time_format(ticks, min, max),\n      },\n    };\n  }\n\n  onShowAllTimeSeries = () => {\n    this.setState(\n      {\n        showAllTimeSeries: true,\n      },\n      this.draw\n    );\n  };\n\n  draw() {\n    const { userOptions = {} } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    const $el = $(`#${this.props.id}`);\n    let series = [{ data: [[0, 0]] }];\n\n    if (data && data.length > 0) {\n      series = data\n        .filter((ts: TimeSeries) => hiddenSeries.indexOf(ts.alias) === -1)\n        .map((ts: TimeSeries) => ({\n          color: ts.color,\n          label: ts.label,\n          data: ts.getFlotPairs('null'),\n        }));\n    }\n\n    this.dynamicOptions = this.getDynamicOptions();\n\n    const options = {\n      ...FLOT_OPTIONS,\n      ...this.dynamicOptions,\n      ...userOptions,\n    };\n\n    $.plot($el, series, options);\n  }\n\n  getLegendItems = (): LegendItem[] => {\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    return data.map(series => {\n      return {\n        label: series.alias,\n        color: series.color,\n        isVisible: hiddenSeries.indexOf(series.alias) === -1,\n        yAxis: 1,\n      };\n    });\n  };\n\n  onSeriesToggle(label: string, event: React.MouseEvent<HTMLElement>) {\n    // This implementation is more or less a copy of GraphPanel's logic.\n    // TODO: we need to use Graph's panel controller or split it into smaller\n    // controllers to remove code duplication. Right now we cant easily use that, since Explore\n    // is not using DataFrame for graph yet\n\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\n\n    this.setState((state, props) => {\n      const { data, onToggleSeries } = props;\n      let nextHiddenSeries: string[] = [];\n      if (exclusive) {\n        // Toggling series with key makes the series itself to toggle\n        if (state.hiddenSeries.indexOf(label) > -1) {\n          nextHiddenSeries = state.hiddenSeries.filter(series => series !== label);\n        } else {\n          nextHiddenSeries = state.hiddenSeries.concat([label]);\n        }\n      } else {\n        // Toggling series with out key toggles all the series but the clicked one\n        const allSeriesLabels = data.map(series => series.label);\n\n        if (state.hiddenSeries.length + 1 === allSeriesLabels.length) {\n          nextHiddenSeries = [];\n        } else {\n          nextHiddenSeries = difference(allSeriesLabels, [label]);\n        }\n      }\n\n      if (onToggleSeries) {\n        onToggleSeries(label, nextHiddenSeries);\n      }\n\n      return {\n        hiddenSeries: nextHiddenSeries,\n      };\n    });\n  }\n\n  render() {\n    const { height = 100, id = 'graph' } = this.props;\n    return (\n      <>\n        {this.props.data && this.props.data.length > MAX_NUMBER_OF_TIME_SERIES && !this.state.showAllTimeSeries && (\n          <div className=\"time-series-disclaimer\">\n            <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n            <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\n              this.props.data.length\n            }`}</span>\n          </div>\n        )}\n        <div id={id} className=\"explore-graph\" style={{ height }} />\n\n        <GraphLegend\n          items={this.getLegendItems()}\n          displayMode={LegendDisplayMode.List}\n          placement=\"under\"\n          onLabelClick={(item, event) => {\n            this.onSeriesToggle(item.label, event);\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default Graph;\n","import React, { FC, ReactNode, PureComponent } from 'react';\nimport { Tooltip } from '@grafana/ui';\n\ninterface ToggleButtonGroupProps {\n  label?: string;\n  children: JSX.Element[];\n  transparent?: boolean;\n}\n\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\n  render() {\n    const { children, label, transparent } = this.props;\n\n    return (\n      <div className=\"gf-form\">\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\n      </div>\n    );\n  }\n}\n\ninterface ToggleButtonProps {\n  onChange?: (value: any) => void;\n  selected?: boolean;\n  value: any;\n  className?: string;\n  children: ReactNode;\n  tooltip?: string;\n}\n\nexport const ToggleButton: FC<ToggleButtonProps> = ({\n  children,\n  selected,\n  className = '',\n  value = null,\n  tooltip,\n  onChange,\n}) => {\n  const onClick = (event: React.SyntheticEvent) => {\n    event.stopPropagation();\n    if (!selected && onChange) {\n      onChange(value);\n    }\n  };\n\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\n  const button = (\n    <button className={btnClassName} onClick={onClick}>\n      <span>{children}</span>\n    </button>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip content={tooltip} placement=\"bottom\">\n        {button}\n      </Tooltip>\n    );\n  } else {\n    return button;\n  }\n};\n","import React, { PureComponent } from 'react';\nimport { toDuration } from '@grafana/data';\n\nconst INTERVAL = 150;\n\nexport interface Props {\n  time?: number;\n  renderCount?: number;\n  className?: string;\n  humanize?: boolean;\n}\n\nexport interface State {\n  elapsed: number;\n}\n\nexport default class ElapsedTime extends PureComponent<Props, State> {\n  offset: number;\n  timer: number;\n\n  state = {\n    elapsed: 0,\n  };\n\n  start() {\n    this.offset = Date.now();\n    this.timer = window.setInterval(this.tick, INTERVAL);\n  }\n\n  tick = () => {\n    const jetzt = Date.now();\n    const elapsed = jetzt - this.offset;\n    this.setState({ elapsed });\n  };\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.time) {\n      clearInterval(this.timer);\n    } else if (this.props.time) {\n      this.start();\n    }\n\n    if (nextProps.renderCount) {\n      clearInterval(this.timer);\n      this.start();\n    }\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { elapsed } = this.state;\n    const { className, time, humanize } = this.props;\n    const value = (time || elapsed) / 1000;\n    let displayValue = `${value.toFixed(1)}s`;\n    if (humanize) {\n      const duration = toDuration(elapsed);\n      const hours = duration.hours();\n      const minutes = duration.minutes();\n      const seconds = duration.seconds();\n      displayValue = hours ? `${hours}h ${minutes}m ${seconds}s` : minutes ? ` ${minutes}m ${seconds}s` : `${seconds}s`;\n    }\n    return <span className={`elapsed-time ${className}`}>{displayValue}</span>;\n  }\n}\n","// Libraries\nimport React, { ComponentClass } from 'react';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { AutoSizer } from 'react-virtualized';\n\n// Services & Utils\nimport store from 'app/core/store';\n\n// Components\nimport { Alert } from './Error';\nimport ErrorBoundary from './ErrorBoundary';\nimport GraphContainer from './GraphContainer';\nimport LogsContainer from './LogsContainer';\nimport QueryRows from './QueryRows';\nimport TableContainer from './TableContainer';\n\n// Actions\nimport {\n  changeSize,\n  initializeExplore,\n  modifyQueries,\n  scanStart,\n  setQueries,\n  refreshExplore,\n  reconnectDatasource,\n  updateTimeRange,\n} from './state/actions';\n\n// Types\nimport { RawTimeRange } from '@grafana/data';\n\nimport { DataQuery, ExploreStartPageProps, DataSourceApi, DataQueryError } from '@grafana/ui';\nimport {\n  ExploreItemState,\n  ExploreUrlState,\n  ExploreId,\n  ExploreUpdateState,\n  ExploreUIState,\n  ExploreMode,\n} from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport {\n  ensureQueries,\n  DEFAULT_RANGE,\n  DEFAULT_UI_STATE,\n  getTimeRangeFromUrl,\n  lastUsedDatasourceKeyForOrgId,\n} from 'app/core/utils/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { ErrorContainer } from './ErrorContainer';\nimport { scanStopAction } from './state/actionTypes';\n\ninterface ExploreProps {\n  StartPage?: ComponentClass<ExploreStartPageProps>;\n  changeSize: typeof changeSize;\n  datasourceError: string;\n  datasourceInstance: DataSourceApi;\n  datasourceLoading: boolean | null;\n  datasourceMissing: boolean;\n  exploreId: ExploreId;\n  initializeExplore: typeof initializeExplore;\n  initialized: boolean;\n  modifyQueries: typeof modifyQueries;\n  update: ExploreUpdateState;\n  reconnectDatasource: typeof reconnectDatasource;\n  refreshExplore: typeof refreshExplore;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  scanStart: typeof scanStart;\n  scanStopAction: typeof scanStopAction;\n  setQueries: typeof setQueries;\n  split: boolean;\n  showingStartPage?: boolean;\n  queryKeys: string[];\n  initialDatasource: string;\n  initialQueries: DataQuery[];\n  initialRange: RawTimeRange;\n  mode: ExploreMode;\n  initialUI: ExploreUIState;\n  queryErrors: DataQueryError[];\n  isLive: boolean;\n  updateTimeRange: typeof updateTimeRange;\n}\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<ExploreProps> {\n  el: any;\n  exploreEvents: Emitter;\n\n  constructor(props: ExploreProps) {\n    super(props);\n    this.exploreEvents = new Emitter();\n  }\n\n  componentDidMount() {\n    const { initialized, exploreId, initialDatasource, initialQueries, initialRange, mode, initialUI } = this.props;\n    const width = this.el ? this.el.offsetWidth : 0;\n\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\n    if (!initialized) {\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        mode,\n        width,\n        this.exploreEvents,\n        initialUI\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n  }\n\n  componentDidUpdate(prevProps: ExploreProps) {\n    this.refreshExplore();\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  onChangeTime = (rawRange: RawTimeRange) => {\n    const { updateTimeRange, exploreId } = this.props;\n\n    updateTimeRange({ exploreId, rawRange });\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onClickLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onModifyQueries = (action: any, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    this.props.scanStart(this.props.exploreId);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  refreshExplore = () => {\n    const { exploreId, update } = this.props;\n\n    if (update.queries || update.ui || update.range || update.datasource) {\n      this.props.refreshExplore(exploreId);\n    }\n  };\n\n  renderEmptyState = () => {\n    return (\n      <div className=\"explore-container\">\n        <NoDataSourceCallToAction />\n      </div>\n    );\n  };\n\n  onReconnect = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { exploreId, reconnectDatasource } = this.props;\n\n    event.preventDefault();\n    reconnectDatasource(exploreId);\n  };\n\n  render() {\n    const {\n      StartPage,\n      datasourceInstance,\n      datasourceError,\n      datasourceLoading,\n      datasourceMissing,\n      exploreId,\n      showingStartPage,\n      split,\n      queryKeys,\n      queryErrors,\n      mode,\n    } = this.props;\n    const exploreClass = split ? 'explore explore-split' : 'explore';\n\n    return (\n      <div className={exploreClass} ref={this.getRef}>\n        <ExploreToolbar exploreId={exploreId} onChangeTime={this.onChangeTime} />\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\n        {datasourceMissing ? this.renderEmptyState() : null}\n\n        <FadeIn duration={datasourceError ? 150 : 5} in={datasourceError ? true : false}>\n          <div className=\"explore-container\">\n            <Alert\n              message={`Error connecting to datasource: ${datasourceError}`}\n              button={{ text: 'Reconnect', onClick: this.onReconnect }}\n            />\n          </div>\n        </FadeIn>\n\n        {datasourceInstance && (\n          <div className=\"explore-container\">\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\n            <ErrorContainer queryErrors={queryErrors} />\n            <AutoSizer onResize={this.onResize} disableHeight>\n              {({ width }) => {\n                if (width === 0) {\n                  return null;\n                }\n\n                return (\n                  <main className=\"m-t-2\" style={{ width }}>\n                    <ErrorBoundary>\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\n                      {!showingStartPage && (\n                        <>\n                          {mode === ExploreMode.Metrics && <GraphContainer width={width} exploreId={exploreId} />}\n                          {mode === ExploreMode.Metrics && (\n                            <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />\n                          )}\n                          {mode === ExploreMode.Logs && (\n                            <LogsContainer\n                              width={width}\n                              exploreId={exploreId}\n                              onClickLabel={this.onClickLabel}\n                              onStartScanning={this.onStartScanning}\n                              onStopScanning={this.onStopScanning}\n                            />\n                          )}\n                        </>\n                      )}\n                    </ErrorBoundary>\n                  </main>\n                );\n              }}\n            </AutoSizer>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const timeZone = getTimeZone(state.user);\n  const {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    showingStartPage,\n    queryKeys,\n    urlState,\n    update,\n    queryErrors,\n    isLive,\n    supportedModes,\n    mode,\n  } = item;\n\n  const { datasource, queries, range: urlRange, mode: urlMode, ui } = (urlState || {}) as ExploreUrlState;\n  const initialDatasource = datasource || store.get(lastUsedDatasourceKeyForOrgId(state.user.orgId));\n  const initialQueries: DataQuery[] = ensureQueries(queries);\n  const initialRange = urlRange ? getTimeRangeFromUrl(urlRange, timeZone).raw : DEFAULT_RANGE;\n\n  let newMode: ExploreMode;\n  if (supportedModes.length) {\n    const urlModeIsValid = supportedModes.includes(urlMode);\n    const modeStateIsValid = supportedModes.includes(mode);\n\n    if (urlModeIsValid) {\n      newMode = urlMode;\n    } else if (modeStateIsValid) {\n      newMode = mode;\n    } else {\n      newMode = supportedModes[0];\n    }\n  } else {\n    newMode = [ExploreMode.Metrics, ExploreMode.Logs].includes(urlMode) ? urlMode : ExploreMode.Metrics;\n  }\n\n  const initialUI = ui || DEFAULT_UI_STATE;\n\n  return {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    showingStartPage,\n    split,\n    queryKeys,\n    update,\n    initialDatasource,\n    initialQueries,\n    initialRange,\n    mode: newMode,\n    initialUI,\n    queryErrors,\n    isLive,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSize,\n  initializeExplore,\n  modifyQueries,\n  reconnectDatasource,\n  refreshExplore,\n  scanStart,\n  scanStopAction,\n  setQueries,\n  updateTimeRange,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Explore)\n) as React.ComponentType<{ exploreId: ExploreId }>;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { TimeZone, AbsoluteTimeRange, LoadingState } from '@grafana/data';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleGraph, updateTimeRange } from './state/actions';\nimport Graph from './Graph';\nimport Panel from './Panel';\nimport { getTimeZone } from '../profile/state/selectors';\n\ninterface GraphContainerProps {\n  exploreId: ExploreId;\n  graphResult?: any[];\n  loading: boolean;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  showingGraph: boolean;\n  showingTable: boolean;\n  split: boolean;\n  toggleGraph: typeof toggleGraph;\n  updateTimeRange: typeof updateTimeRange;\n  width: number;\n}\n\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\n  onClickGraphButton = () => {\n    this.props.toggleGraph(this.props.exploreId, this.props.showingGraph);\n  };\n\n  onChangeTime = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  render() {\n    const {\n      exploreId,\n      graphResult,\n      loading,\n      showingGraph,\n      showingTable,\n      absoluteRange,\n      split,\n      width,\n      timeZone,\n    } = this.props;\n    const graphHeight = showingGraph && showingTable ? 200 : 400;\n\n    return (\n      <Panel label=\"Graph\" collapsible isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\n        {graphResult && (\n          <Graph\n            data={graphResult}\n            height={graphHeight}\n            id={`explore-graph-${exploreId}`}\n            onChangeTime={this.onChangeTime}\n            range={absoluteRange}\n            timeZone={timeZone}\n            split={split}\n            width={width}\n          />\n        )}\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { graphResult, loadingState, showingGraph, showingTable, absoluteRange } = item;\n  const loading = loadingState === LoadingState.Loading || loadingState === LoadingState.Streaming;\n  return {\n    graphResult,\n    loading,\n    showingGraph,\n    showingTable,\n    split,\n    timeZone: getTimeZone(state.user),\n    absoluteRange,\n  };\n}\n\nconst mapDispatchToProps = {\n  toggleGraph,\n  updateTimeRange,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GraphContainer)\n);\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { DataSourceApi } from '@grafana/ui';\n\nimport {\n  RawTimeRange,\n  LogLevel,\n  TimeZone,\n  AbsoluteTimeRange,\n  LogsModel,\n  LogRowModel,\n  LogsDedupStrategy,\n  LoadingState,\n  TimeRange,\n} from '@grafana/data';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { changeDedupStrategy, updateTimeRange } from './state/actions';\nimport Logs from './Logs';\nimport Panel from './Panel';\nimport { toggleLogLevelAction, changeRefreshIntervalAction } from 'app/features/explore/state/actionTypes';\nimport { deduplicatedLogsSelector, exploreItemUIStateSelector } from 'app/features/explore/state/selectors';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { LiveLogsWithTheme } from './LiveLogs';\nimport { offOption } from '@grafana/ui/src/components/RefreshPicker/RefreshPicker';\n\ninterface LogsContainerProps {\n  datasourceInstance: DataSourceApi | null;\n  exploreId: ExploreId;\n  loading: boolean;\n\n  logsHighlighterExpressions?: string[];\n  logsResult?: LogsModel;\n  dedupedResult?: LogsModel;\n  onClickLabel: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  toggleLogLevelAction: typeof toggleLogLevelAction;\n  changeDedupStrategy: typeof changeDedupStrategy;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  width: number;\n  isLive: boolean;\n  stopLive: typeof changeRefreshIntervalAction;\n  updateTimeRange: typeof updateTimeRange;\n  range: TimeRange;\n  absoluteRange: AbsoluteTimeRange;\n}\n\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\n  onChangeTime = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  onStopLive = () => {\n    const { exploreId } = this.props;\n    this.props.stopLive({ exploreId, refreshInterval: offOption.value });\n  };\n\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\n  };\n\n  handleToggleLogLevel = (hiddenLogLevels: LogLevel[]) => {\n    const { exploreId } = this.props;\n    this.props.toggleLogLevelAction({\n      exploreId,\n      hiddenLogLevels,\n    });\n  };\n\n  getLogRowContext = async (row: LogRowModel, options?: any) => {\n    const { datasourceInstance } = this.props;\n\n    if (datasourceInstance) {\n      return datasourceInstance.getLogRowContext(row, options);\n    }\n\n    return [];\n  };\n\n  render() {\n    const {\n      exploreId,\n      loading,\n      logsHighlighterExpressions,\n      logsResult,\n      dedupedResult,\n      onClickLabel,\n      onStartScanning,\n      onStopScanning,\n      absoluteRange,\n      timeZone,\n      scanning,\n      range,\n      width,\n      hiddenLogLevels,\n      isLive,\n    } = this.props;\n\n    if (isLive) {\n      return (\n        <Panel label=\"Logs\" loading={false} isOpen>\n          <LiveLogsWithTheme logsResult={logsResult} timeZone={timeZone} stopLive={this.onStopLive} />\n        </Panel>\n      );\n    }\n\n    return (\n      <Panel label=\"Logs\" loading={loading} isOpen>\n        <Logs\n          dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\n          data={logsResult}\n          dedupedData={dedupedResult}\n          exploreId={exploreId}\n          highlighterExpressions={logsHighlighterExpressions}\n          loading={loading}\n          onChangeTime={this.onChangeTime}\n          onClickLabel={onClickLabel}\n          onStartScanning={onStartScanning}\n          onStopScanning={onStopScanning}\n          onDedupStrategyChange={this.handleDedupStrategyChange}\n          onToggleLogLevel={this.handleToggleLogLevel}\n          absoluteRange={absoluteRange}\n          timeZone={timeZone}\n          scanning={scanning}\n          scanRange={range.raw}\n          width={width}\n          hiddenLogLevels={hiddenLogLevels}\n          getRowContext={this.getLogRowContext}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    logsHighlighterExpressions,\n    logsResult,\n    loadingState,\n    scanning,\n    datasourceInstance,\n    isLive,\n    range,\n    absoluteRange,\n  } = item;\n  const loading = loadingState === LoadingState.Loading || loadingState === LoadingState.Streaming;\n  const { dedupStrategy } = exploreItemUIStateSelector(item);\n  const hiddenLogLevels = new Set(item.hiddenLogLevels);\n  const dedupedResult = deduplicatedLogsSelector(item);\n  const timeZone = getTimeZone(state.user);\n\n  return {\n    loading,\n    logsHighlighterExpressions,\n    logsResult,\n    scanning,\n    timeZone,\n    dedupStrategy,\n    hiddenLogLevels,\n    dedupedResult,\n    datasourceInstance,\n    isLive,\n    range,\n    absoluteRange,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeDedupStrategy,\n  toggleLogLevelAction,\n  stopLive: changeRefreshIntervalAction,\n  updateTimeRange,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(LogsContainer)\n);\n","import React, { PureComponent } from 'react';\nimport { css, cx } from 'emotion';\nimport { Themeable, withTheme, GrafanaTheme, selectThemeVariant, LinkButton } from '@grafana/ui';\n\nimport { LogsModel, LogRowModel, TimeZone } from '@grafana/data';\n\nimport ElapsedTime from './ElapsedTime';\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  logsRowsLive: css`\n    label: logs-rows-live;\n    display: flex;\n    flex-flow: column nowrap;\n    height: 65vh;\n    overflow-y: auto;\n    :first-child {\n      margin-top: auto !important;\n    }\n  `,\n  logsRowFresh: css`\n    label: logs-row-fresh;\n    color: ${theme.colors.text};\n    background-color: ${selectThemeVariant({ light: theme.colors.gray6, dark: theme.colors.gray1 }, theme.type)};\n  `,\n  logsRowOld: css`\n    label: logs-row-old;\n    opacity: 0.8;\n  `,\n  logsRowsIndicator: css`\n    font-size: ${theme.typography.size.md};\n    padding: ${theme.spacing.sm} 0;\n    display: flex;\n    align-items: center;\n  `,\n});\n\nexport interface Props extends Themeable {\n  logsResult?: LogsModel;\n  timeZone: TimeZone;\n  stopLive: () => void;\n}\n\nexport interface State {\n  renderCount: number;\n}\n\nclass LiveLogs extends PureComponent<Props, State> {\n  private liveEndDiv: HTMLDivElement = null;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { renderCount: 0 };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevRows: LogRowModel[] = prevProps.logsResult ? prevProps.logsResult.rows : [];\n    const rows: LogRowModel[] = this.props.logsResult ? this.props.logsResult.rows : [];\n\n    if (prevRows !== rows) {\n      this.setState({\n        renderCount: this.state.renderCount + 1,\n      });\n    }\n\n    if (this.liveEndDiv) {\n      this.liveEndDiv.scrollIntoView(false);\n    }\n  }\n\n  render() {\n    const { theme, timeZone } = this.props;\n    const { renderCount } = this.state;\n    const styles = getStyles(theme);\n    const rowsToRender: LogRowModel[] = this.props.logsResult ? this.props.logsResult.rows : [];\n    const showUtc = timeZone === 'utc';\n\n    return (\n      <>\n        <div className={cx(['logs-rows', styles.logsRowsLive])}>\n          {rowsToRender.map((row: any, index) => {\n            return (\n              <div\n                className={row.fresh ? cx(['logs-row', styles.logsRowFresh]) : cx(['logs-row', styles.logsRowOld])}\n                key={`${row.timeEpochMs}-${index}`}\n              >\n                {showUtc && (\n                  <div className=\"logs-row__localtime\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n                    {row.timeUtc}\n                  </div>\n                )}\n                {!showUtc && (\n                  <div className=\"logs-row__localtime\" title={`${row.timeUtc} (${row.timeFromNow})`}>\n                    {row.timeLocal}\n                  </div>\n                )}\n                <div className=\"logs-row__message\">{row.entry}</div>\n              </div>\n            );\n          })}\n          <div\n            ref={element => {\n              this.liveEndDiv = element;\n              if (this.liveEndDiv) {\n                this.liveEndDiv.scrollIntoView(false);\n              }\n            }}\n          />\n        </div>\n        <div className={cx([styles.logsRowsIndicator])}>\n          <span>\n            Last line received: <ElapsedTime renderCount={renderCount} humanize={true} /> ago\n          </span>\n          <LinkButton\n            onClick={this.props.stopLive}\n            size=\"md\"\n            variant=\"transparent\"\n            style={{ color: theme.colors.orange }}\n          >\n            Stop Live\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const LiveLogsWithTheme = withTheme(LiveLogs);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport QueryRow from './QueryRow';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreId } from 'app/types/explore';\n\ninterface QueryRowsProps {\n  className?: string;\n  exploreEvents: Emitter;\n  exploreId: ExploreId;\n  queryKeys: string[];\n}\n\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\n  render() {\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\n    return (\n      <div className={className}>\n        {queryKeys.map((key, index) => {\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\n        })}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\n\n// Components\nimport QueryEditor from './QueryEditor';\n\n// Actions\nimport { changeQuery, modifyQueries, runQueries, addQueryRow } from './state/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { TimeRange, AbsoluteTimeRange } from '@grafana/data';\nimport { DataQuery, DataSourceApi, QueryFixAction, DataSourceStatus, PanelData, DataQueryError } from '@grafana/ui';\nimport { HistoryItem, ExploreItemState, ExploreId, ExploreMode } from 'app/types/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\nimport QueryStatus from './QueryStatus';\n\ninterface PropsFromParent {\n  exploreId: ExploreId;\n  index: number;\n  exploreEvents: Emitter;\n}\n\ninterface QueryRowProps extends PropsFromParent {\n  addQueryRow: typeof addQueryRow;\n  changeQuery: typeof changeQuery;\n  className?: string;\n  exploreId: ExploreId;\n  datasourceInstance: DataSourceApi;\n  datasourceStatus: DataSourceStatus;\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\n  history: HistoryItem[];\n  query: DataQuery;\n  modifyQueries: typeof modifyQueries;\n  range: TimeRange;\n  absoluteRange: AbsoluteTimeRange;\n  removeQueryRowAction: typeof removeQueryRowAction;\n  runQueries: typeof runQueries;\n  queryResponse: PanelData;\n  latency: number;\n  queryErrors: DataQueryError[];\n  mode: ExploreMode;\n}\n\ninterface QueryRowState {\n  textEditModeEnabled: boolean;\n}\n\nexport class QueryRow extends PureComponent<QueryRowProps, QueryRowState> {\n  state: QueryRowState = {\n    textEditModeEnabled: false,\n  };\n\n  onRunQuery = () => {\n    const { exploreId } = this.props;\n    this.props.runQueries(exploreId);\n  };\n\n  onChange = (query: DataQuery, override?: boolean) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    this.props.changeQuery(exploreId, query, index, override);\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\n      // Live preview of log search matches. Only use on first row for now\n      this.updateLogsHighlights(query);\n    }\n  };\n\n  componentWillUnmount() {\n    console.log('QueryRow will unmount');\n  }\n\n  onClickAddButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.addQueryRow(exploreId, index);\n  };\n\n  onClickClearButton = () => {\n    this.onChange(null, true);\n  };\n\n  onClickHintFix = (action: QueryFixAction) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, action: QueryFixAction) => datasourceInstance.modifyQuery(queries, action);\n      this.props.modifyQueries(exploreId, action, index, modifier);\n    }\n  };\n\n  onClickRemoveButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.removeQueryRowAction({ exploreId, index });\n    this.props.runQueries(exploreId);\n  };\n\n  onClickToggleEditorMode = () => {\n    this.setState({ textEditModeEnabled: !this.state.textEditModeEnabled });\n  };\n\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance.getHighlighterExpression) {\n      const { exploreId } = this.props;\n      const expressions = datasourceInstance.getHighlighterExpression(value);\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\n    }\n  }, 500);\n\n  render() {\n    const {\n      datasourceInstance,\n      history,\n      query,\n      exploreEvents,\n      range,\n      absoluteRange,\n      datasourceStatus,\n      queryResponse,\n      latency,\n      queryErrors,\n      mode,\n    } = this.props;\n    const canToggleEditorModes =\n      mode === ExploreMode.Metrics && _.has(datasourceInstance, 'components.QueryCtrl.prototype.toggleEditorMode');\n    let QueryField;\n\n    if (mode === ExploreMode.Metrics && datasourceInstance.components.ExploreMetricsQueryField) {\n      QueryField = datasourceInstance.components.ExploreMetricsQueryField;\n    } else if (mode === ExploreMode.Logs && datasourceInstance.components.ExploreLogsQueryField) {\n      QueryField = datasourceInstance.components.ExploreLogsQueryField;\n    } else {\n      QueryField = datasourceInstance.components.ExploreQueryField;\n    }\n\n    return (\n      <div className=\"query-row\">\n        <div className=\"query-row-field flex-shrink-1\">\n          {QueryField ? (\n            <QueryField\n              datasource={datasourceInstance}\n              datasourceStatus={datasourceStatus}\n              query={query}\n              history={history}\n              onRunQuery={this.onRunQuery}\n              onHint={this.onClickHintFix}\n              onChange={this.onChange}\n              panelData={null}\n              queryResponse={queryResponse}\n              absoluteRange={absoluteRange}\n            />\n          ) : (\n            <QueryEditor\n              error={queryErrors}\n              datasource={datasourceInstance}\n              onQueryChange={this.onChange}\n              onExecuteQuery={this.onRunQuery}\n              initialQuery={query}\n              exploreEvents={exploreEvents}\n              range={range}\n              textEditModeEnabled={this.state.textEditModeEnabled}\n            />\n          )}\n        </div>\n        <div className=\"query-row-status\">\n          <QueryStatus queryResponse={queryResponse} latency={latency} />\n        </div>\n        <div className=\"gf-form-inline flex-shrink-0\">\n          {canToggleEditorModes && (\n            <div className=\"gf-form\">\n              <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickToggleEditorMode}>\n                <i className=\"fa fa-pencil\" />\n              </button>\n            </div>\n          )}\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickClearButton}>\n              <i className=\"fa fa-times\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickAddButton}>\n              <i className=\"fa fa-plus\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickRemoveButton}>\n              <i className=\"fa fa-minus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId, index }: QueryRowProps) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    datasourceInstance,\n    history,\n    queries,\n    range,\n    absoluteRange,\n    datasourceError,\n    graphResult,\n    loadingState,\n    latency,\n    queryErrors,\n    mode,\n  } = item;\n  const query = queries[index];\n  const datasourceStatus = datasourceError ? DataSourceStatus.Disconnected : DataSourceStatus.Connected;\n  const error = queryErrors.filter(queryError => queryError.refId === query.refId)[0];\n  const series = graphResult ? graphResult : []; // TODO: use DataFrame\n  const queryResponse: PanelData = {\n    series,\n    state: loadingState,\n    error,\n  };\n\n  return {\n    datasourceInstance,\n    history,\n    query,\n    range,\n    absoluteRange,\n    datasourceStatus,\n    queryResponse,\n    latency,\n    queryErrors,\n    mode,\n  };\n}\n\nconst mapDispatchToProps = {\n  addQueryRow,\n  changeQuery,\n  highlightLogsExpressionAction,\n  modifyQueries,\n  removeQueryRowAction,\n  runQueries,\n};\n\nexport default hot(module)(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QueryRow) as React.ComponentType<PropsFromParent>);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Services\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { DataQuery } from '@grafana/ui';\nimport { TimeRange } from '@grafana/data';\nimport 'app/features/plugins/plugin_loader';\nimport { dateTime } from '@grafana/data';\n\ninterface QueryEditorProps {\n  error?: any;\n  datasource: any;\n  onExecuteQuery?: () => void;\n  onQueryChange?: (value: DataQuery) => void;\n  initialQuery: DataQuery;\n  exploreEvents: Emitter;\n  range: TimeRange;\n  textEditModeEnabled?: boolean;\n}\n\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\n  element: any;\n  component: AngularComponent;\n  angularScope: any;\n\n  async componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\n    this.initTimeSrv(range);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\n    const target = { datasource: datasource.name, ...initialQuery };\n    const scopeProps = {\n      ctrl: {\n        datasource,\n        target,\n        refresh: () => {\n          setTimeout(() => {\n            this.props.onQueryChange(target);\n            this.props.onExecuteQuery();\n          }, 1);\n        },\n        onQueryChange: () => {\n          setTimeout(() => {\n            this.props.onQueryChange(target);\n          }, 1);\n        },\n        events: exploreEvents,\n        panel: { datasource, targets: [target] },\n        dashboard: {},\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n    this.angularScope = scopeProps.ctrl;\n    setTimeout(() => {\n      this.props.onQueryChange(target);\n      this.props.onExecuteQuery();\n    }, 1);\n  }\n\n  componentDidUpdate(prevProps: QueryEditorProps) {\n    const hasToggledEditorMode = prevProps.textEditModeEnabled !== this.props.textEditModeEnabled;\n    const hasNewError = prevProps.error !== this.props.error;\n\n    if (this.component) {\n      if (hasToggledEditorMode) {\n        this.angularScope.toggleEditorMode();\n      }\n\n      if (hasNewError || hasToggledEditorMode) {\n        // Some query controllers listen to data error events and need a digest\n        // for some reason this needs to be done in next tick\n        setTimeout(this.component.digest);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  initTimeSrv(range: TimeRange) {\n    const timeSrv = getTimeSrv();\n    timeSrv.init({\n      time: {\n        from: dateTime(range.from),\n        to: dateTime(range.to),\n      },\n      refresh: false,\n      getTimezone: () => 'utc',\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\n    });\n  }\n\n  render() {\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport ElapsedTime from './ElapsedTime';\nimport { LoadingState } from '@grafana/data';\nimport { PanelData } from '@grafana/ui';\n\nfunction formatLatency(value) {\n  return `${(value / 1000).toFixed(1)}s`;\n}\n\ninterface QueryStatusItemProps {\n  queryResponse: PanelData;\n  latency: number;\n}\n\nclass QueryStatusItem extends PureComponent<QueryStatusItemProps> {\n  render() {\n    const { queryResponse, latency } = this.props;\n    const className =\n      queryResponse.state === LoadingState.Done || LoadingState.Error\n        ? 'query-transaction'\n        : 'query-transaction query-transaction--loading';\n    return (\n      <div className={className}>\n        {/* <div className=\"query-transaction__type\">{transaction.resultType}:</div> */}\n        <div className=\"query-transaction__duration\">\n          {queryResponse.state === LoadingState.Done || LoadingState.Error ? formatLatency(latency) : <ElapsedTime />}\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface QueryStatusProps {\n  queryResponse: PanelData;\n  latency: number;\n}\n\nexport default class QueryStatus extends PureComponent<QueryStatusProps> {\n  render() {\n    const { queryResponse, latency } = this.props;\n    return (\n      <div className=\"query-transactions\">\n        {queryResponse && <QueryStatusItem queryResponse={queryResponse} latency={latency} />}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleTable } from './state/actions';\nimport Table from './Table';\nimport Panel from './Panel';\nimport TableModel from 'app/core/table_model';\nimport { LoadingState } from '@grafana/data';\n\ninterface TableContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  onClickCell: (key: string, value: string) => void;\n  showingTable: boolean;\n  tableResult?: TableModel;\n  toggleTable: typeof toggleTable;\n}\n\nexport class TableContainer extends PureComponent<TableContainerProps> {\n  onClickTableButton = () => {\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\n  };\n\n  render() {\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\n\n    return (\n      <Panel label=\"Table\" loading={loading} collapsible isOpen={showingTable} onToggle={this.onClickTableButton}>\n        {tableResult && <Table data={tableResult} loading={loading} onClickCell={onClickCell} />}\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { loadingState, showingTable, tableResult } = item;\n  const loading =\n    tableResult && tableResult.rows.length > 0\n      ? false\n      : loadingState === LoadingState.Loading || loadingState === LoadingState.Streaming;\n  return { loading, showingTable, tableResult };\n}\n\nconst mapDispatchToProps = {\n  toggleTable,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TableContainer)\n);\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport ReactTable from 'react-table';\n\nimport TableModel from 'app/core/table_model';\n\nconst EMPTY_TABLE = new TableModel();\n// Identify columns that contain values\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\n\ninterface TableProps {\n  data: TableModel;\n  loading: boolean;\n  onClickCell?: (columnKey: string, rowValue: string) => void;\n}\n\nfunction prepareRows(rows, columnNames) {\n  return rows.map(cells => _.zipObject(columnNames, cells));\n}\n\nexport default class Table extends PureComponent<TableProps> {\n  getCellProps = (state, rowInfo, column) => {\n    return {\n      onClick: (e: React.SyntheticEvent) => {\n        // Only handle click on link, not the cell\n        if (e.target) {\n          const link = e.target as HTMLElement;\n          if (link.className === 'link') {\n            const columnKey = column.Header().props.title;\n            const rowValue = rowInfo.row[columnKey];\n            this.props.onClickCell(columnKey, rowValue);\n          }\n        }\n      },\n    };\n  };\n\n  render() {\n    const { data, loading } = this.props;\n    const tableModel = data || EMPTY_TABLE;\n    const columnNames = tableModel.columns.map(({ text }) => text);\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\n      Header: () => <span title={text}>{text}</span>,\n      accessor: text,\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\n      show: text !== 'Time',\n      Cell: row => (\n        <span className={filterable ? 'link' : ''} title={text + ': ' + row.value}>\n          {row.value}\n        </span>\n      ),\n    }));\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\n\n    return (\n      <ReactTable\n        columns={columns}\n        data={tableModel.rows}\n        getTdProps={this.getCellProps}\n        loading={loading}\n        minRows={0}\n        noDataText={noDataText}\n        resolveData={data => prepareRows(data, columnNames)}\n        showPagination={Boolean(data)}\n      />\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\nimport { ExploreId, ExploreMode } from 'app/types/explore';\nimport { DataSourceSelectItem } from '@grafana/ui';\nimport { RawTimeRange, TimeZone, TimeRange, LoadingState, SelectableValue } from '@grafana/data';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { StoreState } from 'app/types/store';\nimport {\n  changeDatasource,\n  clearQueries,\n  splitClose,\n  runQueries,\n  splitOpen,\n  changeRefreshInterval,\n  changeMode,\n} from './state/actions';\nimport { getTimeZone } from '../profile/state/selectors';\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\nimport { ExploreTimeControls } from './ExploreTimeControls';\n\nenum IconSide {\n  left = 'left',\n  right = 'right',\n}\n\nconst createResponsiveButton = (options: {\n  splitted: boolean;\n  title: string;\n  onClick: () => void;\n  buttonClassName?: string;\n  iconClassName?: string;\n  iconSide?: IconSide;\n  disabled?: boolean;\n}) => {\n  const defaultOptions = {\n    iconSide: IconSide.left,\n  };\n  const props = { ...options, defaultOptions };\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide, disabled } = props;\n\n  return (\n    <button\n      className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`}\n      onClick={onClick}\n      disabled={disabled || false}\n    >\n      {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName}`} /> : null}\n      <span className=\"btn-title\">{!splitted ? title : ''}</span>\n      {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName}`} /> : null}\n    </button>\n  );\n};\n\ninterface OwnProps {\n  exploreId: ExploreId;\n  onChangeTime: (range: RawTimeRange, changedByScanner?: boolean) => void;\n}\n\ninterface StateProps {\n  datasourceMissing: boolean;\n  exploreDatasources: DataSourceSelectItem[];\n  loading: boolean;\n  range: TimeRange;\n  timeZone: TimeZone;\n  selectedDatasource: DataSourceSelectItem;\n  splitted: boolean;\n  refreshInterval: string;\n  supportedModeOptions: Array<SelectableValue<ExploreMode>>;\n  selectedModeOption: SelectableValue<ExploreMode>;\n  hasLiveOption: boolean;\n  isLive: boolean;\n}\n\ninterface DispatchProps {\n  changeDatasource: typeof changeDatasource;\n  clearAll: typeof clearQueries;\n  runQueries: typeof runQueries;\n  closeSplit: typeof splitClose;\n  split: typeof splitOpen;\n  changeRefreshInterval: typeof changeRefreshInterval;\n  changeMode: typeof changeMode;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport class UnConnectedExploreToolbar extends PureComponent<Props, {}> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChangeDatasource = async option => {\n    this.props.changeDatasource(this.props.exploreId, option.value);\n  };\n\n  onClearAll = () => {\n    this.props.clearAll(this.props.exploreId);\n  };\n\n  onRunQuery = () => {\n    return this.props.runQueries(this.props.exploreId);\n  };\n\n  onChangeRefreshInterval = (item: string) => {\n    const { changeRefreshInterval, exploreId } = this.props;\n    changeRefreshInterval(exploreId, item);\n  };\n\n  onModeChange = (mode: ExploreMode) => {\n    const { changeMode, exploreId } = this.props;\n    changeMode(exploreId, mode);\n  };\n\n  render() {\n    const {\n      datasourceMissing,\n      exploreDatasources,\n      closeSplit,\n      exploreId,\n      loading,\n      range,\n      timeZone,\n      selectedDatasource,\n      splitted,\n      refreshInterval,\n      onChangeTime,\n      split,\n      supportedModeOptions,\n      selectedModeOption,\n      hasLiveOption,\n      isLive,\n    } = this.props;\n\n    return (\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-header\">\n            <div className=\"explore-toolbar-header-title\">\n              {exploreId === 'left' && (\n                <span className=\"navbar-page-btn\">\n                  <i className=\"gicon gicon-explore\" />\n                  Explore\n                </span>\n              )}\n            </div>\n            {splitted && (\n              <a className=\"explore-toolbar-header-close\" onClick={() => closeSplit(exploreId)}>\n                <i className=\"fa fa-times fa-fw\" />\n              </a>\n            )}\n          </div>\n        </div>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-content\">\n            {!datasourceMissing ? (\n              <div className=\"explore-toolbar-content-item\">\n                <div className=\"datasource-picker\">\n                  <DataSourcePicker\n                    onChange={this.onChangeDatasource}\n                    datasources={exploreDatasources}\n                    current={selectedDatasource}\n                  />\n                </div>\n                {supportedModeOptions.length > 1 ? (\n                  <div className=\"query-type-toggle\">\n                    <ToggleButtonGroup label=\"\" transparent={true}>\n                      <ToggleButton\n                        key={ExploreMode.Metrics}\n                        value={ExploreMode.Metrics}\n                        onChange={this.onModeChange}\n                        selected={selectedModeOption.value === ExploreMode.Metrics}\n                      >\n                        {'Metrics'}\n                      </ToggleButton>\n                      <ToggleButton\n                        key={ExploreMode.Logs}\n                        value={ExploreMode.Logs}\n                        onChange={this.onModeChange}\n                        selected={selectedModeOption.value === ExploreMode.Logs}\n                      >\n                        {'Logs'}\n                      </ToggleButton>\n                    </ToggleButtonGroup>\n                  </div>\n                ) : null}\n              </div>\n            ) : null}\n\n            {exploreId === 'left' && !splitted ? (\n              <div className=\"explore-toolbar-content-item\">\n                {createResponsiveButton({\n                  splitted,\n                  title: 'Split',\n                  onClick: split,\n                  iconClassName: 'fa fa-fw fa-columns icon-margin-right',\n                  iconSide: IconSide.left,\n                  disabled: isLive,\n                })}\n              </div>\n            ) : null}\n            <div className=\"explore-toolbar-content-item\">\n              <ExploreTimeControls\n                exploreId={exploreId}\n                hasLiveOption={hasLiveOption}\n                isLive={isLive}\n                loading={loading}\n                range={range}\n                refreshInterval={refreshInterval}\n                timeZone={timeZone}\n                onChangeTime={onChangeTime}\n                onChangeRefreshInterval={this.onChangeRefreshInterval}\n                onRunQuery={this.onRunQuery}\n              />\n            </div>\n\n            <div className=\"explore-toolbar-content-item\">\n              <button className=\"btn navbar-button\" onClick={this.onClearAll}>\n                Clear All\n              </button>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              {createResponsiveButton({\n                splitted,\n                title: 'Run Query',\n                onClick: this.onRunQuery,\n                buttonClassName: 'navbar-button--secondary',\n                iconClassName:\n                  loading && !isLive ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-level-down fa-fw run-icon',\n                iconSide: IconSide.right,\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\n  const splitted = state.explore.split;\n  const exploreItem = state.explore[exploreId];\n  const {\n    datasourceInstance,\n    datasourceMissing,\n    exploreDatasources,\n    range,\n    refreshInterval,\n    loadingState,\n    supportedModes,\n    mode,\n    isLive,\n  } = exploreItem;\n  const selectedDatasource = datasourceInstance\n    ? exploreDatasources.find(datasource => datasource.name === datasourceInstance.name)\n    : undefined;\n  const loading = loadingState === LoadingState.Loading || loadingState === LoadingState.Streaming;\n  const hasLiveOption =\n    datasourceInstance && datasourceInstance.meta && datasourceInstance.meta.streaming ? true : false;\n\n  const supportedModeOptions: Array<SelectableValue<ExploreMode>> = [];\n  let selectedModeOption = null;\n  for (const supportedMode of supportedModes) {\n    switch (supportedMode) {\n      case ExploreMode.Metrics:\n        const option1 = {\n          value: ExploreMode.Metrics,\n          label: ExploreMode.Metrics,\n        };\n        supportedModeOptions.push(option1);\n        if (mode === ExploreMode.Metrics) {\n          selectedModeOption = option1;\n        }\n        break;\n      case ExploreMode.Logs:\n        const option2 = {\n          value: ExploreMode.Logs,\n          label: ExploreMode.Logs,\n        };\n        supportedModeOptions.push(option2);\n        if (mode === ExploreMode.Logs) {\n          selectedModeOption = option2;\n        }\n        break;\n    }\n  }\n\n  return {\n    datasourceMissing,\n    exploreDatasources,\n    loading,\n    range,\n    timeZone: getTimeZone(state.user),\n    selectedDatasource,\n    splitted,\n    refreshInterval,\n    supportedModeOptions,\n    selectedModeOption,\n    hasLiveOption,\n    isLive,\n  };\n};\n\nconst mapDispatchToProps: DispatchProps = {\n  changeDatasource,\n  changeRefreshInterval,\n  clearAll: clearQueries,\n  runQueries,\n  closeSplit: splitClose,\n  split: splitOpen,\n  changeMode: changeMode,\n};\n\nexport const ExploreToolbar = hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(UnConnectedExploreToolbar)\n);\n","// Libaries\nimport React, { Component } from 'react';\n\n// Types\nimport { ExploreId } from 'app/types';\nimport { TimeRange, TimeOption, TimeZone, toUtc, dateTime, RawTimeRange } from '@grafana/data';\n\n// State\n\n// Components\nimport { TimePicker, RefreshPicker, SetInterval } from '@grafana/ui';\n\n// Utils & Services\nimport { defaultSelectOptions } from '@grafana/ui/src/components/TimePicker/TimePicker';\nimport { getShiftedTimeRange, getZoomedTimeRange } from 'app/core/utils/timePicker';\n\nexport interface Props {\n  exploreId: ExploreId;\n  hasLiveOption: boolean;\n  isLive: boolean;\n  loading: boolean;\n  range: TimeRange;\n  refreshInterval: string;\n  timeZone: TimeZone;\n  onRunQuery: () => void;\n  onChangeRefreshInterval: (interval: string) => void;\n  onChangeTime: (range: RawTimeRange) => void;\n}\n\nexport class ExploreTimeControls extends Component<Props> {\n  onMoveTimePicker = (direction: number) => {\n    const { range, onChangeTime, timeZone } = this.props;\n    const { from, to } = getShiftedTimeRange(direction, range);\n    const nextTimeRange = {\n      from: timeZone === 'utc' ? toUtc(from) : dateTime(from),\n      to: timeZone === 'utc' ? toUtc(to) : dateTime(to),\n    };\n\n    onChangeTime(nextTimeRange);\n  };\n\n  onMoveForward = () => this.onMoveTimePicker(1);\n  onMoveBack = () => this.onMoveTimePicker(-1);\n\n  onChangeTimePicker = (timeRange: TimeRange) => {\n    this.props.onChangeTime(timeRange.raw);\n  };\n\n  onZoom = () => {\n    const { range, onChangeTime, timeZone } = this.props;\n    const { from, to } = getZoomedTimeRange(range, 2);\n    const nextTimeRange = {\n      from: timeZone === 'utc' ? toUtc(from) : dateTime(from),\n      to: timeZone === 'utc' ? toUtc(to) : dateTime(to),\n    };\n\n    onChangeTime(nextTimeRange);\n  };\n\n  setActiveTimeOption = (timeOptions: TimeOption[], rawTimeRange: RawTimeRange): TimeOption[] => {\n    return timeOptions.map(option => {\n      if (option.to === rawTimeRange.to && option.from === rawTimeRange.from) {\n        return {\n          ...option,\n          active: true,\n        };\n      }\n      return {\n        ...option,\n        active: false,\n      };\n    });\n  };\n\n  render() {\n    const {\n      hasLiveOption,\n      isLive,\n      loading,\n      range,\n      refreshInterval,\n      timeZone,\n      onRunQuery,\n      onChangeRefreshInterval,\n    } = this.props;\n\n    return (\n      <>\n        {!isLive && (\n          <TimePicker\n            value={range}\n            onChange={this.onChangeTimePicker}\n            timeZone={timeZone}\n            onMoveBackward={this.onMoveBack}\n            onMoveForward={this.onMoveForward}\n            onZoom={this.onZoom}\n            selectOptions={this.setActiveTimeOption(defaultSelectOptions, range.raw)}\n          />\n        )}\n\n        <RefreshPicker\n          onIntervalChanged={onChangeRefreshInterval}\n          onRefresh={onRunQuery}\n          value={refreshInterval}\n          tooltip=\"Refresh\"\n          hasLiveOption={hasLiveOption}\n        />\n        {refreshInterval && <SetInterval func={onRunQuery} interval={refreshInterval} loading={loading} />}\n      </>\n    );\n  }\n}\n","import React, { useContext } from 'react';\nimport { css } from 'emotion';\nimport { ThemeContext, LinkButton, CallToActionCard } from '@grafana/ui';\n\nexport const NoDataSourceCallToAction = () => {\n  const theme = useContext(ThemeContext);\n\n  const message =\n    'Explore requires at least one data source. Once you have added a data source, you can query it here.';\n  const footer = (\n    <>\n      <i className=\"fa fa-rocket\" />\n      <> ProTip: You can also define data sources through configuration files. </>\n      <a\n        href=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=explore\"\n        target=\"_blank\"\n        className=\"text-link\"\n      >\n        Learn more\n      </a>\n    </>\n  );\n\n  const ctaElement = (\n    <LinkButton size=\"lg\" href=\"/datasources/new\" icon=\"gicon gicon-datasources\">\n      Add data source\n    </LinkButton>\n  );\n\n  const cardClassName = css`\n    max-width: ${theme.breakpoints.lg};\n  `;\n\n  return (\n    <CallToActionCard\n      callToActionElement={ctaElement}\n      className={cardClassName}\n      footer={footer}\n      message={message}\n      theme={theme}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { DataQueryError } from '@grafana/ui';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\nimport { getFirstQueryErrorWithoutRefId, getValueWithRefId } from 'app/core/utils/explore';\n\ninterface Props {\n  queryErrors: DataQueryError[];\n}\n\nexport const ErrorContainer: FunctionComponent<Props> = props => {\n  const { queryErrors } = props;\n  const refId = getValueWithRefId(queryErrors);\n  const queryError = refId ? null : getFirstQueryErrorWithoutRefId(queryErrors);\n  const showError = queryError ? true : false;\n  const duration = showError ? 100 : 10;\n  const message = queryError ? queryError.message : null;\n\n  return (\n    <FadeIn in={showError} duration={duration}>\n      <div className=\"alert-container\">\n        <div className=\"alert-error alert\">\n          <div className=\"alert-icon\">\n            <i className=\"fa fa-exclamation-triangle\" />\n          </div>\n          <div className=\"alert-body\">\n            <div className=\"alert-title\">{message}</div>\n          </div>\n        </div>\n      </div>\n    </FadeIn>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport { LogLabelStatsModel } from '@grafana/data';\n\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\n  const { active, count, proportion, value } = logLabelStatsModel;\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\n\n  return (\n    <div className={className}>\n      <div className=\"logs-stats-row__label\">\n        <div className=\"logs-stats-row__value\" title={value}>\n          {value}\n        </div>\n        <div className=\"logs-stats-row__count\">{count}</div>\n        <div className=\"logs-stats-row__percent\">{percent}</div>\n      </div>\n      <div className=\"logs-stats-row__bar\">\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nconst STATS_ROW_LIMIT = 5;\n\ninterface Props {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  onClickClose: () => void;\n}\n\nexport class LogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, onClickClose } = this.props;\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find(row => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find(row => row.value === value);\n      otherRows = otherRows.filter(row => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className=\"logs-stats\">\n        <div className=\"logs-stats__header\">\n          <span className=\"logs-stats__title\">\n            {label}: {total} of {rowCount} rows have that label\n          </span>\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\n        </div>\n        <div className=\"logs-stats__body\">\n          {topRows.map(stat => (\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n          ))}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { LogLabelStats } from './LogLabelStats';\nimport { LogRowModel, LogLabelStatsModel } from '@grafana/data';\nimport { calculateLogsLabelStats } from 'app/core/logs_model';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  label: string;\n  plain?: boolean;\n  value: string;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  showStats: boolean;\n  stats: LogLabelStatsModel[];\n}\n\nexport class LogLabel extends PureComponent<Props, State> {\n  state = {\n    stats: null,\n    showStats: false,\n  };\n\n  onClickClose = () => {\n    this.setState({ showStats: false });\n  };\n\n  onClickLabel = () => {\n    const { onClickLabel, label, value } = this.props;\n    if (onClickLabel) {\n      onClickLabel(label, value);\n    }\n  };\n\n  onClickStats = () => {\n    this.setState(state => {\n      if (state.showStats) {\n        return { showStats: false, stats: null };\n      }\n      const allRows = this.props.getRows();\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\n      return { showStats: true, stats };\n    });\n  };\n\n  render() {\n    const { getRows, label, plain, value } = this.props;\n    const { showStats, stats } = this.state;\n    const tooltip = `${label}: ${value}`;\n    return (\n      <span className=\"logs-label\">\n        <span className=\"logs-label__value\" title={tooltip}>\n          {value}\n        </span>\n        {!plain && (\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\n        )}\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\n        {showStats && (\n          <span className=\"logs-label__stats\">\n            <LogLabelStats\n              stats={stats}\n              rowCount={getRows().length}\n              label={label}\n              value={value}\n              onClickClose={this.onClickClose}\n            />\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { LogLabel } from './LogLabel';\nimport { Labels, LogRowModel } from '@grafana/data';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  labels: Labels;\n  plain?: boolean;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\nexport class LogLabels extends PureComponent<Props> {\n  render() {\n    const { getRows, labels, onClickLabel, plain } = this.props;\n    return (\n      <span className=\"logs-labels\">\n        {Object.keys(labels).map(key => (\n          <LogLabel\n            key={key}\n            getRows={getRows}\n            label={key}\n            value={labels[key]}\n            plain={plain}\n            onClickLabel={onClickLabel}\n          />\n        ))}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport ansicolor from 'vendor/ansicolor/ansicolor';\n\ninterface Style {\n  [key: string]: string;\n}\n\ninterface ParsedChunk {\n  style: Style;\n  text: string;\n}\n\nfunction convertCSSToStyle(css: string): Style {\n  return css.split(/;\\s*/).reduce((accumulated, line) => {\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-(a-z)/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\ninterface Props {\n  value: string;\n}\n\ninterface State {\n  chunks: ParsedChunk[];\n  prevValue: string;\n}\n\nexport class LogMessageAnsi extends PureComponent<Props, State> {\n  state = {\n    chunks: [],\n    prevValue: '',\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n\n    return {\n      chunks: parsed.spans.map(span => {\n        return span.css\n          ? {\n              style: convertCSSToStyle(span.css),\n              text: span.text,\n            }\n          : { text: span.text };\n      }),\n      prevValue: props.value,\n    };\n  }\n\n  render() {\n    const { chunks } = this.state;\n\n    return chunks.map((chunk, index) =>\n      chunk.style ? (\n        <span key={index} style={chunk.style}>\n          {chunk.text}\n        </span>\n      ) : (\n        chunk.text\n      )\n    );\n  }\n}\n","import { DataQueryResponse, DataQueryError } from '@grafana/ui';\nimport { LogRowModel } from '@grafana/data';\nimport { useState, useEffect } from 'react';\nimport flatten from 'lodash/flatten';\nimport useAsync from 'react-use/lib/useAsync';\n\nexport interface LogRowContextRows {\n  before?: string[];\n  after?: string[];\n}\nexport interface LogRowContextQueryErrors {\n  before?: string;\n  after?: string;\n}\n\nexport interface HasMoreContextRows {\n  before: boolean;\n  after: boolean;\n}\n\ninterface LogRowContextProviderProps {\n  row: LogRowModel;\n  getRowContext: (row: LogRowModel, options?: any) => Promise<DataQueryResponse>;\n  children: (props: {\n    result: LogRowContextRows;\n    errors: LogRowContextQueryErrors;\n    hasMoreContextRows: HasMoreContextRows;\n    updateLimit: () => void;\n  }) => JSX.Element;\n}\n\nexport const getRowContexts = async (\n  getRowContext: (row: LogRowModel, options?: any) => Promise<DataQueryResponse>,\n  row: LogRowModel,\n  limit: number\n) => {\n  const promises = [\n    getRowContext(row, {\n      limit,\n    }),\n    getRowContext(row, {\n      limit: limit + 1, // Lets add one more to the limit as we're filtering out one row see comment below\n      direction: 'FORWARD',\n    }),\n  ];\n\n  const results: Array<DataQueryResponse | DataQueryError> = await Promise.all(promises.map(p => p.catch(e => e)));\n\n  return {\n    data: results.map((result, index) => {\n      const dataResult: DataQueryResponse = result as DataQueryResponse;\n      if (!dataResult.data) {\n        return [];\n      }\n\n      // We need to filter out the row we're basing our search from because of how start/end params work in Loki API\n      // see https://github.com/grafana/loki/issues/597#issuecomment-506408980\n      // the alternative to create our own add 1 nanosecond method to the a timestamp string would be quite complex\n      return dataResult.data.map(series => {\n        const filteredRows = series.rows.filter((r: any) => r[0] !== row.timestamp);\n        return filteredRows.map((row: any) => row[1]);\n      });\n    }),\n    errors: results.map(result => {\n      const errorResult: DataQueryError = result as DataQueryError;\n      if (!errorResult.message) {\n        return null;\n      }\n\n      return errorResult.message;\n    }),\n  };\n};\n\nexport const LogRowContextProvider: React.FunctionComponent<LogRowContextProviderProps> = ({\n  getRowContext,\n  row,\n  children,\n}) => {\n  // React Hook that creates a number state value called limit to component state and a setter function called setLimit\n  // The intial value for limit is 10\n  // Used for the number of rows to retrieve from backend from a specific point in time\n  const [limit, setLimit] = useState(10);\n\n  // React Hook that creates an object state value called result to component state and a setter function called setResult\n  // The intial value for result is null\n  // Used for sorting the response from backend\n  const [result, setResult] = useState<{\n    data: string[][];\n    errors: string[];\n  }>(null);\n\n  // React Hook that creates an object state value called hasMoreContextRows to component state and a setter function called setHasMoreContextRows\n  // The intial value for hasMoreContextRows is {before: true, after: true}\n  // Used for indicating in UI if there are more rows to load in a given direction\n  const [hasMoreContextRows, setHasMoreContextRows] = useState({\n    before: true,\n    after: true,\n  });\n\n  // React Hook that resolves two promises every time the limit prop changes\n  // First promise fetches limit number of rows backwards in time from a specific point in time\n  // Second promise fetches limit number of rows forwards in time from a specific point in time\n  const { value } = useAsync(async () => {\n    return await getRowContexts(getRowContext, row, limit); // Moved it to a separate function for debugging purposes\n  }, [limit]);\n\n  // React Hook that performs a side effect every time the value (from useAsync hook) prop changes\n  // The side effect changes the result state with the response from the useAsync hook\n  // The side effect changes the hasMoreContextRows state if there are more context rows before or after the current result\n  useEffect(() => {\n    if (value) {\n      setResult(currentResult => {\n        let hasMoreLogsBefore = true,\n          hasMoreLogsAfter = true;\n\n        if (currentResult && currentResult.data[0].length === value.data[0].length) {\n          hasMoreLogsBefore = false;\n        }\n\n        if (currentResult && currentResult.data[1].length === value.data[1].length) {\n          hasMoreLogsAfter = false;\n        }\n\n        setHasMoreContextRows({\n          before: hasMoreLogsBefore,\n          after: hasMoreLogsAfter,\n        });\n\n        return value;\n      });\n    }\n  }, [value]);\n\n  return children({\n    result: {\n      before: result ? flatten(result.data[0]) : [],\n      after: result ? flatten(result.data[1]) : [],\n    },\n    errors: {\n      before: result ? result.errors[0] : null,\n      after: result ? result.errors[1] : null,\n    },\n    hasMoreContextRows,\n    updateLimit: () => setLimit(limit + 10),\n  });\n};\n","import React, { useContext, useRef, useState, useLayoutEffect } from 'react';\nimport {\n  ThemeContext,\n  List,\n  GrafanaTheme,\n  selectThemeVariant,\n  ClickOutsideWrapper,\n  CustomScrollbar,\n  DataQueryError,\n} from '@grafana/ui';\n\nimport { LogRowModel } from '@grafana/data';\nimport { css, cx } from 'emotion';\nimport { LogRowContextRows, HasMoreContextRows, LogRowContextQueryErrors } from './LogRowContextProvider';\nimport { Alert } from './Error';\n\ninterface LogRowContextProps {\n  row: LogRowModel;\n  context: LogRowContextRows;\n  errors?: LogRowContextQueryErrors;\n  hasMoreContextRows: HasMoreContextRows;\n  onOutsideClick: () => void;\n  onLoadMoreContext: () => void;\n}\n\nconst getLogRowContextStyles = (theme: GrafanaTheme) => {\n  const gradientTop = selectThemeVariant(\n    {\n      light: theme.colors.white,\n      dark: theme.colors.dark1,\n    },\n    theme.type\n  );\n  const gradientBottom = selectThemeVariant(\n    {\n      light: theme.colors.gray7,\n      dark: theme.colors.dark2,\n    },\n    theme.type\n  );\n\n  const boxShadowColor = selectThemeVariant(\n    {\n      light: theme.colors.gray5,\n      dark: theme.colors.black,\n    },\n    theme.type\n  );\n  const borderColor = selectThemeVariant(\n    {\n      light: theme.colors.gray5,\n      dark: theme.colors.dark9,\n    },\n    theme.type\n  );\n\n  return {\n    commonStyles: css`\n      position: absolute;\n      width: calc(100% + 20px);\n      left: -10px;\n      height: 250px;\n      z-index: 2;\n      overflow: hidden;\n      background: ${theme.colors.pageBg};\n      background: linear-gradient(180deg, ${gradientTop} 0%, ${gradientBottom} 104.25%);\n      box-shadow: 0px 2px 4px ${boxShadowColor}, 0px 0px 2px ${boxShadowColor};\n      border: 1px solid ${borderColor};\n      border-radius: ${theme.border.radius.md};\n    `,\n    header: css`\n      height: 30px;\n      padding: 0 10px;\n      display: flex;\n      align-items: center;\n      background: ${borderColor};\n    `,\n    logs: css`\n      height: 220px;\n      padding: 10px;\n    `,\n  };\n};\n\ninterface LogRowContextGroupHeaderProps {\n  row: LogRowModel;\n  rows: Array<string | DataQueryError>;\n  onLoadMoreContext: () => void;\n  shouldScrollToBottom?: boolean;\n  canLoadMoreRows?: boolean;\n}\ninterface LogRowContextGroupProps extends LogRowContextGroupHeaderProps {\n  rows: Array<string | DataQueryError>;\n  className: string;\n  error?: string;\n}\n\nconst LogRowContextGroupHeader: React.FunctionComponent<LogRowContextGroupHeaderProps> = ({\n  row,\n  rows,\n  onLoadMoreContext,\n  canLoadMoreRows,\n}) => {\n  const theme = useContext(ThemeContext);\n  const { header } = getLogRowContextStyles(theme);\n\n  return (\n    <div className={header}>\n      <span\n        className={css`\n          opacity: 0.6;\n        `}\n      >\n        Found {rows.length} rows.\n      </span>\n      {(rows.length >= 10 || (rows.length > 10 && rows.length % 10 !== 0)) && canLoadMoreRows && (\n        <span\n          className={css`\n            margin-left: 10px;\n            &:hover {\n              text-decoration: underline;\n              cursor: pointer;\n            }\n          `}\n          onClick={() => onLoadMoreContext()}\n        >\n          Load 10 more\n        </span>\n      )}\n    </div>\n  );\n};\n\nconst LogRowContextGroup: React.FunctionComponent<LogRowContextGroupProps> = ({\n  row,\n  rows,\n  error,\n  className,\n  shouldScrollToBottom,\n  canLoadMoreRows,\n  onLoadMoreContext,\n}) => {\n  const theme = useContext(ThemeContext);\n  const { commonStyles, logs } = getLogRowContextStyles(theme);\n  const [scrollTop, setScrollTop] = useState(0);\n  const listContainerRef = useRef<HTMLDivElement>();\n\n  useLayoutEffect(() => {\n    if (shouldScrollToBottom && listContainerRef.current) {\n      setScrollTop(listContainerRef.current.offsetHeight);\n    }\n  });\n\n  const headerProps = {\n    row,\n    rows,\n    onLoadMoreContext,\n    canLoadMoreRows,\n  };\n\n  return (\n    <div className={cx(className, commonStyles)}>\n      {/* When displaying \"after\" context */}\n      {shouldScrollToBottom && !error && <LogRowContextGroupHeader {...headerProps} />}\n      <div className={logs}>\n        <CustomScrollbar autoHide scrollTop={scrollTop}>\n          <div ref={listContainerRef}>\n            {!error && (\n              <List\n                items={rows}\n                renderItem={item => {\n                  return (\n                    <div\n                      className={css`\n                        padding: 5px 0;\n                      `}\n                    >\n                      {item}\n                    </div>\n                  );\n                }}\n              />\n            )}\n            {error && <Alert message={error} />}\n          </div>\n        </CustomScrollbar>\n      </div>\n      {/* When displaying \"before\" context */}\n      {!shouldScrollToBottom && !error && <LogRowContextGroupHeader {...headerProps} />}\n    </div>\n  );\n};\n\nexport const LogRowContext: React.FunctionComponent<LogRowContextProps> = ({\n  row,\n  context,\n  errors,\n  onOutsideClick,\n  onLoadMoreContext,\n  hasMoreContextRows,\n}) => {\n  return (\n    <ClickOutsideWrapper onClick={onOutsideClick}>\n      <div>\n        {context.after && (\n          <LogRowContextGroup\n            rows={context.after}\n            error={errors && errors.after}\n            row={row}\n            className={css`\n              top: -250px;\n            `}\n            shouldScrollToBottom\n            canLoadMoreRows={hasMoreContextRows.after}\n            onLoadMoreContext={onLoadMoreContext}\n          />\n        )}\n\n        {context.before && (\n          <LogRowContextGroup\n            onLoadMoreContext={onLoadMoreContext}\n            canLoadMoreRows={hasMoreContextRows.before}\n            row={row}\n            rows={context.before}\n            error={errors && errors.before}\n            className={css`\n              top: 100%;\n            `}\n          />\n        )}\n      </div>\n    </ClickOutsideWrapper>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport classnames from 'classnames';\n\nimport { calculateFieldStats, getParser } from 'app/core/logs_model';\nimport { LogLabels } from './LogLabels';\nimport { findHighlightChunksInText } from 'app/core/utils/text';\nimport { LogLabelStats } from './LogLabelStats';\nimport { LogMessageAnsi } from './LogMessageAnsi';\nimport { css, cx } from 'emotion';\nimport {\n  LogRowContextProvider,\n  LogRowContextRows,\n  HasMoreContextRows,\n  LogRowContextQueryErrors,\n} from './LogRowContextProvider';\nimport { ThemeContext, selectThemeVariant, GrafanaTheme, DataQueryResponse } from '@grafana/ui';\n\nimport { LogRowModel, LogLabelStatsModel, LogsParser, TimeZone } from '@grafana/data';\nimport { LogRowContext } from './LogRowContext';\nimport tinycolor from 'tinycolor2';\n\ninterface Props {\n  highlighterExpressions?: string[];\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean;\n  showTime: boolean;\n  timeZone: TimeZone;\n  getRows: () => LogRowModel[];\n  onClickLabel?: (label: string, value: string) => void;\n  onContextClick?: () => void;\n  getRowContext?: (row: LogRowModel, options?: any) => Promise<DataQueryResponse>;\n  className?: string;\n}\n\ninterface State {\n  fieldCount: number;\n  fieldLabel: string;\n  fieldStats: LogLabelStatsModel[];\n  fieldValue: string;\n  parsed: boolean;\n  parser?: LogsParser;\n  parsedFieldHighlights: string[];\n  showFieldStats: boolean;\n  showContext: boolean;\n}\n\n/**\n * Renders a highlighted field.\n * When hovering, a stats icon is shown.\n */\nconst FieldHighlight = (onClick: any) => (props: any) => {\n  return (\n    <span className={props.className} style={props.style}>\n      {props.children}\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\n    </span>\n  );\n};\n\nconst logRowStyles = css`\n  position: relative;\n  /* z-index: 0; */\n  /* outline: none; */\n`;\n\nconst getLogRowWithContextStyles = (theme: GrafanaTheme, state: State) => {\n  const outlineColor = selectThemeVariant(\n    {\n      light: theme.colors.white,\n      dark: theme.colors.black,\n    },\n    theme.type\n  );\n\n  return {\n    row: css`\n      z-index: 1;\n      outline: 9999px solid\n        ${tinycolor(outlineColor as tinycolor.ColorInput)\n          .setAlpha(0.7)\n          .toRgbString()};\n    `,\n  };\n};\n\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nexport class LogRow extends PureComponent<Props, State> {\n  mouseMessageTimer: NodeJS.Timer;\n\n  state: any = {\n    fieldCount: 0,\n    fieldLabel: null,\n    fieldStats: null,\n    fieldValue: null,\n    parsed: false,\n    parser: undefined,\n    parsedFieldHighlights: [],\n    showFieldStats: false,\n    showContext: false,\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseMessageTimer);\n  }\n\n  onClickClose = () => {\n    this.setState({ showFieldStats: false });\n  };\n\n  onClickHighlight = (fieldText: string) => {\n    const { getRows } = this.props;\n    const { parser } = this.state;\n    const allRows = getRows();\n\n    // Build value-agnostic row matcher based on the field label\n    const fieldLabel = parser.getLabelFromField(fieldText);\n    const fieldValue = parser.getValueFromField(fieldText);\n    const matcher = parser.buildMatcher(fieldLabel);\n    const fieldStats = calculateFieldStats(allRows, matcher);\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\n\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\n  };\n\n  onMouseOverMessage = () => {\n    if (this.state.showContext || this.isTextSelected()) {\n      // When showing context we don't want to the LogRow rerender as it will mess up state of context block\n      // making the \"after\" context to be scrolled to the top, what is desired only on open\n      // The log row message needs to be refactored to separate component that encapsulates parsing and parsed message state\n      return;\n    }\n    // Don't parse right away, user might move along\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\n  };\n\n  onMouseOutMessage = () => {\n    if (this.state.showContext) {\n      // See comment in onMouseOverMessage method\n      return;\n    }\n    clearTimeout(this.mouseMessageTimer);\n    this.setState({ parsed: false });\n  };\n\n  parseMessage = () => {\n    if (!this.state.parsed) {\n      const { row } = this.props;\n      const parser = getParser(row.entry);\n      if (parser) {\n        // Use parser to highlight detected fields\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\n      }\n    }\n  };\n\n  isTextSelected() {\n    if (!window.getSelection) {\n      return false;\n    }\n\n    const selection = window.getSelection();\n\n    if (!selection) {\n      return false;\n    }\n\n    return selection.anchorNode !== null && selection.isCollapsed === false;\n  }\n\n  toggleContext = () => {\n    this.setState(state => {\n      return {\n        showContext: !state.showContext,\n      };\n    });\n  };\n\n  onContextToggle = (e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    this.toggleContext();\n  };\n\n  renderLogRow(\n    context?: LogRowContextRows,\n    errors?: LogRowContextQueryErrors,\n    hasMoreContextRows?: HasMoreContextRows,\n    updateLimit?: () => void\n  ) {\n    const {\n      getRows,\n      highlighterExpressions,\n      onClickLabel,\n      row,\n      showDuplicates,\n      showLabels,\n      timeZone,\n      showTime,\n    } = this.props;\n    const {\n      fieldCount,\n      fieldLabel,\n      fieldStats,\n      fieldValue,\n      parsed,\n      parsedFieldHighlights,\n      showFieldStats,\n      showContext,\n    } = this.state;\n    const { entry, hasAnsi, raw } = row;\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\n    const needsHighlighter = highlights && highlights.length > 0 && highlights[0] && highlights[0].length > 0;\n    const highlightClassName = classnames('logs-row__match-highlight', {\n      'logs-row__match-highlight--preview': previewHighlights,\n    });\n    const showUtc = timeZone === 'utc';\n\n    return (\n      <ThemeContext.Consumer>\n        {theme => {\n          const styles = this.state.showContext\n            ? cx(logRowStyles, getLogRowWithContextStyles(theme, this.state).row)\n            : logRowStyles;\n          return (\n            <div className={`logs-row ${this.props.className}`}>\n              {showDuplicates && (\n                <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\n              )}\n              <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\n              {showTime && showUtc && (\n                <div className=\"logs-row__localtime\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n                  {row.timeUtc}\n                </div>\n              )}\n              {showTime && !showUtc && (\n                <div className=\"logs-row__localtime\" title={`${row.timeUtc} (${row.timeFromNow})`}>\n                  {row.timeLocal}\n                </div>\n              )}\n              {showLabels && (\n                <div className=\"logs-row__labels\">\n                  <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\n                </div>\n              )}\n              <div\n                className=\"logs-row__message\"\n                onMouseEnter={this.onMouseOverMessage}\n                onMouseLeave={this.onMouseOutMessage}\n              >\n                <div\n                  className={css`\n                    position: relative;\n                  `}\n                >\n                  {showContext && context && (\n                    <LogRowContext\n                      row={row}\n                      context={context}\n                      errors={errors}\n                      hasMoreContextRows={hasMoreContextRows}\n                      onOutsideClick={this.toggleContext}\n                      onLoadMoreContext={() => {\n                        if (updateLimit) {\n                          updateLimit();\n                        }\n                      }}\n                    />\n                  )}\n                  <span className={styles}>\n                    {parsed && (\n                      <Highlighter\n                        style={{ whiteSpace: 'pre-wrap' }}\n                        autoEscape\n                        highlightTag={FieldHighlight(this.onClickHighlight)}\n                        textToHighlight={entry}\n                        searchWords={parsedFieldHighlights}\n                        highlightClassName=\"logs-row__field-highlight\"\n                      />\n                    )}\n                    {!parsed && needsHighlighter && (\n                      <Highlighter\n                        style={{ whiteSpace: 'pre-wrap' }}\n                        textToHighlight={entry}\n                        searchWords={highlights}\n                        findChunks={findHighlightChunksInText}\n                        highlightClassName={highlightClassName}\n                      />\n                    )}\n                    {hasAnsi && !parsed && !needsHighlighter && <LogMessageAnsi value={raw} />}\n                    {!hasAnsi && !parsed && !needsHighlighter && entry}\n                    {showFieldStats && (\n                      <div className=\"logs-row__stats\">\n                        <LogLabelStats\n                          stats={fieldStats}\n                          label={fieldLabel}\n                          value={fieldValue}\n                          onClickClose={this.onClickClose}\n                          rowCount={fieldCount}\n                        />\n                      </div>\n                    )}\n                  </span>\n                  {row.searchWords && row.searchWords.length > 0 && (\n                    <span\n                      onClick={this.onContextToggle}\n                      className={css`\n                        visibility: hidden;\n                        white-space: nowrap;\n                        position: relative;\n                        z-index: ${showContext ? 1 : 0};\n                        cursor: pointer;\n                        .logs-row:hover & {\n                          visibility: visible;\n                          margin-left: 10px;\n                          text-decoration: underline;\n                        }\n                      `}\n                    >\n                      {showContext ? 'Hide' : 'Show'} context\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </ThemeContext.Consumer>\n    );\n  }\n\n  render() {\n    const { showContext } = this.state;\n\n    if (showContext) {\n      return (\n        <>\n          <LogRowContextProvider row={this.props.row} getRowContext={this.props.getRowContext}>\n            {({ result, errors, hasMoreContextRows, updateLimit }) => {\n              return <>{this.renderLogRow(result, errors, hasMoreContextRows, updateLimit)}</>;\n            }}\n          </LogRowContextProvider>\n        </>\n      );\n    }\n\n    return this.renderLogRow();\n  }\n}\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { rangeUtil } from '@grafana/data';\nimport { Switch } from '@grafana/ui';\nimport {\n  RawTimeRange,\n  LogLevel,\n  TimeZone,\n  AbsoluteTimeRange,\n  LogsMetaKind,\n  LogsModel,\n  LogsDedupStrategy,\n  LogRowModel,\n} from '@grafana/data';\nimport TimeSeries from 'app/core/time_series2';\n\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\n\nimport Graph from './Graph';\nimport { LogLabels } from './LogLabels';\nimport { LogRow } from './LogRow';\nimport { LogsDedupDescription } from 'app/core/logs_model';\n\nconst PREVIEW_LIMIT = 100;\n\nconst graphOptions = {\n  series: {\n    stack: true,\n    bars: {\n      show: true,\n      lineWidth: 5,\n      // barWidth: 10,\n    },\n    // stack: true,\n  },\n  yaxis: {\n    tickDecimals: 0,\n  },\n};\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} plain />\n      </span>\n    );\n  }\n  return value;\n}\n\ninterface Props {\n  data?: LogsModel;\n  dedupedData?: LogsModel;\n  width: number;\n  exploreId: string;\n  highlighterExpressions: string[];\n  loading: boolean;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  onChangeTime?: (range: AbsoluteTimeRange) => void;\n  onClickLabel?: (label: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\n  onToggleLogLevel: (hiddenLogLevels: LogLevel[]) => void;\n  getRowContext?: (row: LogRowModel, options?: any) => Promise<any>;\n}\n\ninterface State {\n  deferLogs: boolean;\n  renderAll: boolean;\n  showLabels: boolean;\n  showTime: boolean;\n}\n\nexport default class Logs extends PureComponent<Props, State> {\n  deferLogsTimer: NodeJS.Timer;\n  renderAllTimer: NodeJS.Timer;\n\n  state = {\n    deferLogs: true,\n    renderAll: false,\n    showLabels: false,\n    showTime: true,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    if (this.state.deferLogs) {\n      const { data } = this.props;\n      const rowCount = data && data.rows ? data.rows.length : 0;\n      // Render all right away if not too far over the limit\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    // Staged rendering\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.deferLogsTimer);\n    clearTimeout(this.renderAllTimer);\n  }\n\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\n    const { onDedupStrategyChange } = this.props;\n    if (this.props.dedupStrategy === dedup) {\n      return onDedupStrategyChange(LogsDedupStrategy.none);\n    }\n    return onDedupStrategyChange(dedup);\n  };\n\n  onChangeLabels = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLabels: target.checked,\n    });\n  };\n\n  onChangeTime = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showTime: target.checked,\n    });\n  };\n\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: string[]) => {\n    const hiddenLogLevels: LogLevel[] = hiddenRawLevels.map(level => LogLevel[level]);\n    this.props.onToggleLogLevel(hiddenLogLevels);\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStartScanning();\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStopScanning();\n  };\n\n  render() {\n    const {\n      data,\n      exploreId,\n      highlighterExpressions,\n      loading = false,\n      onClickLabel,\n      absoluteRange,\n      timeZone,\n      scanning,\n      scanRange,\n      width,\n      dedupedData,\n    } = this.props;\n\n    if (!data) {\n      return null;\n    }\n\n    const { deferLogs, renderAll, showLabels, showTime } = this.state;\n    const { dedupStrategy } = this.props;\n    const hasData = data && data.rows && data.rows.length > 0;\n    const hasLabel = hasData && dedupedData.hasUniqueLabels;\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    const meta = data.meta ? [...data.meta] : [];\n\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      meta.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    // Staged rendering\n    const processedRows = dedupedData.rows;\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = () => processedRows;\n    const timeSeries = data.series\n      ? data.series.map(series => new TimeSeries(series))\n      : [new TimeSeries({ datapoints: [] })];\n\n    return (\n      <div className=\"logs-panel\">\n        <div className=\"logs-panel-graph\">\n          <Graph\n            data={timeSeries}\n            height={100}\n            width={width}\n            range={absoluteRange}\n            timeZone={timeZone}\n            id={`explore-logs-graph-${exploreId}`}\n            onChangeTime={this.props.onChangeTime}\n            onToggleSeries={this.onToggleLogLevel}\n            userOptions={graphOptions}\n          />\n        </div>\n        <div className=\"logs-panel-options\">\n          <div className=\"logs-panel-controls\">\n            <Switch label=\"Time\" checked={showTime} onChange={this.onChangeTime} transparent />\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\n                <ToggleButton\n                  key={i}\n                  value={dedupType}\n                  onChange={this.onChangeDedup}\n                  selected={dedupStrategy === dedupType}\n                  tooltip={LogsDedupDescription[dedupType]}\n                >\n                  {dedupType}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        </div>\n\n        {hasData && meta && (\n          <div className=\"logs-panel-meta\">\n            {meta.map(item => (\n              <div className=\"logs-panel-meta__item\" key={item.label}>\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"logs-rows\">\n          {hasData &&\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\n            firstRows.map((row, index) => (\n              <LogRow\n                key={index}\n                getRows={getRows}\n                getRowContext={this.props.getRowContext}\n                highlighterExpressions={highlighterExpressions}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showTime={showTime}\n                timeZone={timeZone}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData &&\n            !deferLogs &&\n            renderAll &&\n            lastRows.map((row, index) => (\n              <LogRow\n                key={PREVIEW_LIMIT + index}\n                getRows={getRows}\n                getRowContext={this.props.getRowContext}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showTime={showTime}\n                timeZone={timeZone}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\n        </div>\n        {!loading && !hasData && !scanning && (\n          <div className=\"logs-panel-nodata\">\n            No logs found.\n            <a className=\"link\" onClick={this.onClickScan}>\n              Scan for older logs\n            </a>\n          </div>\n        )}\n\n        {scanning && (\n          <div className=\"logs-panel-nodata\">\n            <span>{scanText}</span>\n            <a className=\"link\" onClick={this.onClickStopScan}>\n              Stop scan\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { memoize } from 'lodash';\nimport { createSelectorCreator } from 'reselect';\n\nconst hashFn = (...args) => args.reduce((acc, val) => acc + '-' + JSON.stringify(val), '');\nexport const createLodashMemoizedSelector = createSelectorCreator(memoize as any, hashFn);\n","import { createLodashMemoizedSelector } from 'app/core/utils/reselect';\nimport { ExploreItemState } from 'app/types';\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\n\nexport const exploreItemUIStateSelector = (itemState: ExploreItemState) => {\n  const { showingGraph, showingTable, showingStartPage, dedupStrategy } = itemState;\n  return {\n    showingGraph,\n    showingTable,\n    showingStartPage,\n    dedupStrategy,\n  };\n};\n\nconst logsSelector = (state: ExploreItemState) => state.logsResult;\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\nexport const deduplicatedLogsSelector = createLodashMemoizedSelector(\n  logsSelector,\n  hiddenLogLevelsSelector,\n  dedupStrategySelector,\n  (logs, hiddenLogLevels, dedupStrategy) => {\n    if (!logs) {\n      return null;\n    }\n    const filteredData = filterLogLevels(logs, new Set(hiddenLogLevels));\n    return dedupLogRows(filteredData, dedupStrategy);\n  }\n);\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport ErrorBoundary from './ErrorBoundary';\nimport Explore from './Explore';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { resetExploreAction } from './state/actionTypes';\n\ninterface WrapperProps {\n  split: boolean;\n  resetExploreAction: typeof resetExploreAction;\n}\n\nexport class Wrapper extends Component<WrapperProps> {\n  componentWillUnmount() {\n    this.props.resetExploreAction();\n  }\n\n  render() {\n    const { split } = this.props;\n\n    return (\n      <div className=\"page-scrollbar-wrapper\">\n        <CustomScrollbar autoHeightMin={'100%'} className=\"custom-scrollbar--page\">\n          <div className=\"explore-wrapper\">\n            <ErrorBoundary>\n              <Explore exploreId={ExploreId.left} />\n            </ErrorBoundary>\n            {split && (\n              <ErrorBoundary>\n                <Explore exploreId={ExploreId.right} />\n              </ErrorBoundary>\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const { split } = state.explore;\n  return { split };\n};\n\nconst mapDispatchToProps = {\n  resetExploreAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Wrapper)\n);\n"],"sourceRoot":""}